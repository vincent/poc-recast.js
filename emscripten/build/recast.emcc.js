// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module.exports = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (ENVIRONMENT_IS_WEB) {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
    this['Module'] = Module;
  } else if (ENVIRONMENT_IS_WORKER) {
    // We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          alignSize = type.alignSize || QUANTUM_SIZE;
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addOnPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 22264;
var _stdout;
var _stdin;
var _stderr;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a545() } },{ func: function() { __GLOBAL__I_a662() } });
var ___fsmu8;
var ___dso_handle;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZTIt;
var __ZTIs;
var __ZTIm;
var __ZTIl;
var __ZTIj;
var __ZTIi;
var __ZTIh;
var __ZTIf;
var __ZTId;
var __ZTIc;
var __ZTIa;
var _stdout = _stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin = _stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,152,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,168,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIt=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIs=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIm=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIl=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIj=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIi=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIh=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIf=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTId=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIc=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIa=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([80,97,114,116,105,116,105,111,110,32,119,97,108,107,97,98,108,101,32,115,117,114,102,97,99,101,32,0,0,0,0,0,102,105,108,116,101,114,115,32,0,0,0,0,0,0,0,0,72,101,105,103,104,116,102,105,101,108,100,32,112,111,108,121,103,111,110,32,115,111,117,112,32,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,115,111,108,105,100,32,104,101,105,103,104,116,102,105,101,108,100,46,32,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,115,111,108,105,100,39,46,32,0,0,0,0,0,0,0,0,66,117,105,108,100,105,110,103,32,110,97,118,105,103,97,116,105,111,110,32,0,0,0,0,114,101,115,101,116,84,105,109,101,114,115,32,0,0,0,0,99,97,110,110,111,116,32,108,111,97,100,32,79,66,74,32,102,105,108,101,32,0,0,0,99,108,101,97,110,117,112,32,0,0,0,0,0,0,0,0,67,114,101,97,116,101,32,100,101,116,97,105,108,32,109,101,115,104,46,32,0,0,0,0,66,117,105,108,100,32,112,111,108,121,103,111,110,115,32,109,101,115,104,32,102,114,111,109,32,99,111,110,116,111,117,114,115,46,32,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,0,0,64,64,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,72,66,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,205,204,76,63,0,0,0,0,205,204,76,63,0,0,0,0,205,204,76,63,0,0,0,0,0,0,240,65,0,0,0,0,0,0,128,64,0,0,0,0,205,204,76,63,0,0,0,0,44,3,0,0,0,0,0,0,74,117,108,0,0,0,0,0,115,101,116,95,97,103,101,110,116,82,97,100,105,117,115,0,74,117,110,0,0,0,0,0,115,101,116,95,97,103,101,110,116,72,101,105,103,104,116,0,65,112,114,0,0,0,0,0,115,101,116,95,99,101,108,108,72,101,105,103,104,116,0,0,77,97,114,0,0,0,0,0,115,101,116,95,99,101,108,108,83,105,122,101,0,0,0,0,70,101,98,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,108,111,110,103,0,0,0,0,102,105,110,100,80,97,116,104,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,102,105,110,100,78,101,97,114,101,115,116,80,111,108,121,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,103,101,116,78,97,118,72,101,105,103,104,116,102,105,101,108,100,82,101,103,105,111,110,115,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,98,117,105,108,100,80,111,108,121,68,101,116,97,105,108,58,32,67,111,117,108,100,32,110,111,116,32,116,114,105,97,110,103,117,108,97,116,101,32,112,111,108,121,103,111,110,44,32,97,100,100,105,110,103,32,100,101,102,97,117,108,116,32,100,97,116,97,46,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,116,114,105,115,39,32,40,37,100,41,46,0,0,0,0,0,103,101,116,78,97,118,77,101,115,104,86,101,114,116,105,99,101,115,0,0,0,0,0,0,79,99,116,111,98,101,114,0,98,97,114,101,71,101,111,109,86,97,108,105,100,97,116,101,0,0,0,0,0,0,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,98,97,114,101,71,101,111,109,65,100,100,84,114,105,97,110,103,108,101,0,0,0,0,0,65,117,103,117,115,116,0,0,98,97,114,101,71,101,111,109,65,100,100,86,101,114,116,101,120,0,0,0,0,0,0,0,74,117,108,121,0,0,0,0,98,97,114,101,71,101,111,109,73,110,105,116,0,0,0,0,74,117,110,101,0,0,0,0,98,117,105,108,100,0,0,0,77,97,121,0,0,0,0,0,105,110,105,116,87,105,116,104,70,105,108,101,0,0,0,0,65,112,114,105,108,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,105,110,105,116,0,0,0,0,77,97,114,99,104,0,0,0,109,95,110,97,118,81,117,101,114,121,61,37,112,32,10,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,109,95,110,97,118,77,101,115,104,61,37,112,32,10,0,0,74,97,110,117,97,114,121,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,105,110,100,105,99,101,115,39,32,40,37,100,41,46,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,32,113,117,101,114,121,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,32,113,117,101,114,121,32,40,37,117,41,32,10,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,73,110,105,116,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,46,32,37,112,32,10,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,32,40,37,117,41,32,10,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,67,114,101,97,116,101,100,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,46,32,37,112,32,10,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,66,117,105,108,116,32,68,101,116,111,117,114,32,110,97,118,100,97,116,97,46,32,37,112,32,10,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,98,117,105,108,100,32,68,101,116,111,117,114,32,110,97,118,109,101,115,104,46,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,100,116,78,97,118,77,101,115,104,67,114,101,97,116,101,80,97,114,97,109,115,32,37,112,32,10,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,110,101,119,116,39,32,40,37,100,41,46,0,0,0,0,0,0,0,67,111,110,102,105,103,46,100,101,116,97,105,108,77,101,115,104,80,111,108,121,32,61,32,37,117,59,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,102,105,114,115,116,86,101,114,116,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,98,117,105,108,100,32,100,101,116,97,105,108,32,109,101,115,104,46,0,0,0,109,95,104,101,97,112,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,109,100,116,108,39,46,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,116,114,105,97,110,103,117,108,97,116,101,32,99,111,110,116,111,117,114,115,46,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,109,101,115,104,39,46,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,84,114,97,99,101,32,97,110,100,32,115,105,109,112,108,105,102,121,32,114,101,103,105,111,110,32,99,111,110,116,111,117,114,115,58,32,37,117,32,99,111,110,116,115,32,40,109,97,120,83,105,109,112,108,105,102,105,99,97,116,105,111,110,69,114,114,111,114,61,32,37,102,44,32,109,97,120,69,100,103,101,76,101,110,61,32,37,117,41,10,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,99,111,110,116,111,117,114,115,46,0,0,0,0,0,105,102,32,40,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,100,116,41,32,123,32,118,97,114,32,111,98,106,101,99,116,32,61,32,109,101,115,104,70,114,111,109,86,101,114,116,105,99,101,115,40,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,44,32,91,32,110,101,119,32,84,72,82,69,69,46,77,101,115,104,66,97,115,105,99,77,97,116,101,114,105,97,108,40,123,32,99,111,108,111,114,58,32,48,120,102,102,48,48,48,48,44,32,97,109,98,105,101,110,116,58,32,48,120,102,102,48,48,48,48,44,32,115,105,100,101,58,32,84,72,82,69,69,46,68,111,117,98,108,101,83,105,100,101,44,32,119,105,114,101,102,114,97,109,101,58,32,116,114,117,101,44,32,116,114,97,110,115,112,97,114,101,110,116,58,32,116,114,117,101,44,32,111,112,97,99,105,116,121,58,32,48,46,53,32,125,41,32,93,41,59,32,115,99,101,110,101,46,97,100,100,40,111,98,106,101,99,116,41,59,32,125,59,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,99,115,101,116,39,46,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,110,101,119,118,39,32,40,37,100,41,46,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,110,101,120,116,86,101,114,116,39,32,40,37,100,41,46,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,70,97,105,108,101,100,32,116,111,32,109,101,114,103,101,32,99,111,110,116,111,117,114,115,32,37,100,32,97,110,100,32,37,100,46,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,98,117,105,108,100,32,100,105,115,116,97,110,99,101,32,102,105,101,108,100,46,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,98,117,105,108,100,32,114,101,103,105,111,110,115,46,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,101,114,111,100,101,46,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,98,117,105,108,100,32,99,111,109,112,97,99,116,32,100,97,116,97,46,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,99,104,102,39,46,0,0,0,80,77,0,0,0,0,0,0,37,117,32,87,97,108,107,97,98,108,101,32,84,114,105,97,110,103,108,101,115,10,0,0,115,104,111,114,116,0,0,0,65,77,0,0,0,0,0,0,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,112,117,115,104,40,110,101,119,32,84,72,82,69,69,46,86,101,99,116,111,114,51,40,37,102,44,32,37,102,44,32,37,102,41,41,0,0,0,0,0,102,105,108,116,101,114,83,109,97,108,108,82,101,103,105,111,110,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,114,101,103,105,111,110,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,118,111,105,100,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,100,109,101,115,104,46,116,114,105,115,39,32,40,37,100,41,46,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,115,111,108,105,100,32,104,101,105,103,104,116,102,105,101,108,100,46,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,109,101,115,104,46,97,114,101,97,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,70,97,105,108,101,100,32,116,111,32,102,105,110,100,32,109,101,114,103,101,32,112,111,105,110,116,115,32,102,111,114,32,37,100,32,97,110,100,32,37,100,46,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,109,95,102,105,114,115,116,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,115,111,108,105,100,39,46,0,32,45,32,37,46,49,102,75,32,118,101,114,116,115,44,32,37,46,49,102,75,32,116,114,105,115,0,0,0,0,0,0,32,45,32,37,100,32,120,32,37,100,32,99,101,108,108,115,0,0,0,0,0,0,0,0,99,97,110,82,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,101,100,103,101,115,39,32,40,37,100,41,46,0,0,0,0,66,117,105,108,100,105,110,103,32,110,97,118,105,103,97,116,105,111,110,58,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,84,111,111,32,109,97,110,121,32,112,111,108,121,103,111,110,115,32,37,100,32,40,109,97,120,58,37,100,41,46,0,0,0,0,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,32,61,32,91,93,59,32,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,100,116,32,61,32,39,68,85,95,68,82,65,87,95,81,85,65,68,83,39,59,0,0,0,0,0,99,111,110,115,111,108,101,46,108,111,103,40,39,37,115,39,41,59,0,0,0,0,0,0,98,117,105,108,100,78,97,118,105,103,97,116,105,111,110,58,32,73,110,112,117,116,32,109,101,115,104,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,114,101,103,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,82,101,103,105,111,110,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,116,109,112,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,100,109,101,115,104,46,118,101,114,116,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,111,108,121,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,109,101,115,104,46,114,101,103,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,109,101,114,103,101,32,116,97,114,103,101,116,32,102,111,114,32,98,97,100,32,99,111,110,116,111,117,114,32,37,100,46,0,0,0,0,0,0,0,0,109,95,110,101,120,116,0,0,47,109,101,115,104,101,115,47,110,97,118,95,116,101,115,116,46,111,98,106,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,116,114,105,97,110,103,117,108,97,116,101,40,41,32,114,101,116,117,114,110,101,100,32,98,97,100,32,114,101,115,117,108,116,115,46,0,0,0,0,0,0,0,108,111,97,100,105,110,103,32,102,114,111,109,32,102,105,108,101,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,105,103,110,111,114,101,32,37,102,44,32,37,102,44,32,37,102,0,0,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,116,118,101,114,116,115,39,32,40,37,100,41,46,0,0,0,0,0,0,70,111,117,110,100,32,97,32,37,117,32,115,116,101,112,115,32,112,97,116,104,32,10,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,116,114,105,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,67,97,110,110,111,116,32,102,105,110,100,32,97,32,115,116,114,97,105,103,104,116,32,112,97,116,104,58,32,37,117,10,0,0,0,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,104,97,114,101,97,39,32,40,37,100,41,46,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,70,111,117,110,100,32,97,32,37,117,32,112,111,108,121,115,116,101,112,115,32,112,97,116,104,32,10,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,104,114,101,103,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,102,105,110,100,32,97,32,112,97,116,104,58,32,37,117,10,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,104,111,108,101,39,32,40,37,100,41,46,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,85,115,101,32,37,117,32,44,32,37,117,32,97,115,32,115,116,97,114,116,32,47,32,101,110,100,32,112,111,108,121,82,101,102,115,32,10,0,0,0,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,32,61,32,91,93,59,32,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,100,116,32,61,32,39,68,85,95,68,82,65,87,95,84,82,73,83,39,59,0,0,0,0,0,0,114,101,109,111,118,101,86,101,114,116,101,120,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,101,100,103,101,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,103,101,116,32,116,105,108,101,32,97,110,100,32,112,111,108,121,32,98,121,32,114,101,102,32,35,37,117,32,58,32,37,117,32,10,0,0,0,0,0,0,98,117,105,108,100,84,105,108,101,100,78,97,118,105,103,97,116,105,111,110,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,99,104,117,110,107,121,32,109,101,115,104,46,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,100,109,101,115,104,46,109,101,115,104,101,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,67,97,110,110,111,116,32,102,105,110,100,32,110,101,97,114,101,115,116,80,111,108,121,58,32,37,117,10,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,109,101,115,104,46,112,111,108,121,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,114,118,101,114,116,115,39,32,40,37,100,41,46,0,0,0,114,99,66,117,105,108,100,67,111,109,112,97,99,116,72,101,105,103,104,116,102,105,101,108,100,58,32,72,101,105,103,104,116,102,105,101,108,100,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,97,121,101,114,115,32,37,100,32,40,109,97,120,58,32,37,100,41,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,99,115,61,37,102,44,32,99,104,61,37,102,0,0,0,0,109,95,110,111,100,101,115,0,37,115,40,95,95,116,109,112,95,114,101,99,97,115,116,106,115,95,100,97,116,97,41,59,0,0,0,0,0,0,0,0,95,95,116,109,112,95,114,101,99,97,115,116,106,115,95,100,97,116,97,46,112,117,115,104,40,110,101,119,32,84,72,82,69,69,46,86,101,99,116,111,114,51,40,37,102,44,32,37,102,44,32,37,102,41,41,59,0,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,95,95,116,109,112,95,114,101,99,97,115,116,106,115,95,100,97,116,97,32,61,32,91,93,59,0,0,0,0,0,0,0,110,118,112,61,37,117,44,32,99,115,61,37,102,44,32,99,104,61,37,102,44,32,111,114,105,103,61,123,37,102,44,32,37,102,44,32,37,102,125,0,102,97,108,115,101,0,0,0,114,99,66,117,105,108,100,68,105,115,116,97,110,99,101,70,105,101,108,100,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,115,114,99,39,32,40,37,100,41,46,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,99,104,97,114,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,98,111,117,110,100,115,39,32,40,37,100,41,46,0,0,0,0,0,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,32,61,32,91,93,59,32,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,100,116,32,61,32,39,68,85,95,68,82,65,87,95,76,73,78,69,83,39,59,0,0,0,0,0,58,32,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,104,112,46,100,97,116,97,39,32,40,37,100,41,46,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,109,101,115,104,46,118,101,114,116,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,118,101,114,116,115,39,32,40,37,100,41,46,0,0,0,0,114,99,66,117,105,108,100,67,111,109,112,97,99,116,72,101,105,103,104,116,102,105,101,108,100,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,99,104,102,46,97,114,101,97,115,39,32,40,37,100,41,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,84,111,111,32,109,97,110,121,32,118,101,114,116,105,99,101,115,32,37,100,46,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,109,95,109,97,120,78,111,100,101,115,32,62,32,48,0,0,37,112,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,102,108,97,103,115,39,32,40,37,100,41,46,0,0,0,0,101,114,111,100,101,87,97,108,107,97,98,108,101,65,114,101,97,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,100,105,115,116,39,32,40,37,100,41,46,0,0,0,114,99,66,117,105,108,100,67,111,109,112,97,99,116,72,101,105,103,104,116,102,105,101,108,100,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,99,104,102,46,99,101,108,108,115,39,32,40,37,100,41,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,84,104,101,32,114,101,115,117,108,116,105,110,103,32,109,101,115,104,32,104,97,115,32,116,111,111,32,109,97,110,121,32,112,111,108,121,103,111,110,115,32,37,100,32,40,109,97,120,32,37,100,41,46,32,68,97,116,97,32,99,97,110,32,98,101,32,99,111,114,114,117,112,116,101,100,46,0,0,0,67,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,84,104,101,32,114,101,115,117,108,116,105,110,103,32,109,101,115,104,32,104,97,115,32,116,111,111,32,109,97,110,121,32,118,101,114,116,105,99,101,115,32,37,100,32,40,109,97,120,32,37,100,41,46,32,68,97,116,97,32,99,97,110,32,98,101,32,99,111,114,114,117,112,116,101,100,46,0,0,0,118,101,99,116,111,114,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,98,111,111,108,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,109,101,115,104,46,102,108,97,103,115,39,32,40,37,100,41,46,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,32,61,32,91,93,59,32,119,105,110,100,111,119,46,95,100,100,95,100,97,116,97,46,100,116,32,61,32,39,68,85,95,68,82,65,87,95,80,79,73,78,84,83,39,59,0,0,0,0,37,100,32,118,101,114,116,115,32,32,32,37,100,32,116,114,105,115,10,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,65,100,106,97,99,101,110,99,121,32,102,97,105,108,101,100,46,0,0,0,0,0,0,114,98,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,108,111,97,100,77,101,115,104,58,32,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,39,109,95,109,101,115,104,39,46,0,0,0,0,0,0,84,104,117,0,0,0,0,0,37,76,102,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,70,97,105,108,101,100,32,116,111,32,114,101,109,111,118,101,32,101,100,103,101,32,118,101,114,116,101,120,32,37,100,46,0,0,0,0,0,0,0,37,102,32,37,102,32,37,102,0,0,0,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,98,117,105,108,100,84,105,108,101,100,78,97,118,105,103,97,116,105,111,110,58,32,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,39,37,115,39,0,0,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,114,99,66,117,105,108,100,68,105,115,116,97,110,99,101,70,105,101,108,100,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,100,115,116,39,32,40,37,100,41,46,0,70,114,105,100,97,121,0,0,100,111,117,98,108,101,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,111,108,121,39,32,40,37,100,41,46,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,97,100,100,69,100,103,101,58,32,84,111,111,32,109,97,110,121,32,101,100,103,101,115,32,40,37,100,47,37,100,41,46,0,0,0,0,0,0,0,0,77,111,110,100,97,121,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,118,102,108,97,103,115,39,32,40,37,100,41,46,0,0,0,83,117,110,100,97,121,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,84,111,111,32,109,97,110,121,32,112,111,108,121,103,111,110,115,32,37,100,32,40,109,97,120,58,37,100,41,46,0,114,99,66,117,105,108,100,67,111,110,116,111,117,114,115,58,32,69,120,112,97,110,100,105,110,103,32,109,97,120,32,99,111,110,116,111,117,114,115,32,102,114,111,109,32,37,100,32,116,111,32,37,100,46,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,114,99,66,117,105,108,100,67,111,109,112,97,99,116,72,101,105,103,104,116,102,105,101,108,100,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,99,104,102,46,115,112,97,110,115,39,32,40,37,100,41,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,100,101,98,117,103,68,114,97,119,67,111,110,116,111,117,114,115,0,0,0,0,0,0,0,100,101,108,97,117,110,97,121,72,117,108,108,58,32,82,101,109,111,118,105,110,103,32,100,97,110,103,108,105,110,103,32,102,97,99,101,32,37,100,32,91,37,100,44,37,100,44,37,100,93,46,0,0,0,0,0,100,101,98,117,103,68,114,97,119,82,97,119,67,111,110,116,111,117,114,115,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,66,97,100,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,67,111,110,116,111,117,114,32,37,100,46,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,100,116,78,101,120,116,80,111,119,50,40,109,95,104,97,115,104,83,105,122,101,41,32,61,61,32,40,117,110,115,105,103,110,101,100,32,105,110,116,41,109,95,104,97,115,104,83,105,122,101,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,100,101,98,117,103,68,114,97,119,82,101,103,105,111,110,67,111,110,110,101,99,116,105,111,110,115,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,100,101,98,117,103,68,114,97,119,78,97,118,77,101,115,104,80,111,114,116,97,108,115,0,46,46,47,115,114,99,95,99,112,112,47,68,101,116,111,117,114,47,83,111,117,114,99,101,47,68,101,116,111,117,114,78,111,100,101,46,99,112,112,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,100,101,98,117,103,68,114,97,119,78,97,118,77,101,115,104,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,115,101,116,95,100,101,116,97,105,108,83,97,109,112,108,101,77,97,120,69,114,114,111,114,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,115,101,116,95,100,101,116,97,105,108,83,97,109,112,108,101,68,105,115,116,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,115,101,116,95,118,101,114,116,115,80,101,114,80,111,108,121,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,115,101,116,95,101,100,103,101,77,97,120,69,114,114,111,114,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,115,101,116,95,101,100,103,101,77,97,120,76,101,110,0,0,78,111,118,0,0,0,0,0,115,101,116,95,114,101,103,105,111,110,77,101,114,103,101,83,105,122,101,0,0,0,0,0,79,99,116,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,68,101,116,97,105,108,58,32,83,104,114,105,110,107,105,110,103,32,116,114,105,97,110,103,108,101,32,99,111,117,110,116,32,102,114,111,109,32,37,100,32,116,111,32,109,97,120,32,37,100,46,0,0,0,0,0,0,115,101,116,95,114,101,103,105,111,110,77,105,110,83,105,122,101,0,0,0,0,0,0,0,83,101,112,0,0,0,0,0,115,101,116,95,97,103,101,110,116,77,97,120,83,108,111,112,101,0,0,0,0,0,0,0,65,117,103,0,0,0,0,0,115,101,116,95,97,103,101,110,116,77,97,120,67,108,105,109,98,0,0,0,0,0,0,0,114,99,66,117,105,108,100,80,111,108,121,77,101,115,104,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,39,112,111,108,121,115,39,32,40,37,100,41,46,0,0,0,0,100,116,78,111,100,101,81,117,101,117,101,58,58,100,116,78,111,100,101,81,117,101,117,101,40,105,110,116,41,0,0,0,100,116,78,111,100,101,80,111,111,108,58,58,100,116,78,111,100,101,80,111,111,108,40,105,110,116,44,32,105,110,116,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,128,64,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,62,0,0,74,0,0,0,96,1,0,0,118,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,62,0,0,90,2,0,0,222,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,62,0,0,210,0,0,0,60,3,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,62,0,0,28,1,0,0,16,0,0,0,164,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,62,0,0,28,1,0,0,42,0,0,0,164,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,62,0,0,230,1,0,0,250,0,0,0,134,0,0,0,22,2,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,62,0,0,236,2,0,0,30,2,0,0,134,0,0,0,10,3,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,62,0,0,220,1,0,0,34,2,0,0,134,0,0,0,24,2,0,0,30,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,63,0,0,50,3,0,0,166,1,0,0,134,0,0,0,8,2,0,0,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,63,0,0,38,3,0,0,38,0,0,0,134,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,63,0,0,216,1,0,0,78,1,0,0,134,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,98,0,0,0,80,1,0,0,134,0,0,0,202,2,0,0,20,0,0,0,36,2,0,0,30,0,0,0,228,0,0,0,204,2,0,0,4,1,0,0,248,255,255,255,240,63,0,0,128,0,0,0,46,0,0,0,200,0,0,0,84,0,0,0,8,0,0,0,184,0,0,0,238,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,22,3,0,0,218,2,0,0,134,0,0,0,124,0,0,0,144,0,0,0,240,2,0,0].concat([178,1,0,0,182,0,0,0,14,0,0,0,184,2,0,0,248,255,255,255,24,64,0,0,156,1,0,0,136,2,0,0,186,2,0,0,226,2,0,0,104,1,0,0,16,1,0,0,54,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,238,0,0,0,40,2,0,0,134,0,0,0,34,1,0,0,2,1,0,0,130,0,0,0,158,1,0,0,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,64,0,0,172,0,0,0,194,0,0,0,134,0,0,0,10,1,0,0,28,2,0,0,178,0,0,0,14,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,64,0,0,26,3,0,0,2,0,0,0,134,0,0,0,192,1,0,0,42,3,0,0,114,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,126,0,0,0,180,2,0,0,134,0,0,0,216,2,0,0,236,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,196,2,0,0,90,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,64,0,0,68,0,0,0,164,1,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,64,0,0,12,0,0,0,236,1,0,0,134,0,0,0,110,0,0,0,96,0,0,0,88,0,0,0,94,0,0,0,86,0,0,0,104,0,0,0,102,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,64,0,0,32,1,0,0,40,0,0,0,134,0,0,0,82,2,0,0,86,2,0,0,72,2,0,0,84,2,0,0,70,2,0,0,76,2,0,0,74,2,0,0,240,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,64,0,0,100,0,0,0,48,0,0,0,134,0,0,0,148,2,0,0,146,2,0,0,134,2,0,0,138,2,0,0,26,2,0,0,144,2,0,0,132,2,0,0,72,1,0,0,152,2,0,0,150,2,0,0,138,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,65,0,0,148,0,0,0,4,0,0,0,134,0,0,0,18,3,0,0,8,3,0,0,2,3,0,0,4,3,0,0,234,2,0,0,6,3,0,0,0,3,0,0,16,3,0,0,14,3,0,0,12,3,0,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,65,0,0,226,0,0,0,18,1,0,0,134,0,0,0,134,1,0,0,68,2,0,0,82,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,65,0,0,64,0,0,0,246,1,0,0,134,0,0,0,62,2,0,0,174,2,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,65,0,0,228,2,0,0,148,1,0,0,134,0,0,0,64,2,0,0,156,0,0,0,60,2,0,0,108,0,0,0,102,1,0,0,120,0,0,0,186,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,65,0,0,2,2,0,0,176,0,0,0,134,0,0,0,54,0,0,0,74,1,0,0,186,0,0,0,156,2,0,0,112,2,0,0,10,2,0,0,108,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,65,0,0,2,2,0,0,154,1,0,0,134,0,0,0,40,3,0,0,158,0,0,0,80,0,0,0,46,3,0,0,22,1,0,0,24,1,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,65,0,0,2,2,0,0,194,1,0,0,134,0,0,0,120,1,0,0,126,1,0,0,96,2,0,0,216,0,0,0,180,1,0,0,164,0,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,65,0,0,2,2,0,0,82,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,65,0,0,166,0,0,0,200,1,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,65,0,0,2,2,0,0,242,0,0,0,134,0,0,0,170,1,0,0,208,0,0,0,118,1,0,0,34,3,0,0,212,0,0,0,100,2,0,0,46,2,0,0,60,0,0,0,136,0,0,0,190,2,0,0,56,1,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,66,0,0,58,3,0,0,90,0,0,0,134,0,0,0,24,0,0,0,52,0,0,0,140,1,0,0,182,2,0,0,160,0,0,0,146,1,0,0,224,1,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,66,0,0,198,0,0,0,206,2,0,0,204,1,0,0,106,2,0,0,110,1,0,0,176,2,0,0,166,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,66,0,0,2,2,0,0,254,0,0,0,134,0,0,0,120,1,0,0,126,1,0,0,96,2,0,0,216,0,0,0,180,1,0,0,164,0,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,2,2,0,0,226,1,0,0,134,0,0,0,120,1,0,0,126,1,0,0,96,2,0,0,216,0,0,0,180,1,0,0,164,0,0,0,124,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,66,0,0,130,1,0,0,248,2,0,0,220,0,0,0,190,1,0,0,30,1,0,0,20,2,0,0,54,2,0,0,124,2,0,0,160,2,0,0,168,0,0,0,150,0,0,0,48,3,0,0,52,3,0,0,38,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,66,0,0,18,0,0,0,98,1,0,0,44,2,0,0,230,2,0,0,224,2,0,0,84,1,0,0,36,1,0,0,32,2,0,0,136,1,0,0,34,0,0,0,62,0,0,0,250,2,0,0,114,1,0,0,174,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,184,66,0,0,116,0,0,0,170,2,0,0,252,255,255,255,252,255,255,255,184,66,0,0,174,1,0,0,128,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,208,66,0,0,198,2,0,0,252,2,0,0,252,255,255,255,252,255,255,255,208,66,0,0,76,1,0,0,102,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,232,66,0,0,6,1,0,0,62,3,0,0,248,255,255,255,248,255,255,255,232,66,0,0,4,2,0,0,246,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,67,0,0,70,1,0,0,130,2,0,0,248,255,255,255,248,255,255,255,0,67,0,0,160,1,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,67,0,0,116,2,0,0,6,2,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,67,0,0,28,3,0,0,222,2,0,0,36,0,0,0,190,1,0,0,30,1,0,0,20,2,0,0,60,1,0,0,124,2,0,0,160,2,0,0,168,0,0,0,150,0,0,0,48,3,0,0,52,3,0,0,254,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,67,0,0,196,1,0,0,254,1,0,0,86,1,0,0,230,2,0,0,224,2,0,0,84,1,0,0,56,2,0,0,32,2,0,0,136,1,0,0,34,0,0,0,62,0,0,0,250,2,0,0,114,1,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,67,0,0,208,2,0,0,172,1,0,0,134,0,0,0,152,1,0,0,192,2,0,0,208,1,0,0,36,3,0,0,58,0,0,0,50,1,0,0,48,1,0,0,240,0,0,0,144,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,67,0,0,64,1,0,0,162,0,0,0,134,0,0,0,172,2,0,0,10,0,0,0,120,2,0,0,214,2,0,0,232,2,0,0,12,1,0,0,178,2,0,0,248,1,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,67,0,0,220,2,0,0,94,1,0,0,134,0,0,0,106,0,0,0,88,1,0,0,214,1,0,0,198,1,0,0,242,2,0,0,252,1,0,0,94,2,0,0,18,2,0,0,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,0,0,234,0,0,0,234,1,0,0,134,0,0,0,128,2,0,0,158,2,0,0,44,1,0,0,188,2,0,0,20,1,0,0,224,0,0,0,206,1,0,0,168,2,0,0,162,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,68,0,0,8,1,0,0,202,0,0,0,104,2,0,0,190,1,0,0,30,1,0,0,20,2,0,0,54,2,0,0,124,2,0,0,160,2,0,0,162,1,0,0,12,2,0,0,190,0,0,0,52,3,0,0,38,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,68,0,0,28,0,0,0,200,2,0,0,66,2,0,0,230,2,0,0,224,2,0,0,84,1,0,0,36,1,0,0,32,2,0,0,136,1,0,0,58,1,0,0,142,0,0,0,32,0,0,0,114,1,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,68,0,0,32,3,0,0,0,1,0,0,180,0,0,0,188,1,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,68,0,0,32,3,0,0,92,2,0,0,180,0,0,0,188,1,0,0,230,0,0,0,72,0,0,0,194,2,0,0,52,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,68,0,0,154,2,0,0,212,1,0,0,204,0,0,0,250,1,0,0,38,1,0,0,42,1,0,0,126,2,0,0,88,2,0,0,140,0,0,0,92,1,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,49,49,100,117,68,101,98,117,103,68,114,97,119,0,0,0,49,49,68,101,98,117,103,68,114,97,119,71,76,0,0,0,120,48,0,0,0,49,0,0,120,48,0,0,88,49,0,0,0,0,0,0,104,49,0,0,0,0,0,0,120,49,0,0,0,0,0,0,136,49,0,0,80,62,0,0,0,0,0,0,0,0,0,0,152,49,0,0,80,62,0,0,0,0,0,0,0,0,0,0,168,49,0,0,80,62,0,0,0,0,0,0,0,0,0,0,192,49,0,0,152,62,0,0,0,0,0,0,0,0,0,0,216,49,0,0,80,62,0,0,0,0,0,0,0,0,0,0,232,49,0,0,160,48,0,0,0,50,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,144,67,0,0,0,0,0,0,160,48,0,0,72,50,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,152,67,0,0,0,0,0,0,160,48,0,0,144,50,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,160,67,0,0,0,0,0,0,160,48,0,0,216,50,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,168,67,0,0,0,0,0,0,0,0,0,0,32,51,0,0,160,64,0,0,0,0,0,0,0,0,0,0,80,51,0,0,160,64,0,0,0,0,0,0,160,48,0,0,128,51,0,0,0,0,0,0,1,0,0,0,160,66,0,0,0,0,0,0,160,48,0,0,152,51,0,0,0,0,0,0,1,0,0,0,160,66,0,0,0,0,0,0,160,48,0,0,176,51,0,0,0,0,0,0,1,0,0,0,168,66,0,0,0,0,0,0,160,48,0,0,200,51,0,0,0,0,0,0,1,0,0,0,168,66,0,0,0,0,0,0,160,48,0,0,224,51,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,64,68,0,0,0,8,0,0,160,48,0,0,40,52,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,64,68,0,0,0,8,0,0,160,48,0,0,112,52,0,0,0,0,0,0,3,0,0,0,216,65,0,0,2,0,0,0,168,62,0,0,2,0,0,0,64,66,0,0,0,8,0,0,160,48,0,0,184,52,0,0,0,0,0,0,3,0,0,0,216,65,0,0,2,0,0,0,168,62,0,0,2,0,0,0,72,66,0,0,0,8,0,0,0,0,0,0,0,53,0,0,216,65,0,0,0,0,0,0,0,0,0,0,24,53,0,0,216,65,0,0,0,0,0,0,160,48,0,0,48,53,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,176,66,0,0,2,0,0,0,160,48,0,0,72,53,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,176,66,0,0,2,0,0,0,0,0,0,0,96,53,0,0,0,0,0,0,120,53,0,0,24,67,0,0,0,0,0,0,160,48,0,0,152,53,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,80,63,0,0,0,0,0,0,160,48,0,0,224,53,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,104,63,0,0,0,0,0,0,160,48,0,0,40,54,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,128,63,0,0,0,0,0,0,160,48,0,0,112,54,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,152,63,0,0,0,0,0,0,0,0,0,0,184,54,0,0,216,65,0,0,0,0,0,0,0,0,0,0,208,54,0,0,216,65,0,0,0,0,0,0,160,48,0,0,232,54,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,40,67,0,0,2,0,0,0,160,48,0,0,16,55,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,40,67,0,0,2,0,0,0,160,48,0,0,56,55,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,40,67,0,0,2,0,0,0,160,48,0,0,96,55,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,40,67,0,0,2,0,0,0,0,0,0,0,136,55,0,0,152,66,0,0,0,0,0,0,0,0,0,0,160,55,0,0,216,65,0,0,0,0,0,0,160,48,0,0,184,55,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,56,68,0,0,2,0,0,0,160,48,0,0,208,55,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,56,68,0,0,2,0,0,0,0,0,0,0,232,55,0,0,0,0,0,0,16,56,0,0,0,0,0,0,56,56,0,0,0,0,0,0,96,56,0,0,96,67,0,0,0,0,0,0,0,0,0,0,128,56,0,0,184,65,0,0,0,0,0,0,0,0,0,0,168,56,0,0,184,65,0,0,0,0,0,0,0,0,0,0,208,56,0,0,0,0,0,0,8,57,0,0,0,0,0,0,64,57,0,0,0,0,0,0,96,57,0,0,0,0,0,0,128,57,0,0,0,0,0,0,160,57,0,0,0,0,0,0,192,57,0,0,160,48,0,0,216,57,0,0,0,0,0,0,1,0,0,0,48,63,0,0,3,244,255,255,160,48,0,0,8,58,0,0,0,0,0,0,1,0,0,0,64,63,0,0,3,244,255,255,160,48,0,0,56,58,0,0,0,0,0,0,1,0,0,0,48,63,0,0,3,244,255,255,160,48,0,0,104,58,0,0,0,0,0,0,1,0,0,0,64,63,0,0,3,244,255,255,0,0,0,0,152,58,0,0,120,62,0,0,0,0,0,0,0,0,0,0,176,58,0,0,160,48,0,0,200,58,0,0,0,0,0,0,1,0,0,0,56,66,0,0,0,0,0,0,160,48,0,0,8,59,0,0,0,0,0,0,1,0,0,0,56,66,0,0,0,0,0,0,0,0,0,0,72,59,0,0,144,66,0,0,0,0,0,0,0,0,0,0,96,59,0,0,128,66,0,0,0,0,0,0,0,0,0,0,128,59,0,0,136,66,0,0,0,0,0,0,0,0,0,0,160,59,0,0,0,0,0,0,192,59,0,0,0,0,0,0,224,59,0,0,0,0,0,0,0,60,0,0,160,48,0,0,32,60,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,48,68,0,0,2,0,0,0,160,48,0,0,64,60,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,48,68,0,0,2,0,0,0,160,48,0,0,96,60,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,48,68,0,0,2,0,0,0,160,48,0,0,128,60,0,0,0,0,0,0,2,0,0,0,216,65,0,0,2,0,0,0,48,68,0,0,2,0,0,0,0,0,0,0,160,60,0,0,0,0,0,0,184,60,0,0,0,0,0,0,208,60,0,0,0,0,0,0,232,60,0,0,128,66,0,0,0,0,0,0,0,0,0,0,0,61,0,0,136,66,0,0,0,0,0,0,0,0,0,0,24,61,0,0,0,0,0,0,48,61,0,0,0,0,0,0,80,61,0,0,184,68,0,0,0,0,0,0,0,0,0,0,120,61,0,0,168,68,0,0,0,0,0,0,0,0,0,0,160,61,0,0,168,68,0,0,0,0,0,0,0,0,0,0,200,61,0,0,184,68,0,0,0,0,0,0,0,0,0,0,240,61,0,0,72,62,0,0,0,0,0,0,0,0,0,0,24,62,0,0,0,0,0,0,40,62,0,0,200,68,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(800);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(388);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(180);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(444);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(230);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(112);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(270);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(302);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(800);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(792);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(180);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(444);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(230);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(622);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(296);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(458);
HEAP32[((__ZTIt)>>2)]=(((12408)|0));
HEAP32[(((__ZTIt)+(4))>>2)]=((12552)|0);
HEAP32[((__ZTIs)>>2)]=(((12408)|0));
HEAP32[(((__ZTIs)+(4))>>2)]=((12560)|0);
HEAP32[((__ZTIm)>>2)]=(((12408)|0));
HEAP32[(((__ZTIm)+(4))>>2)]=((12568)|0);
HEAP32[((__ZTIl)>>2)]=(((12408)|0));
HEAP32[(((__ZTIl)+(4))>>2)]=((12576)|0);
HEAP32[((__ZTIj)>>2)]=(((12408)|0));
HEAP32[(((__ZTIj)+(4))>>2)]=((12584)|0);
HEAP32[((__ZTIi)>>2)]=(((12408)|0));
HEAP32[(((__ZTIi)+(4))>>2)]=((12592)|0);
HEAP32[((__ZTIh)>>2)]=(((12408)|0));
HEAP32[(((__ZTIh)+(4))>>2)]=((12600)|0);
HEAP32[((__ZTIf)>>2)]=(((12408)|0));
HEAP32[(((__ZTIf)+(4))>>2)]=((12608)|0);
HEAP32[((__ZTId)>>2)]=(((12408)|0));
HEAP32[(((__ZTId)+(4))>>2)]=((12616)|0);
HEAP32[((__ZTIc)>>2)]=(((12408)|0));
HEAP32[(((__ZTIc)+(4))>>2)]=((12624)|0);
HEAP32[((__ZTIa)>>2)]=(((12408)|0));
HEAP32[(((__ZTIa)+(4))>>2)]=((12640)|0);
HEAP32[((15944)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15952)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15960)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15976)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15992)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16008)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16024)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16040)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16176)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16192)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16448)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16464)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16544)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16552)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16696)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16712)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16856)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16872)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16952)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16960)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16968)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16976)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16992)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17008)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17024)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17032)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17040)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17048)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17056)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17064)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17072)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17176)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17192)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17248)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17264)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17280)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17296)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17304)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17312)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17320)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17456)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17464)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17472)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17480)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17496)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17512)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17520)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17528)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17544)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17560)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17576)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17592)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17608)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17616)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var _cosf=Math.cos;
  var _sinf=Math.sin;
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var _sqrtf=Math.sqrt;
  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i64=_memset;
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,EDOTDOT:76,EBADMSG:77,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"No message of desired type",36:"Identifier removed",37:"Channel number out of range",38:"Level 2 not synchronized",39:"Level 3 halted",40:"Level 3 reset",41:"Link number out of range",42:"Protocol driver not attached",43:"No CSI structure available",44:"Level 2 halted",45:"Deadlock condition",46:"No record locks available",50:"Invalid exchange",51:"Invalid request descriptor",52:"Exchange full",53:"No anode",54:"Invalid request code",55:"Invalid slot",56:"File locking deadlock error",57:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",74:"Multihop attempted",76:"Cross mount point (not really error)",77:"Trying to read unreadable message",80:"Given log. name not unique",81:"f.d. invalid for this operation",82:"Remote address changed",83:"Can   access a needed shared lib",84:"Accessing a corrupted shared lib",85:".lib section in a.out corrupted",86:"Attempting to link in too many libs",87:"Attempting to exec a shared library",88:"Function not implemented",90:"Directory not empty",91:"File or path name too long",92:"Too many symbolic links",95:"Operation not supported on transport endpoint",96:"Protocol family not supported",104:"Connection reset by peer",105:"No buffer space available",106:"Address family not supported by protocol family",107:"Protocol wrong type for socket",108:"Socket operation on non-socket",109:"Protocol not available",110:"Can't send after socket shutdown",111:"Connection refused",112:"Address already in use",113:"Connection aborted",114:"Network is unreachable",115:"Network interface is not configured",116:"Connection timed out",117:"Host is down",118:"Host is unreachable",119:"Connection already in progress",120:"Socket already connected",121:"Destination address required",122:"Message too long",123:"Unknown protocol",124:"Socket type not supported",125:"Address not available",126:"Connection reset by network",127:"Socket is already connected",128:"Socket is not connected",129:"Too many references",131:"Too many users",132:"Quota exceeded",133:"Stale file handle",134:"Not supported",135:"No medium (in tape drive)",138:"Illegal byte sequence",139:"Value too large for defined data type",140:"Operation canceled",141:"State not recoverable",142:"Previous owner died",143:"Streams pipe error"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var VFS=undefined;
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path, ext) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var f = PATH.splitPath(path)[2];
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.filter(function(p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }
          return p;
        }).join('/'));
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          // this wouldn't be required if the library wasn't eval'd at first...
          if (!TTY.utf8) {
            TTY.utf8 = new Runtime.UTF8Processor();
          }
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              if (process.stdin.destroyed) {
                return undefined;
              }
              result = process.stdin.read();
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={mount:function (mount) {
        return MEMFS.create_node(null, '/', 0040000 | 0777, 0);
      },create_node:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek
          };
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap
          };
          node.contents = [];
        } else if (FS.isLink(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          };
          node.stream_ops = {};
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = FS.chrdev_stream_ops;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.create_node(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.create_node(parent, newname, 0777 | 0120000, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          var size = Math.min(contents.length - position, length);
          if (contents.subarray) { // typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          stream.node.timestamp = Date.now();
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 0x02)) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            assert(contents.buffer === buffer || contents.buffer === buffer.buffer);
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,nodes:[null],devices:[null],streams:[null],nextInode:1,name_tablecurrentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:function (errno) {
        this.errno = errno;
        for (var key in ERRNO_CODES) {
          if (ERRNO_CODES[key] === errno) {
            this.code = key;
            break;
          }
        }
        this.message = ERRNO_MESSAGES[errno] + ' : ' + new Error().stack;
      },handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + new Error().stack;
        return ___setErrNo(e.errno);
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.name_table.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.name_table[hash];
        FS.name_table[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.name_table[hash] === node) {
          FS.name_table[hash] = node.name_next;
        } else {
          var current = FS.name_table[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.name_table[hash]; node; node = node.name_next) {
          if (node.parent.id === parent.id && node.name === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        var node = {
          id: FS.nextInode++,
          name: name,
          mode: mode,
          node_ops: {},
          stream_ops: {},
          rdev: rdev,
          parent: null,
          mount: null
        };
        if (!parent) {
          parent = node;  // root node sets parent to itself
        }
        node.parent = parent;
        node.mount = parent.mount;
        // compatibility
        var readMode = 292 | 73;
        var writeMode = 146;
        // NOTE we must use Object.defineProperties instead of individual calls to
        // Object.defineProperty in order to make closure compiler happy
        Object.defineProperties(node, {
          read: {
            get: function() { return (node.mode & readMode) === readMode; },
            set: function(val) { val ? node.mode |= readMode : node.mode &= ~readMode; }
          },
          write: {
            get: function() { return (node.mode & writeMode) === writeMode; },
            set: function(val) { val ? node.mode |= writeMode : node.mode &= ~writeMode; }
          },
          isFolder: {
            get: function() { return FS.isDir(node.mode); },
          },
          isDevice: {
            get: function() { return FS.isChrdev(node.mode); },
          },
        });
        FS.hashAddNode(node);
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 0170000) === 0100000;
      },isDir:function (mode) {
        return (mode & 0170000) === 0040000;
      },isLink:function (mode) {
        return (mode & 0170000) === 0120000;
      },isChrdev:function (mode) {
        return (mode & 0170000) === 0020000;
      },isBlkdev:function (mode) {
        return (mode & 0170000) === 0060000;
      },isFIFO:function (mode) {
        return (mode & 0170000) === 0010000;
      },cwd:function () {
        return FS.currentPath;
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.currentPath, path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            return path ? PATH.join(node.mount.mountpoint, path) : node.mount.mountpoint;
          }
          path = path ? PATH.join(node.name, path) : node.name;
          node = node.parent;
        }
      },flagModes:{"r":0,"rs":8192,"r+":2,"w":1537,"wx":3585,"xw":3585,"w+":1538,"wx+":3586,"xw+":3586,"a":521,"ax":2569,"xa":2569,"a+":522,"ax+":2570,"xa+":2570},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 3;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 1024)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayMknod:function (mode) {
        switch (mode & 0170000) {
          case 0100000:
          case 0020000:
          case 0060000:
          case 0010000:
          case 0140000:
            return 0;
          default:
            return ERRNO_CODES.EINVAL;
        }
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.currentPath) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 3) !== 0 ||  // opening for write
              (flags & 1024)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        // compatibility
        Object.defineProperties(stream, {
          object: {
            get: function() { return stream.node; },
            set: function(val) { stream.node = val; }
          },
          isRead: {
            get: function() { return (stream.flags & 3) !== 1; }
          },
          isWrite: {
            get: function() { return (stream.flags & 3) !== 0; }
          },
          isAppend: {
            get: function() { return (stream.flags & 8); }
          }
        });
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join(parent, part);
          try {
            FS.mkdir(current, 0777);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(path, mode | 146);
          var stream = FS.open(path, 'w');
          FS.write(stream, data, 0, data.length, 0);
          FS.close(stream);
          FS.chmod(path, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = input && output ? 0777 : (input ? 0333 : 0555);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = PATH.resolve(PATH.join(parent, name));
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp', 0777);
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev', 0777);
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', 0666, FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', 0666, FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', 0666, FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm', 0777);
        FS.mkdir('/dev/shm/tmp', 0777);
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },staticInit:function () {
        FS.root = FS.createNode(null, '/', 0040000 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },mount:function (type, opts, mountpoint) {
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
        }
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode &= 4095;
        mode |= 0100000;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode &= 511 | 0001000;
        mode |= 0040000;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        mode |= 0020000;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        path = PATH.normalize(path);
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 512)) {
          mode = (mode & 4095) | 0100000;
        } else {
          mode = 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 0200000)
          });
          node = lookup.node;
          path = lookup.path;
        } catch (e) {
          // ignore
        }
        // perhaps we need to create the node
        if ((flags & 512)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 2048)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~1024;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 1024)) {
          FS.truncate(node, 0);
        }
        // register the stream with the filesystem
        var stream = FS.createStream({
          path: path,
          node: node,
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 8) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 3) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      }};
  function _send(fd, buf, len, flags) {
      var info = FS.getStream(fd);
      if (!info) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (info.socket.readyState === WebSocket.CLOSING || info.socket.readyState === WebSocket.CLOSED) {
        ___setErrNo(ERRNO_CODES.ENOTCONN);
        return -1;
      } else if (info.socket.readyState === WebSocket.CONNECTING) {
        ___setErrNo(ERRNO_CODES.EAGAIN);
        return -1;
      }
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (stream && ('socket' in stream)) {
        return _send(fildes, buf, nbyte, 0);
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  var _llvm_memset_p0i8_i32=_memset;
  var _llvm_va_start=undefined;
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  var _fabsf=Math.abs;
  function ___gxx_personality_v0() {
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module.print('exit(' + status + ') called');
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  var _floorf=Math.floor;
  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }
  var _ceilf=Math.ceil;
  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return FUNCTION_TABLE[cmp](base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_release() {}
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);;
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _recv(fd, buf, len, flags) {
      var info = FS.getStream(fd);
      if (!info) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (!info.hasData()) {
        if (info.socket.readyState === WebSocket.CLOSING || info.socket.readyState === WebSocket.CLOSED) {
          // socket has closed
          return 0;
        } else {
          // else, our socket is in a valid state but truly has nothing available
          ___setErrNo(ERRNO_CODES.EAGAIN);
          return -1;
        }
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (stream && ('socket' in stream)) {
        return _recv(fildes, buf, nbyte, 0);
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
        __scanString.whiteSpace['\v'] = 1;
        __scanString.whiteSpace['\f'] = 1;
        __scanString.whiteSpace['\r'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC)
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }
;
;
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
;
;
;
;
;
;
;
;
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)] + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function ___cxa_guard_abort() {}
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function __Z7catopenPKci() { throw 'catopen not implemented' }
  function __Z7catgetsP8_nl_catdiiPKc() { throw 'catgets not implemented' }
  function __Z8catcloseP8_nl_catd() { throw 'catclose not implemented' }
  function _newlocale(mask, locale, base) {
      return 0;
    }
  function _freelocale(locale) {}
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[(((tm)+(___tm_struct_layout.tm_sec))>>2)],
        tm_min: HEAP32[(((tm)+(___tm_struct_layout.tm_min))>>2)],
        tm_hour: HEAP32[(((tm)+(___tm_struct_layout.tm_hour))>>2)],
        tm_mday: HEAP32[(((tm)+(___tm_struct_layout.tm_mday))>>2)],
        tm_mon: HEAP32[(((tm)+(___tm_struct_layout.tm_mon))>>2)],
        tm_year: HEAP32[(((tm)+(___tm_struct_layout.tm_year))>>2)],
        tm_wday: HEAP32[(((tm)+(___tm_struct_layout.tm_wday))>>2)],
        tm_yday: HEAP32[(((tm)+(___tm_struct_layout.tm_yday))>>2)],
        tm_isdst: HEAP32[(((tm)+(___tm_struct_layout.tm_isdst))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      var leadingSomething = function(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      var leadingNulls = function(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      var compareByDay = function(date1, date2) {
        var sgn = function(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      var getFirstWeekStartDate = function(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      var getWeekBasedYear = function(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  function ___locale_mb_cur_max() { throw '__locale_mb_cur_max not implemented' }
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv
,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm
,0,__Z17bareGeomAddVertexfffi,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm
,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt11logic_errorD0Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE
,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__17codecvtIcc10_mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__Z24getNavHeightfieldRegionsNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__Z12initWithFilev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZN10emscripten8internal7InvokerIvJhEE6invokeEPFvhEh
,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__Z19set_regionMergeSizef,0,__Z12bareGeomInitv,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_
,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev
,0,__Z23debugDrawNavMeshPortalsv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE11do_encodingEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb
,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE9do_lengthERS1_PKcS5_j
,0,__Z12set_cellSizef,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv
,0,__Z24set_detailSampleMaxErrorf,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZN11DebugDrawGL6vertexEfffjff
,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv
,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__Z16set_vertsPerPolyf,0,__ZNKSt3__17codecvtIwc10_mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__15ctypeIcE8do_widenEc
,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNKSt3__17codecvtIDic10_mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv
,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__17codecvtIcc10_mbstate_tED0Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev
,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__17codecvtIcc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZL12compareItemZPKvS0_,0,__ZNSt3__110__stdinbufIwE9pbackfailEi
,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv
,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZN11DebugDrawGL9depthMaskEb,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev
,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNKSt3__17codecvtIDic10_mbstate_tE11do_encodingEv,0,__Z14set_edgeMaxLenf,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE
,0,__Z8findPathffffffiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv
,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv
,0,__ZNSt3__15ctypeIwED0Ev,0,__Z16bareGeomValidatev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,0,__Z17set_agentMaxClimbf,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc
,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE9do_lengthERS1_PKcS5_j
,0,__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZN11DebugDrawGL5beginE21duDebugDrawPrimitivesf,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZN11DebugDrawGL6vertexEPKfj,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv
,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv
,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__Z17set_agentMaxSlopef,0,__ZNSt3__110moneypunctIwLb0EED1Ev
,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZL12compareItemXPKvS0_275,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIcc10_mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_
,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI10_mbstate_tEEj
,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZN11DebugDrawGL3endEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev
,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__Z17debugDrawContoursv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv
,0,__ZL12compareItemXPKvS0_,0,__Z5buildv,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci
,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZNKSt3__17codecvtIDic10_mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZN10emscripten8internal7InvokerIbJEE6invokeEPFbvE,0,__ZNKSt3__17codecvtIDic10_mbstate_tE13do_max_lengthEv
,0,__ZNKSt3__17codecvtIDic10_mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__Z19bareGeomAddTriangleiiii,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv
,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIwc10_mbstate_tED0Ev,0,__ZL12compareItemYPKvS0_,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNSt3__17codecvtIDsc10_mbstate_tED0Ev
,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNSt3__18ios_base7failureD0Ev
,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev
,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic10_mbstate_tE16do_always_noconvEv,0,__ZN10emscripten8internal7InvokerIvJfffiEE6invokeEPFvfffiEfffi,0,___cxx_global_array_dtor105
,0,__ZNKSt3__17codecvtIwc10_mbstate_tE13do_max_lengthEv,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__17codecvtIDic10_mbstate_tED0Ev
,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv
,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__Z26debugDrawRegionConnectionsv,0,__ZN11DebugDrawGLD0Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv
,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__Z14set_cellHeightf,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc
,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev
,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,___ZN10emscripten8internal7InvokerIvJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvS8_EPNS0_11BindingTypeIS8_E3$_0E_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__Z17set_regionMinSizef,0,__ZNKSt3__18numpunctIwE12do_falsenameEv
,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZN11DebugDrawGL7textureEb,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev
,0,___ZN10emscripten8internal7InvokerIvJffffffiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvffffffiS8_EffffffiPNS0_11BindingTypeIS8_E3$_0E_,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe
,0,__ZNKSt3__17codecvtIcc10_mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__Z18getNavMeshVerticesNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI10_mbstate_tEEj,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv
,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEi
,0,__ZNSt3__18numpunctIwED0Ev,0,__ZL12compareItemYPKvS0_276,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__Z16debugDrawNavMeshh
,0,__Z15set_agentRadiusf,0,__ZN10emscripten8internal7InvokerIvJfEE6invokeEPFvfEf,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev
,0,__ZNKSt3__17codecvtIwc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNKSt3__17codecvtIwc10_mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_
,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__Z20debugDrawRawContoursv
,0,___ZN10emscripten8internal7InvokerIvJffffffNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvffffffS8_EffffffPNS0_11BindingTypeIS8_E3$_0E_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZN11DebugDrawGL6vertexEPKfjS1_
,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDic10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE
,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNKSt3__17codecvtIcc10_mbstate_tE13do_max_lengthEv
,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIcc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt9bad_alloc4whatEv
,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZN11DebugDrawGL6vertexEfffj,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv
,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__Z15findNearestPolyffffffNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZN11DebugDrawGLD1Ev,0,__ZNKSt3__17codecvtIcc10_mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv
,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv
,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv
,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev
,0,__Z4initv,0,__Z15set_agentHeightf,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__17codecvtIwc10_mbstate_tED2Ev
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv
,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__Z16set_edgeMaxErrorf,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev
,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE
,0,___getTypeName,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE11do_encodingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEi,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi
,0,__ZN10emscripten8internal7InvokerIvJiiiiEE6invokeEPFviiiiEiiii,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__Z20set_detailSampleDistf,0,___cxx_global_array_dtor120];
// EMSCRIPTEN_START_FUNCS
function __Z11duAppendArcP11duDebugDrawfffffffffj($dd, $x0, $y0, $z0, $x1, $y1, $z1, $as0, $col) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 var $p = sp;
 var $q = sp + 16;
 var $p1 = sp + 32;
 var $q2 = sp + 48;
 if (($dd | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $3 = $x1 - $x0;
 var $4 = $y1 - $y0;
 var $5 = $z1 - $z0;
 var $12 = Math.sqrt($3 * $3 + $4 * $4 + $5 * $5) * .25;
 var $14 = $3 * .05000000074505806 + $x0;
 var $17 = $12 * .19000005722045898;
 var $18 = $4 * .05000000074505806 + $y0 + $17;
 var $20 = $5 * .05000000074505806 + $z0;
 var $21 = $dd;
 var $24 = $20;
 var $23 = $18;
 var $prev_sroa_0_0_load7475 = $14;
 var $i_076 = 1;
 while (1) {
  var $i_076;
  var $prev_sroa_0_0_load7475;
  var $23;
  var $24;
  var $27 = ($i_076 | 0) * .11249999701976776 + .05000000074505806;
  var $29 = $3 * $27 + $x0;
  var $33 = $27 * 2 - 1;
  var $37 = $4 * $27 + $y0 + $12 * (1 - $33 * $33);
  var $39 = $5 * $27 + $z0;
  FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 24 >> 2]]($dd, $prev_sroa_0_0_load7475, $23, $24, $col);
  FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 24 >> 2]]($dd, $29, $37, $39, $col);
  var $46 = $i_076 + 1 | 0;
  if (($46 | 0) < 9) {
   var $24 = $39;
   var $23 = $37;
   var $prev_sroa_0_0_load7475 = $29;
   var $i_076 = $46;
  } else {
   break;
  }
 }
 if ($as0 > .0010000000474974513) {
  var $51 = $p | 0;
  HEAPF32[$51 >> 2] = $14;
  HEAPF32[$p + 4 >> 2] = $18;
  HEAPF32[$p + 8 >> 2] = $20;
  var $54 = $q | 0;
  HEAPF32[$54 >> 2] = $3 * .10000000149011612 + $x0;
  HEAPF32[$q + 4 >> 2] = $4 * .10000000149011612 + $y0 + $12 * .35999995470046997;
  HEAPF32[$q + 8 >> 2] = $5 * .10000000149011612 + $z0;
  __Z15appendArrowHeadP11duDebugDrawPKfS2_fj($dd, $51, $54, $as0, $col);
 }
 var $66 = $p1 | 0;
 HEAPF32[$66 >> 2] = $3 * .949999988079071 + $x0;
 HEAPF32[$p1 + 4 >> 2] = $4 * .949999988079071 + $y0 + $17;
 HEAPF32[$p1 + 8 >> 2] = $5 * .949999988079071 + $z0;
 var $76 = $q2 | 0;
 HEAPF32[$76 >> 2] = $3 * .8999999761581421 + $x0;
 HEAPF32[$q2 + 4 >> 2] = $4 * .8999999761581421 + $y0 + $12 * .3600000739097595;
 HEAPF32[$q2 + 8 >> 2] = $5 * .8999999761581421 + $z0;
 __Z15appendArrowHeadP11duDebugDrawPKfS2_fj($dd, $66, $76, .6000000238418579, $col);
 STACKTOP = sp;
 return;
}
function __Z14duAppendCircleP11duDebugDrawffffj($dd, $x, $y, $z, $r, $col) {
 if (($dd | 0) == 0) {
  return;
 }
 if (!HEAP8[9728]) {
  HEAP8[9728] = 1;
  var $i_026 = 0;
  while (1) {
   var $i_026;
   var $9 = ($i_026 | 0) / 40 * 3.1415927410125732 * 2;
   var $11 = $i_026 << 1;
   HEAPF32[20440 + ($11 << 2) >> 2] = Math.cos($9);
   HEAPF32[20440 + (($11 | 1) << 2) >> 2] = Math.sin($9);
   var $16 = $i_026 + 1 | 0;
   if (($16 | 0) < 40) {
    var $i_026 = $16;
   } else {
    break;
   }
  }
 }
 var $3 = $dd;
 var $i1_024 = 0;
 var $j_025 = 39;
 while (1) {
  var $j_025;
  var $i1_024;
  var $22 = $j_025 << 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($dd, HEAPF32[20440 + ($22 << 2) >> 2] * $r + $x, $y, HEAPF32[20440 + (($22 | 1) << 2) >> 2] * $r + $z, $col);
  var $35 = $i1_024 << 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($dd, HEAPF32[20440 + ($35 << 2) >> 2] * $r + $x, $y, HEAPF32[20440 + (($35 | 1) << 2) >> 2] * $r + $z, $col);
  var $45 = $i1_024 + 1 | 0;
  if (($45 | 0) < 40) {
   var $j_025 = $i1_024;
   var $i1_024 = $45;
  } else {
   break;
  }
 }
 return;
}
function __Z15appendArrowHeadP11duDebugDrawPKfS2_fj($dd, $p, $q, $s, $col) {
 if (($dd | 0) == 0) {
  return;
 }
 var $3 = HEAPF32[$p >> 2];
 var $4 = HEAPF32[$q >> 2];
 var $5 = $3 - $4;
 var $6 = $p + 4 | 0;
 var $7 = HEAPF32[$6 >> 2];
 var $9 = HEAPF32[$q + 4 >> 2];
 var $10 = $7 - $9;
 var $11 = $p + 8 | 0;
 var $12 = HEAPF32[$11 >> 2];
 var $14 = HEAPF32[$q + 8 >> 2];
 var $15 = $12 - $14;
 if ($5 * $5 + $10 * $10 + $15 * $15 < 10000001111620804e-22) {
  return;
 }
 var $23 = $4 - $3;
 var $24 = $9 - $7;
 var $25 = $14 - $12;
 var $32 = 1 / Math.sqrt($23 * $23 + $24 * $24 + $25 * $25);
 var $33 = $23 * $32;
 var $35 = $25 * $32;
 var $36 = 0;
 var $42 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$42 >> 2] + 20 >> 2]]($dd, $p, $col);
 var $46 = $dd;
 var $51 = $33 * $s;
 var $54 = ($35 - $36) * $s / 3;
 var $57 = $24 * $32 * $s;
 var $60 = (0 - 0) * $s / 3;
 var $63 = $35 * $s;
 var $66 = ($36 - $33) * $s / 3;
 FUNCTION_TABLE[HEAP32[HEAP32[$46 >> 2] + 24 >> 2]]($dd, $51 + HEAPF32[$p >> 2] + $54, $57 + HEAPF32[$6 >> 2] + $60, $63 + HEAPF32[$11 >> 2] + $66, $col);
 FUNCTION_TABLE[HEAP32[HEAP32[$42 >> 2] + 20 >> 2]]($dd, $p, $col);
 FUNCTION_TABLE[HEAP32[HEAP32[$46 >> 2] + 24 >> 2]]($dd, $51 + HEAPF32[$p >> 2] - $54, $57 + HEAPF32[$6 >> 2] - $60, $63 + HEAPF32[$11 >> 2] - $66, $col);
 return;
}
function __ZL12drawMeshTileP11duDebugDrawRK9dtNavMeshPK14dtNavMeshQueryPK10dtMeshTileh($dd, $mesh, $query, $tile, $flags) {
 var label = 0;
 if (($tile | 0) == 0) {
  var $_0_i = 0;
  var $20 = HEAP32[$mesh + 76 >> 2];
  var $19 = HEAP32[$mesh + 80 >> 2];
 } else {
  var $12 = HEAP32[$mesh + 80 >> 2];
  var $14 = HEAP32[$mesh + 76 >> 2];
  var $_0_i = HEAP32[$tile >> 2] << $14 + $12 | (($tile - HEAP32[$mesh + 68 >> 2] | 0) / 60 & -1) << $12;
  var $20 = $14;
  var $19 = $12;
 }
 var $19;
 var $20;
 var $_0_i;
 var $24 = $_0_i >>> ($19 >>> 0) & (1 << $20) - 1;
 var $25 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 8 >> 2]]($dd, 0);
 var $29 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 16 >> 2]]($dd, 2, 1);
 var $33 = $tile + 8 | 0;
 var $34 = HEAP32[$33 >> 2];
 if ((HEAP32[$34 + 24 >> 2] | 0) > 0) {
  var $38 = $tile + 12 | 0;
  var $39 = $tile + 24 | 0;
  var $40 = ($query | 0) == 0;
  var $42 = ($flags & 4) == 0;
  var $43 = $tile + 32 | 0;
  var $44 = $dd;
  var $45 = $tile + 16 | 0;
  var $46 = $tile + 28 | 0;
  var $72 = (($24 >>> 3 << 1 & 2 | $24 >>> 1 & 1) * 63 & -1) + 63 | (($24 >>> 4 << 1 & 2 | $24 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($24 >>> 5 << 1 & 2 | $24 & 1, 4128768) + 4128768 | -2147483648;
  var $73 = $query + 56 | 0;
  var $i_0158 = 0;
  var $74 = $34;
  while (1) {
   var $74;
   var $i_0158;
   var $75 = HEAP32[$38 >> 2];
   var $77 = HEAP8[$75 + ($i_0158 << 5) + 31 | 0];
   do {
    if (($77 & -64) << 24 >> 24 == 64) {
     var $199 = $74;
    } else {
     var $80 = HEAP32[$39 >> 2];
     L42 : do {
      if ($40) {
       label = 40;
      } else {
       var $82 = $i_0158 | $_0_i;
       var $83 = HEAP32[$73 >> 2];
       if (($83 | 0) == 0) {
        label = 40;
        break;
       }
       var $88 = $82 + ~($82 << 15) | 0;
       var $91 = ($88 >>> 10 ^ $88) * 9 & -1;
       var $93 = $91 >>> 6 ^ $91;
       var $96 = $93 + ~($93 << 11) | 0;
       var $i_07_i_i = HEAP16[HEAP32[$83 + 4 >> 2] + ((HEAP32[$83 + 16 >> 2] - 1 & ($96 >>> 16 ^ $96)) << 1) >> 1];
       if ($i_07_i_i << 16 >> 16 == -1) {
        label = 40;
        break;
       }
       var $108 = HEAP32[$83 >> 2];
       var $109 = $83 + 8 | 0;
       var $_in_i_i = $i_07_i_i;
       while (1) {
        var $_in_i_i;
        var $111 = $_in_i_i & 65535;
        if ((HEAP32[$108 + ($111 * 28 & -1) + 24 >> 2] | 0) == ($82 | 0)) {
         break;
        }
        var $i_0_i_i = HEAP16[HEAP32[$109 >> 2] + ($111 << 1) >> 1];
        if ($i_0_i_i << 16 >> 16 == -1) {
         label = 40;
         break L42;
        } else {
         var $_in_i_i = $i_0_i_i;
        }
       }
       if (($108 + ($111 * 28 & -1) | 0) == 0) {
        label = 40;
        break;
       }
       var $124 = (HEAP32[$108 + ($111 * 28 & -1) + 20 >> 2] | 0) < 0;
       if ($124 | $42 ^ 1) {
        var $col_0 = $124 ? 1073792255 : $72;
       } else {
        label = 41;
       }
      }
     } while (0);
     if (label == 40) {
      label = 0;
      if ($42) {
       label = 41;
      } else {
       var $col_0 = $72;
      }
     }
     do {
      if (label == 41) {
       label = 0;
       var $126 = $77 & 63;
       if ($126 << 24 >> 24 == 0) {
        var $col_0 = 1090502656;
        break;
       }
       var $129 = $126 & 255;
       var $col_0 = (($129 >>> 3 << 1 & 2 | $129 >>> 1 & 1) * 63 & -1) + 63 | (($129 >>> 4 << 1 & 2 | $129 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($129 >>> 5 << 1 | $129 & 1, 4128768) + 4128768 | 1073741824;
      }
     } while (0);
     var $col_0;
     var $156 = $80 + ($i_0158 * 12 & -1) + 9 | 0;
     if ((HEAP8[$156] | 0) == 0) {
      var $199 = $74;
      break;
     }
     var $159 = $80 + ($i_0158 * 12 & -1) + 4 | 0;
     var $160 = $75 + ($i_0158 << 5) + 30 | 0;
     var $161 = $80 + ($i_0158 * 12 & -1) | 0;
     var $j_0155 = 0;
     while (1) {
      var $j_0155;
      var $165 = HEAP32[$159 >> 2] + $j_0155 << 2;
      var $166 = HEAP32[$43 >> 2];
      var $168 = HEAP8[$166 + $165 | 0];
      var $169 = $168 & 255;
      var $170 = HEAP8[$160];
      var $174 = HEAP32[HEAP32[$44 >> 2] + 20 >> 2];
      if (($168 & 255) < ($170 & 255)) {
       FUNCTION_TABLE[$174]($dd, HEAP32[$45 >> 2] + ((HEAPU16[$75 + ($i_0158 << 5) + 4 + ($169 << 1) >> 1] * 3 & -1) << 2) | 0, $col_0);
      } else {
       FUNCTION_TABLE[$174]($dd, HEAP32[$46 >> 2] + ((($169 - ($170 & 255) + HEAP32[$161 >> 2]) * 3 & -1) << 2) | 0, $col_0);
      }
      var $192 = HEAP8[$166 + ($165 | 1) | 0];
      var $193 = $192 & 255;
      var $194 = HEAP8[$160];
      var $198 = HEAP32[HEAP32[$44 >> 2] + 20 >> 2];
      if (($192 & 255) < ($194 & 255)) {
       FUNCTION_TABLE[$198]($dd, HEAP32[$45 >> 2] + ((HEAPU16[$75 + ($i_0158 << 5) + 4 + ($193 << 1) >> 1] * 3 & -1) << 2) | 0, $col_0);
      } else {
       FUNCTION_TABLE[$198]($dd, HEAP32[$46 >> 2] + ((($193 - ($194 & 255) + HEAP32[$161 >> 2]) * 3 & -1) << 2) | 0, $col_0);
      }
      var $623 = HEAP8[$166 + ($165 | 2) | 0];
      var $624 = $623 & 255;
      var $625 = HEAP8[$160];
      var $629 = HEAP32[HEAP32[$44 >> 2] + 20 >> 2];
      if (($623 & 255) < ($625 & 255)) {
       FUNCTION_TABLE[$629]($dd, HEAP32[$45 >> 2] + ((HEAPU16[$75 + ($i_0158 << 5) + 4 + ($624 << 1) >> 1] * 3 & -1) << 2) | 0, $col_0);
      } else {
       FUNCTION_TABLE[$629]($dd, HEAP32[$46 >> 2] + ((($624 - ($625 & 255) + HEAP32[$161 >> 2]) * 3 & -1) << 2) | 0, $col_0);
      }
      var $646 = $j_0155 + 1 | 0;
      if (($646 | 0) < (HEAPU8[$156] | 0)) {
       var $j_0155 = $646;
      } else {
       break;
      }
     }
     var $199 = HEAP32[$33 >> 2];
    }
   } while (0);
   var $199;
   var $200 = $i_0158 + 1 | 0;
   if (($200 | 0) < (HEAP32[$199 + 24 >> 2] | 0)) {
    var $i_0158 = $200;
    var $74 = $199;
   } else {
    break;
   }
  }
 }
 var $204 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$204 >> 2] + 36 >> 2]]($dd);
 __ZL18drawPolyBoundariesP11duDebugDrawPK10dtMeshTilejfb($dd, $tile, 541077504, 1.5, 1);
 __ZL18drawPolyBoundariesP11duDebugDrawPK10dtMeshTilejfb($dd, $tile, -599773184, 2.5, 0);
 if (($flags & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 16 >> 2]]($dd, 1, 2);
  var $214 = HEAP32[$33 >> 2];
  L77 : do {
   if ((HEAP32[$214 + 24 >> 2] | 0) > 0) {
    var $218 = $tile + 12 | 0;
    var $220 = $tile + 40 | 0;
    var $221 = $tile + 16 | 0;
    var $222 = $dd;
    var $223 = $tile + 20 | 0;
    if (($query | 0) == 0) {
     var $i1_0149_us = 0;
     var $_pre168 = $214;
     while (1) {
      var $_pre168;
      var $i1_0149_us;
      var $225 = HEAP32[$218 >> 2];
      var $227 = HEAP8[$225 + ($i1_0149_us << 5) + 31 | 0];
      if (($227 & -64) << 24 >> 24 == 64) {
       var $231 = $227 & 63;
       var $255 = (($231 >>> 3 << 1 & 2 | $231 >>> 1 & 1) * 63 & -1) + 63 | (($231 >>> 4 << 1 & 2 | $231 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($231 >>> 5 << 1 | $231 & 1, 4128768) + 4128768;
       var $260 = $255 >>> 1 & 8355711 | ($255 & 587202560 | -603979776);
       var $263 = $i1_0149_us - HEAP32[$_pre168 + 56 >> 2] | 0;
       var $264 = HEAP32[$220 >> 2];
       var $268 = HEAPU16[$225 + ($i1_0149_us << 5) + 4 >> 1] * 3 & -1;
       var $269 = HEAP32[$221 >> 2];
       var $270 = $269 + ($268 << 2) | 0;
       var $274 = HEAPU16[$225 + ($i1_0149_us << 5) + 6 >> 1] * 3 & -1;
       var $275 = $269 + ($274 << 2) | 0;
       var $k4_0141_us = HEAP32[$225 + ($i1_0149_us << 5) >> 2];
       if (($k4_0141_us | 0) == -1) {
        var $startSet_0_off0_lcssa_us = -1005575972;
        var $endSet_0_off0_lcssa_us = -1005575972;
       } else {
        var $374 = HEAP32[$223 >> 2];
        var $startSet_0_off0142_us = 0;
        var $endSet_0_off0143_us = 0;
        var $k4_0144_us = $k4_0141_us;
        while (1) {
         var $k4_0144_us;
         var $endSet_0_off0143_us;
         var $startSet_0_off0142_us;
         var $280 = HEAP8[$374 + ($k4_0144_us * 12 & -1) + 8 | 0];
         var $_startSet_0_off0_us = $280 << 24 >> 24 == 0 | $startSet_0_off0142_us;
         var $endSet_1_off0_us = $280 << 24 >> 24 == 1 | $endSet_0_off0143_us;
         var $k4_0_us = HEAP32[$374 + ($k4_0144_us * 12 & -1) + 4 >> 2];
         if (($k4_0_us | 0) == -1) {
          break;
         } else {
          var $startSet_0_off0142_us = $_startSet_0_off0_us;
          var $endSet_0_off0143_us = $endSet_1_off0_us;
          var $k4_0144_us = $k4_0_us;
         }
        }
        var $startSet_0_off0_lcssa_us = $_startSet_0_off0_us ? $260 : -1005575972;
        var $endSet_0_off0_lcssa_us = $endSet_1_off0_us ? $260 : -1005575972;
       }
       var $endSet_0_off0_lcssa_us;
       var $startSet_0_off0_lcssa_us;
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$270 >> 2], HEAPF32[$269 + ($268 + 1 << 2) >> 2], HEAPF32[$269 + ($268 + 2 << 2) >> 2], $260);
       var $297 = $264 + ($263 * 36 & -1) | 0;
       var $299 = $264 + ($263 * 36 & -1) + 4 | 0;
       var $301 = $264 + ($263 * 36 & -1) + 8 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$297 >> 2], HEAPF32[$299 >> 2], HEAPF32[$301 >> 2], $260);
       var $307 = $264 + ($263 * 36 & -1) + 24 | 0;
       __Z14duAppendCircleP11duDebugDrawffffj($dd, HEAPF32[$297 >> 2], HEAPF32[$299 >> 2] + .10000000149011612, HEAPF32[$301 >> 2], HEAPF32[$307 >> 2], $startSet_0_off0_lcssa_us);
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$275 >> 2], HEAPF32[$269 + ($274 + 1 << 2) >> 2], HEAPF32[$269 + ($274 + 2 << 2) >> 2], $260);
       var $320 = $264 + ($263 * 36 & -1) + 12 | 0;
       var $322 = $264 + ($263 * 36 & -1) + 16 | 0;
       var $324 = $264 + ($263 * 36 & -1) + 20 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$320 >> 2], HEAPF32[$322 >> 2], HEAPF32[$324 >> 2], $260);
       __Z14duAppendCircleP11duDebugDrawffffj($dd, HEAPF32[$320 >> 2], HEAPF32[$322 >> 2] + .10000000149011612, HEAPF32[$324 >> 2], HEAPF32[$307 >> 2], $endSet_0_off0_lcssa_us);
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$297 >> 2], HEAPF32[$299 >> 2], HEAPF32[$301 >> 2], -1002426368);
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$297 >> 2], HEAPF32[$299 >> 2] + .20000000298023224, HEAPF32[$301 >> 2], -1002426368);
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$320 >> 2], HEAPF32[$322 >> 2], HEAPF32[$324 >> 2], -1002426368);
       FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$320 >> 2], HEAPF32[$322 >> 2] + .20000000298023224, HEAPF32[$324 >> 2], -1002426368);
       __Z11duAppendArcP11duDebugDrawfffffffffj($dd, HEAPF32[$297 >> 2], HEAPF32[$299 >> 2], HEAPF32[$301 >> 2], HEAPF32[$320 >> 2], HEAPF32[$322 >> 2], HEAPF32[$324 >> 2], (HEAP8[$264 + ($263 * 36 & -1) + 30 | 0] & 1) != 0 ? .6000000238418579 : 0, $260);
       var $369 = HEAP32[$33 >> 2];
      } else {
       var $369 = $_pre168;
      }
      var $369;
      var $370 = $i1_0149_us + 1 | 0;
      if (($370 | 0) < (HEAP32[$369 + 24 >> 2] | 0)) {
       var $i1_0149_us = $370;
       var $_pre168 = $369;
      } else {
       break L77;
      }
     }
    }
    var $224 = $query + 56 | 0;
    var $i1_0149 = 0;
    var $375 = $214;
    while (1) {
     var $375;
     var $i1_0149;
     var $376 = HEAP32[$218 >> 2];
     var $378 = HEAP8[$376 + ($i1_0149 << 5) + 31 | 0];
     if (($378 & -64) << 24 >> 24 == 64) {
      var $381 = $i1_0149 | $_0_i;
      var $382 = HEAP32[$224 >> 2];
      L96 : do {
       if (($382 | 0) == 0) {
        label = 70;
       } else {
        var $387 = $381 + ~($381 << 15) | 0;
        var $390 = ($387 >>> 10 ^ $387) * 9 & -1;
        var $392 = $390 >>> 6 ^ $390;
        var $395 = $392 + ~($392 << 11) | 0;
        var $i_07_i_i2 = HEAP16[HEAP32[$382 + 4 >> 2] + ((HEAP32[$382 + 16 >> 2] - 1 & ($395 >>> 16 ^ $395)) << 1) >> 1];
        if ($i_07_i_i2 << 16 >> 16 == -1) {
         label = 70;
         break;
        }
        var $407 = HEAP32[$382 >> 2];
        var $408 = $382 + 8 | 0;
        var $_in_i_i4 = $i_07_i_i2;
        while (1) {
         var $_in_i_i4;
         var $410 = $_in_i_i4 & 65535;
         if ((HEAP32[$407 + ($410 * 28 & -1) + 24 >> 2] | 0) == ($381 | 0)) {
          break;
         }
         var $i_0_i_i5 = HEAP16[HEAP32[$408 >> 2] + ($410 << 1) >> 1];
         if ($i_0_i_i5 << 16 >> 16 == -1) {
          label = 70;
          break L96;
         } else {
          var $_in_i_i4 = $i_0_i_i5;
         }
        }
        if (($407 + ($410 * 28 & -1) | 0) == 0) {
         label = 70;
         break;
        }
        if ((HEAP32[$407 + ($410 * 28 & -1) + 20 >> 2] | 0) < 0) {
         var $col3_0 = -603929345;
        } else {
         label = 70;
        }
       }
      } while (0);
      if (label == 70) {
       label = 0;
       var $425 = $378 & 63;
       var $449 = (($425 >>> 3 << 1 & 2 | $425 >>> 1 & 1) * 63 & -1) + 63 | (($425 >>> 4 << 1 & 2 | $425 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($425 >>> 5 << 1 | $425 & 1, 4128768) + 4128768;
       var $col3_0 = $449 >>> 1 & 8355711 | ($449 & 587202560 | -603979776);
      }
      var $col3_0;
      var $458 = $i1_0149 - HEAP32[$375 + 56 >> 2] | 0;
      var $459 = HEAP32[$220 >> 2];
      var $463 = HEAPU16[$376 + ($i1_0149 << 5) + 4 >> 1] * 3 & -1;
      var $464 = HEAP32[$221 >> 2];
      var $465 = $464 + ($463 << 2) | 0;
      var $469 = HEAPU16[$376 + ($i1_0149 << 5) + 6 >> 1] * 3 & -1;
      var $470 = $464 + ($469 << 2) | 0;
      var $k4_0141 = HEAP32[$376 + ($i1_0149 << 5) >> 2];
      if (($k4_0141 | 0) == -1) {
       var $startSet_0_off0_lcssa = -1005575972;
       var $endSet_0_off0_lcssa = -1005575972;
      } else {
       var $473 = HEAP32[$223 >> 2];
       var $startSet_0_off0142 = 0;
       var $endSet_0_off0143 = 0;
       var $k4_0144 = $k4_0141;
       while (1) {
        var $k4_0144;
        var $endSet_0_off0143;
        var $startSet_0_off0142;
        var $476 = HEAP8[$473 + ($k4_0144 * 12 & -1) + 8 | 0];
        var $_startSet_0_off0 = $476 << 24 >> 24 == 0 | $startSet_0_off0142;
        var $endSet_1_off0 = $476 << 24 >> 24 == 1 | $endSet_0_off0143;
        var $k4_0 = HEAP32[$473 + ($k4_0144 * 12 & -1) + 4 >> 2];
        if (($k4_0 | 0) == -1) {
         break;
        } else {
         var $startSet_0_off0142 = $_startSet_0_off0;
         var $endSet_0_off0143 = $endSet_1_off0;
         var $k4_0144 = $k4_0;
        }
       }
       var $startSet_0_off0_lcssa = $_startSet_0_off0 ? $col3_0 : -1005575972;
       var $endSet_0_off0_lcssa = $endSet_1_off0 ? $col3_0 : -1005575972;
      }
      var $endSet_0_off0_lcssa;
      var $startSet_0_off0_lcssa;
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$465 >> 2], HEAPF32[$464 + ($463 + 1 << 2) >> 2], HEAPF32[$464 + ($463 + 2 << 2) >> 2], $col3_0);
      var $493 = $459 + ($458 * 36 & -1) | 0;
      var $495 = $459 + ($458 * 36 & -1) + 4 | 0;
      var $497 = $459 + ($458 * 36 & -1) + 8 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$493 >> 2], HEAPF32[$495 >> 2], HEAPF32[$497 >> 2], $col3_0);
      var $503 = $459 + ($458 * 36 & -1) + 24 | 0;
      __Z14duAppendCircleP11duDebugDrawffffj($dd, HEAPF32[$493 >> 2], HEAPF32[$495 >> 2] + .10000000149011612, HEAPF32[$497 >> 2], HEAPF32[$503 >> 2], $startSet_0_off0_lcssa);
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$470 >> 2], HEAPF32[$464 + ($469 + 1 << 2) >> 2], HEAPF32[$464 + ($469 + 2 << 2) >> 2], $col3_0);
      var $516 = $459 + ($458 * 36 & -1) + 12 | 0;
      var $518 = $459 + ($458 * 36 & -1) + 16 | 0;
      var $520 = $459 + ($458 * 36 & -1) + 20 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$516 >> 2], HEAPF32[$518 >> 2], HEAPF32[$520 >> 2], $col3_0);
      __Z14duAppendCircleP11duDebugDrawffffj($dd, HEAPF32[$516 >> 2], HEAPF32[$518 >> 2] + .10000000149011612, HEAPF32[$520 >> 2], HEAPF32[$503 >> 2], $endSet_0_off0_lcssa);
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$493 >> 2], HEAPF32[$495 >> 2], HEAPF32[$497 >> 2], -1002426368);
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$493 >> 2], HEAPF32[$495 >> 2] + .20000000298023224, HEAPF32[$497 >> 2], -1002426368);
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$516 >> 2], HEAPF32[$518 >> 2], HEAPF32[$520 >> 2], -1002426368);
      FUNCTION_TABLE[HEAP32[HEAP32[$222 >> 2] + 24 >> 2]]($dd, HEAPF32[$516 >> 2], HEAPF32[$518 >> 2] + .20000000298023224, HEAPF32[$520 >> 2], -1002426368);
      __Z11duAppendArcP11duDebugDrawfffffffffj($dd, HEAPF32[$493 >> 2], HEAPF32[$495 >> 2], HEAPF32[$497 >> 2], HEAPF32[$516 >> 2], HEAPF32[$518 >> 2], HEAPF32[$520 >> 2], (HEAP8[$459 + ($458 * 36 & -1) + 30 | 0] & 1) != 0 ? .6000000238418579 : 0, $col3_0);
      var $565 = HEAP32[$33 >> 2];
     } else {
      var $565 = $375;
     }
     var $565;
     var $566 = $i1_0149 + 1 | 0;
     if (($566 | 0) < (HEAP32[$565 + 24 >> 2] | 0)) {
      var $i1_0149 = $566;
      var $375 = $565;
     } else {
      break;
     }
    }
   }
  } while (0);
  FUNCTION_TABLE[HEAP32[HEAP32[$204 >> 2] + 36 >> 2]]($dd);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 16 >> 2]]($dd, 0, 3);
 if ((HEAP32[HEAP32[$33 >> 2] + 28 >> 2] | 0) <= 0) {
  var $600 = HEAP32[$204 >> 2];
  var $601 = $600 + 36 | 0;
  var $602 = HEAP32[$601 >> 2];
  FUNCTION_TABLE[$602]($dd);
  var $603 = HEAP32[$25 >> 2];
  var $604 = $603 + 8 | 0;
  var $605 = HEAP32[$604 >> 2];
  FUNCTION_TABLE[$605]($dd, 1);
  return;
 }
 var $581 = $tile + 16 | 0;
 var $582 = $dd;
 var $i5_0140 = 0;
 while (1) {
  var $i5_0140;
  var $584 = $i5_0140 * 3 & -1;
  var $585 = HEAP32[$581 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$582 >> 2] + 24 >> 2]]($dd, HEAPF32[$585 + ($584 << 2) >> 2], HEAPF32[$585 + ($584 + 1 << 2) >> 2], HEAPF32[$585 + ($584 + 2 << 2) >> 2], -1006632960);
  var $595 = $i5_0140 + 1 | 0;
  if (($595 | 0) < (HEAP32[HEAP32[$33 >> 2] + 28 >> 2] | 0)) {
   var $i5_0140 = $595;
  } else {
   break;
  }
 }
 var $600 = HEAP32[$204 >> 2];
 var $601 = $600 + 36 | 0;
 var $602 = HEAP32[$601 >> 2];
 FUNCTION_TABLE[$602]($dd);
 var $603 = HEAP32[$25 >> 2];
 var $604 = $603 + 8 | 0;
 var $605 = HEAP32[$604 >> 2];
 FUNCTION_TABLE[$605]($dd, 1);
 return;
}
function __Z25duDebugDrawNavMeshPortalsP11duDebugDrawRK9dtNavMesh($dd, $mesh) {
 if (($dd | 0) == 0) {
  return;
 }
 var $2 = $mesh + 48 | 0;
 var $3 = HEAP32[$2 >> 2];
 if (($3 | 0) <= 0) {
  return;
 }
 var $5 = $dd;
 var $6 = $dd;
 var $7 = $dd;
 var $8 = $mesh + 68 | 0;
 var $i_08 = 0;
 var $9 = $3;
 while (1) {
  var $9;
  var $i_08;
  var $10 = HEAP32[$8 >> 2];
  var $11 = $10 + ($i_08 * 60 & -1) + 8 | 0;
  var $12 = HEAP32[$11 >> 2];
  if (($12 | 0) == 0) {
   var $253 = $9;
  } else {
   var $16 = HEAPF32[$12 + 68 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($dd, 1, 2);
   var $20 = $10 + ($i_08 * 60 & -1) + 12 | 0;
   var $21 = $10 + ($i_08 * 60 & -1) + 16 | 0;
   var $side_0133_i = 0;
   var $22 = HEAP32[$11 >> 2];
   while (1) {
    var $22;
    var $side_0133_i;
    if ((HEAP32[$22 + 24 >> 2] | 0) > 0) {
     var $26 = $side_0133_i | 32768;
     var $27 = ($side_0133_i | 0) == 0;
     var $28 = ($side_0133_i | 0) == 2;
     var $_126_i = $28 ? -2147450880 : -2139062272;
     var $29 = $28 ? -.03999999910593033 : .03999999910593033;
     var $__i = $27 ? -2147483520 : -2139094912;
     var $30 = $27 ? -.03999999910593033 : .03999999910593033;
     var $31 = ($side_0133_i | 0) == 4;
     var $i_0128_i = 0;
     var $32 = $22;
     while (1) {
      var $32;
      var $i_0128_i;
      var $33 = HEAP32[$20 >> 2];
      var $35 = HEAP8[$33 + ($i_0128_i << 5) + 30 | 0];
      var $36 = $35 & 255;
      if ($35 << 24 >> 24 == 0) {
       var $241 = $32;
      } else {
       if ($31) {
        var $j_0127_us_i = 0;
        while (1) {
         var $j_0127_us_i;
         if ((HEAPU16[$33 + ($i_0128_i << 5) + 16 + ($j_0127_us_i << 1) >> 1] | 0) == ($26 | 0)) {
          var $46 = HEAPU16[$33 + ($i_0128_i << 5) + 4 + ($j_0127_us_i << 1) >> 1] * 3 & -1;
          var $47 = HEAP32[$21 >> 2];
          var $49 = $j_0127_us_i + 1 | 0;
          var $54 = HEAPU16[$33 + ($i_0128_i << 5) + 4 + ((($49 | 0) % ($36 | 0) & -1) << 1) >> 1] * 3 & -1;
          var $56 = $30 + HEAPF32[$47 + ($46 << 2) >> 2];
          var $60 = $47 + ($46 + 1 << 2) | 0;
          var $63 = $47 + ($46 + 2 << 2) | 0;
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, HEAPF32[$60 >> 2] - $16, HEAPF32[$63 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, $16 + HEAPF32[$60 >> 2], HEAPF32[$63 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, $16 + HEAPF32[$60 >> 2], HEAPF32[$63 >> 2], $__i);
          var $80 = $47 + ($54 + 1 << 2) | 0;
          var $83 = $47 + ($54 + 2 << 2) | 0;
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, $16 + HEAPF32[$80 >> 2], HEAPF32[$83 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, $16 + HEAPF32[$80 >> 2], HEAPF32[$83 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, HEAPF32[$80 >> 2] - $16, HEAPF32[$83 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, HEAPF32[$80 >> 2] - $16, HEAPF32[$83 >> 2], $__i);
          FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $56, HEAPF32[$60 >> 2] - $16, HEAPF32[$63 >> 2], $__i);
          var $_pre_phi_i = $49;
         } else {
          var $_pre_phi_i = $j_0127_us_i + 1 | 0;
         }
         var $_pre_phi_i;
         if (($_pre_phi_i | 0) < ($36 | 0)) {
          var $j_0127_us_i = $_pre_phi_i;
         } else {
          break;
         }
        }
       } else {
        var $j_0127_i = 0;
        while (1) {
         var $j_0127_i;
         do {
          if ((HEAPU16[$33 + ($i_0128_i << 5) + 16 + ($j_0127_i << 1) >> 1] | 0) == ($26 | 0)) {
           var $119 = HEAPU16[$33 + ($i_0128_i << 5) + 4 + ($j_0127_i << 1) >> 1] * 3 & -1;
           var $120 = HEAP32[$21 >> 2];
           var $121 = $120 + ($119 << 2) | 0;
           var $122 = $j_0127_i + 1 | 0;
           var $127 = HEAPU16[$33 + ($i_0128_i << 5) + 4 + ((($122 | 0) % ($36 | 0) & -1) << 1) >> 1] * 3 & -1;
           var $128 = $120 + ($127 << 2) | 0;
           if (($side_0133_i | 0) == 4 | ($side_0133_i | 0) == 0) {
            var $131 = $30 + HEAPF32[$121 >> 2];
            var $135 = $120 + ($119 + 1 << 2) | 0;
            var $138 = $120 + ($119 + 2 << 2) | 0;
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, HEAPF32[$135 >> 2] - $16, HEAPF32[$138 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, $16 + HEAPF32[$135 >> 2], HEAPF32[$138 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, $16 + HEAPF32[$135 >> 2], HEAPF32[$138 >> 2], $__i);
            var $155 = $120 + ($127 + 1 << 2) | 0;
            var $158 = $120 + ($127 + 2 << 2) | 0;
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, $16 + HEAPF32[$155 >> 2], HEAPF32[$158 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, $16 + HEAPF32[$155 >> 2], HEAPF32[$158 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, HEAPF32[$155 >> 2] - $16, HEAPF32[$158 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, HEAPF32[$155 >> 2] - $16, HEAPF32[$158 >> 2], $__i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, $131, HEAPF32[$135 >> 2] - $16, HEAPF32[$138 >> 2], $__i);
            var $_pre_phi141_i = $122;
            break;
           } else if (($side_0133_i | 0) == 6 | ($side_0133_i | 0) == 2) {
            var $187 = $29 + HEAPF32[$120 + ($119 + 2 << 2) >> 2];
            var $192 = $120 + ($119 + 1 << 2) | 0;
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$121 >> 2], HEAPF32[$192 >> 2] - $16, $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$121 >> 2], $16 + HEAPF32[$192 >> 2], $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$121 >> 2], $16 + HEAPF32[$192 >> 2], $187, $_126_i);
            var $211 = $120 + ($127 + 1 << 2) | 0;
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$128 >> 2], $16 + HEAPF32[$211 >> 2], $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$128 >> 2], $16 + HEAPF32[$211 >> 2], $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$128 >> 2], HEAPF32[$211 >> 2] - $16, $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$128 >> 2], HEAPF32[$211 >> 2] - $16, $187, $_126_i);
            FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($dd, HEAPF32[$121 >> 2], HEAPF32[$192 >> 2] - $16, $187, $_126_i);
            var $_pre_phi141_i = $122;
            break;
           } else {
            var $_pre_phi141_i = $122;
            break;
           }
          } else {
           var $_pre_phi141_i = $j_0127_i + 1 | 0;
          }
         } while (0);
         var $_pre_phi141_i;
         if (($_pre_phi141_i | 0) < ($36 | 0)) {
          var $j_0127_i = $_pre_phi141_i;
         } else {
          break;
         }
        }
       }
       var $241 = HEAP32[$11 >> 2];
      }
      var $241;
      var $242 = $i_0128_i + 1 | 0;
      if (($242 | 0) < (HEAP32[$241 + 24 >> 2] | 0)) {
       var $i_0128_i = $242;
       var $32 = $241;
      } else {
       var $246 = $241;
       break;
      }
     }
    } else {
     var $246 = $22;
    }
    var $246;
    var $247 = $side_0133_i + 1 | 0;
    if (($247 | 0) < 8) {
     var $side_0133_i = $247;
     var $22 = $246;
    } else {
     break;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 36 >> 2]]($dd);
   var $253 = HEAP32[$2 >> 2];
  }
  var $253;
  var $254 = $i_08 + 1 | 0;
  if (($254 | 0) < ($253 | 0)) {
   var $i_08 = $254;
   var $9 = $253;
  } else {
   break;
  }
 }
 return;
}
function __ZL18drawPolyBoundariesP11duDebugDrawPK10dtMeshTilejfb($dd, $tile, $col, $linew, $inner) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $tv = sp;
 FUNCTION_TABLE[HEAP32[HEAP32[$dd >> 2] + 16 >> 2]]($dd, 1, $linew);
 var $5 = $tile + 8 | 0;
 var $6 = HEAP32[$5 >> 2];
 if ((HEAP32[$6 + 24 >> 2] | 0) <= 0) {
  var $172 = $dd;
  var $173 = HEAP32[$172 >> 2];
  var $174 = $173 + 36 | 0;
  var $175 = HEAP32[$174 >> 2];
  FUNCTION_TABLE[$175]($dd);
  STACKTOP = sp;
  return;
 }
 var $10 = $tile + 12 | 0;
 var $11 = $tile + 24 | 0;
 var $12 = $tile + 20 | 0;
 var $13 = $tile + 16 | 0;
 var $14 = $tile + 32 | 0;
 var $15 = $tile + 28 | 0;
 var $16 = $dd;
 var $17 = $tv | 0;
 var $18 = $tv + 4 | 0;
 var $19 = $tv + 8 | 0;
 var $i_086 = 0;
 var $20 = $6;
 while (1) {
  var $20;
  var $i_086;
  var $21 = HEAP32[$10 >> 2];
  do {
   if ((HEAP8[$21 + ($i_086 << 5) + 31 | 0] & -64) << 24 >> 24 == 64) {
    var $167 = $20;
   } else {
    var $26 = HEAP32[$11 >> 2];
    var $27 = $21 + ($i_086 << 5) + 30 | 0;
    var $28 = HEAP8[$27];
    var $29 = $28 & 255;
    if ($28 << 24 >> 24 == 0) {
     var $167 = $20;
     break;
    }
    var $31 = $21 + ($i_086 << 5) | 0;
    var $32 = $26 + ($i_086 * 12 & -1) + 9 | 0;
    var $33 = $26 + ($i_086 * 12 & -1) + 4 | 0;
    var $34 = $26 + ($i_086 * 12 & -1) | 0;
    var $j_083 = 0;
    while (1) {
     var $j_083;
     var $37 = HEAP16[$21 + ($i_086 << 5) + 16 + ($j_083 << 1) >> 1];
     var $38 = $37 << 16 >> 16 == 0;
     L174 : do {
      if ($inner) {
       if ($38) {
        break;
       }
       if ($37 << 16 >> 16 >= 0) {
        var $c_0 = 541077504;
        label = 131;
        break;
       }
       var $k_074 = HEAP32[$31 >> 2];
       if (($k_074 | 0) == -1) {
        var $c_0 = 805306368;
        label = 131;
        break;
       }
       var $44 = HEAP32[$12 >> 2];
       var $k_075 = $k_074;
       while (1) {
        var $k_075;
        if ((HEAPU8[$44 + ($k_075 * 12 & -1) + 8 | 0] | 0) == ($j_083 | 0)) {
         var $c_0 = 822083583;
         label = 131;
         break L174;
        }
        var $k_0 = HEAP32[$44 + ($k_075 * 12 & -1) + 4 >> 2];
        if (($k_0 | 0) == -1) {
         var $c_0 = 805306368;
         label = 131;
         break;
        } else {
         var $k_075 = $k_0;
        }
       }
      } else {
       if ($38) {
        var $c_0 = $col;
        label = 131;
       }
      }
     } while (0);
     do {
      if (label == 131) {
       label = 0;
       var $c_0;
       var $57 = HEAPU16[$21 + ($i_086 << 5) + 4 + ($j_083 << 1) >> 1] * 3 & -1;
       var $58 = HEAP32[$13 >> 2];
       var $59 = $58 + ($57 << 2) | 0;
       var $65 = HEAPU16[$21 + ($i_086 << 5) + 4 + ((($j_083 + 1 | 0) % ($29 | 0) & -1) << 1) >> 1] * 3 & -1;
       var $66 = $58 + ($65 << 2) | 0;
       if ((HEAP8[$32] | 0) == 0) {
        break;
       }
       var $_idx67 = $58 + ($57 + 2 << 2) | 0;
       var $_idx69 = $58 + ($65 + 2 << 2) | 0;
       var $k1_080 = 0;
       while (1) {
        var $k1_080;
        var $71 = HEAP32[$33 >> 2] + $k1_080 << 2;
        var $72 = HEAP32[$14 >> 2];
        var $73 = HEAP8[$27];
        var $74 = $73 & 255;
        var $76 = HEAP8[$72 + $71 | 0];
        var $77 = $76 & 255;
        if (($76 & 255) < ($73 & 255)) {
         var $storemerge = HEAP32[$13 >> 2] + ((HEAPU16[$21 + ($i_086 << 5) + 4 + ($77 << 1) >> 1] * 3 & -1) << 2) | 0;
        } else {
         var $storemerge = HEAP32[$15 >> 2] + ((($77 - $74 + HEAP32[$34 >> 2]) * 3 & -1) << 2) | 0;
        }
        var $storemerge;
        HEAP32[$17 >> 2] = $storemerge;
        var $95 = HEAP8[$72 + ($71 | 1) | 0];
        var $96 = $95 & 255;
        if (($95 & 255) < ($73 & 255)) {
         var $storemerge3 = HEAP32[$13 >> 2] + ((HEAPU16[$21 + ($i_086 << 5) + 4 + ($96 << 1) >> 1] * 3 & -1) << 2) | 0;
        } else {
         var $storemerge3 = HEAP32[$15 >> 2] + ((($96 - $74 + HEAP32[$34 >> 2]) * 3 & -1) << 2) | 0;
        }
        var $storemerge3;
        HEAP32[$18 >> 2] = $storemerge3;
        var $192 = HEAP8[$72 + ($71 | 2) | 0];
        var $193 = $192 & 255;
        if (($192 & 255) < ($73 & 255)) {
         var $storemerge4 = HEAP32[$13 >> 2] + ((HEAPU16[$21 + ($i_086 << 5) + 4 + ($193 << 1) >> 1] * 3 & -1) << 2) | 0;
        } else {
         var $storemerge4 = HEAP32[$15 >> 2] + ((($193 - $74 + HEAP32[$34 >> 2]) * 3 & -1) << 2) | 0;
        }
        var $storemerge4;
        HEAP32[$19 >> 2] = $storemerge4;
        var $209 = $72 + ($71 | 3) | 0;
        var $m2_077 = 0;
        var $n_078 = 2;
        while (1) {
         var $n_078;
         var $m2_077;
         do {
          if ((HEAPU8[$209] & 3 << ($n_078 << 1) | 0) != 0) {
           var $106 = HEAP32[$tv + ($n_078 << 2) >> 2];
           var $_val64 = HEAPF32[$106 >> 2];
           var $_idx65_val = HEAPF32[$106 + 8 >> 2];
           var $_val66 = HEAPF32[$59 >> 2];
           var $_idx67_val = HEAPF32[$_idx67 >> 2];
           var $107 = HEAPF32[$66 >> 2] - $_val66;
           var $108 = HEAPF32[$_idx69 >> 2] - $_idx67_val;
           var $113 = $107 * $107 + $108 * $108;
           var $116 = ($_val64 - $_val66) * $107 + ($_idx65_val - $_idx67_val) * $108;
           var $117 = $113 != 0;
           if ($117) {
            var $t_0_i70 = $116 / $113;
           } else {
            var $t_0_i70 = $116;
           }
           var $t_0_i70;
           var $122 = $_val66 + $107 * $t_0_i70 - $_val64;
           var $125 = $_idx67_val + $108 * $t_0_i70 - $_idx65_val;
           if ($122 * $122 + $125 * $125 >= 9999999747378752e-20) {
            break;
           }
           var $132 = HEAP32[$tv + ($m2_077 << 2) >> 2];
           var $_val = HEAPF32[$132 >> 2];
           var $_idx_val = HEAPF32[$132 + 8 >> 2];
           var $137 = ($_val - $_val66) * $107 + ($_idx_val - $_idx67_val) * $108;
           if ($117) {
            var $t_0_i = $137 / $113;
           } else {
            var $t_0_i = $137;
           }
           var $t_0_i;
           var $142 = $_val66 + $107 * $t_0_i - $_val;
           var $145 = $_idx67_val + $108 * $t_0_i - $_idx_val;
           if ($142 * $142 + $145 * $145 >= 9999999747378752e-20) {
            break;
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 20 >> 2]]($dd, $106, $c_0);
           FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 20 >> 2]]($dd, $132, $c_0);
          }
         } while (0);
         var $158 = $m2_077 + 1 | 0;
         if (($158 | 0) < 3) {
          var $n_078 = $m2_077;
          var $m2_077 = $158;
         } else {
          break;
         }
        }
        var $161 = $k1_080 + 1 | 0;
        if (($161 | 0) < (HEAPU8[$32] | 0)) {
         var $k1_080 = $161;
        } else {
         break;
        }
       }
      }
     } while (0);
     var $165 = $j_083 + 1 | 0;
     if (($165 | 0) < ($29 | 0)) {
      var $j_083 = $165;
     } else {
      break;
     }
    }
    var $167 = HEAP32[$5 >> 2];
   }
  } while (0);
  var $167;
  var $168 = $i_086 + 1 | 0;
  if (($168 | 0) < (HEAP32[$167 + 24 >> 2] | 0)) {
   var $i_086 = $168;
   var $20 = $167;
  } else {
   break;
  }
 }
 var $172 = $dd;
 var $173 = HEAP32[$172 >> 2];
 var $174 = $173 + 36 | 0;
 var $175 = HEAP32[$174 >> 2];
 FUNCTION_TABLE[$175]($dd);
 STACKTOP = sp;
 return;
}
function __Z28duDebugDrawRegionConnectionsP11duDebugDrawRK12rcContourSetf($dd, $cset, $alpha) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $pos = sp;
 if (($dd | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $3 = $cset + 8 | 0;
 var $5 = HEAPF32[$cset + 32 >> 2];
 var $7 = HEAPF32[$cset + 36 >> 2];
 var $8 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($dd, 1, 2);
 var $12 = $cset + 4 | 0;
 var $13 = HEAP32[$12 >> 2];
 if (($13 | 0) > 0) {
  var $15 = $cset | 0;
  var $16 = $pos | 0;
  var $17 = $pos + 4 | 0;
  var $18 = $pos + 8 | 0;
  var $19 = $cset + 12 | 0;
  var $20 = $7 * 4;
  var $21 = $cset + 16 | 0;
  var $i_070 = 0;
  var $22 = $13;
  while (1) {
   var $22;
   var $i_070;
   var $23 = HEAP32[$15 >> 2];
   var $24 = $23 + ($i_070 * 20 & -1) | 0;
   HEAPF32[$16 >> 2] = 0;
   HEAPF32[$17 >> 2] = 0;
   HEAPF32[$18 >> 2] = 0;
   var $25 = $23 + ($i_070 * 20 & -1) + 4 | 0;
   var $26 = HEAP32[$25 >> 2];
   do {
    if (($26 | 0) == 0) {
     var $146 = $22;
    } else {
     if (($26 | 0) > 0) {
      var $29 = $24 | 0;
      var $i_031_i = 0;
      var $33 = 0;
      var $32 = 0;
      var $31 = 0;
      while (1) {
       var $31;
       var $32;
       var $33;
       var $i_031_i;
       var $34 = $i_031_i << 2;
       var $35 = HEAP32[$29 >> 2];
       var $39 = $33 + (HEAP32[$35 + ($34 << 2) >> 2] | 0);
       HEAPF32[$16 >> 2] = $39;
       var $43 = $32 + (HEAP32[$35 + (($34 | 1) << 2) >> 2] | 0);
       HEAPF32[$17 >> 2] = $43;
       var $47 = $31 + (HEAP32[$35 + (($34 | 2) << 2) >> 2] | 0);
       HEAPF32[$18 >> 2] = $47;
       var $48 = $i_031_i + 1 | 0;
       var $49 = HEAP32[$25 >> 2];
       if (($48 | 0) < ($49 | 0)) {
        var $i_031_i = $48;
        var $33 = $39;
        var $32 = $43;
        var $31 = $47;
       } else {
        var $_lcssa_i = $49;
        var $53 = $39;
        var $52 = $43;
        var $51 = $47;
        break;
       }
      }
     } else {
      var $_lcssa_i = $26;
      var $53 = 0;
      var $52 = 0;
      var $51 = 0;
     }
     var $51;
     var $52;
     var $53;
     var $_lcssa_i;
     var $55 = 1 / ($_lcssa_i | 0);
     var $56 = $5 * $55;
     HEAPF32[$16 >> 2] = HEAPF32[$3 >> 2] + $53 * $56;
     HEAPF32[$17 >> 2] = $52 * $7 * $55 + ($20 + HEAPF32[$19 >> 2]);
     HEAPF32[$18 >> 2] = $51 * $56 + HEAPF32[$21 >> 2];
     var $_pre = HEAP32[$25 >> 2];
     if (($_pre | 0) <= 0) {
      var $146 = $22;
      break;
     }
     var $69 = $24 | 0;
     var $70 = $23 + ($i_070 * 20 & -1) + 16 | 0;
     var $j_067 = 0;
     var $71 = $_pre;
     while (1) {
      var $71;
      var $j_067;
      var $75 = HEAP32[HEAP32[$69 >> 2] + (($j_067 << 2 | 3) << 2) >> 2];
      L236 : do {
       if (($75 | 0) == 0) {
        var $143 = $71;
       } else {
        if (($75 & 65535) >>> 0 < HEAPU16[$70 >> 1] >>> 0) {
         var $143 = $71;
         break;
        }
        var $83 = $75 & 65535;
        var $84 = HEAP32[$12 >> 2];
        var $i_0_i = 0;
        while (1) {
         var $i_0_i;
         if (($i_0_i | 0) >= ($84 | 0)) {
          var $143 = $71;
          break L236;
         }
         var $88 = HEAP32[$15 >> 2];
         if ((HEAP16[$88 + ($i_0_i * 20 & -1) + 16 >> 1] | 0) == $83 << 16 >> 16) {
          break;
         } else {
          var $i_0_i = $i_0_i + 1 | 0;
         }
        }
        var $93 = $88 + ($i_0_i * 20 & -1) | 0;
        if (($93 | 0) == 0) {
         var $143 = $71;
         break;
        }
        var $97 = HEAP32[$88 + ($i_0_i * 20 & -1) + 4 >> 2];
        if (($97 | 0) == 0) {
         var $pos2_sroa_0_0_load52 = 0;
         var $139 = 0;
         var $138 = 0;
        } else {
         if (($97 | 0) > 0) {
          var $101 = HEAP32[$93 >> 2];
          var $i_031_i46 = 0;
          var $105 = 0;
          var $104 = 0;
          var $103 = 0;
          while (1) {
           var $103;
           var $104;
           var $105;
           var $i_031_i46;
           var $106 = $i_031_i46 << 2;
           var $110 = $105 + (HEAP32[$101 + ($106 << 2) >> 2] | 0);
           var $114 = $104 + (HEAP32[$101 + (($106 | 1) << 2) >> 2] | 0);
           var $118 = $103 + (HEAP32[$101 + (($106 | 2) << 2) >> 2] | 0);
           var $119 = $i_031_i46 + 1 | 0;
           if (($119 | 0) < ($97 | 0)) {
            var $i_031_i46 = $119;
            var $105 = $110;
            var $104 = $114;
            var $103 = $118;
           } else {
            var $123 = $110;
            var $122 = $114;
            var $121 = $118;
            break;
           }
          }
         } else {
          var $123 = 0;
          var $122 = 0;
          var $121 = 0;
         }
         var $121;
         var $122;
         var $123;
         var $125 = 1 / ($97 | 0);
         var $126 = $5 * $125;
         var $pos2_sroa_0_0_load52 = HEAPF32[$3 >> 2] + $123 * $126;
         var $139 = $122 * $7 * $125 + ($20 + HEAPF32[$19 >> 2]);
         var $138 = $121 * $126 + HEAPF32[$21 >> 2];
        }
        var $138;
        var $139;
        var $pos2_sroa_0_0_load52;
        __Z11duAppendArcP11duDebugDrawfffffffffj($dd, HEAPF32[$16 >> 2], HEAPF32[$17 >> 2], HEAPF32[$18 >> 2], $pos2_sroa_0_0_load52, $139, $138, .6000000238418579, -1006632960);
        var $143 = HEAP32[$25 >> 2];
       }
      } while (0);
      var $143;
      var $144 = $j_067 + 1 | 0;
      if (($144 | 0) < ($143 | 0)) {
       var $j_067 = $144;
       var $71 = $143;
      } else {
       break;
      }
     }
     var $146 = HEAP32[$12 >> 2];
    }
   } while (0);
   var $146;
   var $147 = $i_070 + 1 | 0;
   if (($147 | 0) < ($146 | 0)) {
    var $i_070 = $147;
    var $22 = $146;
   } else {
    break;
   }
  }
 }
 var $149 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$149 >> 2] + 36 >> 2]]($dd);
 FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($dd, 0, 7);
 if ((HEAP32[$12 >> 2] | 0) > 0) {
  var $158 = $alpha * 255;
  var $160 = $cset | 0;
  var $162 = $pos | 0;
  var $163 = $pos + 4 | 0;
  var $164 = $pos + 8 | 0;
  var $165 = $dd;
  var $166 = $cset + 12 | 0;
  var $167 = $7 * 4;
  var $168 = $cset + 16 | 0;
  var $169 = (($158 >= 0 ? Math.floor($158) : Math.ceil($158)) & 255) << 24;
  var $i1_056 = 0;
  while (1) {
   var $i1_056;
   var $171 = HEAP32[$160 >> 2];
   var $174 = HEAPU16[$171 + ($i1_056 * 20 & -1) + 16 >> 1];
   var $200 = (($174 >>> 3 << 1 & 2 | $174 >>> 1 & 1) * 63 & -1) + 63 | $169 | (($174 >>> 4 << 1 & 2 | $174 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($174 >>> 5 << 1 & 2 | $174 & 1, 4128768) + 4128768;
   var $204 = $200 >>> 1 & 8355711 | $200 & -16777216;
   HEAPF32[$162 >> 2] = 0;
   HEAPF32[$163 >> 2] = 0;
   HEAPF32[$164 >> 2] = 0;
   var $205 = $171 + ($i1_056 * 20 & -1) + 4 | 0;
   var $206 = HEAP32[$205 >> 2];
   if (($206 | 0) != 0) {
    if (($206 | 0) > 0) {
     var $209 = $171 + ($i1_056 * 20 & -1) | 0;
     var $i_031_i38 = 0;
     var $213 = 0;
     var $212 = 0;
     var $211 = 0;
     while (1) {
      var $211;
      var $212;
      var $213;
      var $i_031_i38;
      var $214 = $i_031_i38 << 2;
      var $215 = HEAP32[$209 >> 2];
      var $219 = $213 + (HEAP32[$215 + ($214 << 2) >> 2] | 0);
      HEAPF32[$162 >> 2] = $219;
      var $223 = $212 + (HEAP32[$215 + (($214 | 1) << 2) >> 2] | 0);
      HEAPF32[$163 >> 2] = $223;
      var $227 = $211 + (HEAP32[$215 + (($214 | 2) << 2) >> 2] | 0);
      HEAPF32[$164 >> 2] = $227;
      var $228 = $i_031_i38 + 1 | 0;
      var $229 = HEAP32[$205 >> 2];
      if (($228 | 0) < ($229 | 0)) {
       var $i_031_i38 = $228;
       var $213 = $219;
       var $212 = $223;
       var $211 = $227;
      } else {
       var $_lcssa_i41 = $229;
       var $233 = $219;
       var $232 = $223;
       var $231 = $227;
       break;
      }
     }
    } else {
     var $_lcssa_i41 = $206;
     var $233 = 0;
     var $232 = 0;
     var $231 = 0;
    }
    var $231;
    var $232;
    var $233;
    var $_lcssa_i41;
    var $235 = 1 / ($_lcssa_i41 | 0);
    var $236 = $5 * $235;
    HEAPF32[$162 >> 2] = HEAPF32[$3 >> 2] + $233 * $236;
    HEAPF32[$163 >> 2] = $232 * $7 * $235 + ($167 + HEAPF32[$166 >> 2]);
    HEAPF32[$164 >> 2] = $231 * $236 + HEAPF32[$168 >> 2];
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$165 >> 2] + 20 >> 2]]($dd, $162, $204);
   var $251 = $i1_056 + 1 | 0;
   if (($251 | 0) < (HEAP32[$12 >> 2] | 0)) {
    var $i1_056 = $251;
   } else {
    break;
   }
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$149 >> 2] + 36 >> 2]]($dd);
 STACKTOP = sp;
 return;
}
function __Z22duDebugDrawRawContoursP11duDebugDrawRK12rcContourSetf($dd, $cset, $alpha) {
 if (($dd | 0) == 0) {
  return;
 }
 var $3 = $cset + 8 | 0;
 var $5 = HEAPF32[$cset + 32 >> 2];
 var $7 = HEAPF32[$cset + 36 >> 2];
 var $8 = $alpha * 255;
 var $9 = $8 >= 0 ? Math.floor($8) : Math.ceil($8);
 var $10 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($dd, 1, 2);
 var $14 = $cset + 4 | 0;
 if ((HEAP32[$14 >> 2] | 0) > 0) {
  var $17 = $cset | 0;
  var $19 = $cset + 12 | 0;
  var $20 = $cset + 16 | 0;
  var $21 = $dd;
  var $22 = ($9 & 255) << 24;
  var $i_078 = 0;
  while (1) {
   var $i_078;
   var $24 = HEAP32[$17 >> 2];
   var $27 = HEAPU16[$24 + ($i_078 * 20 & -1) + 16 >> 1];
   var $53 = (($27 >>> 3 << 1 & 2 | $27 >>> 1 & 1) * 63 & -1) + 63 | $22 | (($27 >>> 4 << 1 & 2 | $27 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($27 >>> 5 << 1 & 2 | $27 & 1, 4128768) + 4128768;
   var $54 = $24 + ($i_078 * 20 & -1) + 12 | 0;
   var $57 = $24 + ($i_078 * 20 & -1) + 8 | 0;
   var $59 = ($i_078 & 1) + 1 | 0;
   if ((HEAP32[$54 >> 2] | 0) > 0) {
    var $j_074 = 0;
    while (1) {
     var $j_074;
     var $60 = $j_074 << 2;
     var $61 = HEAP32[$57 >> 2];
     var $67 = HEAPF32[$3 >> 2] + $5 * (HEAP32[$61 + ($60 << 2) >> 2] | 0);
     var $74 = HEAPF32[$19 >> 2] + $7 * ($59 + HEAP32[$61 + (($60 | 1) << 2) >> 2] | 0);
     var $80 = HEAPF32[$20 >> 2] + $5 * (HEAP32[$61 + (($60 | 2) << 2) >> 2] | 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 24 >> 2]]($dd, $67, $74, $80, $53);
     if (($j_074 | 0) > 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 24 >> 2]]($dd, $67, $74, $80, $53);
     }
     var $90 = $j_074 + 1 | 0;
     if (($90 | 0) < (HEAP32[$54 >> 2] | 0)) {
      var $j_074 = $90;
     } else {
      break;
     }
    }
   }
   var $93 = HEAP32[$57 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 24 >> 2]]($dd, HEAPF32[$3 >> 2] + $5 * (HEAP32[$93 >> 2] | 0), HEAPF32[$19 >> 2] + $7 * ($59 + HEAP32[$93 + 4 >> 2] | 0), HEAPF32[$20 >> 2] + $5 * (HEAP32[$93 + 8 >> 2] | 0), $53);
   var $115 = $i_078 + 1 | 0;
   if (($115 | 0) < (HEAP32[$14 >> 2] | 0)) {
    var $i_078 = $115;
   } else {
    break;
   }
  }
 }
 var $118 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$118 >> 2] + 36 >> 2]]($dd);
 FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($dd, 0, 2);
 var $125 = HEAP32[$14 >> 2];
 if (($125 | 0) > 0) {
  var $127 = $cset | 0;
  var $129 = $cset + 12 | 0;
  var $130 = $cset + 16 | 0;
  var $131 = $dd;
  var $132 = ($9 & 255) << 24;
  var $133 = $132 | 16777215;
  var $134 = $7 * 2;
  var $i5_070 = 0;
  var $135 = $125;
  while (1) {
   var $135;
   var $i5_070;
   var $136 = HEAP32[$127 >> 2];
   var $139 = HEAPU16[$136 + ($i5_070 * 20 & -1) + 16 >> 1];
   var $165 = (($139 >>> 3 << 1 & 2 | $139 >>> 1 & 1) * 63 & -1) + 63 | $132 | (($139 >>> 4 << 1 & 2 | $139 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($139 >>> 5 << 1 & 2 | $139 & 1, 4128768) + 4128768;
   var $169 = $165 >>> 1 & 8355711 | $165 & -16777216;
   var $170 = $136 + ($i5_070 * 20 & -1) + 12 | 0;
   if ((HEAP32[$170 >> 2] | 0) > 0) {
    var $173 = $136 + ($i5_070 * 20 & -1) + 8 | 0;
    var $175 = ($i5_070 & 1) + 1 | 0;
    var $j8_069 = 0;
    while (1) {
     var $j8_069;
     var $177 = $j8_069 << 2;
     var $178 = HEAP32[$173 >> 2];
     var $183 = (HEAP32[$178 + (($177 | 3) << 2) >> 2] & 65536 | 0) == 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$131 >> 2] + 24 >> 2]]($dd, HEAPF32[$3 >> 2] + $5 * (HEAP32[$178 + ($177 << 2) >> 2] | 0), ($183 ? 0 : $134) + (HEAPF32[$129 >> 2] + $7 * ($175 + HEAP32[$178 + (($177 | 1) << 2) >> 2] | 0)), HEAPF32[$130 >> 2] + $5 * (HEAP32[$178 + (($177 | 2) << 2) >> 2] | 0), $183 ? $169 : $133);
     var $206 = $j8_069 + 1 | 0;
     if (($206 | 0) < (HEAP32[$170 >> 2] | 0)) {
      var $j8_069 = $206;
     } else {
      break;
     }
    }
    var $209 = HEAP32[$14 >> 2];
   } else {
    var $209 = $135;
   }
   var $209;
   var $210 = $i5_070 + 1 | 0;
   if (($210 | 0) < ($209 | 0)) {
    var $i5_070 = $210;
    var $135 = $209;
   } else {
    break;
   }
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$118 >> 2] + 36 >> 2]]($dd);
 return;
}
function __Z19duDebugDrawContoursP11duDebugDrawRK12rcContourSetf($dd, $cset, $alpha) {
 if (($dd | 0) == 0) {
  return;
 }
 var $3 = $cset + 8 | 0;
 var $5 = HEAPF32[$cset + 32 >> 2];
 var $7 = HEAPF32[$cset + 36 >> 2];
 var $8 = $alpha * 255;
 var $9 = $8 >= 0 ? Math.floor($8) : Math.ceil($8);
 var $10 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($dd, 1, 2.5);
 var $14 = $cset + 4 | 0;
 var $15 = HEAP32[$14 >> 2];
 if (($15 | 0) > 0) {
  var $17 = $cset | 0;
  var $18 = $9 & 255;
  var $19 = $18 << 7;
  var $20 = $cset + 12 | 0;
  var $21 = $cset + 16 | 0;
  var $22 = $dd;
  var $23 = $18 << 24;
  var $i_083 = 0;
  var $24 = $15;
  while (1) {
   var $24;
   var $i_083;
   var $25 = HEAP32[$17 >> 2];
   var $26 = $25 + ($i_083 * 20 & -1) + 4 | 0;
   var $27 = HEAP32[$26 >> 2];
   do {
    if (($27 | 0) == 0) {
     var $144 = $24;
    } else {
     var $32 = HEAPU16[$25 + ($i_083 * 20 & -1) + 16 >> 1];
     var $51 = (($32 >>> 3 << 1 & 2 | $32 >>> 1 & 1) * 63 & -1) + 63 | 0;
     var $57 = $51 | $23 | (($32 >>> 4 << 1 & 2 | $32 >>> 2 & 1) * 16128 & -1) + 16128;
     var $58 = $57 | Math.imul($32 >>> 5 << 1 & 2 | $32 & 1, 4128768) + 4128768;
     var $82 = ((((($57 >>> 8 & 255) * 127 & -1) + 32640 | 0) >>> 0) / 255 & -1) << 8 | (((($51 & 255) * 127 & -1) + 32640 | 0) >>> 0) / 255 & -1 | ((((($58 >>> 16 & 255) * 127 & -1) + 32640 | 0) >>> 0) / 255 & -1) << 16 | ((((($58 >>> 24) * 127 & -1) + $19 | 0) >>> 0) / 255 & -1) << 24;
     if (($27 | 0) <= 0) {
      var $144 = $24;
      break;
     }
     var $85 = $25 + ($i_083 * 20 & -1) | 0;
     var $87 = ($i_083 & 1) + 1 | 0;
     var $k_079 = $27 - 1 | 0;
     var $j_080 = 0;
     while (1) {
      var $j_080;
      var $k_079;
      var $89 = $k_079 << 2;
      var $90 = HEAP32[$85 >> 2];
      var $92 = $j_080 << 2;
      var $98 = (HEAP32[$90 + (($89 | 3) << 2) >> 2] & 131072 | 0) != 0 ? $82 : $58;
      FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 24 >> 2]]($dd, HEAPF32[$3 >> 2] + $5 * (HEAP32[$90 + ($89 << 2) >> 2] | 0), HEAPF32[$20 >> 2] + $7 * ($87 + HEAP32[$90 + (($89 | 1) << 2) >> 2] | 0), HEAPF32[$21 >> 2] + $5 * (HEAP32[$90 + (($89 | 2) << 2) >> 2] | 0), $98);
      FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 24 >> 2]]($dd, HEAPF32[$3 >> 2] + $5 * (HEAP32[$90 + ($92 << 2) >> 2] | 0), HEAPF32[$20 >> 2] + $7 * ($87 + HEAP32[$90 + (($92 | 1) << 2) >> 2] | 0), HEAPF32[$21 >> 2] + $5 * (HEAP32[$90 + (($92 | 2) << 2) >> 2] | 0), $98);
      var $141 = $j_080 + 1 | 0;
      if (($141 | 0) < (HEAP32[$26 >> 2] | 0)) {
       var $k_079 = $j_080;
       var $j_080 = $141;
      } else {
       break;
      }
     }
     var $144 = HEAP32[$14 >> 2];
    }
   } while (0);
   var $144;
   var $145 = $i_083 + 1 | 0;
   if (($145 | 0) < ($144 | 0)) {
    var $i_083 = $145;
    var $24 = $144;
   } else {
    break;
   }
  }
 }
 var $147 = $dd;
 FUNCTION_TABLE[HEAP32[HEAP32[$147 >> 2] + 36 >> 2]]($dd);
 FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($dd, 0, 3);
 var $154 = HEAP32[$14 >> 2];
 if (($154 | 0) > 0) {
  var $156 = $cset | 0;
  var $158 = $cset + 12 | 0;
  var $159 = $cset + 16 | 0;
  var $160 = $dd;
  var $161 = ($9 & 255) << 24;
  var $162 = $161 | 16777215;
  var $163 = $7 * 2;
  var $i1_075 = 0;
  var $164 = $154;
  while (1) {
   var $164;
   var $i1_075;
   var $165 = HEAP32[$156 >> 2];
   var $168 = HEAPU16[$165 + ($i1_075 * 20 & -1) + 16 >> 1];
   var $194 = (($168 >>> 3 << 1 & 2 | $168 >>> 1 & 1) * 63 & -1) + 63 | $161 | (($168 >>> 4 << 1 & 2 | $168 >>> 2 & 1) * 16128 & -1) + 16128 | Math.imul($168 >>> 5 << 1 & 2 | $168 & 1, 4128768) + 4128768;
   var $198 = $194 >>> 1 & 8355711 | $194 & -16777216;
   var $199 = $165 + ($i1_075 * 20 & -1) + 4 | 0;
   if ((HEAP32[$199 >> 2] | 0) > 0) {
    var $202 = $165 + ($i1_075 * 20 & -1) | 0;
    var $204 = ($i1_075 & 1) + 1 | 0;
    var $j4_074 = 0;
    while (1) {
     var $j4_074;
     var $206 = $j4_074 << 2;
     var $207 = HEAP32[$202 >> 2];
     var $212 = (HEAP32[$207 + (($206 | 3) << 2) >> 2] & 65536 | 0) == 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$160 >> 2] + 24 >> 2]]($dd, HEAPF32[$3 >> 2] + $5 * (HEAP32[$207 + ($206 << 2) >> 2] | 0), ($212 ? 0 : $163) + (HEAPF32[$158 >> 2] + $7 * ($204 + HEAP32[$207 + (($206 | 1) << 2) >> 2] | 0)), HEAPF32[$159 >> 2] + $5 * (HEAP32[$207 + (($206 | 2) << 2) >> 2] | 0), $212 ? $198 : $162);
     var $235 = $j4_074 + 1 | 0;
     if (($235 | 0) < (HEAP32[$199 >> 2] | 0)) {
      var $j4_074 = $235;
     } else {
      break;
     }
    }
    var $238 = HEAP32[$14 >> 2];
   } else {
    var $238 = $164;
   }
   var $238;
   var $239 = $i1_075 + 1 | 0;
   if (($239 | 0) < ($238 | 0)) {
    var $i1_075 = $239;
    var $164 = $238;
   } else {
    break;
   }
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$147 >> 2] + 36 >> 2]]($dd);
 return;
}
function __Z28dtClosestHeightPointTrianglePKfS0_S0_S0_Rf($p_val, $p_2_val, $a_val, $a_1_val, $a_2_val, $b, $c, $h) {
 var $2 = HEAPF32[$c >> 2] - $a_val;
 var $5 = HEAPF32[$c + 8 >> 2] - $a_2_val;
 var $7 = HEAPF32[$b >> 2] - $a_val;
 var $10 = HEAPF32[$b + 8 >> 2] - $a_2_val;
 var $11 = $p_val - $a_val;
 var $12 = $p_2_val - $a_2_val;
 var $15 = $2 * $2 + $5 * $5;
 var $18 = $2 * $7 + $5 * $10;
 var $21 = $2 * $11 + $5 * $12;
 var $24 = $7 * $7 + $10 * $10;
 var $27 = $7 * $11 + $10 * $12;
 var $31 = 1 / ($15 * $24 - $18 * $18);
 var $35 = $31 * ($24 * $21 - $18 * $27);
 var $39 = $31 * ($15 * $27 - $18 * $21);
 if ($35 < -9999999747378752e-20 | $39 < -9999999747378752e-20 | $35 + $39 > 1.000100016593933) {
  var $_0 = 0;
  var $_0;
  return $_0;
 }
 HEAPF32[$h >> 2] = $39 * (HEAPF32[$b + 4 >> 2] - $a_1_val) + ($35 * (HEAPF32[$c + 4 >> 2] - $a_1_val) + $a_1_val);
 var $_0 = 1;
 var $_0;
 return $_0;
}
function __Z24dtDistancePtPolyEdgesSqrPKfS0_iPfS1_($pt, $verts, $nverts, $ed, $et) {
 if (($nverts | 0) <= 0) {
  var $c_0_off0_lcssa = 0;
  var $c_0_off0_lcssa;
  return $c_0_off0_lcssa;
 }
 var $3 = $pt + 8 | 0;
 var $c_0_off030 = 0;
 var $j_031 = $nverts - 1 | 0;
 var $i_032 = 0;
 while (1) {
  var $i_032;
  var $j_031;
  var $c_0_off030;
  var $5 = $i_032 * 3 & -1;
  var $6 = $verts + ($5 << 2) | 0;
  var $7 = $j_031 * 3 & -1;
  var $8 = $verts + ($7 << 2) | 0;
  var $10 = HEAPF32[$verts + ($5 + 2 << 2) >> 2];
  var $11 = HEAPF32[$3 >> 2];
  var $13 = $verts + ($7 + 2 << 2) | 0;
  var $14 = HEAPF32[$13 >> 2];
  do {
   if ($10 > $11 ^ $14 > $11) {
    var $18 = HEAPF32[$pt >> 2];
    var $19 = HEAPF32[$8 >> 2];
    var $20 = HEAPF32[$6 >> 2];
    if ($18 >= $20 + ($11 - $10) * ($19 - $20) / ($14 - $10)) {
     var $c_1_off0 = $c_0_off030;
     var $33 = $20;
     var $32 = $19;
     var $31 = $18;
     break;
    }
    var $c_1_off0 = $c_0_off030 ^ 1;
    var $33 = $20;
    var $32 = $19;
    var $31 = $18;
   } else {
    var $c_1_off0 = $c_0_off030;
    var $33 = HEAPF32[$6 >> 2];
    var $32 = HEAPF32[$8 >> 2];
    var $31 = HEAPF32[$pt >> 2];
   }
  } while (0);
  var $31;
  var $32;
  var $33;
  var $c_1_off0;
  var $34 = $et + ($j_031 << 2) | 0;
  var $35 = $33 - $32;
  var $36 = $10 - $14;
  var $41 = $35 * $35 + $36 * $36;
  var $44 = $35 * ($31 - $32) + $36 * ($11 - $14);
  if ($41 > 0) {
   var $storemerge_i = $44 / $41;
  } else {
   var $storemerge_i = $44;
  }
  var $storemerge_i;
  HEAPF32[$34 >> 2] = $storemerge_i;
  do {
   if ($storemerge_i < 0) {
    HEAPF32[$34 >> 2] = 0;
    var $54 = 0;
   } else {
    if ($storemerge_i <= 1) {
     var $54 = $storemerge_i;
     break;
    }
    HEAPF32[$34 >> 2] = 1;
    var $54 = 1;
   }
  } while (0);
  var $54;
  var $59 = HEAPF32[$8 >> 2] + $35 * $54 - HEAPF32[$pt >> 2];
  var $64 = $36 * $54 + HEAPF32[$13 >> 2] - HEAPF32[$3 >> 2];
  HEAPF32[$ed + ($j_031 << 2) >> 2] = $59 * $59 + $64 * $64;
  var $69 = $i_032 + 1 | 0;
  if (($69 | 0) < ($nverts | 0)) {
   var $c_0_off030 = $c_1_off0;
   var $j_031 = $i_032;
   var $i_032 = $69;
  } else {
   var $c_0_off0_lcssa = $c_1_off0;
   break;
  }
 }
 var $c_0_off0_lcssa;
 return $c_0_off0_lcssa;
}
function __Z13dtFreeNavMeshP9dtNavMesh($navmesh) {
 if (($navmesh | 0) == 0) {
  return;
 }
 var $3 = $navmesh + 48 | 0;
 var $4 = HEAP32[$3 >> 2];
 if (($4 | 0) > 0) {
  var $6 = $navmesh + 68 | 0;
  var $i_06_i = 0;
  var $7 = $4;
  while (1) {
   var $7;
   var $i_06_i;
   var $8 = HEAP32[$6 >> 2];
   if ((HEAP32[$8 + ($i_06_i * 60 & -1) + 52 >> 2] & 1 | 0) == 0) {
    var $23 = $7;
   } else {
    var $15 = HEAP32[$8 + ($i_06_i * 60 & -1) + 44 >> 2];
    if (($15 | 0) == 0) {
     var $18 = $8;
    } else {
     _free($15);
     var $18 = HEAP32[$6 >> 2];
    }
    var $18;
    HEAP32[$18 + ($i_06_i * 60 & -1) + 44 >> 2] = 0;
    HEAP32[HEAP32[$6 >> 2] + ($i_06_i * 60 & -1) + 48 >> 2] = 0;
    var $23 = HEAP32[$3 >> 2];
   }
   var $23;
   var $24 = $i_06_i + 1 | 0;
   if (($24 | 0) < ($23 | 0)) {
    var $i_06_i = $24;
    var $7 = $23;
   } else {
    break;
   }
  }
 }
 var $27 = HEAP32[$navmesh + 60 >> 2];
 if (($27 | 0) != 0) {
  _free($27);
 }
 var $32 = HEAP32[$navmesh + 68 >> 2];
 if (($32 | 0) != 0) {
  _free($32);
 }
 _free($navmesh);
 return;
}
function __ZN9dtNavMesh4initEPK15dtNavMeshParams($this, $params) {
 var $1 = $this;
 var $2 = $params;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAPF32[$this + 28 >> 2] = HEAPF32[$params >> 2];
 HEAPF32[$this + 32 >> 2] = HEAPF32[$params + 4 >> 2];
 HEAPF32[$this + 36 >> 2] = HEAPF32[$params + 8 >> 2];
 HEAPF32[$this + 40 >> 2] = HEAPF32[$params + 12 >> 2];
 HEAPF32[$this + 44 >> 2] = HEAPF32[$params + 16 >> 2];
 var $18 = $params + 20 | 0;
 var $19 = HEAP32[$18 >> 2];
 var $20 = $this + 48 | 0;
 HEAP32[$20 >> 2] = $19;
 var $23 = ((HEAP32[$18 >> 2] | 0) / 4 & -1) - 1 | 0;
 var $25 = $23 >>> 1 | $23;
 var $27 = $25 >>> 2 | $25;
 var $29 = $27 >>> 4 | $27;
 var $31 = $29 >>> 8 | $29;
 var $34 = ($31 >>> 16 | $31) + 1 | 0;
 var $35 = $this + 52 | 0;
 var $_ = ($34 | 0) == 0 ? 1 : $34;
 HEAP32[$35 >> 2] = $_;
 HEAP32[$this + 56 >> 2] = $_ - 1;
 var $40 = _malloc($19 * 60 & -1);
 var $42 = $this + 68 | 0;
 HEAP32[$42 >> 2] = $40;
 if (($40 | 0) == 0) {
  var $_0 = -2147483644;
  var $_0;
  return $_0;
 }
 var $47 = _malloc(HEAP32[$35 >> 2] << 2);
 var $49 = $this + 60 | 0;
 HEAP32[$49 >> 2] = $47;
 if (($47 | 0) == 0) {
  var $_0 = -2147483644;
  var $_0;
  return $_0;
 }
 _memset(HEAP32[$42 >> 2], 0, HEAP32[$20 >> 2] * 60 & -1);
 _memset(HEAP32[$49 >> 2], 0, HEAP32[$35 >> 2] << 2);
 var $60 = $this + 64 | 0;
 HEAP32[$60 >> 2] = 0;
 var $61 = HEAP32[$20 >> 2];
 if (($61 | 0) > 0) {
  var $i_016_in = $61;
  var $64 = HEAP32[$42 >> 2];
  while (1) {
   var $64;
   var $i_016_in;
   var $i_016 = $i_016_in - 1 | 0;
   HEAP32[$64 + ($i_016 * 60 & -1) >> 2] = 1;
   HEAP32[HEAP32[$42 >> 2] + ($i_016 * 60 & -1) + 56 >> 2] = HEAP32[$60 >> 2];
   var $69 = HEAP32[$42 >> 2];
   HEAP32[$60 >> 2] = $69 + ($i_016 * 60 & -1);
   if (($i_016 | 0) > 0) {
    var $i_016_in = $i_016;
    var $64 = $69;
   } else {
    break;
   }
  }
 }
 var $73 = HEAP32[$18 >> 2] - 1 | 0;
 var $75 = $73 >>> 1 | $73;
 var $77 = $75 >>> 2 | $75;
 var $79 = $77 >>> 4 | $77;
 var $81 = $79 >>> 8 | $79;
 var $84 = ($81 >>> 16 | $81) + 1 | 0;
 var $87 = ($84 >>> 0 > 65535) << 4;
 var $88 = $84 >>> ($87 >>> 0);
 var $91 = ($88 >>> 0 > 255) << 3;
 var $92 = $88 >>> ($91 >>> 0);
 var $96 = ($92 >>> 0 > 15) << 2;
 var $97 = $92 >>> ($96 >>> 0);
 var $101 = ($97 >>> 0 > 3) << 1;
 var $105 = $91 | $87 | $96 | $101 | $97 >>> ($101 >>> 0) >>> 1;
 HEAP32[$this + 76 >> 2] = $105;
 var $109 = HEAP32[$params + 24 >> 2] - 1 | 0;
 var $111 = $109 >>> 1 | $109;
 var $113 = $111 >>> 2 | $111;
 var $115 = $113 >>> 4 | $113;
 var $117 = $115 >>> 8 | $115;
 var $120 = ($117 >>> 16 | $117) + 1 | 0;
 var $123 = ($120 >>> 0 > 65535) << 4;
 var $124 = $120 >>> ($123 >>> 0);
 var $127 = ($124 >>> 0 > 255) << 3;
 var $128 = $124 >>> ($127 >>> 0);
 var $132 = ($128 >>> 0 > 15) << 2;
 var $133 = $128 >>> ($132 >>> 0);
 var $137 = ($133 >>> 0 > 3) << 1;
 var $141 = $127 | $123 | $132 | $137 | $133 >>> ($137 >>> 0) >>> 1;
 HEAP32[$this + 80 >> 2] = $141;
 var $144 = 32 - $105 - $141 | 0;
 var $146 = $144 >>> 0 > 31 ? 31 : $144;
 HEAP32[$this + 72 >> 2] = $146;
 var $_0 = $146 >>> 0 < 10 ? -2147483640 : 1073741824;
 var $_0;
 return $_0;
}
function __ZN9dtNavMesh7addTileEPhiijPj($this, $data, $dataSize, $lastRef) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var $nearestPt_i = sp;
 var $neis = sp + 16;
 var $1 = $data;
 if ((HEAP32[$data >> 2] | 0) != 1145979222) {
  var $_0 = -2147483647;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ((HEAP32[$data + 4 >> 2] | 0) != 7) {
  var $_0 = -2147483646;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $12 = $data + 8 | 0;
 var $13 = HEAP32[$12 >> 2];
 var $15 = $data + 12 | 0;
 var $16 = HEAP32[$15 >> 2];
 var $19 = HEAP32[$data + 16 >> 2];
 var $20 = $this + 56 | 0;
 var $21 = HEAP32[$20 >> 2];
 var $22 = Math.imul($13, -1918454973) | 0;
 var $25 = $21 & Math.imul($16, -669632447) + $22;
 var $26 = $this + 60 | 0;
 var $tile_013_i = HEAP32[HEAP32[$26 >> 2] + ($25 << 2) >> 2];
 L393 : do {
  if (($tile_013_i | 0) != 0) {
   var $tile_014_i = $tile_013_i;
   L394 : while (1) {
    var $tile_014_i;
    var $31 = HEAP32[$tile_014_i + 8 >> 2];
    do {
     if (($31 | 0) != 0) {
      if ((HEAP32[$31 + 8 >> 2] | 0) != ($13 | 0)) {
       break;
      }
      if ((HEAP32[$31 + 12 >> 2] | 0) != ($16 | 0)) {
       break;
      }
      if ((HEAP32[$31 + 16 >> 2] | 0) == ($19 | 0)) {
       break L394;
      }
     }
    } while (0);
    var $tile_0_i = HEAP32[$tile_014_i + 56 >> 2];
    if (($tile_0_i | 0) == 0) {
     break L393;
    } else {
     var $tile_014_i = $tile_0_i;
    }
   }
   if (($tile_014_i | 0) == 0) {
    break;
   } else {
    var $_0 = -2147483648;
   }
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 do {
  if (($lastRef | 0) == 0) {
   var $51 = $this + 64 | 0;
   var $52 = HEAP32[$51 >> 2];
   if (($52 | 0) == 0) {
    var $_0 = -2147483644;
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else {
    var $54 = $52 + 56 | 0;
    HEAP32[$51 >> 2] = HEAP32[$54 >> 2];
    HEAP32[$54 >> 2] = 0;
    var $tile_1123 = $52;
    break;
   }
  } else {
   var $57 = $this + 76 | 0;
   var $58 = HEAP32[$57 >> 2];
   var $61 = $this + 80 | 0;
   var $62 = HEAP32[$61 >> 2];
   var $64 = $lastRef >>> ($62 >>> 0) & (1 << $58) - 1;
   if (($64 | 0) >= (HEAP32[$this + 48 >> 2] | 0)) {
    var $_0 = -2147483644;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $70 = HEAP32[$this + 68 >> 2];
   var $71 = $70 + ($64 * 60 & -1) | 0;
   var $72 = $this + 64 | 0;
   var $tile_0_in = $72;
   var $prev_0 = 0;
   while (1) {
    var $prev_0;
    var $tile_0_in;
    var $tile_0 = HEAP32[$tile_0_in >> 2];
    if (($tile_0 | 0) != ($71 | 0) & ($tile_0 | 0) != 0) {
     var $tile_0_in = $tile_0 + 56 | 0;
     var $prev_0 = $tile_0;
    } else {
     break;
    }
   }
   if (($tile_0 | 0) != ($71 | 0)) {
    var $_0 = -2147483644;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $81 = HEAP32[$70 + ($64 * 60 & -1) + 56 >> 2];
   if (($prev_0 | 0) == 0) {
    HEAP32[$72 >> 2] = $81;
    var $87 = $62;
    var $86 = $58;
   } else {
    HEAP32[$prev_0 + 56 >> 2] = $81;
    var $87 = HEAP32[$61 >> 2];
    var $86 = HEAP32[$57 >> 2];
   }
   var $86;
   var $87;
   HEAP32[$71 >> 2] = $lastRef >>> (($86 + $87 | 0) >>> 0) & (1 << HEAP32[$this + 72 >> 2]) - 1;
   if (($71 | 0) == 0) {
    var $_0 = -2147483644;
   } else {
    var $tile_1123 = $71;
    break;
   }
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 var $tile_1123;
 var $99 = HEAP32[$15 >> 2];
 var $100 = HEAP32[$20 >> 2];
 var $101 = Math.imul(HEAP32[$12 >> 2], -1918454973) | 0;
 var $104 = Math.imul($99, -669632447) + $101 & $100;
 HEAP32[$tile_1123 + 56 >> 2] = HEAP32[HEAP32[$26 >> 2] + ($104 << 2) >> 2];
 HEAP32[HEAP32[$26 >> 2] + ($104 << 2) >> 2] = $tile_1123;
 var $114 = HEAP32[$data + 28 >> 2] * 12 & -1;
 var $118 = HEAP32[$data + 24 >> 2] << 5;
 var $120 = $data + 32 | 0;
 var $122 = HEAP32[$120 >> 2] * 12 & -1;
 var $126 = HEAP32[$data + 36 >> 2] * 12 & -1;
 var $130 = HEAP32[$data + 40 >> 2] * 12 & -1;
 var $134 = HEAP32[$data + 44 >> 2] << 2;
 var $138 = HEAP32[$data + 48 >> 2] << 4;
 var $141 = $tile_1123 + 16 | 0;
 HEAP32[$141 >> 2] = $data + 100;
 var $_sum = $114 + 100 | 0;
 var $144 = $tile_1123 + 12 | 0;
 HEAP32[$144 >> 2] = $data + $_sum;
 var $_sum112 = $_sum + $118 | 0;
 var $146 = $data + $_sum112 | 0;
 var $147 = $tile_1123 + 20 | 0;
 HEAP32[$147 >> 2] = $146;
 var $_sum113 = $_sum112 + $122 | 0;
 HEAP32[$tile_1123 + 24 >> 2] = $data + $_sum113;
 var $_sum114 = $_sum113 + $126 | 0;
 HEAP32[$tile_1123 + 28 >> 2] = $data + $_sum114;
 var $_sum115 = $_sum114 + $130 | 0;
 HEAP32[$tile_1123 + 32 >> 2] = $data + $_sum115;
 var $_sum116 = $_sum115 + $134 | 0;
 var $158 = $tile_1123 + 36 | 0;
 HEAP32[$158 >> 2] = $data + $_sum116;
 var $161 = $tile_1123 + 40 | 0;
 HEAP32[$161 >> 2] = $data + ($_sum116 + $138);
 if (($138 | 0) == 0) {
  HEAP32[$158 >> 2] = 0;
 }
 var $165 = $tile_1123 + 4 | 0;
 HEAP32[$165 >> 2] = 0;
 HEAP32[$146 + ((HEAP32[$120 >> 2] - 1) * 12 & -1) + 4 >> 2] = -1;
 if ((HEAP32[$120 >> 2] - 1 | 0) > 0) {
  var $i_0128 = 0;
  while (1) {
   var $i_0128;
   var $172 = $i_0128 + 1 | 0;
   HEAP32[HEAP32[$147 >> 2] + ($i_0128 * 12 & -1) + 4 >> 2] = $172;
   if (($172 | 0) < (HEAP32[$120 >> 2] - 1 | 0)) {
    var $i_0128 = $172;
   } else {
    break;
   }
  }
 }
 var $178 = $tile_1123 + 8 | 0;
 HEAP32[$178 >> 2] = $1;
 HEAP32[$tile_1123 + 44 >> 2] = $data;
 HEAP32[$tile_1123 + 48 >> 2] = $dataSize;
 HEAP32[$tile_1123 + 52 >> 2] = 1;
 do {
  if (($tile_1123 | 0) == 0) {
  } else {
   var $184 = $this + 68 | 0;
   var $185 = HEAP32[$184 >> 2];
   var $186 = $tile_1123;
   var $190 = $tile_1123 | 0;
   var $191 = HEAP32[$190 >> 2];
   var $192 = $this + 80 | 0;
   var $193 = HEAP32[$192 >> 2];
   var $194 = $this + 76 | 0;
   var $195 = HEAP32[$194 >> 2];
   var $199 = $191 << $195 + $193 | (($186 - $185 | 0) / 60 & -1) << $193;
   if ((HEAP32[$data + 24 >> 2] | 0) > 0) {
    var $i_032_i = 0;
    while (1) {
     var $i_032_i;
     var $205 = HEAP32[$144 >> 2];
     var $206 = $205 + ($i_032_i << 5) | 0;
     HEAP32[$206 >> 2] = -1;
     do {
      if ((HEAP8[$205 + ($i_032_i << 5) + 31 | 0] & -64) << 24 >> 24 != 64) {
       var $212 = HEAP8[$205 + ($i_032_i << 5) + 30 | 0];
       if ($212 << 24 >> 24 == 0) {
        break;
       }
       var $j_030_in_i = $212 & 255;
       while (1) {
        var $j_030_in_i;
        var $j_030_i = $j_030_in_i - 1 | 0;
        var $216 = $205 + ($i_032_i << 5) + 16 + ($j_030_i << 1) | 0;
        do {
         if ((HEAP16[$216 >> 1] | 0) >= 1) {
          var $220 = HEAP32[$165 >> 2];
          if (($220 | 0) == -1) {
           break;
          }
          var $223 = HEAP32[$147 >> 2];
          var $224 = $223 + ($220 * 12 & -1) + 4 | 0;
          HEAP32[$165 >> 2] = HEAP32[$224 >> 2];
          HEAP32[$223 + ($220 * 12 & -1) >> 2] = $199 | HEAPU16[$216 >> 1] - 1;
          HEAP8[$223 + ($220 * 12 & -1) + 8 | 0] = $j_030_i & 255;
          HEAP8[$223 + ($220 * 12 & -1) + 9 | 0] = -1;
          HEAP8[$223 + ($220 * 12 & -1) + 11 | 0] = 0;
          HEAP8[$223 + ($220 * 12 & -1) + 10 | 0] = 0;
          HEAP32[$224 >> 2] = HEAP32[$206 >> 2];
          HEAP32[$206 >> 2] = $220;
         }
        } while (0);
        if (($j_030_i | 0) > 0) {
         var $j_030_in_i = $j_030_i;
        } else {
         break;
        }
       }
      }
     } while (0);
     var $238 = $i_032_i + 1 | 0;
     var $239 = HEAP32[$178 >> 2];
     if (($238 | 0) < (HEAP32[$239 + 24 >> 2] | 0)) {
      var $i_032_i = $238;
     } else {
      break;
     }
    }
    var $248 = $239;
    var $247 = HEAP32[$184 >> 2];
    var $246 = HEAP32[$190 >> 2];
    var $245 = HEAP32[$192 >> 2];
    var $244 = HEAP32[$194 >> 2];
   } else {
    var $248 = $1;
    var $247 = $185;
    var $246 = $191;
    var $245 = $193;
    var $244 = $195;
   }
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $255 = $246 << $244 + $245 | (($186 - $247 | 0) / 60 & -1) << $245;
   if ((HEAP32[$248 + 52 >> 2] | 0) <= 0) {
    break;
   }
   var $259 = $nearestPt_i | 0;
   var $260 = $nearestPt_i + 8 | 0;
   var $261 = $nearestPt_i + 4 | 0;
   var $i_046_i = 0;
   var $263 = $248;
   while (1) {
    var $263;
    var $i_046_i;
    var $264 = HEAP32[$161 >> 2];
    var $265 = $264 + ($i_046_i * 36 & -1) + 28 | 0;
    var $267 = HEAPU16[$265 >> 1];
    var $268 = HEAP32[$144 >> 2];
    var $269 = $264 + ($i_046_i * 36 & -1) + 24 | 0;
    var $270 = HEAPF32[$269 >> 2];
    var $273 = $264 + ($i_046_i * 36 & -1) | 0;
    var $274 = __ZNK9dtNavMesh21findNearestPolyInTileEPK10dtMeshTilePKfS4_Pf($this, $tile_1123, $273, $270, HEAPF32[$263 + 68 >> 2], $270, $259);
    do {
     if (($274 | 0) != 0) {
      var $277 = HEAPF32[$259 >> 2];
      var $279 = $277 - HEAPF32[$273 >> 2];
      var $284 = HEAPF32[$260 >> 2] - HEAPF32[$264 + ($i_046_i * 36 & -1) + 8 >> 2];
      var $287 = HEAPF32[$269 >> 2];
      if ($279 * $279 + $284 * $284 > $287 * $287) {
       break;
      }
      var $294 = HEAPU16[$268 + ($267 << 5) + 4 >> 1] * 3 & -1;
      var $295 = HEAP32[$141 >> 2];
      HEAPF32[$295 + ($294 << 2) >> 2] = $277;
      HEAPF32[$295 + ($294 + 1 << 2) >> 2] = HEAPF32[$261 >> 2];
      HEAPF32[$295 + ($294 + 2 << 2) >> 2] = HEAPF32[$260 >> 2];
      var $301 = HEAP32[$165 >> 2];
      if (($301 | 0) == -1) {
       break;
      }
      var $303 = HEAP32[$147 >> 2];
      var $304 = $303 + ($301 * 12 & -1) + 4 | 0;
      HEAP32[$165 >> 2] = HEAP32[$304 >> 2];
      HEAP32[$303 + ($301 * 12 & -1) >> 2] = $274;
      HEAP8[$303 + ($301 * 12 & -1) + 8 | 0] = 0;
      HEAP8[$303 + ($301 * 12 & -1) + 9 | 0] = -1;
      HEAP8[$303 + ($301 * 12 & -1) + 11 | 0] = 0;
      HEAP8[$303 + ($301 * 12 & -1) + 10 | 0] = 0;
      var $311 = $268 + ($267 << 5) | 0;
      HEAP32[$304 >> 2] = HEAP32[$311 >> 2];
      HEAP32[$311 >> 2] = $301;
      var $_pr_i = HEAP32[$165 >> 2];
      if (($_pr_i | 0) == -1) {
       break;
      }
      var $315 = HEAP32[$147 >> 2];
      var $316 = $315 + ($_pr_i * 12 & -1) + 4 | 0;
      HEAP32[$165 >> 2] = HEAP32[$316 >> 2];
      var $322 = $274 & 65535 & (1 << HEAP32[$192 >> 2]) + 65535;
      var $323 = HEAP32[$144 >> 2];
      HEAP32[$315 + ($_pr_i * 12 & -1) >> 2] = $255 | HEAPU16[$265 >> 1];
      HEAP8[$315 + ($_pr_i * 12 & -1) + 8 | 0] = -1;
      HEAP8[$315 + ($_pr_i * 12 & -1) + 9 | 0] = -1;
      HEAP8[$315 + ($_pr_i * 12 & -1) + 11 | 0] = 0;
      HEAP8[$315 + ($_pr_i * 12 & -1) + 10 | 0] = 0;
      var $332 = $323 + ($322 << 5) | 0;
      HEAP32[$316 >> 2] = HEAP32[$332 >> 2];
      HEAP32[$332 >> 2] = $_pr_i;
     }
    } while (0);
    var $334 = $i_046_i + 1 | 0;
    var $335 = HEAP32[$178 >> 2];
    if (($334 | 0) < (HEAP32[$335 + 52 >> 2] | 0)) {
     var $i_046_i = $334;
     var $263 = $335;
    } else {
     break;
    }
   }
  }
 } while (0);
 var $340 = HEAP32[$12 >> 2];
 var $341 = HEAP32[$15 >> 2];
 var $342 = HEAP32[$20 >> 2];
 var $343 = Math.imul($340, -1918454973) | 0;
 var $346 = Math.imul($341, -669632447) + $343 & $342;
 var $tile_014_i119 = HEAP32[HEAP32[$26 >> 2] + ($346 << 2) >> 2];
 do {
  if (($tile_014_i119 | 0) == 0) {
   var $i1_0125 = 0;
  } else {
   var $n_015_i = 0;
   var $tile_016_i = $tile_014_i119;
   while (1) {
    var $tile_016_i;
    var $n_015_i;
    var $351 = HEAP32[$tile_016_i + 8 >> 2];
    do {
     if (($351 | 0) == 0) {
      var $n_1_i = $n_015_i;
     } else {
      if ((HEAP32[$351 + 8 >> 2] | 0) != ($340 | 0)) {
       var $n_1_i = $n_015_i;
       break;
      }
      if (!((HEAP32[$351 + 12 >> 2] | 0) == ($341 | 0) & ($n_015_i | 0) < 32)) {
       var $n_1_i = $n_015_i;
       break;
      }
      HEAP32[$neis + ($n_015_i << 2) >> 2] = $tile_016_i;
      var $n_1_i = $n_015_i + 1 | 0;
     }
    } while (0);
    var $n_1_i;
    var $tile_0_i121 = HEAP32[$tile_016_i + 56 >> 2];
    if (($tile_0_i121 | 0) == 0) {
     break;
    } else {
     var $n_015_i = $n_1_i;
     var $tile_016_i = $tile_0_i121;
    }
   }
   if (($n_1_i | 0) > 0) {
    var $j_0126 = 0;
   } else {
    var $i1_0125 = 0;
    break;
   }
   while (1) {
    var $j_0126;
    var $370 = HEAP32[$neis + ($j_0126 << 2) >> 2];
    if (($370 | 0) == ($tile_1123 | 0)) {
     var $374 = $tile_1123;
    } else {
     __ZN9dtNavMesh15connectExtLinksEP10dtMeshTileS1_i($this, $tile_1123, $370, -1);
     __ZN9dtNavMesh15connectExtLinksEP10dtMeshTileS1_i($this, $370, $tile_1123, -1);
     var $374 = $370;
    }
    var $374;
    __ZN9dtNavMesh22connectExtOffMeshLinksEP10dtMeshTileS1_i($this, $tile_1123, $374, -1);
    __ZN9dtNavMesh22connectExtOffMeshLinksEP10dtMeshTileS1_i($this, $374, $tile_1123, -1);
    var $375 = $j_0126 + 1 | 0;
    if (($375 | 0) < ($n_1_i | 0)) {
     var $j_0126 = $375;
    } else {
     var $i1_0125 = 0;
     break;
    }
   }
  }
 } while (0);
 while (1) {
  var $i1_0125;
  var $377 = HEAP32[$12 >> 2];
  var $378 = HEAP32[$15 >> 2];
  if (($i1_0125 | 0) == 0) {
   var $ny_0_i = $378;
   var $nx_0_i = $377 + 1 | 0;
  } else if (($i1_0125 | 0) == 1) {
   var $ny_0_i = $378 + 1 | 0;
   var $nx_0_i = $377 + 1 | 0;
  } else if (($i1_0125 | 0) == 2) {
   var $ny_0_i = $378 + 1 | 0;
   var $nx_0_i = $377;
  } else if (($i1_0125 | 0) == 3) {
   var $ny_0_i = $378 + 1 | 0;
   var $nx_0_i = $377 - 1 | 0;
  } else if (($i1_0125 | 0) == 4) {
   var $ny_0_i = $378;
   var $nx_0_i = $377 - 1 | 0;
  } else if (($i1_0125 | 0) == 5) {
   var $ny_0_i = $378 - 1 | 0;
   var $nx_0_i = $377 - 1 | 0;
  } else if (($i1_0125 | 0) == 6) {
   var $ny_0_i = $378 - 1 | 0;
   var $nx_0_i = $377;
  } else if (($i1_0125 | 0) == 7) {
   var $ny_0_i = $378 - 1 | 0;
   var $nx_0_i = $377 + 1 | 0;
  } else {
   var $ny_0_i = $378;
   var $nx_0_i = $377;
  }
  var $nx_0_i;
  var $ny_0_i;
  var $399 = HEAP32[$20 >> 2];
  var $400 = Math.imul($nx_0_i, -1918454973) | 0;
  var $403 = Math.imul($ny_0_i, -669632447) + $400 & $399;
  var $tile_014_i_i = HEAP32[HEAP32[$26 >> 2] + ($403 << 2) >> 2];
  do {
   if (($tile_014_i_i | 0) != 0) {
    var $n_015_i_i = 0;
    var $tile_016_i_i = $tile_014_i_i;
    while (1) {
     var $tile_016_i_i;
     var $n_015_i_i;
     var $408 = HEAP32[$tile_016_i_i + 8 >> 2];
     do {
      if (($408 | 0) == 0) {
       var $n_1_i_i = $n_015_i_i;
      } else {
       if ((HEAP32[$408 + 8 >> 2] | 0) != ($nx_0_i | 0)) {
        var $n_1_i_i = $n_015_i_i;
        break;
       }
       if (!((HEAP32[$408 + 12 >> 2] | 0) == ($ny_0_i | 0) & ($n_015_i_i | 0) < 32)) {
        var $n_1_i_i = $n_015_i_i;
        break;
       }
       HEAP32[$neis + ($n_015_i_i << 2) >> 2] = $tile_016_i_i;
       var $n_1_i_i = $n_015_i_i + 1 | 0;
      }
     } while (0);
     var $n_1_i_i;
     var $tile_0_i_i = HEAP32[$tile_016_i_i + 56 >> 2];
     if (($tile_0_i_i | 0) == 0) {
      break;
     } else {
      var $n_015_i_i = $n_1_i_i;
      var $tile_016_i_i = $tile_0_i_i;
     }
    }
    if (($n_1_i_i | 0) <= 0) {
     break;
    }
    var $427 = $i1_0125 + 4 & 7;
    var $j2_0124 = 0;
    while (1) {
     var $j2_0124;
     var $430 = HEAP32[$neis + ($j2_0124 << 2) >> 2];
     __ZN9dtNavMesh15connectExtLinksEP10dtMeshTileS1_i($this, $tile_1123, $430, $i1_0125);
     __ZN9dtNavMesh15connectExtLinksEP10dtMeshTileS1_i($this, $430, $tile_1123, $427);
     __ZN9dtNavMesh22connectExtOffMeshLinksEP10dtMeshTileS1_i($this, $tile_1123, $430, $i1_0125);
     __ZN9dtNavMesh22connectExtOffMeshLinksEP10dtMeshTileS1_i($this, $430, $tile_1123, $427);
     var $431 = $j2_0124 + 1 | 0;
     if (($431 | 0) < ($n_1_i_i | 0)) {
      var $j2_0124 = $431;
     } else {
      break;
     }
    }
   }
  } while (0);
  var $433 = $i1_0125 + 1 | 0;
  if (($433 | 0) < 8) {
   var $i1_0125 = $433;
  } else {
   var $_0 = 1073741824;
   break;
  }
 }
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZN9dtNavMesh15connectExtLinksEP10dtMeshTileS1_i($this, $tile, $target, $side) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $nei = sp;
 var $neia = sp + 16;
 if (($tile | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $2 = $tile + 8 | 0;
 var $3 = HEAP32[$2 >> 2];
 if ((HEAP32[$3 + 24 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 var $7 = $tile + 12 | 0;
 var $8 = ($side | 0) == -1;
 var $9 = $tile + 16 | 0;
 var $10 = $tile + 4 | 0;
 var $11 = $tile + 20 | 0;
 var $12 = ($target | 0) == 0;
 var $13 = $this + 68 | 0;
 var $14 = $target;
 var $15 = $target | 0;
 var $16 = $this + 80 | 0;
 var $17 = $this + 76 | 0;
 var $18 = $target + 8 | 0;
 var $19 = $target + 12 | 0;
 var $20 = $target + 16 | 0;
 var $i_085 = 0;
 var $21 = $3;
 while (1) {
  var $21;
  var $i_085;
  var $22 = HEAP32[$7 >> 2];
  var $24 = HEAP8[$22 + ($i_085 << 5) + 30 | 0];
  var $25 = $24 & 255;
  if ($24 << 24 >> 24 == 0) {
   var $349 = $21;
  } else {
   var $27 = $22 + ($i_085 << 5) | 0;
   var $j_082 = 0;
   while (1) {
    var $j_082;
    var $30 = HEAP16[$22 + ($i_085 << 5) + 16 + ($j_082 << 1) >> 1];
    var $31 = $30 & 65535;
    L514 : do {
     if (($31 & 32768 | 0) != 0) {
      var $35 = $31 & 255;
      if (!($8 | ($35 | 0) == ($side | 0))) {
       break;
      }
      var $41 = HEAPU16[$22 + ($i_085 << 5) + 4 + ($j_082 << 1) >> 1] * 3 & -1;
      var $42 = HEAP32[$9 >> 2];
      var $43 = $42 + ($41 << 2) | 0;
      var $49 = HEAPU16[$22 + ($i_085 << 5) + 4 + ((($j_082 + 1 | 0) % ($25 | 0) & -1) << 1) >> 1] * 3 & -1;
      var $50 = $42 + ($49 << 2) | 0;
      var $52 = $31 + 4 & 7;
      if ($12) {
       break;
      }
      do {
       if (($52 | 0) == 4 | ($52 | 0) == 0) {
        var $56 = HEAPF32[$42 + ($41 + 2 << 2) >> 2];
        var $58 = HEAPF32[$42 + ($49 + 2 << 2) >> 2];
        if ($56 < $58) {
         var $amax_sroa_0_0_load4567_i = $58;
         var $85 = HEAPF32[$42 + ($49 + 1 << 2) >> 2];
         var $amin_sroa_0_0_load4668_i = $56;
         var $84 = HEAPF32[$42 + ($41 + 1 << 2) >> 2];
         break;
        } else {
         var $amax_sroa_0_0_load4567_i = $56;
         var $85 = HEAPF32[$42 + ($41 + 1 << 2) >> 2];
         var $amin_sroa_0_0_load4668_i = $58;
         var $84 = HEAPF32[$42 + ($49 + 1 << 2) >> 2];
         break;
        }
       } else if (($52 | 0) == 6 | ($52 | 0) == 2) {
        var $71 = HEAPF32[$43 >> 2];
        var $72 = HEAPF32[$50 >> 2];
        if ($71 < $72) {
         var $amax_sroa_0_0_load4567_i = $72;
         var $85 = HEAPF32[$42 + ($49 + 1 << 2) >> 2];
         var $amin_sroa_0_0_load4668_i = $71;
         var $84 = HEAPF32[$42 + ($41 + 1 << 2) >> 2];
         break;
        } else {
         var $amax_sroa_0_0_load4567_i = $71;
         var $85 = HEAPF32[$42 + ($41 + 1 << 2) >> 2];
         var $amin_sroa_0_0_load4668_i = $72;
         var $84 = HEAPF32[$42 + ($49 + 1 << 2) >> 2];
         break;
        }
       } else {
        var $amax_sroa_0_0_load4567_i = 0;
        var $85 = 0;
        var $amin_sroa_0_0_load4668_i = 0;
        var $84 = 0;
       }
      } while (0);
      var $84;
      var $amin_sroa_0_0_load4668_i;
      var $85;
      var $amax_sroa_0_0_load4567_i;
      if (($52 | 0) == 4 | ($52 | 0) == 0) {
       var $_0_i41_i = HEAPF32[$43 >> 2];
      } else if (($52 | 0) == 6 | ($52 | 0) == 2) {
       var $_0_i41_i = HEAPF32[$42 + ($41 + 2 << 2) >> 2];
      } else {
       var $_0_i41_i = 0;
      }
      var $_0_i41_i;
      var $94 = HEAP32[$16 >> 2];
      var $99 = HEAP32[$15 >> 2] << HEAP32[$17 >> 2] + $94 | (($14 - HEAP32[$13 >> 2] | 0) / 60 & -1) << $94;
      var $100 = HEAP32[$18 >> 2];
      var $102 = HEAP32[$100 + 24 >> 2];
      if (($102 | 0) <= 0) {
       break;
      }
      var $104 = $52 | 32768;
      var $105 = $amin_sroa_0_0_load4668_i + .009999999776482582;
      var $106 = $amax_sroa_0_0_load4567_i - .009999999776482582;
      var $109 = ($85 - $84) / ($amax_sroa_0_0_load4567_i - $amin_sroa_0_0_load4668_i);
      var $111 = $84 - $amin_sroa_0_0_load4668_i * $109;
      var $_pre13 = HEAP32[$19 >> 2];
      var $bmin_sroa_1_4_load6292_i = 0;
      var $bmin_sroa_0_0_load445793_i = 0;
      var $bmax_sroa_1_4_load5294_i = 0;
      var $bmax_sroa_0_0_load434795_i = 0;
      var $i_096_i = 0;
      var $n_099_i = 0;
      while (1) {
       var $n_099_i;
       var $i_096_i;
       var $bmax_sroa_0_0_load434795_i;
       var $bmax_sroa_1_4_load5294_i;
       var $bmin_sroa_0_0_load445793_i;
       var $bmin_sroa_1_4_load6292_i;
       var $113 = HEAP8[$_pre13 + ($i_096_i << 5) + 30 | 0];
       var $114 = $113 & 255;
       L535 : do {
        if ($113 << 24 >> 24 == 0) {
         var $n_1_i = $n_099_i;
         var $bmax_sroa_0_0_load4348_i = $bmax_sroa_0_0_load434795_i;
         var $bmax_sroa_1_4_load53_i = $bmax_sroa_1_4_load5294_i;
         var $bmin_sroa_0_0_load4458_i = $bmin_sroa_0_0_load445793_i;
         var $bmin_sroa_1_4_load63_i = $bmin_sroa_1_4_load6292_i;
        } else {
         var $116 = $100 + 68 | 0;
         var $bmin_sroa_1_4_load6483_i = $bmin_sroa_1_4_load6292_i;
         var $bmin_sroa_0_0_load445984_i = $bmin_sroa_0_0_load445793_i;
         var $bmax_sroa_1_4_load5485_i = $bmax_sroa_1_4_load5294_i;
         var $bmax_sroa_0_0_load434986_i = $bmax_sroa_0_0_load434795_i;
         var $j_087_i = 0;
         L537 : while (1) {
          var $j_087_i;
          var $bmax_sroa_0_0_load434986_i;
          var $bmax_sroa_1_4_load5485_i;
          var $bmin_sroa_0_0_load445984_i;
          var $bmin_sroa_1_4_load6483_i;
          do {
           if ((HEAPU16[$_pre13 + ($i_096_i << 5) + 16 + ($j_087_i << 1) >> 1] | 0) == ($104 | 0)) {
            var $125 = HEAPU16[$_pre13 + ($i_096_i << 5) + 4 + ($j_087_i << 1) >> 1] * 3 & -1;
            var $126 = HEAP32[$20 >> 2];
            var $127 = $126 + ($125 << 2) | 0;
            var $128 = $j_087_i + 1 | 0;
            var $131 = HEAP16[$_pre13 + ($i_096_i << 5) + 4 + ((($128 | 0) % ($114 | 0) & -1) << 1) >> 1];
            if (($52 | 0) == 6 | ($52 | 0) == 2) {
             var $_0_i39_i = HEAPF32[$126 + ($125 + 2 << 2) >> 2];
            } else if (($52 | 0) == 4 | ($52 | 0) == 0) {
             var $_0_i39_i = HEAPF32[$127 >> 2];
            } else {
             var $_0_i39_i = 0;
            }
            var $_0_i39_i;
            var $137 = $_0_i41_i - $_0_i39_i;
            if ($137 < 0) {
             var $141 = -$137;
            } else {
             var $141 = $137;
            }
            var $141;
            if ($141 > .009999999776482582) {
             var $bmax_sroa_0_0_load4350_i = $bmax_sroa_0_0_load434986_i;
             var $bmax_sroa_1_4_load55_i = $bmax_sroa_1_4_load5485_i;
             var $bmin_sroa_0_0_load4460_i = $bmin_sroa_0_0_load445984_i;
             var $bmin_sroa_1_4_load65_i = $bmin_sroa_1_4_load6483_i;
             var $_pre_phi_i = $128;
             break;
            }
            var $145 = ($131 & 65535) * 3 & -1;
            var $146 = $126 + ($145 << 2) | 0;
            do {
             if (($52 | 0) == 4 | ($52 | 0) == 0) {
              var $148 = HEAPF32[$126 + ($125 + 2 << 2) >> 2];
              var $150 = HEAPF32[$126 + ($145 + 2 << 2) >> 2];
              if ($148 < $150) {
               var $bmax_sroa_0_0_load4351_i = $150;
               var $bmax_sroa_1_4_load56_i = HEAPF32[$126 + ($145 + 1 << 2) >> 2];
               var $bmin_sroa_0_0_load4461_i = $148;
               var $bmin_sroa_1_4_load66_i = HEAPF32[$126 + ($125 + 1 << 2) >> 2];
               break;
              } else {
               var $bmax_sroa_0_0_load4351_i = $148;
               var $bmax_sroa_1_4_load56_i = HEAPF32[$126 + ($125 + 1 << 2) >> 2];
               var $bmin_sroa_0_0_load4461_i = $150;
               var $bmin_sroa_1_4_load66_i = HEAPF32[$126 + ($145 + 1 << 2) >> 2];
               break;
              }
             } else if (($52 | 0) == 6 | ($52 | 0) == 2) {
              var $162 = HEAPF32[$127 >> 2];
              var $163 = HEAPF32[$146 >> 2];
              if ($162 < $163) {
               var $bmax_sroa_0_0_load4351_i = $163;
               var $bmax_sroa_1_4_load56_i = HEAPF32[$126 + ($145 + 1 << 2) >> 2];
               var $bmin_sroa_0_0_load4461_i = $162;
               var $bmin_sroa_1_4_load66_i = HEAPF32[$126 + ($125 + 1 << 2) >> 2];
               break;
              } else {
               var $bmax_sroa_0_0_load4351_i = $162;
               var $bmax_sroa_1_4_load56_i = HEAPF32[$126 + ($125 + 1 << 2) >> 2];
               var $bmin_sroa_0_0_load4461_i = $163;
               var $bmin_sroa_1_4_load66_i = HEAPF32[$126 + ($145 + 1 << 2) >> 2];
               break;
              }
             } else {
              var $bmax_sroa_0_0_load4351_i = $bmax_sroa_0_0_load434986_i;
              var $bmax_sroa_1_4_load56_i = $bmax_sroa_1_4_load5485_i;
              var $bmin_sroa_0_0_load4461_i = $bmin_sroa_0_0_load445984_i;
              var $bmin_sroa_1_4_load66_i = $bmin_sroa_1_4_load6483_i;
             }
            } while (0);
            var $bmin_sroa_1_4_load66_i;
            var $bmin_sroa_0_0_load4461_i;
            var $bmax_sroa_1_4_load56_i;
            var $bmax_sroa_0_0_load4351_i;
            var $176 = $bmin_sroa_0_0_load4461_i + .009999999776482582;
            var $178 = $105 > $176 ? $105 : $176;
            var $179 = $bmax_sroa_0_0_load4351_i - .009999999776482582;
            var $181 = $106 < $179 ? $106 : $179;
            if ($178 > $181) {
             var $bmax_sroa_0_0_load4350_i = $bmax_sroa_0_0_load4351_i;
             var $bmax_sroa_1_4_load55_i = $bmax_sroa_1_4_load56_i;
             var $bmin_sroa_0_0_load4460_i = $bmin_sroa_0_0_load4461_i;
             var $bmin_sroa_1_4_load65_i = $bmin_sroa_1_4_load66_i;
             var $_pre_phi_i = $128;
             break;
            }
            var $186 = ($bmax_sroa_1_4_load56_i - $bmin_sroa_1_4_load66_i) / ($bmax_sroa_0_0_load4351_i - $bmin_sroa_0_0_load4461_i);
            var $188 = $bmin_sroa_1_4_load66_i - $bmin_sroa_0_0_load4461_i * $186;
            var $197 = $178 * $186 + $188 - ($178 * $109 + $111);
            var $198 = $181 * $186 + $188 - ($181 * $109 + $111);
            if ($197 * $198 < 0) {
             break L537;
            }
            var $202 = HEAPF32[$116 >> 2] * 2;
            var $203 = $202 * $202;
            if ($197 * $197 <= $203) {
             break L537;
            }
            if ($198 * $198 > $203) {
             var $bmax_sroa_0_0_load4350_i = $bmax_sroa_0_0_load4351_i;
             var $bmax_sroa_1_4_load55_i = $bmax_sroa_1_4_load56_i;
             var $bmin_sroa_0_0_load4460_i = $bmin_sroa_0_0_load4461_i;
             var $bmin_sroa_1_4_load65_i = $bmin_sroa_1_4_load66_i;
             var $_pre_phi_i = $128;
            } else {
             break L537;
            }
           } else {
            var $bmax_sroa_0_0_load4350_i = $bmax_sroa_0_0_load434986_i;
            var $bmax_sroa_1_4_load55_i = $bmax_sroa_1_4_load5485_i;
            var $bmin_sroa_0_0_load4460_i = $bmin_sroa_0_0_load445984_i;
            var $bmin_sroa_1_4_load65_i = $bmin_sroa_1_4_load6483_i;
            var $_pre_phi_i = $j_087_i + 1 | 0;
           }
          } while (0);
          var $_pre_phi_i;
          var $bmin_sroa_1_4_load65_i;
          var $bmin_sroa_0_0_load4460_i;
          var $bmax_sroa_1_4_load55_i;
          var $bmax_sroa_0_0_load4350_i;
          if (($_pre_phi_i | 0) < ($114 | 0)) {
           var $bmin_sroa_1_4_load6483_i = $bmin_sroa_1_4_load65_i;
           var $bmin_sroa_0_0_load445984_i = $bmin_sroa_0_0_load4460_i;
           var $bmax_sroa_1_4_load5485_i = $bmax_sroa_1_4_load55_i;
           var $bmax_sroa_0_0_load434986_i = $bmax_sroa_0_0_load4350_i;
           var $j_087_i = $_pre_phi_i;
          } else {
           var $n_1_i = $n_099_i;
           var $bmax_sroa_0_0_load4348_i = $bmax_sroa_0_0_load4350_i;
           var $bmax_sroa_1_4_load53_i = $bmax_sroa_1_4_load55_i;
           var $bmin_sroa_0_0_load4458_i = $bmin_sroa_0_0_load4460_i;
           var $bmin_sroa_1_4_load63_i = $bmin_sroa_1_4_load65_i;
           break L535;
          }
         }
         if (($n_099_i | 0) >= 4) {
          var $n_1_i = $n_099_i;
          var $bmax_sroa_0_0_load4348_i = $bmax_sroa_0_0_load4351_i;
          var $bmax_sroa_1_4_load53_i = $bmax_sroa_1_4_load56_i;
          var $bmin_sroa_0_0_load4458_i = $bmin_sroa_0_0_load4461_i;
          var $bmin_sroa_1_4_load63_i = $bmin_sroa_1_4_load66_i;
          break;
         }
         var $214 = $n_099_i << 1;
         HEAPF32[$neia + ($214 << 2) >> 2] = $amin_sroa_0_0_load4668_i > $bmin_sroa_0_0_load4461_i ? $amin_sroa_0_0_load4668_i : $bmin_sroa_0_0_load4461_i;
         HEAPF32[$neia + (($214 | 1) << 2) >> 2] = $amax_sroa_0_0_load4567_i < $bmax_sroa_0_0_load4351_i ? $amax_sroa_0_0_load4567_i : $bmax_sroa_0_0_load4351_i;
         HEAP32[$nei + ($n_099_i << 2) >> 2] = $i_096_i | $99;
         var $n_1_i = $n_099_i + 1 | 0;
         var $bmax_sroa_0_0_load4348_i = $bmax_sroa_0_0_load4351_i;
         var $bmax_sroa_1_4_load53_i = $bmax_sroa_1_4_load56_i;
         var $bmin_sroa_0_0_load4458_i = $bmin_sroa_0_0_load4461_i;
         var $bmin_sroa_1_4_load63_i = $bmin_sroa_1_4_load66_i;
        }
       } while (0);
       var $bmin_sroa_1_4_load63_i;
       var $bmin_sroa_0_0_load4458_i;
       var $bmax_sroa_1_4_load53_i;
       var $bmax_sroa_0_0_load4348_i;
       var $n_1_i;
       var $224 = $i_096_i + 1 | 0;
       if (($224 | 0) < ($102 | 0)) {
        var $bmin_sroa_1_4_load6292_i = $bmin_sroa_1_4_load63_i;
        var $bmin_sroa_0_0_load445793_i = $bmin_sroa_0_0_load4458_i;
        var $bmax_sroa_1_4_load5294_i = $bmax_sroa_1_4_load53_i;
        var $bmax_sroa_0_0_load434795_i = $bmax_sroa_0_0_load4348_i;
        var $i_096_i = $224;
        var $n_099_i = $n_1_i;
       } else {
        break;
       }
      }
      if (($n_1_i | 0) <= 0) {
       break;
      }
      var $227 = $j_082 & 255;
      var $228 = $30 & 255;
      var $229 = $42 + ($41 + 2 << 2) | 0;
      var $230 = $42 + ($49 + 2 << 2) | 0;
      if (($35 | 0) == 4) {
       var $k_080_us = 0;
       while (1) {
        var $k_080_us;
        var $232 = HEAP32[$10 >> 2];
        if (($232 | 0) != -1) {
         var $235 = HEAP32[$11 >> 2];
         var $236 = $235 + ($232 * 12 & -1) + 4 | 0;
         HEAP32[$10 >> 2] = HEAP32[$236 >> 2];
         HEAP32[$235 + ($232 * 12 & -1) >> 2] = HEAP32[$nei + ($k_080_us << 2) >> 2];
         HEAP8[$235 + ($232 * 12 & -1) + 8 | 0] = $227;
         HEAP8[$235 + ($232 * 12 & -1) + 9 | 0] = $228;
         HEAP32[$236 >> 2] = HEAP32[$27 >> 2];
         HEAP32[$27 >> 2] = $232;
         var $244 = $k_080_us << 1;
         var $247 = HEAPF32[$229 >> 2];
         var $250 = HEAPF32[$230 >> 2] - $247;
         var $251 = (HEAPF32[$neia + ($244 << 2) >> 2] - $247) / $250;
         var $256 = (HEAPF32[$neia + (($244 | 1) << 2) >> 2] - $247) / $250;
         var $257 = $251 > $256;
         var $258 = $257 ? $256 : $251;
         var $259 = $257 ? $251 : $256;
         if ($258 < 0) {
          var $264 = 0;
         } else {
          var $_op76_us = $258 * 255;
          var $264 = $258 > 1 ? -1 : $_op76_us >= 0 ? Math.floor($_op76_us) : Math.ceil($_op76_us);
         }
         var $264;
         HEAP8[$235 + ($232 * 12 & -1) + 10 | 0] = $264;
         if ($259 < 0) {
          var $270 = 0;
         } else {
          var $_op78_us = $259 * 255;
          var $270 = $259 > 1 ? -1 : $_op78_us >= 0 ? Math.floor($_op78_us) : Math.ceil($_op78_us);
         }
         var $270;
         HEAP8[$235 + ($232 * 12 & -1) + 11 | 0] = $270;
        }
        var $272 = $k_080_us + 1 | 0;
        if (($272 | 0) < ($n_1_i | 0)) {
         var $k_080_us = $272;
        } else {
         break L514;
        }
       }
      } else {
       var $k_080 = 0;
      }
      while (1) {
       var $k_080;
       var $274 = HEAP32[$10 >> 2];
       do {
        if (($274 | 0) != -1) {
         var $277 = HEAP32[$11 >> 2];
         var $278 = $277 + ($274 * 12 & -1) + 4 | 0;
         HEAP32[$10 >> 2] = HEAP32[$278 >> 2];
         HEAP32[$277 + ($274 * 12 & -1) >> 2] = HEAP32[$nei + ($k_080 << 2) >> 2];
         HEAP8[$277 + ($274 * 12 & -1) + 8 | 0] = $227;
         HEAP8[$277 + ($274 * 12 & -1) + 9 | 0] = $228;
         HEAP32[$278 >> 2] = HEAP32[$27 >> 2];
         HEAP32[$27 >> 2] = $274;
         if (($35 | 0) == 6 | ($35 | 0) == 2) {
          var $316 = $k_080 << 1;
          var $319 = HEAPF32[$43 >> 2];
          var $322 = HEAPF32[$50 >> 2] - $319;
          var $323 = (HEAPF32[$neia + ($316 << 2) >> 2] - $319) / $322;
          var $328 = (HEAPF32[$neia + (($316 | 1) << 2) >> 2] - $319) / $322;
          var $329 = $323 > $328;
          var $330 = $329 ? $328 : $323;
          var $331 = $329 ? $323 : $328;
          if ($330 < 0) {
           var $336 = 0;
          } else {
           var $_op = $330 * 255;
           var $336 = $330 > 1 ? -1 : $_op >= 0 ? Math.floor($_op) : Math.ceil($_op);
          }
          var $336;
          HEAP8[$277 + ($274 * 12 & -1) + 10 | 0] = $336;
          if ($331 < 0) {
           var $342 = 0;
          } else {
           var $_op74 = $331 * 255;
           var $342 = $331 > 1 ? -1 : $_op74 >= 0 ? Math.floor($_op74) : Math.ceil($_op74);
          }
          var $342;
          HEAP8[$277 + ($274 * 12 & -1) + 11 | 0] = $342;
          break;
         } else if (($35 | 0) == 4 | ($35 | 0) == 0) {
          var $287 = $k_080 << 1;
          var $290 = HEAPF32[$229 >> 2];
          var $293 = HEAPF32[$230 >> 2] - $290;
          var $294 = (HEAPF32[$neia + ($287 << 2) >> 2] - $290) / $293;
          var $299 = (HEAPF32[$neia + (($287 | 1) << 2) >> 2] - $290) / $293;
          var $300 = $294 > $299;
          var $301 = $300 ? $299 : $294;
          var $302 = $300 ? $294 : $299;
          if ($301 < 0) {
           var $307 = 0;
          } else {
           var $_op76 = $301 * 255;
           var $307 = $301 > 1 ? -1 : $_op76 >= 0 ? Math.floor($_op76) : Math.ceil($_op76);
          }
          var $307;
          HEAP8[$277 + ($274 * 12 & -1) + 10 | 0] = $307;
          if ($302 < 0) {
           var $313 = 0;
          } else {
           var $_op78 = $302 * 255;
           var $313 = $302 > 1 ? -1 : $_op78 >= 0 ? Math.floor($_op78) : Math.ceil($_op78);
          }
          var $313;
          HEAP8[$277 + ($274 * 12 & -1) + 11 | 0] = $313;
          break;
         } else {
          break;
         }
        }
       } while (0);
       var $344 = $k_080 + 1 | 0;
       if (($344 | 0) < ($n_1_i | 0)) {
        var $k_080 = $344;
       } else {
        break;
       }
      }
     }
    } while (0);
    var $346 = $j_082 + 1 | 0;
    if (($346 | 0) < ($25 | 0)) {
     var $j_082 = $346;
    } else {
     break;
    }
   }
   var $349 = HEAP32[$2 >> 2];
  }
  var $349;
  var $350 = $i_085 + 1 | 0;
  if (($350 | 0) < (HEAP32[$349 + 24 >> 2] | 0)) {
   var $i_085 = $350;
   var $21 = $349;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function __ZN9dtNavMesh22connectExtOffMeshLinksEP10dtMeshTileS1_i($this, $tile, $target, $side) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $nearestPt = sp;
 if (($tile | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($side | 0) == -1) {
  var $_off0 = -1;
 } else {
  var $_off0 = $side + 4 & 7;
 }
 var $_off0;
 var $7 = $target + 8 | 0;
 var $8 = HEAP32[$7 >> 2];
 if ((HEAP32[$8 + 52 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 var $12 = $target + 40 | 0;
 var $13 = $target + 12 | 0;
 var $14 = $nearestPt | 0;
 var $15 = $nearestPt + 8 | 0;
 var $16 = $target + 16 | 0;
 var $17 = $nearestPt + 4 | 0;
 var $18 = $target + 4 | 0;
 var $19 = $tile + 4 | 0;
 var $20 = $tile + 20 | 0;
 var $21 = $this + 80 | 0;
 var $22 = $tile + 12 | 0;
 var $23 = ($target | 0) == 0;
 var $24 = $side & 255;
 var $25 = $this + 68 | 0;
 var $26 = $target;
 var $27 = $target | 0;
 var $28 = $this + 76 | 0;
 var $29 = $target + 20 | 0;
 var $i_054 = 0;
 var $30 = $8;
 while (1) {
  var $30;
  var $i_054;
  var $31 = HEAP32[$12 >> 2];
  do {
   if ((HEAP8[$31 + ($i_054 * 36 & -1) + 31 | 0] | 0) == $_off0 << 24 >> 24) {
    var $36 = $31 + ($i_054 * 36 & -1) + 28 | 0;
    var $38 = HEAPU16[$36 >> 1];
    var $39 = HEAP32[$13 >> 2];
    var $40 = $39 + ($38 << 5) | 0;
    if ((HEAP32[$40 >> 2] | 0) == -1) {
     break;
    }
    var $44 = $31 + ($i_054 * 36 & -1) + 24 | 0;
    var $45 = HEAPF32[$44 >> 2];
    var $48 = $31 + ($i_054 * 36 & -1) + 12 | 0;
    var $49 = __ZNK9dtNavMesh21findNearestPolyInTileEPK10dtMeshTilePKfS4_Pf($this, $tile, $48, $45, HEAPF32[$30 + 68 >> 2], $45, $14);
    if (($49 | 0) == 0) {
     break;
    }
    var $52 = HEAPF32[$14 >> 2];
    var $54 = $52 - HEAPF32[$48 >> 2];
    var $59 = HEAPF32[$15 >> 2] - HEAPF32[$31 + ($i_054 * 36 & -1) + 20 >> 2];
    var $62 = HEAPF32[$44 >> 2];
    if ($54 * $54 + $59 * $59 > $62 * $62) {
     break;
    }
    var $69 = HEAPU16[$39 + ($38 << 5) + 6 >> 1] * 3 & -1;
    var $70 = HEAP32[$16 >> 2];
    HEAPF32[$70 + ($69 << 2) >> 2] = $52;
    HEAPF32[$70 + ($69 + 1 << 2) >> 2] = HEAPF32[$17 >> 2];
    HEAPF32[$70 + ($69 + 2 << 2) >> 2] = HEAPF32[$15 >> 2];
    var $76 = HEAP32[$18 >> 2];
    if (($76 | 0) != -1) {
     var $79 = HEAP32[$29 >> 2];
     var $80 = $79 + ($76 * 12 & -1) + 4 | 0;
     HEAP32[$18 >> 2] = HEAP32[$80 >> 2];
     HEAP32[$79 + ($76 * 12 & -1) >> 2] = $49;
     HEAP8[$79 + ($76 * 12 & -1) + 8 | 0] = 1;
     HEAP8[$79 + ($76 * 12 & -1) + 9 | 0] = $_off0;
     HEAP8[$79 + ($76 * 12 & -1) + 11 | 0] = 0;
     HEAP8[$79 + ($76 * 12 & -1) + 10 | 0] = 0;
     HEAP32[$80 >> 2] = HEAP32[$40 >> 2];
     HEAP32[$40 >> 2] = $76;
    }
    if ((HEAP8[$31 + ($i_054 * 36 & -1) + 30 | 0] & 1) == 0) {
     break;
    }
    var $93 = HEAP32[$19 >> 2];
    if (($93 | 0) == -1) {
     break;
    }
    var $96 = HEAP32[$20 >> 2];
    var $97 = $96 + ($93 * 12 & -1) + 4 | 0;
    HEAP32[$19 >> 2] = HEAP32[$97 >> 2];
    var $99 = HEAP32[$21 >> 2];
    var $104 = HEAP32[$22 >> 2];
    if ($23) {
     var $_0_i = 0;
    } else {
     var $_0_i = HEAP32[$27 >> 2] << HEAP32[$28 >> 2] + $99 | (($26 - HEAP32[$25 >> 2] | 0) / 60 & -1) << $99;
    }
    var $_0_i;
    HEAP32[$96 + ($93 * 12 & -1) >> 2] = HEAPU16[$36 >> 1] | $_0_i;
    HEAP8[$96 + ($93 * 12 & -1) + 8 | 0] = -1;
    HEAP8[$96 + ($93 * 12 & -1) + 9 | 0] = $24;
    HEAP8[$96 + ($93 * 12 & -1) + 11 | 0] = 0;
    HEAP8[$96 + ($93 * 12 & -1) + 10 | 0] = 0;
    var $124 = $104 + (($49 & 65535 & (1 << $99) + 65535) << 5) | 0;
    HEAP32[$97 >> 2] = HEAP32[$124 >> 2];
    HEAP32[$124 >> 2] = $93;
   }
  } while (0);
  var $126 = $i_054 + 1 | 0;
  var $127 = HEAP32[$7 >> 2];
  if (($126 | 0) < (HEAP32[$127 + 52 >> 2] | 0)) {
   var $i_054 = $126;
   var $30 = $127;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function __ZNK9dtNavMesh21findNearestPolyInTileEPK10dtMeshTilePKfS4_Pf($this, $tile, $center, $extents_val, $extents_1_val, $extents_2_val, $nearestPt) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 var $polys = sp;
 var $closestPtPoly = sp + 512;
 var $1 = HEAPF32[$center >> 2];
 var $2 = $1 - $extents_val;
 var $3 = $center + 4 | 0;
 var $4 = HEAPF32[$3 >> 2];
 var $5 = $4 - $extents_1_val;
 var $6 = $center + 8 | 0;
 var $7 = HEAPF32[$6 >> 2];
 var $8 = $7 - $extents_2_val;
 var $9 = $1 + $extents_val;
 var $10 = $4 + $extents_1_val;
 var $11 = $7 + $extents_2_val;
 var $13 = HEAP32[$tile + 36 >> 2];
 if (($13 | 0) == 0) {
  var $162 = HEAP32[$this + 80 >> 2];
  var $168 = HEAP32[$tile >> 2] << HEAP32[$this + 76 >> 2] + $162 | (($tile - HEAP32[$this + 68 >> 2] | 0) / 60 & -1) << $162;
  var $172 = HEAP32[HEAP32[$tile + 8 >> 2] + 24 >> 2];
  if (($172 | 0) <= 0) {
   var $nearest_0_lcssa = 0;
   var $nearest_0_lcssa;
   STACKTOP = sp;
   return $nearest_0_lcssa;
  }
  var $175 = $tile + 16 | 0;
  var $_pre = HEAP32[$tile + 12 >> 2];
  var $n3_0110_i = 0;
  var $i_0111_i = 0;
  while (1) {
   var $i_0111_i;
   var $n3_0110_i;
   do {
    if ((HEAP8[$_pre + ($i_0111_i << 5) + 31 | 0] & -64) << 24 >> 24 == 64) {
     var $n3_1_i = $n3_0110_i;
    } else {
     var $183 = HEAPU16[$_pre + ($i_0111_i << 5) + 4 >> 1] * 3 & -1;
     var $184 = HEAP32[$175 >> 2];
     var $186 = HEAPF32[$184 + ($183 << 2) >> 2];
     var $188 = HEAPF32[$184 + ($183 + 1 << 2) >> 2];
     var $190 = HEAPF32[$184 + ($183 + 2 << 2) >> 2];
     var $192 = HEAP8[$_pre + ($i_0111_i << 5) + 30 | 0];
     if (($192 & 255) > 1) {
      var $194 = $192 & 255;
      var $bmin1_sroa_2_8_load879398_i = $190;
      var $bmin1_sroa_1_4_load869299_i = $188;
      var $bmin1_sroa_0_0_load8591100_i = $186;
      var $bmax2_sroa_2_8_load8490101_i = $190;
      var $bmax2_sroa_1_4_load8389102_i = $188;
      var $bmax2_sroa_0_0_load8288103_i = $186;
      var $j_0104_i = 1;
      while (1) {
       var $j_0104_i;
       var $bmax2_sroa_0_0_load8288103_i;
       var $bmax2_sroa_1_4_load8389102_i;
       var $bmax2_sroa_2_8_load8490101_i;
       var $bmin1_sroa_0_0_load8591100_i;
       var $bmin1_sroa_1_4_load869299_i;
       var $bmin1_sroa_2_8_load879398_i;
       var $199 = HEAPU16[$_pre + ($i_0111_i << 5) + 4 + ($j_0104_i << 1) >> 1] * 3 & -1;
       var $201 = HEAPF32[$184 + ($199 << 2) >> 2];
       var $203 = $bmin1_sroa_0_0_load8591100_i < $201 ? $bmin1_sroa_0_0_load8591100_i : $201;
       var $205 = HEAPF32[$184 + ($199 + 1 << 2) >> 2];
       var $207 = $bmin1_sroa_1_4_load869299_i < $205 ? $bmin1_sroa_1_4_load869299_i : $205;
       var $209 = HEAPF32[$184 + ($199 + 2 << 2) >> 2];
       var $211 = $bmin1_sroa_2_8_load879398_i < $209 ? $bmin1_sroa_2_8_load879398_i : $209;
       var $213 = $bmax2_sroa_0_0_load8288103_i > $201 ? $bmax2_sroa_0_0_load8288103_i : $201;
       var $215 = $bmax2_sroa_1_4_load8389102_i > $205 ? $bmax2_sroa_1_4_load8389102_i : $205;
       var $217 = $bmax2_sroa_2_8_load8490101_i > $209 ? $bmax2_sroa_2_8_load8490101_i : $209;
       var $218 = $j_0104_i + 1 | 0;
       if (($218 | 0) < ($194 | 0)) {
        var $bmin1_sroa_2_8_load879398_i = $211;
        var $bmin1_sroa_1_4_load869299_i = $207;
        var $bmin1_sroa_0_0_load8591100_i = $203;
        var $bmax2_sroa_2_8_load8490101_i = $217;
        var $bmax2_sroa_1_4_load8389102_i = $215;
        var $bmax2_sroa_0_0_load8288103_i = $213;
        var $j_0104_i = $218;
       } else {
        var $bmin1_sroa_2_8_load8793_lcssa_i = $211;
        var $bmin1_sroa_1_4_load8692_lcssa_i = $207;
        var $bmin1_sroa_0_0_load8591_lcssa_i = $203;
        var $bmax2_sroa_2_8_load8490_lcssa_i = $217;
        var $bmax2_sroa_1_4_load8389_lcssa_i = $215;
        var $bmax2_sroa_0_0_load8288_lcssa_i = $213;
        break;
       }
      }
     } else {
      var $bmin1_sroa_2_8_load8793_lcssa_i = $190;
      var $bmin1_sroa_1_4_load8692_lcssa_i = $188;
      var $bmin1_sroa_0_0_load8591_lcssa_i = $186;
      var $bmax2_sroa_2_8_load8490_lcssa_i = $190;
      var $bmax2_sroa_1_4_load8389_lcssa_i = $188;
      var $bmax2_sroa_0_0_load8288_lcssa_i = $186;
     }
     var $bmax2_sroa_0_0_load8288_lcssa_i;
     var $bmax2_sroa_1_4_load8389_lcssa_i;
     var $bmax2_sroa_2_8_load8490_lcssa_i;
     var $bmin1_sroa_0_0_load8591_lcssa_i;
     var $bmin1_sroa_1_4_load8692_lcssa_i;
     var $bmin1_sroa_2_8_load8793_lcssa_i;
     if ($8 > $bmax2_sroa_2_8_load8490_lcssa_i | $11 < $bmin1_sroa_2_8_load8793_lcssa_i) {
      var $n3_1_i = $n3_0110_i;
      break;
     }
     if (!(($5 > $bmax2_sroa_1_4_load8389_lcssa_i | $10 < $bmin1_sroa_1_4_load8692_lcssa_i ? 0 : $2 > $bmax2_sroa_0_0_load8288_lcssa_i | $9 < $bmin1_sroa_0_0_load8591_lcssa_i ? 0 : 1) & ($n3_0110_i | 0) < 128)) {
      var $n3_1_i = $n3_0110_i;
      break;
     }
     HEAP32[$polys + ($n3_0110_i << 2) >> 2] = $168 | $i_0111_i;
     var $n3_1_i = $n3_0110_i + 1 | 0;
    }
   } while (0);
   var $n3_1_i;
   var $231 = $i_0111_i + 1 | 0;
   if (($231 | 0) < ($172 | 0)) {
    var $n3_0110_i = $n3_1_i;
    var $i_0111_i = $231;
   } else {
    var $_0_i = $n3_1_i;
    break;
   }
  }
 } else {
  var $17 = HEAP32[$tile + 8 >> 2];
  var $19 = HEAP32[$17 + 48 >> 2];
  var $20 = $13 + ($19 << 4) | 0;
  var $24 = HEAPF32[$17 + 96 >> 2];
  var $25 = HEAPF32[$17 + 72 >> 2];
  var $26 = HEAPF32[$17 + 84 >> 2];
  if ($2 < $25) {
   var $31 = $25;
  } else {
   var $31 = $2 > $26 ? $26 : $2;
  }
  var $31;
  var $34 = HEAPF32[$17 + 76 >> 2];
  var $36 = HEAPF32[$17 + 88 >> 2];
  if ($5 < $34) {
   var $41 = $34;
  } else {
   var $41 = $5 > $36 ? $36 : $5;
  }
  var $41;
  var $44 = HEAPF32[$17 + 80 >> 2];
  var $46 = HEAPF32[$17 + 92 >> 2];
  if ($8 < $44) {
   var $51 = $44;
  } else {
   var $51 = $8 > $46 ? $46 : $8;
  }
  var $51;
  if ($9 < $25) {
   var $57 = $25;
  } else {
   var $57 = $9 > $26 ? $26 : $9;
  }
  var $57;
  if ($10 < $34) {
   var $63 = $34;
  } else {
   var $63 = $10 > $36 ? $36 : $10;
  }
  var $63;
  if ($11 < $44) {
   var $69 = $44;
  } else {
   var $69 = $11 > $46 ? $46 : $11;
  }
  var $69;
  var $71 = $24 * ($31 - $25);
  var $73 = ($71 >= 0 ? Math.floor($71) : Math.ceil($71)) & -2;
  var $74 = $24 * ($41 - $34);
  var $76 = ($74 >= 0 ? Math.floor($74) : Math.ceil($74)) & -2;
  var $77 = $24 * ($51 - $44);
  var $79 = ($77 >= 0 ? Math.floor($77) : Math.ceil($77)) & -2;
  var $81 = $24 * ($57 - $25) + 1;
  var $83 = ($81 >= 0 ? Math.floor($81) : Math.ceil($81)) | 1;
  var $85 = $24 * ($63 - $34) + 1;
  var $87 = ($85 >= 0 ? Math.floor($85) : Math.ceil($85)) | 1;
  var $89 = $24 * ($69 - $44) + 1;
  var $91 = ($89 >= 0 ? Math.floor($89) : Math.ceil($89)) | 1;
  if (($tile | 0) == 0) {
   var $_0_i75_i = 0;
  } else {
   var $103 = HEAP32[$this + 80 >> 2];
   var $_0_i75_i = HEAP32[$tile >> 2] << HEAP32[$this + 76 >> 2] + $103 | (($tile - HEAP32[$this + 68 >> 2] | 0) / 60 & -1) << $103;
  }
  var $_0_i75_i;
  if (($19 | 0) > 0) {
   var $n_0117_i = 0;
   var $node_0118_i = $13;
  } else {
   var $nearest_0_lcssa = 0;
   var $nearest_0_lcssa;
   STACKTOP = sp;
   return $nearest_0_lcssa;
  }
  while (1) {
   var $node_0118_i;
   var $n_0117_i;
   if (($73 & 65535) > HEAPU16[$node_0118_i + 6 >> 1]) {
    var $118 = 0;
   } else {
    var $118 = ($83 & 65535) >= HEAPU16[$node_0118_i >> 1];
   }
   var $118;
   if (($76 & 65535) > HEAPU16[$node_0118_i + 8 >> 1]) {
    var $126 = 0;
   } else {
    var $126 = $118 & ($87 & 65535) >= HEAPU16[$node_0118_i + 2 >> 1];
   }
   var $126;
   do {
    if (($79 & 65535) > HEAPU16[$node_0118_i + 10 >> 1]) {
     var $130 = $node_0118_i + 12 | 0;
     var $n_1_i = $n_0117_i;
     var $145 = 0;
     var $144 = $130;
     var $143 = (HEAP32[$130 >> 2] | 0) > -1;
     label = 483;
    } else {
     var $_16_i_i = $126 & ($91 & 65535) >= HEAPU16[$node_0118_i + 4 >> 1];
     var $135 = $node_0118_i + 12 | 0;
     var $136 = HEAP32[$135 >> 2];
     var $137 = ($136 | 0) > -1;
     if (!($137 & $_16_i_i & ($n_0117_i | 0) < 128)) {
      var $n_1_i = $n_0117_i;
      var $145 = $_16_i_i;
      var $144 = $135;
      var $143 = $137;
      label = 483;
      break;
     }
     HEAP32[$polys + ($n_0117_i << 2) >> 2] = $136 | $_0_i75_i;
     var $n_1_i11 = $n_0117_i + 1 | 0;
     label = 484;
    }
   } while (0);
   do {
    if (label == 483) {
     label = 0;
     var $143;
     var $144;
     var $145;
     var $n_1_i;
     if ($145 | $143) {
      var $n_1_i11 = $n_1_i;
      label = 484;
      break;
     }
     var $node_0_be_i = $node_0118_i + (-HEAP32[$144 >> 2] << 4) | 0;
     var $n_1_i10 = $n_1_i;
    }
   } while (0);
   if (label == 484) {
    label = 0;
    var $n_1_i11;
    var $node_0_be_i = $node_0118_i + 16 | 0;
    var $n_1_i10 = $n_1_i11;
   }
   var $n_1_i10;
   var $node_0_be_i;
   if ($node_0_be_i >>> 0 < $20 >>> 0) {
    var $n_0117_i = $n_1_i10;
    var $node_0118_i = $node_0_be_i;
   } else {
    var $_0_i = $n_1_i10;
    break;
   }
  }
 }
 var $_0_i;
 if (($_0_i | 0) <= 0) {
  var $nearest_0_lcssa = 0;
  var $nearest_0_lcssa;
  STACKTOP = sp;
  return $nearest_0_lcssa;
 }
 var $234 = $this + 80 | 0;
 var $235 = $closestPtPoly | 0;
 var $236 = $closestPtPoly + 4 | 0;
 var $237 = $closestPtPoly + 8 | 0;
 var $239 = $nearestPt + 4 | 0;
 var $240 = $nearestPt + 8 | 0;
 if (($nearestPt | 0) == 0) {
  var $i_015_us = 0;
  var $nearestDistanceSqr_016_us = 3.4028234663852886e+38;
  var $nearest_017_us = 0;
  while (1) {
   var $nearest_017_us;
   var $nearestDistanceSqr_016_us;
   var $i_015_us;
   var $242 = HEAP32[$polys + ($i_015_us << 2) >> 2];
   __ZNK9dtNavMesh24closestPointOnPolyInTileEPK10dtMeshTilejPKfPf($tile, (1 << HEAP32[$234 >> 2]) - 1 & $242, $center, $235);
   var $249 = HEAPF32[$235 >> 2] - HEAPF32[$center >> 2];
   var $252 = HEAPF32[$236 >> 2] - HEAPF32[$3 >> 2];
   var $255 = HEAPF32[$237 >> 2] - HEAPF32[$6 >> 2];
   var $260 = $249 * $249 + $252 * $252 + $255 * $255;
   var $261 = $260 < $nearestDistanceSqr_016_us;
   var $nearest_1_us = $261 ? $242 : $nearest_017_us;
   var $262 = $i_015_us + 1 | 0;
   if (($262 | 0) >= ($_0_i | 0)) {
    var $nearest_0_lcssa = $nearest_1_us;
    break;
   }
   var $i_015_us = $262;
   var $nearestDistanceSqr_016_us = $261 ? $260 : $nearestDistanceSqr_016_us;
   var $nearest_017_us = $nearest_1_us;
  }
  var $nearest_0_lcssa;
  STACKTOP = sp;
  return $nearest_0_lcssa;
 } else {
  var $i_015 = 0;
  var $nearestDistanceSqr_016 = 3.4028234663852886e+38;
  var $nearest_017 = 0;
 }
 while (1) {
  var $nearest_017;
  var $nearestDistanceSqr_016;
  var $i_015;
  var $265 = HEAP32[$polys + ($i_015 << 2) >> 2];
  __ZNK9dtNavMesh24closestPointOnPolyInTileEPK10dtMeshTilejPKfPf($tile, (1 << HEAP32[$234 >> 2]) - 1 & $265, $center, $235);
  var $270 = HEAPF32[$235 >> 2];
  var $272 = $270 - HEAPF32[$center >> 2];
  var $273 = HEAPF32[$236 >> 2];
  var $275 = $273 - HEAPF32[$3 >> 2];
  var $276 = HEAPF32[$237 >> 2];
  var $278 = $276 - HEAPF32[$6 >> 2];
  var $283 = $272 * $272 + $275 * $275 + $278 * $278;
  if ($283 < $nearestDistanceSqr_016) {
   HEAPF32[$nearestPt >> 2] = $270;
   HEAPF32[$239 >> 2] = $273;
   HEAPF32[$240 >> 2] = $276;
   var $nearest_1 = $265;
   var $nearestDistanceSqr_1 = $283;
  } else {
   var $nearest_1 = $nearest_017;
   var $nearestDistanceSqr_1 = $nearestDistanceSqr_016;
  }
  var $nearestDistanceSqr_1;
  var $nearest_1;
  var $287 = $i_015 + 1 | 0;
  if (($287 | 0) < ($_0_i | 0)) {
   var $i_015 = $287;
   var $nearestDistanceSqr_016 = $nearestDistanceSqr_1;
   var $nearest_017 = $nearest_1;
  } else {
   var $nearest_0_lcssa = $nearest_1;
   break;
  }
 }
 var $nearest_0_lcssa;
 STACKTOP = sp;
 return $nearest_0_lcssa;
}
function __ZNK9dtNavMesh24closestPointOnPolyInTileEPK10dtMeshTilejPKfPf($tile, $ip, $pos, $closest) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 var $verts = sp;
 var $edged = sp + 72;
 var $edget = sp + 96;
 var $h = sp + 120;
 var $2 = HEAP32[$tile + 12 >> 2];
 if ((HEAP8[$2 + ($ip << 5) + 31 | 0] & -64) << 24 >> 24 == 64) {
  var $10 = HEAPU16[$2 + ($ip << 5) + 4 >> 1] * 3 & -1;
  var $12 = HEAP32[$tile + 16 >> 2];
  var $17 = HEAPU16[$2 + ($ip << 5) + 6 >> 1] * 3 & -1;
  var $19 = HEAPF32[$12 + ($10 << 2) >> 2];
  var $20 = HEAPF32[$pos >> 2];
  var $21 = $19 - $20;
  var $22 = $12 + ($10 + 1 << 2) | 0;
  var $25 = HEAPF32[$pos + 4 >> 2];
  var $26 = HEAPF32[$22 >> 2] - $25;
  var $27 = $12 + ($10 + 2 << 2) | 0;
  var $30 = HEAPF32[$pos + 8 >> 2];
  var $31 = HEAPF32[$27 >> 2] - $30;
  var $37 = Math.sqrt($21 * $21 + $26 * $26 + $31 * $31);
  var $38 = HEAPF32[$12 + ($17 << 2) >> 2];
  var $39 = $38 - $20;
  var $40 = $12 + ($17 + 1 << 2) | 0;
  var $42 = HEAPF32[$40 >> 2] - $25;
  var $43 = $12 + ($17 + 2 << 2) | 0;
  var $45 = HEAPF32[$43 >> 2] - $30;
  var $53 = $37 / ($37 + Math.sqrt($39 * $39 + $42 * $42 + $45 * $45));
  HEAPF32[$closest >> 2] = $19 + $53 * ($38 - $19);
  var $57 = HEAPF32[$22 >> 2];
  HEAPF32[$closest + 4 >> 2] = $57 + $53 * (HEAPF32[$40 >> 2] - $57);
  var $63 = HEAPF32[$27 >> 2];
  HEAPF32[$closest + 8 >> 2] = $63 + $53 * (HEAPF32[$43 >> 2] - $63);
  STACKTOP = sp;
  return;
 }
 var $71 = HEAP32[$tile + 24 >> 2];
 var $72 = $2 + ($ip << 5) + 30 | 0;
 var $73 = HEAP8[$72];
 var $74 = $73 & 255;
 var $75 = $73 << 24 >> 24 == 0;
 if (!$75) {
  var $_pre = HEAP32[$tile + 16 >> 2];
  var $i_071 = 0;
  while (1) {
   var $i_071;
   var $78 = $i_071 * 3 & -1;
   var $83 = HEAPU16[$2 + ($ip << 5) + 4 + ($i_071 << 1) >> 1] * 3 & -1;
   HEAPF32[$verts + ($78 << 2) >> 2] = HEAPF32[$_pre + ($83 << 2) >> 2];
   HEAPF32[$verts + ($78 + 1 << 2) >> 2] = HEAPF32[$_pre + ($83 + 1 << 2) >> 2];
   HEAPF32[$verts + ($78 + 2 << 2) >> 2] = HEAPF32[$_pre + ($83 + 2 << 2) >> 2];
   var $92 = $i_071 + 1 | 0;
   if (($92 | 0) < ($74 | 0)) {
    var $i_071 = $92;
   } else {
    break;
   }
  }
 }
 HEAPF32[$closest >> 2] = HEAPF32[$pos >> 2];
 var $97 = $closest + 4 | 0;
 HEAPF32[$97 >> 2] = HEAPF32[$pos + 4 >> 2];
 var $98 = $pos + 8 | 0;
 var $100 = $closest + 8 | 0;
 HEAPF32[$100 >> 2] = HEAPF32[$98 >> 2];
 if (!__Z24dtDistancePtPolyEdgesSqrPKfS0_iPfS1_($pos, $verts | 0, $74, $edged | 0, $edget | 0)) {
  if ($75) {
   var $imin_0_lcssa = -1;
  } else {
   var $i1_068 = 0;
   var $imin_069 = -1;
   var $dmin_070 = 3.4028234663852886e+38;
   while (1) {
    var $dmin_070;
    var $imin_069;
    var $i1_068;
    var $106 = HEAPF32[$edged + ($i1_068 << 2) >> 2];
    var $107 = $106 < $dmin_070;
    var $imin_1 = $107 ? $i1_068 : $imin_069;
    var $108 = $i1_068 + 1 | 0;
    if (($108 | 0) < ($74 | 0)) {
     var $i1_068 = $108;
     var $imin_069 = $imin_1;
     var $dmin_070 = $107 ? $106 : $dmin_070;
    } else {
     var $imin_0_lcssa = $imin_1;
     break;
    }
   }
  }
  var $imin_0_lcssa;
  var $110 = $imin_0_lcssa * 3 & -1;
  var $114 = (($imin_0_lcssa + 1 | 0) % ($74 | 0) & -1) * 3 & -1;
  var $117 = HEAPF32[$edget + ($imin_0_lcssa << 2) >> 2];
  var $118 = HEAPF32[$verts + ($110 << 2) >> 2];
  HEAPF32[$closest >> 2] = $118 + $117 * (HEAPF32[$verts + ($114 << 2) >> 2] - $118);
  var $124 = HEAPF32[$verts + ($110 + 1 << 2) >> 2];
  HEAPF32[$97 >> 2] = $124 + $117 * (HEAPF32[$verts + ($114 + 1 << 2) >> 2] - $124);
  var $131 = HEAPF32[$verts + ($110 + 2 << 2) >> 2];
  HEAPF32[$100 >> 2] = $131 + $117 * (HEAPF32[$verts + ($114 + 2 << 2) >> 2] - $131);
 }
 var $137 = $71 + ($ip * 12 & -1) + 9 | 0;
 var $138 = $71 + ($ip * 12 & -1) + 4 | 0;
 var $139 = $tile + 32 | 0;
 var $140 = $tile + 16 | 0;
 var $141 = $71 + ($ip * 12 & -1) | 0;
 var $142 = $tile + 28 | 0;
 var $j_0 = 0;
 while (1) {
  var $j_0;
  if (($j_0 | 0) >= (HEAPU8[$137] | 0)) {
   label = 533;
   break;
  }
  var $150 = HEAP32[$138 >> 2] + $j_0 << 2;
  var $151 = HEAP32[$139 >> 2];
  var $152 = HEAP8[$72];
  var $153 = $152 & 255;
  var $155 = HEAP8[$151 + $150 | 0];
  var $156 = $155 & 255;
  if (($155 & 255) < ($152 & 255)) {
   var $173 = HEAP32[$140 >> 2] + ((HEAPU16[$2 + ($ip << 5) + 4 + ($156 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $173 = HEAP32[$142 >> 2] + ((($156 - $153 + HEAP32[$141 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $173;
  var $175 = HEAP8[$151 + ($150 | 1) | 0];
  var $176 = $175 & 255;
  if (($175 & 255) < ($152 & 255)) {
   var $195 = HEAP32[$140 >> 2] + ((HEAPU16[$2 + ($ip << 5) + 4 + ($176 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $195 = HEAP32[$142 >> 2] + ((($176 - $153 + HEAP32[$141 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $195;
  var $197 = HEAP8[$151 + ($150 | 2) | 0];
  var $198 = $197 & 255;
  if (($197 & 255) < ($152 & 255)) {
   var $215 = HEAP32[$140 >> 2] + ((HEAPU16[$2 + ($ip << 5) + 4 + ($198 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $215 = HEAP32[$142 >> 2] + ((($198 - $153 + HEAP32[$141 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $215;
  if (__Z28dtClosestHeightPointTrianglePKfS0_S0_S0_Rf(HEAPF32[$pos >> 2], HEAPF32[$98 >> 2], HEAPF32[$173 >> 2], HEAPF32[$173 + 4 >> 2], HEAPF32[$173 + 8 >> 2], $195, $215, $h)) {
   break;
  } else {
   var $j_0 = $j_0 + 1 | 0;
  }
 }
 if (label == 533) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$97 >> 2] = HEAPF32[$h >> 2];
 STACKTOP = sp;
 return;
}
function __Z19dtCreateNavMeshDataP21dtNavMeshCreateParamsPPhPi($params, $outData, $outDataSize) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $curNode_i = sp;
 var $2 = HEAP32[$params + 24 >> 2];
 if (($2 | 0) > 6) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $5 = $params + 4 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 | 0) > 65534 | ($6 | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $10 = $params | 0;
 if ((HEAP32[$10 >> 2] | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $14 = $params + 20 | 0;
 var $15 = HEAP32[$14 >> 2];
 if (($15 | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $18 = $params + 8 | 0;
 if ((HEAP32[$18 >> 2] | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $22 = $params + 72 | 0;
 var $23 = HEAP32[$22 >> 2];
 if (($23 | 0) > 0) {
  var $27 = _malloc($23 << 1);
  if (($27 | 0) == 0) {
   var $_0 = 0;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
  var $31 = HEAP32[$params + 32 >> 2];
  do {
   if (($31 | 0) == 0) {
    label = 544;
   } else {
    var $42 = HEAP32[$params + 36 >> 2];
    if (($42 | 0) == 0) {
     label = 544;
     break;
    }
    if (($42 | 0) > 0) {
     var $i_0520 = 0;
     var $hmax_0521 = -3.4028234663852886e+38;
     var $hmin_0522 = 3.4028234663852886e+38;
    } else {
     var $hmin_2 = 3.4028234663852886e+38;
     var $hmax_2 = -3.4028234663852886e+38;
     break;
    }
    while (1) {
     var $hmin_0522;
     var $hmax_0521;
     var $i_0520;
     var $48 = HEAPF32[$31 + (($i_0520 * 3 & -1) + 1 << 2) >> 2];
     var $50 = $hmin_0522 < $48 ? $hmin_0522 : $48;
     var $52 = $hmax_0521 > $48 ? $hmax_0521 : $48;
     var $53 = $i_0520 + 1 | 0;
     if (($53 | 0) < ($42 | 0)) {
      var $i_0520 = $53;
      var $hmax_0521 = $52;
      var $hmin_0522 = $50;
     } else {
      var $hmin_2 = $50;
      var $hmax_2 = $52;
      break;
     }
    }
   }
  } while (0);
  do {
   if (label == 544) {
    var $33 = HEAP32[$5 >> 2];
    if (($33 | 0) <= 0) {
     var $hmin_2 = 3.4028234663852886e+38;
     var $hmax_2 = -3.4028234663852886e+38;
     break;
    }
    var $35 = HEAP32[$10 >> 2];
    var $37 = HEAPF32[$params + 96 >> 2];
    var $39 = HEAPF32[$params + 132 >> 2];
    var $i1_0512 = 0;
    var $hmax_1513 = -3.4028234663852886e+38;
    var $hmin_1514 = 3.4028234663852886e+38;
    while (1) {
     var $hmin_1514;
     var $hmax_1513;
     var $i1_0512;
     var $62 = $37 + $39 * (HEAPU16[$35 + (($i1_0512 * 3 & -1) + 1 << 1) >> 1] | 0);
     var $64 = $hmin_1514 < $62 ? $hmin_1514 : $62;
     var $66 = $hmax_1513 > $62 ? $hmax_1513 : $62;
     var $67 = $i1_0512 + 1 | 0;
     if (($67 | 0) < ($33 | 0)) {
      var $i1_0512 = $67;
      var $hmax_1513 = $66;
      var $hmin_1514 = $64;
     } else {
      var $hmin_2 = $64;
      var $hmax_2 = $66;
      break;
     }
    }
   }
  } while (0);
  var $hmax_2;
  var $hmin_2;
  var $70 = HEAPF32[$params + 124 >> 2];
  var $71 = $hmin_2 - $70;
  var $72 = $hmax_2 + $70;
  var $74 = HEAPF32[$params + 92 >> 2];
  var $76 = HEAPF32[$params + 100 >> 2];
  var $78 = HEAPF32[$params + 104 >> 2];
  var $80 = HEAPF32[$params + 112 >> 2];
  if ((HEAP32[$22 >> 2] | 0) > 0) {
   var $83 = $params + 48 | 0;
   var $i3_0503 = 0;
   var $offMeshConLinkCount_0504 = 0;
   var $storedOffMeshConCount_0505 = 0;
   while (1) {
    var $storedOffMeshConCount_0505;
    var $offMeshConLinkCount_0504;
    var $i3_0503;
    var $85 = $i3_0503 << 1;
    var $86 = $i3_0503 * 6 & -1;
    var $87 = HEAP32[$83 >> 2];
    var $89 = $85 | 1;
    var $90 = $89 * 3 & -1;
    var $91 = $87 + ($90 << 2) | 0;
    var $_val388 = HEAPF32[$87 + ($86 << 2) >> 2];
    var $_idx389_val = HEAPF32[$87 + ($86 + 2 << 2) >> 2];
    var $103 = ($_val388 >= $78 | ($_val388 < $74 ? 4 : 0) | ($_idx389_val < $76 ? 8 : 0) | ($_idx389_val >= $80 ? 2 : 0)) & 255;
    if (($103 | 0) == 4) {
     var $112 = 4;
    } else if (($103 | 0) == 12) {
     var $112 = 5;
    } else if (($103 | 0) == 8) {
     var $112 = 6;
    } else if (($103 | 0) == 9) {
     var $112 = 7;
    } else if (($103 | 0) == 3) {
     var $112 = 1;
    } else if (($103 | 0) == 2) {
     var $112 = 2;
    } else if (($103 | 0) == 1) {
     var $112 = 0;
    } else if (($103 | 0) == 6) {
     var $112 = 3;
    } else {
     var $112 = -1;
    }
    var $112;
    var $113 = $27 + $85 | 0;
    HEAP8[$113] = $112;
    var $_val = HEAPF32[$91 >> 2];
    var $_idx_val = HEAPF32[$87 + ($90 + 2 << 2) >> 2];
    var $125 = ($_val >= $78 | ($_val < $74 ? 4 : 0) | ($_idx_val < $76 ? 8 : 0) | ($_idx_val >= $80 ? 2 : 0)) & 255;
    if (($125 | 0) == 8) {
     var $134 = 6;
    } else if (($125 | 0) == 9) {
     var $134 = 7;
    } else if (($125 | 0) == 1) {
     var $134 = 0;
    } else if (($125 | 0) == 3) {
     var $134 = 1;
    } else if (($125 | 0) == 4) {
     var $134 = 4;
    } else if (($125 | 0) == 12) {
     var $134 = 5;
    } else if (($125 | 0) == 2) {
     var $134 = 2;
    } else if (($125 | 0) == 6) {
     var $134 = 3;
    } else {
     var $134 = -1;
    }
    var $134;
    HEAP8[$27 + $89 | 0] = $134;
    do {
     if ($112 << 24 >> 24 == -1) {
      var $139 = HEAPF32[$87 + (($86 | 1) << 2) >> 2];
      if (!($139 < $71 | $139 > $72)) {
       var $144 = -1;
       break;
      }
      HEAP8[$113] = 0;
      var $144 = 0;
     } else {
      var $144 = $112;
     }
    } while (0);
    var $144;
    var $146 = $144 << 24 >> 24 == -1 | 0;
    var $offMeshConLinkCount_2 = $146 + $offMeshConLinkCount_0504 + ($134 << 24 >> 24 == -1) | 0;
    var $_storedOffMeshConCount_0 = $146 + $storedOffMeshConCount_0505 | 0;
    var $149 = $i3_0503 + 1 | 0;
    if (($149 | 0) < (HEAP32[$22 >> 2] | 0)) {
     var $i3_0503 = $149;
     var $offMeshConLinkCount_0504 = $offMeshConLinkCount_2;
     var $storedOffMeshConCount_0505 = $_storedOffMeshConCount_0;
    } else {
     var $offMeshConLinkCount_0_lcssa = $offMeshConLinkCount_2;
     var $storedOffMeshConCount_0_lcssa = $_storedOffMeshConCount_0;
     break;
    }
   }
  } else {
   var $offMeshConLinkCount_0_lcssa = 0;
   var $storedOffMeshConCount_0_lcssa = 0;
  }
  var $storedOffMeshConCount_0_lcssa;
  var $offMeshConLinkCount_0_lcssa;
  var $offMeshConClass_0 = $27;
  var $storedOffMeshConCount_2 = $storedOffMeshConCount_0_lcssa;
  var $offMeshConLinkCount_3 = $offMeshConLinkCount_0_lcssa;
  var $154 = HEAP32[$14 >> 2];
  var $153 = HEAP32[$5 >> 2];
 } else {
  var $offMeshConClass_0 = 0;
  var $storedOffMeshConCount_2 = 0;
  var $offMeshConLinkCount_3 = 0;
  var $154 = $15;
  var $153 = $6;
 }
 var $153;
 var $154;
 var $offMeshConLinkCount_3;
 var $storedOffMeshConCount_2;
 var $offMeshConClass_0;
 var $155 = $154 + $storedOffMeshConCount_2 | 0;
 var $157 = $153 + ($storedOffMeshConCount_2 << 1) | 0;
 var $158 = ($154 | 0) > 0;
 if ($158) {
  var $159 = HEAP32[$18 >> 2];
  var $160 = ($2 | 0) > 0;
  var $i4_0494 = 0;
  var $portalCount_0495 = 0;
  var $edgeCount_0496 = 0;
  while (1) {
   var $edgeCount_0496;
   var $portalCount_0495;
   var $i4_0494;
   var $163 = Math.imul($i4_0494 << 1, $2) | 0;
   L809 : do {
    if ($160) {
     var $164 = $163 + $2 | 0;
     var $j_0485 = 0;
     var $portalCount_1486 = $portalCount_0495;
     var $edgeCount_1487 = $edgeCount_0496;
     while (1) {
      var $edgeCount_1487;
      var $portalCount_1486;
      var $j_0485;
      if ((HEAP16[$159 + ($j_0485 + $163 << 1) >> 1] | 0) == -1) {
       var $portalCount_1_lcssa = $portalCount_1486;
       var $edgeCount_1_lcssa = $edgeCount_1487;
       break L809;
      }
      var $170 = $edgeCount_1487 + 1 | 0;
      var $172 = HEAP16[$159 + ($164 + $j_0485 << 1) >> 1];
      var $portalCount_2 = ((($172 & 65535) >>> 15 & 65535 ^ 1 | ($172 & 15) == 15) ^ 1) + $portalCount_1486 | 0;
      var $179 = $j_0485 + 1 | 0;
      if (($179 | 0) < ($2 | 0)) {
       var $j_0485 = $179;
       var $portalCount_1486 = $portalCount_2;
       var $edgeCount_1487 = $170;
      } else {
       var $portalCount_1_lcssa = $portalCount_2;
       var $edgeCount_1_lcssa = $170;
       break;
      }
     }
    } else {
     var $portalCount_1_lcssa = $portalCount_0495;
     var $edgeCount_1_lcssa = $edgeCount_0496;
    }
   } while (0);
   var $edgeCount_1_lcssa;
   var $portalCount_1_lcssa;
   var $181 = $i4_0494 + 1 | 0;
   if (($181 | 0) < ($154 | 0)) {
    var $i4_0494 = $181;
    var $portalCount_0495 = $portalCount_1_lcssa;
    var $edgeCount_0496 = $edgeCount_1_lcssa;
   } else {
    var $portalCount_0_lcssa = $portalCount_1_lcssa;
    var $edgeCount_0_lcssa = $edgeCount_1_lcssa;
    break;
   }
  }
 } else {
  var $portalCount_0_lcssa = 0;
  var $edgeCount_0_lcssa = 0;
 }
 var $edgeCount_0_lcssa;
 var $portalCount_0_lcssa;
 var $186 = ($portalCount_0_lcssa << 1) + ($offMeshConLinkCount_3 << 1) + $edgeCount_0_lcssa | 0;
 var $187 = $params + 28 | 0;
 var $188 = HEAP32[$187 >> 2];
 do {
  if (($188 | 0) == 0) {
   if (!$158) {
    var $uniqueDetailVertCount_1 = 0;
    var $detailTriCount_1 = 0;
    break;
   }
   var $190 = $2 << 1;
   var $191 = HEAP32[$18 >> 2];
   var $192 = ($2 | 0) > 0;
   var $i8_0468 = 0;
   var $detailTriCount_0469 = 0;
   while (1) {
    var $detailTriCount_0469;
    var $i8_0468;
    var $216 = Math.imul($190, $i8_0468) | 0;
    L830 : do {
     if ($192) {
      var $nv10_0460 = 0;
      while (1) {
       var $nv10_0460;
       if ((HEAP16[$191 + ($nv10_0460 + $216 << 1) >> 1] | 0) == -1) {
        var $nv10_0_lcssa = $nv10_0460;
        break L830;
       }
       var $221 = $nv10_0460 + 1 | 0;
       if (($221 | 0) < ($2 | 0)) {
        var $nv10_0460 = $221;
       } else {
        var $nv10_0_lcssa = $221;
        break;
       }
      }
     } else {
      var $nv10_0_lcssa = 0;
     }
    } while (0);
    var $nv10_0_lcssa;
    var $224 = $detailTriCount_0469 - 2 + $nv10_0_lcssa | 0;
    var $225 = $i8_0468 + 1 | 0;
    if (($225 | 0) < ($154 | 0)) {
     var $i8_0468 = $225;
     var $detailTriCount_0469 = $224;
    } else {
     var $uniqueDetailVertCount_1 = 0;
     var $detailTriCount_1 = $224;
     break;
    }
   }
  } else {
   var $195 = HEAP32[$params + 44 >> 2];
   if (!$158) {
    var $uniqueDetailVertCount_1 = 0;
    var $detailTriCount_1 = $195;
    break;
   }
   var $196 = $2 << 1;
   var $197 = HEAP32[$18 >> 2];
   var $198 = ($2 | 0) > 0;
   var $i5_0480 = 0;
   var $uniqueDetailVertCount_0481 = 0;
   while (1) {
    var $uniqueDetailVertCount_0481;
    var $i5_0480;
    var $200 = Math.imul($196, $i5_0480) | 0;
    var $204 = HEAP32[$188 + (($i5_0480 << 2 | 1) << 2) >> 2];
    L821 : do {
     if ($198) {
      var $nv_0473 = 0;
      while (1) {
       var $nv_0473;
       if ((HEAP16[$197 + ($nv_0473 + $200 << 1) >> 1] | 0) == -1) {
        var $nv_0_lcssa = $nv_0473;
        break L821;
       }
       var $209 = $nv_0473 + 1 | 0;
       if (($209 | 0) < ($2 | 0)) {
        var $nv_0473 = $209;
       } else {
        var $nv_0_lcssa = $209;
        break;
       }
      }
     } else {
      var $nv_0_lcssa = 0;
     }
    } while (0);
    var $nv_0_lcssa;
    var $212 = $204 + $uniqueDetailVertCount_0481 - $nv_0_lcssa | 0;
    var $213 = $i5_0480 + 1 | 0;
    if (($213 | 0) < ($154 | 0)) {
     var $i5_0480 = $213;
     var $uniqueDetailVertCount_0481 = $212;
    } else {
     var $uniqueDetailVertCount_1 = $212;
     var $detailTriCount_1 = $195;
     break;
    }
   }
  }
 } while (0);
 var $detailTriCount_1;
 var $uniqueDetailVertCount_1;
 var $227 = $157 * 12 & -1;
 var $228 = $155 << 5;
 var $229 = $186 * 12 & -1;
 var $230 = $154 * 12 & -1;
 var $231 = $uniqueDetailVertCount_1 * 12 & -1;
 var $232 = $detailTriCount_1 << 2;
 var $233 = $params + 136 | 0;
 var $238 = (HEAP8[$233] & 1) == 0 ? 0 : $154 << 5;
 var $247 = ($storedOffMeshConCount_2 * 36 & -1) + 100 + $228 + $227 + $229 + $232 + $231 + $230 + $238 | 0;
 var $248 = _malloc($247);
 if (($248 | 0) == 0) {
  if (($offMeshConClass_0 | 0) == 0) {
   var $_0 = 0;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
  _free($offMeshConClass_0);
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($248, 0, $247);
 var $255 = $248 + 100 | 0;
 var $_sum = $227 + 100 | 0;
 var $257 = $248 + $_sum | 0;
 var $_sum359 = $_sum + $228 + $229 | 0;
 var $259 = $248 + $_sum359 | 0;
 var $_sum360 = $230 + $_sum359 | 0;
 var $261 = $248 + $_sum360 | 0;
 var $_sum361 = $_sum360 + $231 | 0;
 var $262 = $248 + $_sum361 | 0;
 var $_sum362 = $_sum361 + $232 | 0;
 var $264 = $248 + $_sum362 | 0;
 var $266 = $248 + ($_sum362 + $238) | 0;
 HEAP32[$248 >> 2] = 1145979222;
 HEAP32[$248 + 4 >> 2] = 7;
 HEAP32[$248 + 8 >> 2] = HEAP32[$params + 80 >> 2];
 HEAP32[$248 + 12 >> 2] = HEAP32[$params + 84 >> 2];
 HEAP32[$248 + 16 >> 2] = HEAP32[$params + 88 >> 2];
 HEAP32[$248 + 20 >> 2] = HEAP32[$params + 76 >> 2];
 HEAP32[$248 + 24 >> 2] = $155;
 HEAP32[$248 + 28 >> 2] = $157;
 HEAP32[$248 + 32 >> 2] = $186;
 var $294 = $params + 92 | 0;
 HEAPF32[$248 + 72 >> 2] = HEAPF32[$294 >> 2];
 var $296 = $params + 96 | 0;
 HEAPF32[$248 + 76 >> 2] = HEAPF32[$296 >> 2];
 var $300 = $params + 100 | 0;
 HEAPF32[$248 + 80 >> 2] = HEAPF32[$300 >> 2];
 HEAPF32[$248 + 84 >> 2] = HEAPF32[$params + 104 >> 2];
 HEAPF32[$248 + 88 >> 2] = HEAPF32[$params + 108 >> 2];
 HEAPF32[$248 + 92 >> 2] = HEAPF32[$params + 112 >> 2];
 HEAP32[$248 + 36 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$248 + 40 >> 2] = $uniqueDetailVertCount_1;
 HEAP32[$248 + 44 >> 2] = $detailTriCount_1;
 var $323 = $params + 128 | 0;
 HEAPF32[$248 + 96 >> 2] = 1 / HEAPF32[$323 >> 2];
 HEAP32[$248 + 56 >> 2] = HEAP32[$14 >> 2];
 HEAPF32[$248 + 60 >> 2] = HEAPF32[$params + 116 >> 2];
 HEAPF32[$248 + 64 >> 2] = HEAPF32[$params + 120 >> 2];
 HEAPF32[$248 + 68 >> 2] = HEAPF32[$params + 124 >> 2];
 HEAP32[$248 + 52 >> 2] = $storedOffMeshConCount_2;
 if ((HEAP8[$233] & 1) == 0) {
  var $352 = 0;
 } else {
  var $352 = HEAP32[$14 >> 2] << 1;
 }
 var $352;
 HEAP32[$248 + 48 >> 2] = $352;
 var $355 = HEAP32[$5 >> 2];
 var $356 = HEAP32[$14 >> 2];
 if (($355 | 0) > 0) {
  var $358 = $params + 132 | 0;
  var $i12_0456 = 0;
  while (1) {
   var $i12_0456;
   var $363 = $i12_0456 * 3 & -1;
   var $364 = HEAP32[$10 >> 2];
   HEAPF32[$255 + ($363 << 2) >> 2] = HEAPF32[$294 >> 2] + HEAPF32[$323 >> 2] * (HEAPU16[$364 + ($363 << 1) >> 1] | 0);
   var $_sum371 = $363 + 1 | 0;
   HEAPF32[$255 + ($_sum371 << 2) >> 2] = HEAPF32[$296 >> 2] + HEAPF32[$358 >> 2] * (HEAPU16[$364 + ($_sum371 << 1) >> 1] | 0);
   var $_sum373 = $363 + 2 | 0;
   HEAPF32[$255 + ($_sum373 << 2) >> 2] = HEAPF32[$300 >> 2] + HEAPF32[$323 >> 2] * (HEAPU16[$364 + ($_sum373 << 1) >> 1] | 0);
   var $392 = $i12_0456 + 1 | 0;
   if (($392 | 0) < (HEAP32[$5 >> 2] | 0)) {
    var $i12_0456 = $392;
   } else {
    break;
   }
  }
 }
 var $359 = HEAP32[$22 >> 2];
 if (($359 | 0) > 0) {
  var $361 = $params + 48 | 0;
  var $n_0452 = 0;
  var $i14_0453 = 0;
  var $396 = $359;
  while (1) {
   var $396;
   var $i14_0453;
   var $n_0452;
   if ((HEAP8[$offMeshConClass_0 + ($i14_0453 << 1) | 0] | 0) == -1) {
    var $402 = $i14_0453 * 6 & -1;
    var $403 = HEAP32[$361 >> 2];
    var $407 = (($n_0452 << 1) + $355) * 3 & -1;
    HEAPF32[$255 + ($407 << 2) >> 2] = HEAPF32[$403 + ($402 << 2) >> 2];
    HEAPF32[$255 + ($407 + 1 << 2) >> 2] = HEAPF32[$403 + (($402 | 1) << 2) >> 2];
    HEAPF32[$255 + ($407 + 2 << 2) >> 2] = HEAPF32[$403 + ($402 + 2 << 2) >> 2];
    HEAPF32[$255 + ($407 + 3 << 2) >> 2] = HEAPF32[$403 + ($402 + 3 << 2) >> 2];
    HEAPF32[$255 + ($407 + 4 << 2) >> 2] = HEAPF32[$403 + ($402 + 4 << 2) >> 2];
    HEAPF32[$255 + ($407 + 5 << 2) >> 2] = HEAPF32[$403 + ($402 + 5 << 2) >> 2];
    var $n_1 = $n_0452 + 1 | 0;
    var $427 = HEAP32[$22 >> 2];
   } else {
    var $n_1 = $n_0452;
    var $427 = $396;
   }
   var $427;
   var $n_1;
   var $428 = $i14_0453 + 1 | 0;
   if (($428 | 0) < ($427 | 0)) {
    var $n_0452 = $n_1;
    var $i14_0453 = $428;
    var $396 = $427;
   } else {
    var $430 = $427;
    break;
   }
  }
 } else {
  var $430 = $359;
 }
 var $430;
 var $431 = HEAP32[$14 >> 2];
 if (($431 | 0) > 0) {
  var $434 = $params + 12 | 0;
  var $435 = $params + 16 | 0;
  var $436 = ($2 | 0) > 0;
  var $437 = $2 << 1;
  var $src_0445 = HEAP32[$18 >> 2];
  var $i16_0447 = 0;
  while (1) {
   var $i16_0447;
   var $src_0445;
   var $444 = $257 + ($i16_0447 << 5) + 30 | 0;
   HEAP8[$444] = 0;
   HEAP16[$257 + ($i16_0447 << 5) + 28 >> 1] = HEAP16[HEAP32[$434 >> 2] + ($i16_0447 << 1) >> 1];
   HEAP8[$257 + ($i16_0447 << 5) + 31 | 0] = HEAP8[HEAP32[$435 >> 2] + $i16_0447 | 0] & 63;
   L863 : do {
    if ($436) {
     var $j18_0440 = 0;
     while (1) {
      var $j18_0440;
      var $455 = HEAP16[$src_0445 + ($j18_0440 << 1) >> 1];
      if ($455 << 16 >> 16 == -1) {
       break L863;
      }
      HEAP16[$257 + ($i16_0447 << 5) + 4 + ($j18_0440 << 1) >> 1] = $455;
      var $461 = HEAP16[$src_0445 + ($j18_0440 + $2 << 1) >> 1];
      do {
       if ($461 << 16 >> 16 > -1) {
        HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = $461 + 1 & 65535;
       } else {
        var $464 = $461 & 15;
        if ($464 << 16 >> 16 == 15) {
         HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = 0;
         break;
        } else if ($464 << 16 >> 16 == 0) {
         HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = -32764;
         break;
        } else if ($464 << 16 >> 16 == 1) {
         HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = -32766;
         break;
        } else if ($464 << 16 >> 16 == 2) {
         HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = -32768;
         break;
        } else if ($464 << 16 >> 16 == 3) {
         HEAP16[$257 + ($i16_0447 << 5) + 16 + ($j18_0440 << 1) >> 1] = -32762;
         break;
        } else {
         break;
        }
       }
      } while (0);
      HEAP8[$444] = HEAP8[$444] + 1 & 255;
      var $481 = $j18_0440 + 1 | 0;
      if (($481 | 0) < ($2 | 0)) {
       var $j18_0440 = $481;
      } else {
       break;
      }
     }
    }
   } while (0);
   var $484 = $i16_0447 + 1 | 0;
   var $485 = HEAP32[$14 >> 2];
   if (($484 | 0) < ($485 | 0)) {
    var $src_0445 = $src_0445 + ($437 << 1) | 0;
    var $i16_0447 = $484;
   } else {
    break;
   }
  }
  var $439 = HEAP32[$22 >> 2];
  var $438 = $485;
 } else {
  var $439 = $430;
  var $438 = $431;
 }
 var $438;
 var $439;
 if (($439 | 0) > 0) {
  var $441 = $params + 56 | 0;
  var $442 = $params + 60 | 0;
  var $n_2436 = 0;
  var $i20_0437 = 0;
  var $488 = $439;
  while (1) {
   var $488;
   var $i20_0437;
   var $n_2436;
   if ((HEAP8[$offMeshConClass_0 + ($i20_0437 << 1) | 0] | 0) == -1) {
    var $494 = $n_2436 + $356 | 0;
    HEAP8[$257 + ($494 << 5) + 30 | 0] = 2;
    var $497 = ($n_2436 << 1) + $355 | 0;
    HEAP16[$257 + ($494 << 5) + 4 >> 1] = $497 & 65535;
    HEAP16[$257 + ($494 << 5) + 6 >> 1] = $497 + 1 & 65535;
    HEAP16[$257 + ($494 << 5) + 28 >> 1] = HEAP16[HEAP32[$441 >> 2] + ($i20_0437 << 1) >> 1];
    HEAP8[$257 + ($494 << 5) + 31 | 0] = HEAP8[HEAP32[$442 >> 2] + $i20_0437 | 0] & 63 | 64;
    var $n_3 = $n_2436 + 1 | 0;
    var $515 = HEAP32[$22 >> 2];
   } else {
    var $n_3 = $n_2436;
    var $515 = $488;
   }
   var $515;
   var $n_3;
   var $516 = $i20_0437 + 1 | 0;
   if (($516 | 0) < ($515 | 0)) {
    var $n_2436 = $n_3;
    var $i20_0437 = $516;
    var $488 = $515;
   } else {
    break;
   }
  }
  var $518 = HEAP32[$14 >> 2];
 } else {
  var $518 = $438;
 }
 var $518;
 var $519 = HEAP32[$187 >> 2];
 var $521 = ($518 | 0) > 0;
 do {
  if (($519 | 0) == 0) {
   if ($521) {
    var $tbase_0427 = 0;
    var $i25_0428 = 0;
   } else {
    break;
   }
   while (1) {
    var $i25_0428;
    var $tbase_0427;
    var $573 = HEAP8[$257 + ($i25_0428 << 5) + 30 | 0];
    var $574 = $573 & 255;
    HEAP32[$259 + ($i25_0428 * 12 & -1) >> 2] = 0;
    HEAP8[$259 + ($i25_0428 * 12 & -1) + 8 | 0] = 0;
    HEAP32[$259 + ($i25_0428 * 12 & -1) + 4 >> 2] = $tbase_0427;
    HEAP8[$259 + ($i25_0428 * 12 & -1) + 9 | 0] = $573 - 2 & 255;
    if (($573 & 255) > 2) {
     var $581 = $574 - 1 | 0;
     var $smax = $574 >>> 0 > 3 ? $574 : 3;
     var $tbase_1421 = $tbase_0427;
     var $j28_0422 = 2;
     while (1) {
      var $j28_0422;
      var $tbase_1421;
      var $_sum365 = ($tbase_1421 << 2) + $_sum361 | 0;
      HEAP8[$248 + $_sum365 | 0] = 0;
      HEAP8[$248 + ($_sum365 + 1) | 0] = $j28_0422 + 255 & 255;
      HEAP8[$248 + ($_sum365 + 2) | 0] = $j28_0422 & 255;
      var $_ = ($j28_0422 | 0) == 2 ? 5 : 4;
      HEAP8[$248 + ($_sum365 + 3) | 0] = ($j28_0422 | 0) == ($581 | 0) ? $_ | 16 : $_;
      var $596 = $j28_0422 + 1 | 0;
      if (($596 | 0) < ($574 | 0)) {
       var $tbase_1421 = $tbase_1421 + 1 | 0;
       var $j28_0422 = $596;
      } else {
       break;
      }
     }
     var $tbase_1_lcssa = $tbase_0427 - 2 + $smax | 0;
    } else {
     var $tbase_1_lcssa = $tbase_0427;
    }
    var $tbase_1_lcssa;
    var $601 = $i25_0428 + 1 | 0;
    if (($601 | 0) < (HEAP32[$14 >> 2] | 0)) {
     var $tbase_0427 = $tbase_1_lcssa;
     var $i25_0428 = $601;
    } else {
     break;
    }
   }
  } else {
   L900 : do {
    if ($521) {
     var $522 = $params + 32 | 0;
     var $vbase_0431 = 0;
     var $i22_0432 = 0;
     var $524 = $519;
     while (1) {
      var $524;
      var $i22_0432;
      var $vbase_0431;
      var $525 = $i22_0432 << 2;
      var $527 = HEAP32[$524 + ($525 << 2) >> 2];
      var $530 = HEAP32[$524 + (($525 | 1) << 2) >> 2];
      var $533 = HEAPU8[$257 + ($i22_0432 << 5) + 30 | 0];
      var $534 = $vbase_0431 & 65535;
      HEAP32[$259 + ($i22_0432 * 12 & -1) >> 2] = $534;
      var $536 = $530 - $533 | 0;
      HEAP8[$259 + ($i22_0432 * 12 & -1) + 8 | 0] = $536 & 255;
      HEAP32[$259 + ($i22_0432 * 12 & -1) + 4 >> 2] = HEAP32[HEAP32[$187 >> 2] + (($525 | 2) << 2) >> 2];
      HEAP8[$259 + ($i22_0432 * 12 & -1) + 9 | 0] = HEAP32[HEAP32[$187 >> 2] + (($525 | 3) << 2) >> 2] & 255;
      if (($530 | 0) == ($533 | 0)) {
       var $vbase_1 = $vbase_0431;
      } else {
       var $554 = $261 + (($534 * 3 & -1) << 2) | 0;
       var $559 = HEAP32[$522 >> 2] + ((($533 + $527) * 3 & -1) << 2) | 0;
       var $560 = $536 * 12 & -1;
       _memcpy($554, $559, $560) | 0;
       var $vbase_1 = $536 + $534 & 65535;
      }
      var $vbase_1;
      var $564 = $i22_0432 + 1 | 0;
      if (($564 | 0) >= (HEAP32[$14 >> 2] | 0)) {
       break L900;
      }
      var $vbase_0431 = $vbase_1;
      var $i22_0432 = $564;
      var $524 = HEAP32[$187 >> 2];
     }
    }
   } while (0);
   var $568 = HEAP32[$params + 40 >> 2];
   var $571 = HEAP32[$params + 44 >> 2] << 2;
   _memcpy($262, $568, $571) | 0;
  }
 } while (0);
 do {
  if ((HEAP8[$233] & 1) != 0) {
   var $608 = HEAP32[$10 >> 2];
   var $609 = HEAP32[$18 >> 2];
   var $610 = HEAP32[$14 >> 2];
   var $611 = HEAPF32[$323 >> 2];
   var $613 = HEAPF32[$params + 132 >> 2];
   var $616 = _malloc($610 << 4);
   var $617 = $616;
   do {
    if (($610 | 0) > 0) {
     var $619 = $2 << 1;
     if (($2 | 0) > 1) {
      var $i_02_us_i = 0;
     } else {
      var $i_02_i = 0;
      while (1) {
       var $i_02_i;
       HEAP32[$617 + ($i_02_i << 4) + 12 >> 2] = $i_02_i;
       var $710 = $609 + (Math.imul($i_02_i, $619) << 1) | 0;
       var $715 = HEAP16[$608 + ((HEAPU16[$710 >> 1] * 3 & -1) << 1) >> 1];
       HEAP16[$617 + ($i_02_i << 4) + 6 >> 1] = $715;
       HEAP16[$617 + ($i_02_i << 4) >> 1] = $715;
       var $723 = HEAP16[$608 + ((HEAPU16[$710 >> 1] * 3 & -1) + 1 << 1) >> 1];
       var $724 = $617 + ($i_02_i << 4) + 8 | 0;
       HEAP16[$724 >> 1] = $723;
       var $725 = $617 + ($i_02_i << 4) + 2 | 0;
       HEAP16[$725 >> 1] = $723;
       var $731 = HEAP16[$608 + ((HEAPU16[$710 >> 1] * 3 & -1) + 2 << 1) >> 1];
       HEAP16[$617 + ($i_02_i << 4) + 10 >> 1] = $731;
       HEAP16[$617 + ($i_02_i << 4) + 4 >> 1] = $731;
       var $736 = $613 * ($723 & 65535) / $611;
       var $737 = Math.floor($736);
       HEAP16[$725 >> 1] = $737 >= 0 ? Math.floor($737) : Math.ceil($737);
       var $739 = Math.ceil($736);
       HEAP16[$724 >> 1] = $739 >= 0 ? Math.floor($739) : Math.ceil($739);
       var $741 = $i_02_i + 1 | 0;
       if (($741 | 0) < ($610 | 0)) {
        var $i_02_i = $741;
       } else {
        break;
       }
      }
      HEAP32[$curNode_i >> 2] = 0;
      __ZL9subdivideP6BVItemiiiRiP8dtBVNode($617, 0, $610, $curNode_i, $264);
      break;
     }
     while (1) {
      var $i_02_us_i;
      HEAP32[$617 + ($i_02_us_i << 4) + 12 >> 2] = $i_02_us_i;
      var $683 = Math.imul($i_02_us_i, $619) | 0;
      var $684 = $609 + ($683 << 1) | 0;
      var $689 = HEAP16[$608 + ((HEAPU16[$684 >> 1] * 3 & -1) << 1) >> 1];
      var $690 = $617 + ($i_02_us_i << 4) + 6 | 0;
      HEAP16[$690 >> 1] = $689;
      var $691 = $617 + ($i_02_us_i << 4) | 0;
      HEAP16[$691 >> 1] = $689;
      var $697 = HEAP16[$608 + ((HEAPU16[$684 >> 1] * 3 & -1) + 1 << 1) >> 1];
      var $698 = $617 + ($i_02_us_i << 4) + 8 | 0;
      HEAP16[$698 >> 1] = $697;
      var $699 = $617 + ($i_02_us_i << 4) + 2 | 0;
      HEAP16[$699 >> 1] = $697;
      var $705 = HEAP16[$608 + ((HEAPU16[$684 >> 1] * 3 & -1) + 2 << 1) >> 1];
      var $706 = $617 + ($i_02_us_i << 4) + 10 | 0;
      HEAP16[$706 >> 1] = $705;
      var $707 = $617 + ($i_02_us_i << 4) + 4 | 0;
      HEAP16[$707 >> 1] = $705;
      var $j_01_us_i = 1;
      var $627 = $689;
      var $626 = $697;
      var $625 = $705;
      var $624 = $689;
      var $623 = $697;
      var $622 = $705;
      while (1) {
       var $622;
       var $623;
       var $624;
       var $625;
       var $626;
       var $627;
       var $j_01_us_i;
       var $629 = HEAP16[$609 + ($j_01_us_i + $683 << 1) >> 1];
       if ($629 << 16 >> 16 == -1) {
        var $669 = $626;
        var $668 = $623;
        break;
       }
       var $633 = ($629 & 65535) * 3 & -1;
       var $635 = HEAP16[$608 + ($633 << 1) >> 1];
       var $638 = HEAP16[$608 + ($633 + 1 << 1) >> 1];
       var $641 = HEAP16[$608 + ($633 + 2 << 1) >> 1];
       if (($635 & 65535) < ($627 & 65535)) {
        HEAP16[$691 >> 1] = $635;
        var $645 = $635;
       } else {
        var $645 = $627;
       }
       var $645;
       if (($638 & 65535) < ($626 & 65535)) {
        HEAP16[$699 >> 1] = $638;
        var $649 = $638;
       } else {
        var $649 = $626;
       }
       var $649;
       if (($641 & 65535) < ($625 & 65535)) {
        HEAP16[$707 >> 1] = $641;
        var $653 = $641;
       } else {
        var $653 = $625;
       }
       var $653;
       if (($635 & 65535) > ($624 & 65535)) {
        HEAP16[$690 >> 1] = $635;
        var $657 = $635;
       } else {
        var $657 = $624;
       }
       var $657;
       if (($638 & 65535) > ($623 & 65535)) {
        HEAP16[$698 >> 1] = $638;
        var $661 = $638;
       } else {
        var $661 = $623;
       }
       var $661;
       if (($641 & 65535) > ($622 & 65535)) {
        HEAP16[$706 >> 1] = $641;
        var $665 = $641;
       } else {
        var $665 = $622;
       }
       var $665;
       var $666 = $j_01_us_i + 1 | 0;
       if (($666 | 0) < ($2 | 0)) {
        var $j_01_us_i = $666;
        var $627 = $645;
        var $626 = $649;
        var $625 = $653;
        var $624 = $657;
        var $623 = $661;
        var $622 = $665;
       } else {
        var $669 = $649;
        var $668 = $661;
        break;
       }
      }
      var $668;
      var $669;
      var $673 = Math.floor($613 * ($669 & 65535) / $611);
      HEAP16[$699 >> 1] = $673 >= 0 ? Math.floor($673) : Math.ceil($673);
      var $678 = Math.ceil($613 * ($668 & 65535) / $611);
      HEAP16[$698 >> 1] = $678 >= 0 ? Math.floor($678) : Math.ceil($678);
      var $680 = $i_02_us_i + 1 | 0;
      if (($680 | 0) < ($610 | 0)) {
       var $i_02_us_i = $680;
      } else {
       label = 664;
       break;
      }
     }
    } else {
     label = 664;
    }
   } while (0);
   if (label == 664) {
    HEAP32[$curNode_i >> 2] = 0;
    __ZL9subdivideP6BVItemiiiRiP8dtBVNode($617, 0, $610, $curNode_i, $264);
    if (($616 | 0) == 0) {
     break;
    }
   }
   _free($616);
  }
 } while (0);
 var $745 = HEAP32[$22 >> 2];
 if (($745 | 0) > 0) {
  var $747 = $params + 48 | 0;
  var $748 = $params + 52 | 0;
  var $749 = $params + 64 | 0;
  var $750 = $params + 68 | 0;
  var $n_4417 = 0;
  var $i29_0418 = 0;
  var $752 = $745;
  while (1) {
   var $752;
   var $i29_0418;
   var $n_4417;
   var $753 = $i29_0418 << 1;
   if ((HEAP8[$offMeshConClass_0 + $753 | 0] | 0) == -1) {
    HEAP16[$266 + ($n_4417 * 36 & -1) + 28 >> 1] = $n_4417 + $356 & 65535;
    var $761 = $i29_0418 * 6 & -1;
    var $762 = HEAP32[$747 >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) >> 2] = HEAPF32[$762 + ($761 << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 4 >> 2] = HEAPF32[$762 + (($761 | 1) << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 8 >> 2] = HEAPF32[$762 + ($761 + 2 << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 12 >> 2] = HEAPF32[$762 + ($761 + 3 << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 16 >> 2] = HEAPF32[$762 + ($761 + 4 << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 20 >> 2] = HEAPF32[$762 + ($761 + 5 << 2) >> 2];
    HEAPF32[$266 + ($n_4417 * 36 & -1) + 24 >> 2] = HEAPF32[HEAP32[$748 >> 2] + ($i29_0418 << 2) >> 2];
    HEAP8[$266 + ($n_4417 * 36 & -1) + 30 | 0] = (HEAP8[HEAP32[$749 >> 2] + $i29_0418 | 0] | 0) != 0 | 0;
    HEAP8[$266 + ($n_4417 * 36 & -1) + 31 | 0] = HEAP8[$offMeshConClass_0 + ($753 | 1) | 0];
    var $795 = HEAP32[$750 >> 2];
    if (($795 | 0) != 0) {
     HEAP32[$266 + ($n_4417 * 36 & -1) + 32 >> 2] = HEAP32[$795 + ($i29_0418 << 2) >> 2];
    }
    var $n_5 = $n_4417 + 1 | 0;
    var $804 = HEAP32[$22 >> 2];
   } else {
    var $n_5 = $n_4417;
    var $804 = $752;
   }
   var $804;
   var $n_5;
   var $805 = $i29_0418 + 1 | 0;
   if (($805 | 0) < ($804 | 0)) {
    var $n_4417 = $n_5;
    var $i29_0418 = $805;
    var $752 = $804;
   } else {
    break;
   }
  }
 }
 if (($offMeshConClass_0 | 0) != 0) {
  _free($offMeshConClass_0);
 }
 HEAP32[$outData >> 2] = $248;
 HEAP32[$outDataSize >> 2] = $247;
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZL12compareItemXPKvS0_($va, $vb) {
 var $2 = HEAP16[$va >> 1];
 var $4 = HEAP16[$vb >> 1];
 if (($2 & 65535) < ($4 & 65535)) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $_0 = ($2 & 65535) > ($4 & 65535) | 0;
 var $_0;
 return $_0;
}
function __ZL12compareItemYPKvS0_($va, $vb) {
 var $3 = HEAP16[$va + 2 >> 1];
 var $6 = HEAP16[$vb + 2 >> 1];
 if (($3 & 65535) < ($6 & 65535)) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $_0 = ($3 & 65535) > ($6 & 65535) | 0;
 var $_0;
 return $_0;
}
function __ZL12compareItemZPKvS0_($va, $vb) {
 var $3 = HEAP16[$va + 4 >> 1];
 var $6 = HEAP16[$vb + 4 >> 1];
 if (($3 & 65535) < ($6 & 65535)) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $_0 = ($3 & 65535) > ($6 & 65535) | 0;
 var $_0;
 return $_0;
}
function __ZNK14dtNavMeshQuery15getPortalPointsEjPK6dtPolyPK10dtMeshTilejS2_S5_PfS6_($from, $fromPoly, $fromTile, $to, $toPoly, $toTile, $left, $right) {
 var label = 0;
 var $i_093 = HEAP32[$fromPoly >> 2];
 if (($i_093 | 0) == -1) {
  var $_0 = -2147483640;
  var $_0;
  return $_0;
 }
 var $4 = HEAP32[$fromTile + 20 >> 2];
 var $i_094 = $i_093;
 while (1) {
  var $i_094;
  var $6 = $4 + ($i_094 * 12 & -1) | 0;
  if ((HEAP32[$6 >> 2] | 0) == ($to | 0)) {
   break;
  }
  var $i_0 = HEAP32[$4 + ($i_094 * 12 & -1) + 4 >> 2];
  if (($i_0 | 0) == -1) {
   var $_0 = -2147483640;
   label = 720;
   break;
  } else {
   var $i_094 = $i_0;
  }
 }
 if (label == 720) {
  var $_0;
  return $_0;
 }
 if (($6 | 0) == 0) {
  var $_0 = -2147483640;
  var $_0;
  return $_0;
 }
 if ((HEAP8[$fromPoly + 31 | 0] & -64) << 24 >> 24 == 64) {
  var $i1_082 = $i_093;
  while (1) {
   var $i1_082;
   if ((HEAP32[$4 + ($i1_082 * 12 & -1) >> 2] | 0) == ($to | 0)) {
    break;
   }
   var $i1_0 = HEAP32[$4 + ($i1_082 * 12 & -1) + 4 >> 2];
   if (($i1_0 | 0) == -1) {
    var $_0 = -2147483640;
    label = 729;
    break;
   } else {
    var $i1_082 = $i1_0;
   }
  }
  if (label == 729) {
   var $_0;
   return $_0;
  }
  var $26 = $fromPoly + 4 + (HEAPU8[$4 + ($i1_082 * 12 & -1) + 8 | 0] << 1) | 0;
  var $29 = HEAPU16[$26 >> 1] * 3 & -1;
  var $30 = $fromTile + 16 | 0;
  var $31 = HEAP32[$30 >> 2];
  HEAPF32[$left >> 2] = HEAPF32[$31 + ($29 << 2) >> 2];
  HEAPF32[$left + 4 >> 2] = HEAPF32[$31 + ($29 + 1 << 2) >> 2];
  HEAPF32[$left + 8 >> 2] = HEAPF32[$31 + ($29 + 2 << 2) >> 2];
  var $42 = HEAPU16[$26 >> 1] * 3 & -1;
  var $43 = HEAP32[$30 >> 2];
  HEAPF32[$right >> 2] = HEAPF32[$43 + ($42 << 2) >> 2];
  HEAPF32[$right + 4 >> 2] = HEAPF32[$43 + ($42 + 1 << 2) >> 2];
  HEAPF32[$right + 8 >> 2] = HEAPF32[$43 + ($42 + 2 << 2) >> 2];
  var $_0 = 1073741824;
  var $_0;
  return $_0;
 }
 if ((HEAP8[$toPoly + 31 | 0] & -64) << 24 >> 24 != 64) {
  var $104 = HEAPU8[$4 + ($i_094 * 12 & -1) + 8 | 0];
  var $115 = HEAPU16[$fromPoly + 4 + (((($104 + 1 | 0) >>> 0) % (HEAPU8[$fromPoly + 30 | 0] >>> 0) & -1) << 1) >> 1];
  var $116 = HEAPU16[$fromPoly + 4 + ($104 << 1) >> 1] * 3 & -1;
  var $117 = $fromTile + 16 | 0;
  var $118 = HEAP32[$117 >> 2];
  HEAPF32[$left >> 2] = HEAPF32[$118 + ($116 << 2) >> 2];
  var $_sum = $116 + 1 | 0;
  var $123 = $left + 4 | 0;
  HEAPF32[$123 >> 2] = HEAPF32[$118 + ($_sum << 2) >> 2];
  var $_sum61 = $116 + 2 | 0;
  var $126 = $left + 8 | 0;
  HEAPF32[$126 >> 2] = HEAPF32[$118 + ($_sum61 << 2) >> 2];
  var $127 = $115 * 3 & -1;
  var $128 = HEAP32[$117 >> 2];
  HEAPF32[$right >> 2] = HEAPF32[$128 + ($127 << 2) >> 2];
  var $_sum62 = $127 + 1 | 0;
  var $133 = $right + 4 | 0;
  HEAPF32[$133 >> 2] = HEAPF32[$128 + ($_sum62 << 2) >> 2];
  var $_sum63 = $127 + 2 | 0;
  var $136 = $right + 8 | 0;
  HEAPF32[$136 >> 2] = HEAPF32[$128 + ($_sum63 << 2) >> 2];
  if ((HEAP8[$4 + ($i_094 * 12 & -1) + 9 | 0] | 0) == -1) {
   var $_0 = 1073741824;
   var $_0;
   return $_0;
  }
  var $142 = HEAP8[$4 + ($i_094 * 12 & -1) + 10 | 0];
  var $145 = HEAP8[$4 + ($i_094 * 12 & -1) + 11 | 0];
  if ($142 << 24 >> 24 == 0 & $145 << 24 >> 24 == -1) {
   var $_0 = 1073741824;
   var $_0;
   return $_0;
  }
  var $149 = ($142 & 255 | 0) * .003921568859368563;
  var $152 = ($145 & 255 | 0) * .003921568859368563;
  var $153 = HEAP32[$117 >> 2];
  var $156 = HEAPF32[$153 + ($116 << 2) >> 2];
  HEAPF32[$left >> 2] = $156 + $149 * (HEAPF32[$153 + ($127 << 2) >> 2] - $156);
  var $162 = HEAPF32[$153 + ($_sum << 2) >> 2];
  HEAPF32[$123 >> 2] = $162 + $149 * (HEAPF32[$153 + ($_sum62 << 2) >> 2] - $162);
  var $169 = HEAPF32[$153 + ($_sum61 << 2) >> 2];
  HEAPF32[$126 >> 2] = $169 + $149 * (HEAPF32[$153 + ($_sum63 << 2) >> 2] - $169);
  var $175 = HEAP32[$117 >> 2];
  var $178 = HEAPF32[$175 + ($116 << 2) >> 2];
  HEAPF32[$right >> 2] = $178 + $152 * (HEAPF32[$175 + ($127 << 2) >> 2] - $178);
  var $184 = HEAPF32[$175 + ($_sum << 2) >> 2];
  HEAPF32[$133 >> 2] = $184 + $152 * (HEAPF32[$175 + ($_sum62 << 2) >> 2] - $184);
  var $191 = HEAPF32[$175 + ($_sum61 << 2) >> 2];
  HEAPF32[$136 >> 2] = $191 + $152 * (HEAPF32[$175 + ($_sum63 << 2) >> 2] - $191);
  var $_0 = 1073741824;
  var $_0;
  return $_0;
 }
 var $i2_086 = HEAP32[$toPoly >> 2];
 if (($i2_086 | 0) == -1) {
  var $_0 = -2147483640;
  var $_0;
  return $_0;
 }
 var $63 = HEAP32[$toTile + 20 >> 2];
 var $i2_087 = $i2_086;
 while (1) {
  var $i2_087;
  if ((HEAP32[$63 + ($i2_087 * 12 & -1) >> 2] | 0) == ($from | 0)) {
   break;
  }
  var $i2_0 = HEAP32[$63 + ($i2_087 * 12 & -1) + 4 >> 2];
  if (($i2_0 | 0) == -1) {
   var $_0 = -2147483640;
   label = 725;
   break;
  } else {
   var $i2_087 = $i2_0;
  }
 }
 if (label == 725) {
  var $_0;
  return $_0;
 }
 var $72 = $toPoly + 4 + (HEAPU8[$63 + ($i2_087 * 12 & -1) + 8 | 0] << 1) | 0;
 var $75 = HEAPU16[$72 >> 1] * 3 & -1;
 var $76 = $toTile + 16 | 0;
 var $77 = HEAP32[$76 >> 2];
 HEAPF32[$left >> 2] = HEAPF32[$77 + ($75 << 2) >> 2];
 HEAPF32[$left + 4 >> 2] = HEAPF32[$77 + ($75 + 1 << 2) >> 2];
 HEAPF32[$left + 8 >> 2] = HEAPF32[$77 + ($75 + 2 << 2) >> 2];
 var $88 = HEAPU16[$72 >> 1] * 3 & -1;
 var $89 = HEAP32[$76 >> 2];
 HEAPF32[$right >> 2] = HEAPF32[$89 + ($88 << 2) >> 2];
 HEAPF32[$right + 4 >> 2] = HEAPF32[$89 + ($88 + 1 << 2) >> 2];
 HEAPF32[$right + 8 >> 2] = HEAPF32[$89 + ($88 + 2 << 2) >> 2];
 var $_0 = 1073741824;
 var $_0;
 return $_0;
}
function __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $imin, $imax, $curNode, $nodes) {
 var $1 = $imax - $imin | 0;
 var $2 = HEAP32[$curNode >> 2];
 HEAP32[$curNode >> 2] = $2 + 1;
 var $4 = $nodes + ($2 << 4) | 0;
 if (($1 | 0) == 1) {
  HEAP16[$4 >> 1] = HEAP16[$items + ($imin << 4) >> 1];
  HEAP16[$nodes + ($2 << 4) + 2 >> 1] = HEAP16[$items + ($imin << 4) + 2 >> 1];
  HEAP16[$nodes + ($2 << 4) + 4 >> 1] = HEAP16[$items + ($imin << 4) + 4 >> 1];
  HEAP16[$nodes + ($2 << 4) + 6 >> 1] = HEAP16[$items + ($imin << 4) + 6 >> 1];
  HEAP16[$nodes + ($2 << 4) + 8 >> 1] = HEAP16[$items + ($imin << 4) + 8 >> 1];
  HEAP16[$nodes + ($2 << 4) + 10 >> 1] = HEAP16[$items + ($imin << 4) + 10 >> 1];
  HEAP32[$nodes + ($2 << 4) + 12 >> 2] = HEAP32[$items + ($imin << 4) + 12 >> 2];
  return;
 }
 var $29 = $4 | 0;
 var $30 = $nodes + ($2 << 4) + 6 | 0;
 var $32 = HEAP16[$items + ($imin << 4) >> 1];
 HEAP16[$29 >> 1] = $32;
 var $34 = HEAP16[$items + ($imin << 4) + 2 >> 1];
 var $35 = $nodes + ($2 << 4) + 2 | 0;
 HEAP16[$35 >> 1] = $34;
 var $37 = HEAP16[$items + ($imin << 4) + 4 >> 1];
 var $38 = $nodes + ($2 << 4) + 4 | 0;
 HEAP16[$38 >> 1] = $37;
 var $40 = HEAP16[$items + ($imin << 4) + 6 >> 1];
 HEAP16[$30 >> 1] = $40;
 var $42 = HEAP16[$items + ($imin << 4) + 8 >> 1];
 var $43 = $nodes + ($2 << 4) + 8 | 0;
 HEAP16[$43 >> 1] = $42;
 var $45 = HEAP16[$items + ($imin << 4) + 10 >> 1];
 var $46 = $nodes + ($2 << 4) + 10 | 0;
 HEAP16[$46 >> 1] = $45;
 var $i_01_i = $imin + 1 | 0;
 if (($i_01_i | 0) < ($imax | 0)) {
  var $i_02_i = $i_01_i;
  var $53 = $32;
  var $52 = $34;
  var $51 = $37;
  var $50 = $40;
  var $49 = $42;
  var $48 = $45;
  while (1) {
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $i_02_i;
   var $55 = HEAP16[$items + ($i_02_i << 4) >> 1];
   if (($55 & 65535) < ($53 & 65535)) {
    HEAP16[$29 >> 1] = $55;
    var $58 = $55;
   } else {
    var $58 = $53;
   }
   var $58;
   var $60 = HEAP16[$items + ($i_02_i << 4) + 2 >> 1];
   if (($60 & 65535) < ($52 & 65535)) {
    HEAP16[$35 >> 1] = $60;
    var $63 = $60;
   } else {
    var $63 = $52;
   }
   var $63;
   var $65 = HEAP16[$items + ($i_02_i << 4) + 4 >> 1];
   if (($65 & 65535) < ($51 & 65535)) {
    HEAP16[$38 >> 1] = $65;
    var $68 = $65;
   } else {
    var $68 = $51;
   }
   var $68;
   var $70 = HEAP16[$items + ($i_02_i << 4) + 6 >> 1];
   if (($70 & 65535) > ($50 & 65535)) {
    HEAP16[$30 >> 1] = $70;
    var $73 = $70;
   } else {
    var $73 = $50;
   }
   var $73;
   var $75 = HEAP16[$items + ($i_02_i << 4) + 8 >> 1];
   if (($75 & 65535) > ($49 & 65535)) {
    HEAP16[$43 >> 1] = $75;
    var $78 = $75;
   } else {
    var $78 = $49;
   }
   var $78;
   var $80 = HEAP16[$items + ($i_02_i << 4) + 10 >> 1];
   if (($80 & 65535) > ($48 & 65535)) {
    HEAP16[$46 >> 1] = $80;
    var $82 = $80;
   } else {
    var $82 = $48;
   }
   var $82;
   var $i_0_i = $i_02_i + 1 | 0;
   if (($i_0_i | 0) < ($imax | 0)) {
    var $i_02_i = $i_0_i;
    var $53 = $58;
    var $52 = $63;
    var $51 = $68;
    var $50 = $73;
    var $49 = $78;
    var $48 = $82;
   } else {
    var $90 = $73;
    var $89 = $58;
    var $88 = $78;
    var $87 = $63;
    var $86 = $82;
    var $85 = $68;
    break;
   }
  }
 } else {
  var $90 = $40;
  var $89 = $32;
  var $88 = $42;
  var $87 = $34;
  var $86 = $45;
  var $85 = $37;
 }
 var $85;
 var $86;
 var $87;
 var $88;
 var $89;
 var $90;
 var $91 = $90 - $89 & 65535;
 var $92 = $88 - $87 & 65535;
 var $94 = ($92 & 65535) > ($91 & 65535);
 var $axis_1_i = (($94 ? $92 : $91) & 65535) < ($86 - $85 & 65535) ? 2 : $94 & 1;
 if (($axis_1_i | 0) == 0) {
  _qsort($items + ($imin << 4) | 0, $1, 16, 362);
  var $107 = ($1 | 0) / 2 & -1;
  var $108 = $107 + $imin | 0;
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $imin, $108, $curNode, $nodes);
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $108, $imax, $curNode, $nodes);
  var $109 = HEAP32[$curNode >> 2];
  var $110 = $2 - $109 | 0;
  var $111 = $nodes + ($2 << 4) + 12 | 0;
  HEAP32[$111 >> 2] = $110;
  return;
 }
 var $103 = $items + ($imin << 4) | 0;
 if (($axis_1_i | 0) == 1) {
  _qsort($103, $1, 16, 406);
  var $107 = ($1 | 0) / 2 & -1;
  var $108 = $107 + $imin | 0;
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $imin, $108, $curNode, $nodes);
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $108, $imax, $curNode, $nodes);
  var $109 = HEAP32[$curNode >> 2];
  var $110 = $2 - $109 | 0;
  var $111 = $nodes + ($2 << 4) + 12 | 0;
  HEAP32[$111 >> 2] = $110;
  return;
 } else {
  _qsort($103, $1, 16, 188);
  var $107 = ($1 | 0) / 2 & -1;
  var $108 = $107 + $imin | 0;
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $imin, $108, $curNode, $nodes);
  __ZL9subdivideP6BVItemiiiRiP8dtBVNode($items, $108, $imax, $curNode, $nodes);
  var $109 = HEAP32[$curNode >> 2];
  var $110 = $2 - $109 | 0;
  var $111 = $nodes + ($2 << 4) + 12 | 0;
  HEAP32[$111 >> 2] = $110;
  return;
 }
}
function __ZN14dtNavMeshQuery4initEPK9dtNavMeshi($this, $nav) {
 var label = 0;
 HEAP32[$this >> 2] = $nav;
 var $2 = $this + 56 | 0;
 var $3 = HEAP32[$2 >> 2];
 do {
  if (($3 | 0) == 0) {
   label = 767;
  } else {
   if ((HEAP32[$3 + 12 >> 2] | 0) >= 2048) {
    _memset(HEAP32[$3 + 4 >> 2], -1, HEAP32[$3 + 16 >> 2] << 1);
    HEAP32[$3 + 20 >> 2] = 0;
    break;
   }
   var $11 = HEAP32[$3 >> 2];
   if (($11 | 0) != 0) {
    _free($11);
   }
   var $16 = HEAP32[$3 + 8 >> 2];
   if (($16 | 0) != 0) {
    _free($16);
   }
   var $21 = HEAP32[$3 + 4 >> 2];
   if (($21 | 0) != 0) {
    _free($21);
   }
   var $25 = HEAP32[$2 >> 2];
   if (($25 | 0) != 0) {
    _free($25);
   }
   HEAP32[$2 >> 2] = 0;
   label = 767;
  }
 } while (0);
 do {
  if (label == 767) {
   var $29 = _malloc(24);
   if (($29 | 0) != 0) {
    var $32 = $29;
    __ZN10dtNodePoolC2Eii($32, 2048, 512);
    HEAP32[$2 >> 2] = $32;
    break;
   }
   HEAP32[$2 >> 2] = 0;
   var $_0 = -2147483644;
   var $_0;
   return $_0;
  }
 } while (0);
 var $42 = $this + 52 | 0;
 var $43 = HEAP32[$42 >> 2];
 do {
  if (($43 | 0) == 0) {
   var $46 = _malloc(24);
   if (($46 | 0) != 0) {
    var $49 = $46;
    __ZN10dtNodePoolC2Eii($49, 64, 32);
    HEAP32[$42 >> 2] = $49;
    break;
   }
   HEAP32[$42 >> 2] = 0;
   var $_0 = -2147483644;
   var $_0;
   return $_0;
  } else {
   _memset(HEAP32[$43 + 4 >> 2], -1, HEAP32[$43 + 16 >> 2] << 1);
   HEAP32[$43 + 20 >> 2] = 0;
  }
 } while (0);
 var $59 = $this + 60 | 0;
 var $60 = HEAP32[$59 >> 2];
 if (($60 | 0) != 0) {
  if ((HEAP32[$60 + 4 >> 2] | 0) >= 2048) {
   HEAP32[$60 + 8 >> 2] = 0;
   var $_0 = 1073741824;
   var $_0;
   return $_0;
  }
  var $68 = HEAP32[$60 >> 2];
  if (($68 | 0) == 0) {
   var $72 = $60;
  } else {
   _free($68);
   var $72 = HEAP32[$59 >> 2];
  }
  var $72;
  if (($72 | 0) != 0) {
   _free($72);
  }
  HEAP32[$59 >> 2] = 0;
 }
 var $76 = _malloc(12);
 if (($76 | 0) == 0) {
  HEAP32[$59 >> 2] = 0;
  var $_0 = -2147483644;
  var $_0;
  return $_0;
 }
 var $79 = $76;
 HEAP32[$79 >> 2] = 0;
 HEAP32[$76 + 4 >> 2] = 2048;
 HEAP32[$76 + 8 >> 2] = 0;
 var $84 = _malloc(8196);
 HEAP32[$79 >> 2] = $84;
 if (($84 | 0) == 0) {
  ___assert_func(8448, 128, 9040, 1992);
 }
 HEAP32[$59 >> 2] = $76;
 var $_0 = 1073741824;
 var $_0;
 return $_0;
}
function __ZNK14dtNavMeshQuery24closestPointOnPolyInTileEPK10dtMeshTilePK6dtPolyPKfPf($tile, $poly, $pos, $closest) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 var $verts = sp;
 var $edged = sp + 72;
 var $edget = sp + 96;
 var $h = sp + 120;
 if ((HEAP8[$poly + 31 | 0] & -64) << 24 >> 24 == 64) {
  var $8 = HEAPU16[$poly + 4 >> 1] * 3 & -1;
  var $10 = HEAP32[$tile + 16 >> 2];
  var $15 = HEAPU16[$poly + 6 >> 1] * 3 & -1;
  var $17 = HEAPF32[$10 + ($8 << 2) >> 2];
  var $18 = HEAPF32[$pos >> 2];
  var $19 = $17 - $18;
  var $20 = $10 + ($8 + 1 << 2) | 0;
  var $23 = HEAPF32[$pos + 4 >> 2];
  var $24 = HEAPF32[$20 >> 2] - $23;
  var $25 = $10 + ($8 + 2 << 2) | 0;
  var $28 = HEAPF32[$pos + 8 >> 2];
  var $29 = HEAPF32[$25 >> 2] - $28;
  var $35 = Math.sqrt($19 * $19 + $24 * $24 + $29 * $29);
  var $36 = HEAPF32[$10 + ($15 << 2) >> 2];
  var $37 = $36 - $18;
  var $38 = $10 + ($15 + 1 << 2) | 0;
  var $40 = HEAPF32[$38 >> 2] - $23;
  var $41 = $10 + ($15 + 2 << 2) | 0;
  var $43 = HEAPF32[$41 >> 2] - $28;
  var $51 = $35 / ($35 + Math.sqrt($37 * $37 + $40 * $40 + $43 * $43));
  HEAPF32[$closest >> 2] = $17 + $51 * ($36 - $17);
  var $55 = HEAPF32[$20 >> 2];
  HEAPF32[$closest + 4 >> 2] = $55 + $51 * (HEAPF32[$38 >> 2] - $55);
  var $61 = HEAPF32[$25 >> 2];
  HEAPF32[$closest + 8 >> 2] = $61 + $51 * (HEAPF32[$41 >> 2] - $61);
  STACKTOP = sp;
  return;
 }
 var $73 = $poly - HEAP32[$tile + 12 >> 2] >> 5;
 var $75 = HEAP32[$tile + 24 >> 2];
 var $76 = $poly + 30 | 0;
 var $77 = HEAP8[$76];
 var $78 = $77 & 255;
 var $79 = $77 << 24 >> 24 == 0;
 if (!$79) {
  var $_pre = HEAP32[$tile + 16 >> 2];
  var $i_070 = 0;
  while (1) {
   var $i_070;
   var $82 = $i_070 * 3 & -1;
   var $87 = HEAPU16[$poly + 4 + ($i_070 << 1) >> 1] * 3 & -1;
   HEAPF32[$verts + ($82 << 2) >> 2] = HEAPF32[$_pre + ($87 << 2) >> 2];
   HEAPF32[$verts + ($82 + 1 << 2) >> 2] = HEAPF32[$_pre + ($87 + 1 << 2) >> 2];
   HEAPF32[$verts + ($82 + 2 << 2) >> 2] = HEAPF32[$_pre + ($87 + 2 << 2) >> 2];
   var $96 = $i_070 + 1 | 0;
   if (($96 | 0) < ($78 | 0)) {
    var $i_070 = $96;
   } else {
    break;
   }
  }
 }
 HEAPF32[$closest >> 2] = HEAPF32[$pos >> 2];
 var $101 = $closest + 4 | 0;
 HEAPF32[$101 >> 2] = HEAPF32[$pos + 4 >> 2];
 var $102 = $pos + 8 | 0;
 var $104 = $closest + 8 | 0;
 HEAPF32[$104 >> 2] = HEAPF32[$102 >> 2];
 if (!__Z24dtDistancePtPolyEdgesSqrPKfS0_iPfS1_($pos, $verts | 0, $78, $edged | 0, $edget | 0)) {
  if ($79) {
   var $imin_0_lcssa = -1;
  } else {
   var $i1_067 = 0;
   var $imin_068 = -1;
   var $dmin_069 = 3.4028234663852886e+38;
   while (1) {
    var $dmin_069;
    var $imin_068;
    var $i1_067;
    var $110 = HEAPF32[$edged + ($i1_067 << 2) >> 2];
    var $111 = $110 < $dmin_069;
    var $imin_1 = $111 ? $i1_067 : $imin_068;
    var $112 = $i1_067 + 1 | 0;
    if (($112 | 0) < ($78 | 0)) {
     var $i1_067 = $112;
     var $imin_068 = $imin_1;
     var $dmin_069 = $111 ? $110 : $dmin_069;
    } else {
     var $imin_0_lcssa = $imin_1;
     break;
    }
   }
  }
  var $imin_0_lcssa;
  var $114 = $imin_0_lcssa * 3 & -1;
  var $118 = (($imin_0_lcssa + 1 | 0) % ($78 | 0) & -1) * 3 & -1;
  var $121 = HEAPF32[$edget + ($imin_0_lcssa << 2) >> 2];
  var $122 = HEAPF32[$verts + ($114 << 2) >> 2];
  HEAPF32[$closest >> 2] = $122 + $121 * (HEAPF32[$verts + ($118 << 2) >> 2] - $122);
  var $128 = HEAPF32[$verts + ($114 + 1 << 2) >> 2];
  HEAPF32[$101 >> 2] = $128 + $121 * (HEAPF32[$verts + ($118 + 1 << 2) >> 2] - $128);
  var $135 = HEAPF32[$verts + ($114 + 2 << 2) >> 2];
  HEAPF32[$104 >> 2] = $135 + $121 * (HEAPF32[$verts + ($118 + 2 << 2) >> 2] - $135);
 }
 var $141 = $75 + ($73 * 12 & -1) + 9 | 0;
 var $142 = $75 + ($73 * 12 & -1) + 4 | 0;
 var $143 = $tile + 32 | 0;
 var $144 = $tile + 16 | 0;
 var $145 = $75 + ($73 * 12 & -1) | 0;
 var $146 = $tile + 28 | 0;
 var $j_0 = 0;
 while (1) {
  var $j_0;
  if (($j_0 | 0) >= (HEAPU8[$141] | 0)) {
   label = 819;
   break;
  }
  var $154 = HEAP32[$142 >> 2] + $j_0 << 2;
  var $155 = HEAP32[$143 >> 2];
  var $156 = HEAP8[$76];
  var $157 = $156 & 255;
  var $159 = HEAP8[$155 + $154 | 0];
  var $160 = $159 & 255;
  if (($159 & 255) < ($156 & 255)) {
   var $177 = HEAP32[$144 >> 2] + ((HEAPU16[$poly + 4 + ($160 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $177 = HEAP32[$146 >> 2] + ((($160 - $157 + HEAP32[$145 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $177;
  var $179 = HEAP8[$155 + ($154 | 1) | 0];
  var $180 = $179 & 255;
  if (($179 & 255) < ($156 & 255)) {
   var $199 = HEAP32[$144 >> 2] + ((HEAPU16[$poly + 4 + ($180 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $199 = HEAP32[$146 >> 2] + ((($180 - $157 + HEAP32[$145 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $199;
  var $201 = HEAP8[$155 + ($154 | 2) | 0];
  var $202 = $201 & 255;
  if (($201 & 255) < ($156 & 255)) {
   var $219 = HEAP32[$144 >> 2] + ((HEAPU16[$poly + 4 + ($202 << 1) >> 1] * 3 & -1) << 2) | 0;
  } else {
   var $219 = HEAP32[$146 >> 2] + ((($202 - $157 + HEAP32[$145 >> 2]) * 3 & -1) << 2) | 0;
  }
  var $219;
  if (__Z28dtClosestHeightPointTrianglePKfS0_S0_S0_Rf(HEAPF32[$pos >> 2], HEAPF32[$102 >> 2], HEAPF32[$177 >> 2], HEAPF32[$177 + 4 >> 2], HEAPF32[$177 + 8 >> 2], $199, $219, $h)) {
   break;
  } else {
   var $j_0 = $j_0 + 1 | 0;
  }
 }
 if (label == 819) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$101 >> 2] = HEAPF32[$h >> 2];
 STACKTOP = sp;
 return;
}
function __ZNK14dtNavMeshQuery26closestPointOnPolyBoundaryEjPKfPf($this_0_0_val, $ref, $pos, $closest) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 120 | 0;
 var $verts = sp;
 var $edged = sp + 72;
 var $edget = sp + 96;
 if (($ref | 0) == 0) {
  var $_0 = -2147483640;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $4 = HEAP32[$this_0_0_val + 76 >> 2];
 var $8 = HEAP32[$this_0_0_val + 80 >> 2];
 var $12 = $ref >>> ($8 >>> 0) & (1 << $4) - 1;
 var $13 = (1 << $8) - 1 & $ref;
 if ($12 >>> 0 >= HEAP32[$this_0_0_val + 48 >> 2] >>> 0) {
  var $_0 = -2147483640;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $26 = HEAP32[$this_0_0_val + 68 >> 2];
 if ((HEAP32[$26 + ($12 * 60 & -1) >> 2] | 0) != ((1 << HEAP32[$this_0_0_val + 72 >> 2]) - 1 & $ref >>> (($8 + $4 | 0) >>> 0) | 0)) {
  var $_0 = -2147483640;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $32 = HEAP32[$26 + ($12 * 60 & -1) + 8 >> 2];
 if (($32 | 0) == 0) {
  var $_0 = -2147483640;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ($13 >>> 0 >= HEAP32[$32 + 24 >> 2] >>> 0) {
  var $_0 = -2147483640;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $39 = HEAP32[$26 + ($12 * 60 & -1) + 12 >> 2];
 var $41 = HEAP8[$39 + ($13 << 5) + 30 | 0];
 if ($41 << 24 >> 24 == 0) {
  var $nv_0_lcssa = 0;
 } else {
  var $44 = HEAP32[$26 + ($12 * 60 & -1) + 16 >> 2];
  var $45 = $41 & 255;
  var $nv_031 = 0;
  while (1) {
   var $nv_031;
   var $47 = $nv_031 * 3 & -1;
   var $52 = HEAPU16[$39 + ($13 << 5) + 4 + ($nv_031 << 1) >> 1] * 3 & -1;
   HEAPF32[$verts + ($47 << 2) >> 2] = HEAPF32[$44 + ($52 << 2) >> 2];
   HEAPF32[$verts + ($47 + 1 << 2) >> 2] = HEAPF32[$44 + ($52 + 1 << 2) >> 2];
   HEAPF32[$verts + ($47 + 2 << 2) >> 2] = HEAPF32[$44 + ($52 + 2 << 2) >> 2];
   var $61 = $nv_031 + 1 | 0;
   if (($61 | 0) < ($45 | 0)) {
    var $nv_031 = $61;
   } else {
    var $nv_0_lcssa = $61;
    break;
   }
  }
 }
 var $nv_0_lcssa;
 if (__Z24dtDistancePtPolyEdgesSqrPKfS0_iPfS1_($pos, $verts | 0, $nv_0_lcssa, $edged | 0, $edget | 0)) {
  HEAPF32[$closest >> 2] = HEAPF32[$pos >> 2];
  HEAPF32[$closest + 4 >> 2] = HEAPF32[$pos + 4 >> 2];
  HEAPF32[$closest + 8 >> 2] = HEAPF32[$pos + 8 >> 2];
  var $_0 = 1073741824;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if (($nv_0_lcssa | 0) > 0) {
  var $dmin_026 = 3.4028234663852886e+38;
  var $imin_027 = -1;
  var $i1_028 = 0;
  while (1) {
   var $i1_028;
   var $imin_027;
   var $dmin_026;
   var $77 = HEAPF32[$edged + ($i1_028 << 2) >> 2];
   var $78 = $77 < $dmin_026;
   var $imin_1 = $78 ? $i1_028 : $imin_027;
   var $79 = $i1_028 + 1 | 0;
   if (($79 | 0) < ($nv_0_lcssa | 0)) {
    var $dmin_026 = $78 ? $77 : $dmin_026;
    var $imin_027 = $imin_1;
    var $i1_028 = $79;
   } else {
    var $imin_0_lcssa = $imin_1;
    break;
   }
  }
 } else {
  var $imin_0_lcssa = -1;
 }
 var $imin_0_lcssa;
 var $81 = $imin_0_lcssa * 3 & -1;
 var $85 = (($imin_0_lcssa + 1 | 0) % ($nv_0_lcssa | 0) & -1) * 3 & -1;
 var $88 = HEAPF32[$edget + ($imin_0_lcssa << 2) >> 2];
 var $89 = HEAPF32[$verts + ($81 << 2) >> 2];
 HEAPF32[$closest >> 2] = $89 + $88 * (HEAPF32[$verts + ($85 << 2) >> 2] - $89);
 var $95 = HEAPF32[$verts + ($81 + 1 << 2) >> 2];
 HEAPF32[$closest + 4 >> 2] = $95 + $88 * (HEAPF32[$verts + ($85 + 1 << 2) >> 2] - $95);
 var $103 = HEAPF32[$verts + ($81 + 2 << 2) >> 2];
 HEAPF32[$closest + 8 >> 2] = $103 + $88 * (HEAPF32[$verts + ($85 + 2 << 2) >> 2] - $103);
 var $_0 = 1073741824;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNK14dtNavMeshQuery15findNearestPolyEPKfS1_PK13dtQueryFilterPjPf($this, $center, $extents, $filter, $nearestRef, $nearestPt) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 656 | 0;
 var $neis_i = sp;
 var $polys = sp + 128;
 var $closestPtPoly = sp + 640;
 HEAP32[$nearestRef >> 2] = 0;
 var $2 = HEAPF32[$center >> 2];
 var $3 = HEAPF32[$extents >> 2];
 var $4 = $2 - $3;
 var $5 = $center + 4 | 0;
 var $6 = HEAPF32[$5 >> 2];
 var $8 = HEAPF32[$extents + 4 >> 2];
 var $9 = $6 - $8;
 var $10 = $center + 8 | 0;
 var $11 = HEAPF32[$10 >> 2];
 var $13 = HEAPF32[$extents + 8 >> 2];
 var $14 = $11 - $13;
 var $15 = $2 + $3;
 var $16 = $6 + $8;
 var $17 = $11 + $13;
 var $18 = $this | 0;
 var $19 = HEAP32[$18 >> 2];
 var $21 = HEAPF32[$19 + 28 >> 2];
 var $24 = HEAPF32[$19 + 40 >> 2];
 var $27 = Math.floor(($4 - $21) / $24) & -1;
 var $29 = HEAPF32[$19 + 36 >> 2];
 var $32 = HEAPF32[$19 + 44 >> 2];
 var $35 = Math.floor(($14 - $29) / $32) & -1;
 var $39 = Math.floor(($15 - $21) / $24) & -1;
 var $43 = Math.floor(($17 - $29) / $32) & -1;
 L1174 : do {
  if (($35 | 0) > ($43 | 0)) {
   var $nearest_0_lcssa = 0;
  } else {
   var $45 = $filter + 256 | 0;
   var $46 = $filter + 258 | 0;
   var $n_029_i = 0;
   var $y_030_i = $35;
   L1176 : while (1) {
    var $y_030_i;
    var $n_029_i;
    if (($27 | 0) > ($39 | 0)) {
     var $n_1_lcssa_i = $n_029_i;
    } else {
     var $48 = Math.imul($y_030_i, -669632447) | 0;
     var $n_125_i = $n_029_i;
     var $x_026_i = $27;
     while (1) {
      var $x_026_i;
      var $n_125_i;
      var $50 = HEAP32[$19 + 56 >> 2];
      var $53 = $50 & $48 + Math.imul($x_026_i, -1918454973);
      var $tile_014_i_i = HEAP32[HEAP32[$19 + 60 >> 2] + ($53 << 2) >> 2];
      if (($tile_014_i_i | 0) == 0) {
       var $n_0_lcssa_i_i = 0;
      } else {
       var $n_015_i_i = 0;
       var $tile_016_i_i = $tile_014_i_i;
       while (1) {
        var $tile_016_i_i;
        var $n_015_i_i;
        var $59 = HEAP32[$tile_016_i_i + 8 >> 2];
        do {
         if (($59 | 0) == 0) {
          var $n_1_i_i = $n_015_i_i;
         } else {
          if ((HEAP32[$59 + 8 >> 2] | 0) != ($x_026_i | 0)) {
           var $n_1_i_i = $n_015_i_i;
           break;
          }
          if (!((HEAP32[$59 + 12 >> 2] | 0) == ($y_030_i | 0) & ($n_015_i_i | 0) < 32)) {
           var $n_1_i_i = $n_015_i_i;
           break;
          }
          HEAP32[$neis_i + ($n_015_i_i << 2) >> 2] = $tile_016_i_i;
          var $n_1_i_i = $n_015_i_i + 1 | 0;
         }
        } while (0);
        var $n_1_i_i;
        var $tile_0_i_i = HEAP32[$tile_016_i_i + 56 >> 2];
        if (($tile_0_i_i | 0) == 0) {
         var $n_0_lcssa_i_i = $n_1_i_i;
         break;
        } else {
         var $n_015_i_i = $n_1_i_i;
         var $tile_016_i_i = $tile_0_i_i;
        }
       }
      }
      var $n_0_lcssa_i_i;
      var $j_0_i = 0;
      var $n_2_i = $n_125_i;
      while (1) {
       var $n_2_i;
       var $j_0_i;
       if (($j_0_i | 0) >= ($n_0_lcssa_i_i | 0)) {
        break;
       }
       var $80 = HEAP32[$neis_i + ($j_0_i << 2) >> 2];
       var $81 = 128 - $n_2_i | 0;
       var $83 = HEAP32[$80 + 36 >> 2];
       do {
        if (($83 | 0) == 0) {
         if (($80 | 0) == 0) {
          var $_0_i1_i_i = 0;
         } else {
          var $245 = HEAP32[$19 + 80 >> 2];
          var $_0_i1_i_i = HEAP32[$80 >> 2] << HEAP32[$19 + 76 >> 2] + $245 | (($80 - HEAP32[$19 + 68 >> 2] | 0) / 60 & -1) << $245;
         }
         var $_0_i1_i_i;
         var $255 = HEAP32[HEAP32[$80 + 8 >> 2] + 24 >> 2];
         if (($255 | 0) <= 0) {
          var $_0_i_i = 0;
          break;
         }
         var $258 = $80 + 16 | 0;
         var $_pre40 = HEAP32[$80 + 12 >> 2];
         var $n3_0122_i_i = 0;
         var $i_0123_i_i = 0;
         while (1) {
          var $i_0123_i_i;
          var $n3_0122_i_i;
          do {
           if ((HEAP8[$_pre40 + ($i_0123_i_i << 5) + 31 | 0] & -64) << 24 >> 24 == 64) {
            var $n3_1_i_i = $n3_0122_i_i;
           } else {
            var $263 = $i_0123_i_i | $_0_i1_i_i;
            var $265 = HEAP16[$_pre40 + ($i_0123_i_i << 5) + 28 >> 1];
            if ((HEAP16[$45 >> 1] & $265) << 16 >> 16 == 0) {
             var $n3_1_i_i = $n3_0122_i_i;
             break;
            }
            if ((HEAP16[$46 >> 1] & $265) << 16 >> 16 != 0) {
             var $n3_1_i_i = $n3_0122_i_i;
             break;
            }
            var $276 = HEAPU16[$_pre40 + ($i_0123_i_i << 5) + 4 >> 1] * 3 & -1;
            var $277 = HEAP32[$258 >> 2];
            var $279 = HEAPF32[$277 + ($276 << 2) >> 2];
            var $281 = HEAPF32[$277 + ($276 + 1 << 2) >> 2];
            var $283 = HEAPF32[$277 + ($276 + 2 << 2) >> 2];
            var $285 = HEAP8[$_pre40 + ($i_0123_i_i << 5) + 30 | 0];
            if (($285 & 255) > 1) {
             var $287 = $285 & 255;
             var $bmin1_sroa_2_8_load95101110_i_i = $283;
             var $bmin1_sroa_1_4_load94100111_i_i = $281;
             var $bmin1_sroa_0_0_load9399112_i_i = $279;
             var $bmax2_sroa_2_8_load9298113_i_i = $283;
             var $bmax2_sroa_1_4_load9197114_i_i = $281;
             var $bmax2_sroa_0_0_load9096115_i_i = $279;
             var $j_0116_i_i = 1;
             while (1) {
              var $j_0116_i_i;
              var $bmax2_sroa_0_0_load9096115_i_i;
              var $bmax2_sroa_1_4_load9197114_i_i;
              var $bmax2_sroa_2_8_load9298113_i_i;
              var $bmin1_sroa_0_0_load9399112_i_i;
              var $bmin1_sroa_1_4_load94100111_i_i;
              var $bmin1_sroa_2_8_load95101110_i_i;
              var $292 = HEAPU16[$_pre40 + ($i_0123_i_i << 5) + 4 + ($j_0116_i_i << 1) >> 1] * 3 & -1;
              var $294 = HEAPF32[$277 + ($292 << 2) >> 2];
              var $296 = $bmin1_sroa_0_0_load9399112_i_i < $294 ? $bmin1_sroa_0_0_load9399112_i_i : $294;
              var $298 = HEAPF32[$277 + ($292 + 1 << 2) >> 2];
              var $300 = $bmin1_sroa_1_4_load94100111_i_i < $298 ? $bmin1_sroa_1_4_load94100111_i_i : $298;
              var $302 = HEAPF32[$277 + ($292 + 2 << 2) >> 2];
              var $304 = $bmin1_sroa_2_8_load95101110_i_i < $302 ? $bmin1_sroa_2_8_load95101110_i_i : $302;
              var $306 = $bmax2_sroa_0_0_load9096115_i_i > $294 ? $bmax2_sroa_0_0_load9096115_i_i : $294;
              var $308 = $bmax2_sroa_1_4_load9197114_i_i > $298 ? $bmax2_sroa_1_4_load9197114_i_i : $298;
              var $310 = $bmax2_sroa_2_8_load9298113_i_i > $302 ? $bmax2_sroa_2_8_load9298113_i_i : $302;
              var $311 = $j_0116_i_i + 1 | 0;
              if (($311 | 0) < ($287 | 0)) {
               var $bmin1_sroa_2_8_load95101110_i_i = $304;
               var $bmin1_sroa_1_4_load94100111_i_i = $300;
               var $bmin1_sroa_0_0_load9399112_i_i = $296;
               var $bmax2_sroa_2_8_load9298113_i_i = $310;
               var $bmax2_sroa_1_4_load9197114_i_i = $308;
               var $bmax2_sroa_0_0_load9096115_i_i = $306;
               var $j_0116_i_i = $311;
              } else {
               var $bmin1_sroa_2_8_load95101_lcssa_i_i = $304;
               var $bmin1_sroa_1_4_load94100_lcssa_i_i = $300;
               var $bmin1_sroa_0_0_load9399_lcssa_i_i = $296;
               var $bmax2_sroa_2_8_load9298_lcssa_i_i = $310;
               var $bmax2_sroa_1_4_load9197_lcssa_i_i = $308;
               var $bmax2_sroa_0_0_load9096_lcssa_i_i = $306;
               break;
              }
             }
            } else {
             var $bmin1_sroa_2_8_load95101_lcssa_i_i = $283;
             var $bmin1_sroa_1_4_load94100_lcssa_i_i = $281;
             var $bmin1_sroa_0_0_load9399_lcssa_i_i = $279;
             var $bmax2_sroa_2_8_load9298_lcssa_i_i = $283;
             var $bmax2_sroa_1_4_load9197_lcssa_i_i = $281;
             var $bmax2_sroa_0_0_load9096_lcssa_i_i = $279;
            }
            var $bmax2_sroa_0_0_load9096_lcssa_i_i;
            var $bmax2_sroa_1_4_load9197_lcssa_i_i;
            var $bmax2_sroa_2_8_load9298_lcssa_i_i;
            var $bmin1_sroa_0_0_load9399_lcssa_i_i;
            var $bmin1_sroa_1_4_load94100_lcssa_i_i;
            var $bmin1_sroa_2_8_load95101_lcssa_i_i;
            if ($14 > $bmax2_sroa_2_8_load9298_lcssa_i_i | $17 < $bmin1_sroa_2_8_load95101_lcssa_i_i) {
             var $n3_1_i_i = $n3_0122_i_i;
             break;
            }
            if (!(($9 > $bmax2_sroa_1_4_load9197_lcssa_i_i | $16 < $bmin1_sroa_1_4_load94100_lcssa_i_i ? 0 : $4 > $bmax2_sroa_0_0_load9096_lcssa_i_i | $15 < $bmin1_sroa_0_0_load9399_lcssa_i_i ? 0 : 1) & ($n3_0122_i_i | 0) < ($81 | 0))) {
             var $n3_1_i_i = $n3_0122_i_i;
             break;
            }
            HEAP32[$polys + ($n_2_i + $n3_0122_i_i << 2) >> 2] = $263;
            var $n3_1_i_i = $n3_0122_i_i + 1 | 0;
           }
          } while (0);
          var $n3_1_i_i;
          var $323 = $i_0123_i_i + 1 | 0;
          if (($323 | 0) < ($255 | 0)) {
           var $n3_0122_i_i = $n3_1_i_i;
           var $i_0123_i_i = $323;
          } else {
           var $_0_i_i = $n3_1_i_i;
           break;
          }
         }
        } else {
         var $87 = HEAP32[$80 + 8 >> 2];
         var $89 = HEAP32[$87 + 48 >> 2];
         var $90 = $83 + ($89 << 4) | 0;
         var $94 = HEAPF32[$87 + 96 >> 2];
         var $95 = HEAPF32[$87 + 72 >> 2];
         var $96 = HEAPF32[$87 + 84 >> 2];
         if ($4 < $95) {
          var $101 = $95;
         } else {
          var $101 = $4 > $96 ? $96 : $4;
         }
         var $101;
         var $104 = HEAPF32[$87 + 76 >> 2];
         var $106 = HEAPF32[$87 + 88 >> 2];
         if ($9 < $104) {
          var $111 = $104;
         } else {
          var $111 = $9 > $106 ? $106 : $9;
         }
         var $111;
         var $114 = HEAPF32[$87 + 80 >> 2];
         var $116 = HEAPF32[$87 + 92 >> 2];
         if ($14 < $114) {
          var $121 = $114;
         } else {
          var $121 = $14 > $116 ? $116 : $14;
         }
         var $121;
         if ($15 < $95) {
          var $127 = $95;
         } else {
          var $127 = $15 > $96 ? $96 : $15;
         }
         var $127;
         if ($16 < $104) {
          var $133 = $104;
         } else {
          var $133 = $16 > $106 ? $106 : $16;
         }
         var $133;
         if ($17 < $114) {
          var $139 = $114;
         } else {
          var $139 = $17 > $116 ? $116 : $17;
         }
         var $139;
         var $141 = $94 * ($101 - $95);
         var $143 = ($141 >= 0 ? Math.floor($141) : Math.ceil($141)) & -2;
         var $144 = $94 * ($111 - $104);
         var $146 = ($144 >= 0 ? Math.floor($144) : Math.ceil($144)) & -2;
         var $147 = $94 * ($121 - $114);
         var $149 = ($147 >= 0 ? Math.floor($147) : Math.ceil($147)) & -2;
         var $151 = $94 * ($127 - $95) + 1;
         var $153 = ($151 >= 0 ? Math.floor($151) : Math.ceil($151)) | 1;
         var $155 = $94 * ($133 - $104) + 1;
         var $157 = ($155 >= 0 ? Math.floor($155) : Math.ceil($155)) | 1;
         var $159 = $94 * ($139 - $114) + 1;
         var $161 = ($159 >= 0 ? Math.floor($159) : Math.ceil($159)) | 1;
         if (($80 | 0) == 0) {
          var $_0_i_i_i = 0;
         } else {
          var $173 = HEAP32[$19 + 80 >> 2];
          var $_0_i_i_i = HEAP32[$80 >> 2] << HEAP32[$19 + 76 >> 2] + $173 | (($80 - HEAP32[$19 + 68 >> 2] | 0) / 60 & -1) << $173;
         }
         var $_0_i_i_i;
         if (($89 | 0) <= 0) {
          var $_0_i_i = 0;
          break;
         }
         var $181 = $80 + 12 | 0;
         var $n_0130_i_i = 0;
         var $node_0131_i_i = $83;
         while (1) {
          var $node_0131_i_i;
          var $n_0130_i_i;
          if (($143 & 65535) > HEAPU16[$node_0131_i_i + 6 >> 1]) {
           var $190 = 0;
          } else {
           var $190 = ($153 & 65535) >= HEAPU16[$node_0131_i_i >> 1];
          }
          var $190;
          if (($146 & 65535) > HEAPU16[$node_0131_i_i + 8 >> 1]) {
           var $198 = 0;
          } else {
           var $198 = $190 & ($157 & 65535) >= HEAPU16[$node_0131_i_i + 2 >> 1];
          }
          var $198;
          do {
           if (($149 & 65535) > HEAPU16[$node_0131_i_i + 10 >> 1]) {
            var $203 = HEAP32[$node_0131_i_i + 12 >> 2];
            var $227 = 0;
            var $226 = ($203 | 0) > -1;
            var $225 = $203;
            label = 881;
           } else {
            var $_16_i_i_i = $198 & ($161 & 65535) >= HEAPU16[$node_0131_i_i + 4 >> 1];
            var $208 = HEAP32[$node_0131_i_i + 12 >> 2];
            var $209 = ($208 | 0) > -1;
            if (!($209 & $_16_i_i_i)) {
             var $227 = $_16_i_i_i;
             var $226 = $209;
             var $225 = $208;
             label = 881;
             break;
            }
            var $214 = HEAP16[HEAP32[$181 >> 2] + ($208 << 5) + 28 >> 1];
            if ((HEAP16[$45 >> 1] & $214) << 16 >> 16 == 0) {
             var $n_1146_i_i = $n_0130_i_i;
             label = 882;
             break;
            }
            if (!((HEAP16[$46 >> 1] & $214) << 16 >> 16 == 0 & ($n_0130_i_i | 0) < ($81 | 0))) {
             var $n_1146_i_i = $n_0130_i_i;
             label = 882;
             break;
            }
            HEAP32[$polys + ($n_2_i + $n_0130_i_i << 2) >> 2] = $208 | $_0_i_i_i;
            var $n_1146_i_i = $n_0130_i_i + 1 | 0;
            label = 882;
           }
          } while (0);
          do {
           if (label == 881) {
            label = 0;
            var $225;
            var $226;
            var $227;
            if ($227 | $226) {
             var $n_1146_i_i = $n_0130_i_i;
             label = 882;
             break;
            }
            var $node_0_be_i_i = $node_0131_i_i + (-$225 << 4) | 0;
            var $n_1145_i_i = $n_0130_i_i;
           }
          } while (0);
          if (label == 882) {
           label = 0;
           var $n_1146_i_i;
           var $node_0_be_i_i = $node_0131_i_i + 16 | 0;
           var $n_1145_i_i = $n_1146_i_i;
          }
          var $n_1145_i_i;
          var $node_0_be_i_i;
          if ($node_0_be_i_i >>> 0 < $90 >>> 0) {
           var $n_0130_i_i = $n_1145_i_i;
           var $node_0131_i_i = $node_0_be_i_i;
          } else {
           var $_0_i_i = $n_1145_i_i;
           break;
          }
         }
        }
       } while (0);
       var $_0_i_i;
       var $325 = $_0_i_i + $n_2_i | 0;
       if (($325 | 0) < 128) {
        var $j_0_i = $j_0_i + 1 | 0;
        var $n_2_i = $325;
       } else {
        var $storemerge_i47 = $325;
        break L1176;
       }
      }
      var $329 = $x_026_i + 1 | 0;
      if (($329 | 0) > ($39 | 0)) {
       var $n_1_lcssa_i = $n_2_i;
       break;
      } else {
       var $n_125_i = $n_2_i;
       var $x_026_i = $329;
      }
     }
    }
    var $n_1_lcssa_i;
    var $331 = $y_030_i + 1 | 0;
    if (($331 | 0) > ($43 | 0)) {
     var $storemerge_i = $n_1_lcssa_i;
     label = 902;
     break;
    } else {
     var $n_029_i = $n_1_lcssa_i;
     var $y_030_i = $331;
    }
   }
   if (label == 902) {
    var $storemerge_i;
    if (($storemerge_i | 0) > 0) {
     var $storemerge_i47 = $storemerge_i;
    } else {
     var $nearest_0_lcssa = 0;
     break;
    }
   }
   var $storemerge_i47;
   var $334 = $closestPtPoly | 0;
   var $335 = $closestPtPoly + 4 | 0;
   var $336 = $closestPtPoly + 8 | 0;
   var $338 = $nearestPt + 4 | 0;
   var $339 = $nearestPt + 8 | 0;
   if (($nearestPt | 0) == 0) {
    var $nearestDistanceSqr_016_us = 3.4028234663852886e+38;
    var $i_017_us = 0;
    var $nearest_018_us = 0;
    var $346 = 0;
    var $345 = 0;
    var $344 = 0;
    var $343 = $2;
    var $342 = $6;
    var $341 = $11;
    var $340 = $19;
    while (1) {
     var $340;
     var $341;
     var $342;
     var $343;
     var $344;
     var $345;
     var $346;
     var $nearest_018_us;
     var $i_017_us;
     var $nearestDistanceSqr_016_us;
     var $348 = HEAP32[$polys + ($i_017_us << 2) >> 2];
     do {
      if (($348 | 0) == 0) {
       var $397 = $346;
       var $396 = $345;
       var $395 = $344;
       var $394 = $343;
       var $393 = $342;
       var $392 = $341;
      } else {
       var $352 = HEAP32[$340 + 76 >> 2];
       var $356 = HEAP32[$340 + 80 >> 2];
       var $360 = $348 >>> ($356 >>> 0) & (1 << $352) - 1;
       var $361 = (1 << $356) - 1 & $348;
       if ($360 >>> 0 >= HEAP32[$340 + 48 >> 2] >>> 0) {
        var $397 = $346;
        var $396 = $345;
        var $395 = $344;
        var $394 = $343;
        var $393 = $342;
        var $392 = $341;
        break;
       }
       var $374 = HEAP32[$340 + 68 >> 2];
       var $375 = $374 + ($360 * 60 & -1) | 0;
       if ((HEAP32[$375 >> 2] | 0) != ((1 << HEAP32[$340 + 72 >> 2]) - 1 & $348 >>> (($356 + $352 | 0) >>> 0) | 0)) {
        var $397 = $346;
        var $396 = $345;
        var $395 = $344;
        var $394 = $343;
        var $393 = $342;
        var $392 = $341;
        break;
       }
       var $381 = HEAP32[$374 + ($360 * 60 & -1) + 8 >> 2];
       if (($381 | 0) == 0) {
        var $397 = $346;
        var $396 = $345;
        var $395 = $344;
        var $394 = $343;
        var $393 = $342;
        var $392 = $341;
        break;
       }
       if ($361 >>> 0 >= HEAP32[$381 + 24 >> 2] >>> 0 | ($375 | 0) == 0) {
        var $397 = $346;
        var $396 = $345;
        var $395 = $344;
        var $394 = $343;
        var $393 = $342;
        var $392 = $341;
        break;
       }
       __ZNK14dtNavMeshQuery24closestPointOnPolyInTileEPK10dtMeshTilePK6dtPolyPKfPf($375, HEAP32[$374 + ($360 * 60 & -1) + 12 >> 2] + ($361 << 5) | 0, $center, $334);
       var $397 = HEAPF32[$334 >> 2];
       var $396 = HEAPF32[$335 >> 2];
       var $395 = HEAPF32[$336 >> 2];
       var $394 = HEAPF32[$center >> 2];
       var $393 = HEAPF32[$5 >> 2];
       var $392 = HEAPF32[$10 >> 2];
      }
     } while (0);
     var $392;
     var $393;
     var $394;
     var $395;
     var $396;
     var $397;
     var $398 = $397 - $394;
     var $399 = $396 - $393;
     var $400 = $395 - $392;
     var $405 = $398 * $398 + $399 * $399 + $400 * $400;
     var $406 = $405 < $nearestDistanceSqr_016_us;
     var $nearest_1_us = $406 ? $348 : $nearest_018_us;
     var $407 = $i_017_us + 1 | 0;
     if (($407 | 0) >= ($storemerge_i47 | 0)) {
      var $nearest_0_lcssa = $nearest_1_us;
      break L1174;
     }
     var $nearestDistanceSqr_016_us = $406 ? $405 : $nearestDistanceSqr_016_us;
     var $i_017_us = $407;
     var $nearest_018_us = $nearest_1_us;
     var $346 = $397;
     var $345 = $396;
     var $344 = $395;
     var $343 = $394;
     var $342 = $393;
     var $341 = $392;
     var $340 = HEAP32[$18 >> 2];
    }
   } else {
    var $nearestDistanceSqr_016 = 3.4028234663852886e+38;
    var $i_017 = 0;
    var $nearest_018 = 0;
    var $412 = 0;
    var $411 = 0;
    var $410 = 0;
    var $409 = $19;
   }
   while (1) {
    var $409;
    var $410;
    var $411;
    var $412;
    var $nearest_018;
    var $i_017;
    var $nearestDistanceSqr_016;
    var $414 = HEAP32[$polys + ($i_017 << 2) >> 2];
    do {
     if (($414 | 0) == 0) {
      var $460 = $412;
      var $459 = $411;
      var $458 = $410;
     } else {
      var $418 = HEAP32[$409 + 76 >> 2];
      var $422 = HEAP32[$409 + 80 >> 2];
      var $426 = $414 >>> ($422 >>> 0) & (1 << $418) - 1;
      var $427 = (1 << $422) - 1 & $414;
      if ($426 >>> 0 >= HEAP32[$409 + 48 >> 2] >>> 0) {
       var $460 = $412;
       var $459 = $411;
       var $458 = $410;
       break;
      }
      var $440 = HEAP32[$409 + 68 >> 2];
      var $441 = $440 + ($426 * 60 & -1) | 0;
      if ((HEAP32[$441 >> 2] | 0) != ((1 << HEAP32[$409 + 72 >> 2]) - 1 & $414 >>> (($422 + $418 | 0) >>> 0) | 0)) {
       var $460 = $412;
       var $459 = $411;
       var $458 = $410;
       break;
      }
      var $447 = HEAP32[$440 + ($426 * 60 & -1) + 8 >> 2];
      if (($447 | 0) == 0) {
       var $460 = $412;
       var $459 = $411;
       var $458 = $410;
       break;
      }
      if ($427 >>> 0 >= HEAP32[$447 + 24 >> 2] >>> 0 | ($441 | 0) == 0) {
       var $460 = $412;
       var $459 = $411;
       var $458 = $410;
       break;
      }
      __ZNK14dtNavMeshQuery24closestPointOnPolyInTileEPK10dtMeshTilePK6dtPolyPKfPf($441, HEAP32[$440 + ($426 * 60 & -1) + 12 >> 2] + ($427 << 5) | 0, $center, $334);
      var $460 = HEAPF32[$334 >> 2];
      var $459 = HEAPF32[$335 >> 2];
      var $458 = HEAPF32[$336 >> 2];
     }
    } while (0);
    var $458;
    var $459;
    var $460;
    var $462 = $460 - HEAPF32[$center >> 2];
    var $464 = $459 - HEAPF32[$5 >> 2];
    var $466 = $458 - HEAPF32[$10 >> 2];
    var $471 = $462 * $462 + $464 * $464 + $466 * $466;
    if ($471 < $nearestDistanceSqr_016) {
     HEAPF32[$nearestPt >> 2] = $460;
     HEAPF32[$338 >> 2] = $459;
     HEAPF32[$339 >> 2] = $458;
     var $nearest_1 = $414;
     var $nearestDistanceSqr_1 = $471;
    } else {
     var $nearest_1 = $nearest_018;
     var $nearestDistanceSqr_1 = $nearestDistanceSqr_016;
    }
    var $nearestDistanceSqr_1;
    var $nearest_1;
    var $475 = $i_017 + 1 | 0;
    if (($475 | 0) >= ($storemerge_i47 | 0)) {
     var $nearest_0_lcssa = $nearest_1;
     break L1174;
    }
    var $nearestDistanceSqr_016 = $nearestDistanceSqr_1;
    var $i_017 = $475;
    var $nearest_018 = $nearest_1;
    var $412 = $460;
    var $411 = $459;
    var $410 = $458;
    var $409 = HEAP32[$18 >> 2];
   }
  }
 } while (0);
 var $nearest_0_lcssa;
 if (($nearestRef | 0) == 0) {
  STACKTOP = sp;
  return 1073741824;
 }
 HEAP32[$nearestRef >> 2] = $nearest_0_lcssa;
 STACKTOP = sp;
 return 1073741824;
}
function __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($pos, $flags, $ref, $straightPath, $straightPathFlags, $straightPathRefs, $straightPathCount, $maxStraightPath) {
 var $1 = HEAP32[$straightPathCount >> 2];
 do {
  if (($1 | 0) > 0) {
   var $4 = $1 * 3 & -1;
   var $6 = $straightPath + ($4 - 3 << 2) | 0;
   do {
    if ((HEAP8[22264] | 0) == 0) {
     if ((___cxa_guard_acquire(22264) | 0) == 0) {
      break;
     }
     HEAPF32[9688 >> 2] = 3.725290298461914e-9;
    }
   } while (0);
   var $13 = HEAPF32[$pos >> 2];
   var $15 = $13 - HEAPF32[$6 >> 2];
   var $16 = $pos + 4 | 0;
   var $20 = HEAPF32[$16 >> 2] - HEAPF32[$straightPath + ($4 - 2 << 2) >> 2];
   var $21 = $pos + 8 | 0;
   var $25 = HEAPF32[$21 >> 2] - HEAPF32[$straightPath + ($4 - 1 << 2) >> 2];
   if ($15 * $15 + $20 * $20 + $25 * $25 >= HEAPF32[9688 >> 2]) {
    var $47 = HEAP32[$straightPathCount >> 2];
    var $46 = $13;
    var $_pre_phi = $16;
    var $_pre_phi37 = $21;
    break;
   }
   if (($straightPathFlags | 0) != 0) {
    HEAP8[$straightPathFlags + (HEAP32[$straightPathCount >> 2] - 1) | 0] = $flags;
   }
   if (($straightPathRefs | 0) == 0) {
    var $_0 = 536870912;
    var $_0;
    return $_0;
   }
   HEAP32[$straightPathRefs + (HEAP32[$straightPathCount >> 2] - 1 << 2) >> 2] = $ref;
   var $_0 = 536870912;
   var $_0;
   return $_0;
  } else {
   var $47 = $1;
   var $46 = HEAPF32[$pos >> 2];
   var $_pre_phi = $pos + 4 | 0;
   var $_pre_phi37 = $pos + 8 | 0;
  }
 } while (0);
 var $_pre_phi37;
 var $_pre_phi;
 var $46;
 var $47;
 var $48 = $47 * 3 & -1;
 HEAPF32[$straightPath + ($48 << 2) >> 2] = $46;
 HEAPF32[$straightPath + ($48 + 1 << 2) >> 2] = HEAPF32[$_pre_phi >> 2];
 HEAPF32[$straightPath + ($48 + 2 << 2) >> 2] = HEAPF32[$_pre_phi37 >> 2];
 if (($straightPathFlags | 0) != 0) {
  HEAP8[$straightPathFlags + HEAP32[$straightPathCount >> 2] | 0] = $flags;
 }
 if (($straightPathRefs | 0) != 0) {
  HEAP32[$straightPathRefs + (HEAP32[$straightPathCount >> 2] << 2) >> 2] = $ref;
 }
 var $65 = HEAP32[$straightPathCount >> 2] + 1 | 0;
 HEAP32[$straightPathCount >> 2] = $65;
 if ($flags << 24 >> 24 != 2 & ($65 | 0) < ($maxStraightPath | 0)) {
  var $_0 = 536870912;
  var $_0;
  return $_0;
 }
 var $_0 = ($65 | 0) >= ($maxStraightPath | 0) ? 1073741840 : 1073741824;
 var $_0;
 return $_0;
}
function __ZN10dtNodePool7getNodeEj($this, $id) {
 var $3 = ~($id << 15) + $id | 0;
 var $6 = ($3 >>> 10 ^ $3) * 9 & -1;
 var $8 = $6 >>> 6 ^ $6;
 var $11 = $8 + ~($8 << 11) | 0;
 var $17 = HEAP32[$this + 16 >> 2] - 1 & ($11 >>> 16 ^ $11);
 var $18 = $this + 4 | 0;
 var $i_018 = HEAP16[HEAP32[$18 >> 2] + ($17 << 1) >> 1];
 L1322 : do {
  if ($i_018 << 16 >> 16 != -1) {
   var $23 = HEAP32[$this >> 2];
   var $24 = $this + 8 | 0;
   var $_in = $i_018;
   while (1) {
    var $_in;
    var $26 = $_in & 65535;
    if ((HEAP32[$23 + ($26 * 28 & -1) + 24 >> 2] | 0) == ($id | 0)) {
     break;
    }
    var $i_0 = HEAP16[HEAP32[$24 >> 2] + ($26 << 1) >> 1];
    if ($i_0 << 16 >> 16 == -1) {
     break L1322;
    } else {
     var $_in = $i_0;
    }
   }
   var $_0 = $23 + ($26 * 28 & -1) | 0;
   var $_0;
   return $_0;
  }
 } while (0);
 var $36 = $this + 20 | 0;
 var $37 = HEAP32[$36 >> 2];
 if (($37 | 0) >= (HEAP32[$this + 12 >> 2] | 0)) {
  var $_0 = 0;
  var $_0;
  return $_0;
 }
 HEAP32[$36 >> 2] = $37 + 1;
 var $44 = $37 & 65535;
 var $46 = HEAP32[$this >> 2];
 HEAPF32[$46 + ($44 * 28 & -1) + 12 >> 2] = 0;
 HEAPF32[$46 + ($44 * 28 & -1) + 16 >> 2] = 0;
 HEAP32[$46 + ($44 * 28 & -1) + 24 >> 2] = $id;
 HEAP32[$46 + ($44 * 28 & -1) + 20 >> 2] = 0;
 HEAP16[HEAP32[$this + 8 >> 2] + ($44 << 1) >> 1] = HEAP16[HEAP32[$18 >> 2] + ($17 << 1) >> 1];
 HEAP16[HEAP32[$18 >> 2] + ($17 << 1) >> 1] = $37 & 65535;
 var $_0 = $46 + ($44 * 28 & -1) | 0;
 var $_0;
 return $_0;
}
function __Z12rcCalcBoundsPKfiPfS1_($verts, $nv, $bmin, $bmax) {
 HEAPF32[$bmin >> 2] = HEAPF32[$verts >> 2];
 var $2 = $verts + 4 | 0;
 var $4 = $bmin + 4 | 0;
 HEAPF32[$4 >> 2] = HEAPF32[$2 >> 2];
 var $5 = $verts + 8 | 0;
 var $7 = $bmin + 8 | 0;
 HEAPF32[$7 >> 2] = HEAPF32[$5 >> 2];
 HEAPF32[$bmax >> 2] = HEAPF32[$verts >> 2];
 var $10 = $bmax + 4 | 0;
 HEAPF32[$10 >> 2] = HEAPF32[$2 >> 2];
 var $12 = $bmax + 8 | 0;
 HEAPF32[$12 >> 2] = HEAPF32[$5 >> 2];
 if (($nv | 0) > 1) {
  var $i_012 = 1;
 } else {
  return;
 }
 while (1) {
  var $i_012;
  var $14 = $i_012 * 3 & -1;
  var $15 = $verts + ($14 << 2) | 0;
  var $16 = HEAPF32[$bmin >> 2];
  var $17 = HEAPF32[$15 >> 2];
  HEAPF32[$bmin >> 2] = $16 < $17 ? $16 : $17;
  var $20 = HEAPF32[$4 >> 2];
  var $21 = $verts + ($14 + 1 << 2) | 0;
  var $22 = HEAPF32[$21 >> 2];
  HEAPF32[$4 >> 2] = $20 < $22 ? $20 : $22;
  var $25 = HEAPF32[$7 >> 2];
  var $26 = $verts + ($14 + 2 << 2) | 0;
  var $27 = HEAPF32[$26 >> 2];
  HEAPF32[$7 >> 2] = $25 < $27 ? $25 : $27;
  var $30 = HEAPF32[$bmax >> 2];
  var $31 = HEAPF32[$15 >> 2];
  HEAPF32[$bmax >> 2] = $30 > $31 ? $30 : $31;
  var $34 = HEAPF32[$10 >> 2];
  var $35 = HEAPF32[$21 >> 2];
  HEAPF32[$10 >> 2] = $34 > $35 ? $34 : $35;
  var $38 = HEAPF32[$12 >> 2];
  var $39 = HEAPF32[$26 >> 2];
  HEAPF32[$12 >> 2] = $38 > $39 ? $38 : $39;
  var $42 = $i_012 + 1 | 0;
  if (($42 | 0) < ($nv | 0)) {
   var $i_012 = $42;
  } else {
   break;
  }
 }
 return;
}
function __ZN9rcContext3logE13rcLogCategoryPKcz($this, $category, $format, varrp) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 var $msg = sp;
 var $ap = sp + 512;
 if ((HEAP8[$this + 4 | 0] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $7 = $ap;
 HEAP32[$7 >> 2] = varrp;
 HEAP32[$7 + 4 >> 2] = 0;
 var $8 = $msg | 0;
 var $9 = _vsnprintf($8, 512, $format, $ap | 0);
 if (($9 | 0) > 511) {
  HEAP8[$msg + 511 | 0] = 0;
  var $len_0 = 511;
 } else {
  var $len_0 = $9;
 }
 var $len_0;
 FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 12 >> 2]]($this, $category, $8, $len_0);
 STACKTOP = sp;
 return;
}
function __Z14rcFreePolyMeshP10rcPolyMesh($pmesh) {
 if (($pmesh | 0) == 0) {
  return;
 }
 var $4 = HEAP32[$pmesh >> 2];
 if (($4 | 0) != 0) {
  _free($4);
 }
 var $9 = HEAP32[$pmesh + 4 >> 2];
 if (($9 | 0) != 0) {
  _free($9);
 }
 var $14 = HEAP32[$pmesh + 8 >> 2];
 if (($14 | 0) != 0) {
  _free($14);
 }
 var $19 = HEAP32[$pmesh + 12 >> 2];
 if (($19 | 0) != 0) {
  _free($19);
 }
 var $24 = HEAP32[$pmesh + 16 >> 2];
 if (($24 | 0) != 0) {
  _free($24);
 }
 _free($pmesh);
 return;
}
function __Z23rcMarkWalkableTrianglesP9rcContextfPKfiPKiiPh($walkableSlopeAngle, $verts, $tris, $nt, $areas) {
 var $3 = Math.cos($walkableSlopeAngle / 180 * 3.1415927410125732);
 if (($nt | 0) > 0) {
  var $i_026 = 0;
 } else {
  return;
 }
 while (1) {
  var $i_026;
  var $5 = $i_026 * 3 & -1;
  var $8 = HEAP32[$tris + ($5 << 2) >> 2] * 3 & -1;
  var $12 = HEAP32[$tris + ($5 + 1 << 2) >> 2] * 3 & -1;
  var $16 = HEAP32[$tris + ($5 + 2 << 2) >> 2] * 3 & -1;
  var $_val = HEAPF32[$verts + ($8 << 2) >> 2];
  var $_idx_val = HEAPF32[$verts + ($8 + 1 << 2) >> 2];
  var $_idx13_val = HEAPF32[$verts + ($8 + 2 << 2) >> 2];
  var $18 = HEAPF32[$verts + ($12 << 2) >> 2] - $_val;
  var $19 = HEAPF32[$verts + ($12 + 1 << 2) >> 2] - $_idx_val;
  var $20 = HEAPF32[$verts + ($12 + 2 << 2) >> 2] - $_idx13_val;
  var $21 = HEAPF32[$verts + ($16 << 2) >> 2] - $_val;
  var $22 = HEAPF32[$verts + ($16 + 1 << 2) >> 2] - $_idx_val;
  var $23 = HEAPF32[$verts + ($16 + 2 << 2) >> 2] - $_idx13_val;
  var $26 = $19 * $23 - $20 * $22;
  var $29 = $20 * $21 - $18 * $23;
  var $32 = $18 * $22 - $19 * $21;
  if (1 / Math.sqrt($32 * $32 + ($26 * $26 + $29 * $29)) * $29 > $3) {
   HEAP8[$areas + $i_026 | 0] = 63;
  }
  var $45 = $i_026 + 1 | 0;
  if (($45 | 0) < ($nt | 0)) {
   var $i_026 = $45;
  } else {
   break;
  }
 }
 return;
}
function __Z25rcBuildCompactHeightfieldP9rcContextiiR13rcHeightfieldR20rcCompactHeightfield($ctx, $walkableHeight, $walkableClimb, $hf, $chf) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 3);
 }
 var $11 = HEAP32[$hf >> 2];
 var $13 = HEAP32[$hf + 4 >> 2];
 var $14 = ($13 | 0) > 0;
 var $15 = ($11 | 0) > 0;
 if ($14 & $15) {
  var $17 = HEAP32[$hf + 40 >> 2];
  var $spanCount_019_us_i = 0;
  var $y_020_us_i = 0;
  while (1) {
   var $y_020_us_i;
   var $spanCount_019_us_i;
   var $33 = Math.imul($y_020_us_i, $11) | 0;
   var $spanCount_114_us_i = $spanCount_019_us_i;
   var $x_015_us_i = 0;
   while (1) {
    var $x_015_us_i;
    var $spanCount_114_us_i;
    var $s_011_us_i = HEAP32[$17 + ($x_015_us_i + $33 << 2) >> 2];
    if (($s_011_us_i | 0) == 0) {
     var $spanCount_2_lcssa_us_i = $spanCount_114_us_i;
    } else {
     var $spanCount_212_us_i = $spanCount_114_us_i;
     var $s_013_us_i = $s_011_us_i;
     while (1) {
      var $s_013_us_i;
      var $spanCount_212_us_i;
      var $_spanCount_2_us_i = (HEAP32[$s_013_us_i >> 2] >>> 0 > 67108863) + $spanCount_212_us_i | 0;
      var $s_0_us_i = HEAP32[$s_013_us_i + 4 >> 2];
      if (($s_0_us_i | 0) == 0) {
       var $spanCount_2_lcssa_us_i = $_spanCount_2_us_i;
       break;
      } else {
       var $spanCount_212_us_i = $_spanCount_2_us_i;
       var $s_013_us_i = $s_0_us_i;
      }
     }
    }
    var $spanCount_2_lcssa_us_i;
    var $31 = $x_015_us_i + 1 | 0;
    if (($31 | 0) < ($11 | 0)) {
     var $spanCount_114_us_i = $spanCount_2_lcssa_us_i;
     var $x_015_us_i = $31;
    } else {
     break;
    }
   }
   var $19 = $y_020_us_i + 1 | 0;
   if (($19 | 0) < ($13 | 0)) {
    var $spanCount_019_us_i = $spanCount_2_lcssa_us_i;
    var $y_020_us_i = $19;
   } else {
    var $spanCount_0_lcssa_i = $spanCount_2_lcssa_us_i;
    break;
   }
  }
 } else {
  var $spanCount_0_lcssa_i = 0;
 }
 var $spanCount_0_lcssa_i;
 HEAP32[$chf >> 2] = $11;
 HEAP32[$chf + 4 >> 2] = $13;
 HEAP32[$chf + 8 >> 2] = $spanCount_0_lcssa_i;
 HEAP32[$chf + 12 >> 2] = $walkableHeight;
 HEAP32[$chf + 16 >> 2] = $walkableClimb;
 HEAP16[$chf + 26 >> 1] = 0;
 HEAPF32[$chf + 28 >> 2] = HEAPF32[$hf + 8 >> 2];
 HEAPF32[$chf + 32 >> 2] = HEAPF32[$hf + 12 >> 2];
 HEAPF32[$chf + 36 >> 2] = HEAPF32[$hf + 16 >> 2];
 HEAPF32[$chf + 40 >> 2] = HEAPF32[$hf + 20 >> 2];
 var $53 = HEAPF32[$hf + 24 >> 2];
 var $54 = $chf + 44 | 0;
 HEAPF32[$54 >> 2] = $53;
 HEAPF32[$chf + 48 >> 2] = HEAPF32[$hf + 28 >> 2];
 var $59 = $hf + 36 | 0;
 HEAPF32[$54 >> 2] = $53 + ($walkableHeight | 0) * HEAPF32[$59 >> 2];
 HEAPF32[$chf + 52 >> 2] = HEAPF32[$hf + 32 >> 2];
 HEAPF32[$chf + 56 >> 2] = HEAPF32[$59 >> 2];
 var $69 = Math.imul($11 << 2, $13) | 0;
 var $70 = _malloc($69);
 var $72 = $chf + 60 | 0;
 HEAP32[$72 >> 2] = $70;
 if (($70 | 0) == 0) {
  var $75 = Math.imul($13, $11) | 0;
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6656, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $75, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($70, 0, $69);
 var $77 = $spanCount_0_lcssa_i << 3;
 var $78 = _malloc($77);
 var $80 = $chf + 64 | 0;
 HEAP32[$80 >> 2] = $78;
 if (($78 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7864, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $spanCount_0_lcssa_i, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($78, 0, $77);
 var $84 = _malloc($spanCount_0_lcssa_i);
 var $85 = $chf + 72 | 0;
 HEAP32[$85 >> 2] = $84;
 if (($84 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $spanCount_0_lcssa_i, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($84, 0, $spanCount_0_lcssa_i);
 do {
  if ($14) {
   var $89 = $hf + 40 | 0;
   if ($15) {
    var $y_0166_us = 0;
    var $idx_0167_us = 0;
    while (1) {
     var $idx_0167_us;
     var $y_0166_us;
     var $145 = Math.imul($y_0166_us, $11) | 0;
     var $x_0161_us = 0;
     var $idx_1162_us = $idx_0167_us;
     while (1) {
      var $idx_1162_us;
      var $x_0161_us;
      var $93 = $x_0161_us + $145 | 0;
      var $96 = HEAP32[HEAP32[$89 >> 2] + ($93 << 2) >> 2];
      if (($96 | 0) == 0) {
       var $idx_4_us = $idx_1162_us;
      } else {
       var $144 = HEAP32[$72 >> 2] + ($93 << 2) | 0;
       HEAP32[$144 >> 2] = $idx_1162_us & 16777215;
       var $s_0155_us = $96;
       var $idx_2156_us = $idx_1162_us;
       while (1) {
        var $idx_2156_us;
        var $s_0155_us;
        var $99 = $s_0155_us;
        var $100 = HEAP32[$99 >> 2];
        if ($100 >>> 0 > 67108863) {
         var $104 = $100 >>> 13 & 8191;
         var $105 = $s_0155_us + 4 | 0;
         var $106 = HEAP32[$105 >> 2];
         if (($106 | 0) == 0) {
          var $113 = 65535;
         } else {
          var $113 = HEAP32[$106 >> 2] & 8191;
         }
         var $113;
         HEAP16[HEAP32[$80 >> 2] + ($idx_2156_us << 3) >> 1] = $104 & 65535;
         var $117 = $113 - $104 | 0;
         if (($117 | 0) < 0) {
          var $121 = 0;
         } else {
          var $121 = ($117 | 0) > 255 ? -16777216 : $117 << 24;
         }
         var $121;
         var $124 = HEAP32[$80 >> 2] + ($idx_2156_us << 3) + 4 | 0;
         HEAP32[$124 >> 2] = HEAP32[$124 >> 2] & 16777215 | $121;
         HEAP8[HEAP32[$85 >> 2] + $idx_2156_us | 0] = HEAP32[$99 >> 2] >>> 26 & 255;
         HEAP32[$144 >> 2] = HEAP32[$144 >> 2] + 16777216;
         var $idx_3_us = $idx_2156_us + 1 | 0;
         var $_pre_phi = $105;
        } else {
         var $idx_3_us = $idx_2156_us;
         var $_pre_phi = $s_0155_us + 4 | 0;
        }
        var $_pre_phi;
        var $idx_3_us;
        var $137 = HEAP32[$_pre_phi >> 2];
        if (($137 | 0) == 0) {
         var $idx_4_us = $idx_3_us;
         break;
        } else {
         var $s_0155_us = $137;
         var $idx_2156_us = $idx_3_us;
        }
       }
      }
      var $idx_4_us;
      var $139 = $x_0161_us + 1 | 0;
      if (($139 | 0) < ($11 | 0)) {
       var $x_0161_us = $139;
       var $idx_1162_us = $idx_4_us;
      } else {
       break;
      }
     }
     var $91 = $y_0166_us + 1 | 0;
     if (($91 | 0) < ($13 | 0)) {
      var $y_0166_us = $91;
      var $idx_0167_us = $idx_4_us;
     } else {
      var $y1_0149 = 0;
      var $tooHighNeighbour_0151 = 0;
      break;
     }
    }
   } else {
    var $y1_0149 = 0;
    var $tooHighNeighbour_0151 = 0;
   }
   while (1) {
    var $tooHighNeighbour_0151;
    var $y1_0149;
    if ($15) {
     var $146 = Math.imul($y1_0149, $11) | 0;
     var $x2_0142 = 0;
     var $tooHighNeighbour_1144 = $tooHighNeighbour_0151;
     while (1) {
      var $tooHighNeighbour_1144;
      var $x2_0142;
      var $151 = HEAP32[HEAP32[$72 >> 2] + ($x2_0142 + $146 << 2) >> 2];
      var $152 = $151 & 16777215;
      var $153 = $151 >>> 24;
      var $154 = $152 + $153 | 0;
      if (($153 | 0) == 0) {
       var $tooHighNeighbour_2_lcssa = $tooHighNeighbour_1144;
      } else {
       var $i_0138 = $152;
       var $tooHighNeighbour_2139 = $tooHighNeighbour_1144;
       while (1) {
        var $tooHighNeighbour_2139;
        var $i_0138;
        var $156 = HEAP32[$80 >> 2];
        var $158 = $156 + ($i_0138 << 3) + 4 | 0;
        var $159 = $156 + ($i_0138 << 3) | 0;
        var $dir_0136 = 0;
        var $tooHighNeighbour_3137 = $tooHighNeighbour_2139;
        var $161 = HEAP32[$158 >> 2];
        while (1) {
         var $161;
         var $tooHighNeighbour_3137;
         var $dir_0136;
         var $162 = $dir_0136 * 6 & -1;
         var $163 = 63 << $162;
         var $164 = $163 ^ 16777215;
         var $166 = $161 & $164 | $163;
         var $168 = $161 & -16777216;
         var $169 = $166 & 16777215 | $168;
         HEAP32[$158 >> 2] = $169;
         var $172 = HEAP32[9712 + ($dir_0136 << 2) >> 2] + $x2_0142 | 0;
         var $175 = HEAP32[9696 + ($dir_0136 << 2) >> 2] + $y1_0149 | 0;
         L1439 : do {
          if (($175 | $172 | 0) > -1 & ($172 | 0) < ($11 | 0) & ($175 | 0) < ($13 | 0)) {
           var $181 = Math.imul($175, $11) + $172 | 0;
           var $185 = HEAP32[HEAP32[$72 >> 2] + ($181 << 2) >> 2];
           var $186 = $185 & 16777215;
           var $187 = $185 >>> 24;
           var $188 = $186 + $187 | 0;
           if (($187 | 0) == 0) {
            var $tooHighNeighbour_6 = $tooHighNeighbour_3137;
            var $233 = $169;
            break;
           }
           var $190 = HEAP32[$80 >> 2];
           var $191 = HEAP16[$159 >> 1];
           var $192 = $191 & 65535;
           var $194 = ($161 >>> 24) + $192 | 0;
           var $tooHighNeighbour_4134 = $tooHighNeighbour_3137;
           var $k_0135 = $186;
           L1442 : while (1) {
            var $k_0135;
            var $tooHighNeighbour_4134;
            var $197 = HEAP16[$190 + ($k_0135 << 3) >> 1];
            var $201 = $197 & 65535;
            var $206 = (HEAP32[$190 + ($k_0135 << 3) + 4 >> 2] >>> 24) + $201 | 0;
            do {
             if (((($194 | 0) < ($206 | 0) ? $194 : $206) - ((($191 & 65535) > ($197 & 65535) ? $191 : $197) & 65535) | 0) < ($walkableHeight | 0)) {
              var $tooHighNeighbour_5 = $tooHighNeighbour_4134;
             } else {
              var $212 = $201 - $192 | 0;
              if (((($212 | 0) < 0 ? -$212 | 0 : $212) | 0) > ($walkableClimb | 0)) {
               var $tooHighNeighbour_5 = $tooHighNeighbour_4134;
               break;
              }
              var $218 = $k_0135 - $186 | 0;
              if ($218 >>> 0 <= 62) {
               break L1442;
              }
              var $tooHighNeighbour_5 = ($tooHighNeighbour_4134 | 0) > ($218 | 0) ? $tooHighNeighbour_4134 : $218;
             }
            } while (0);
            var $tooHighNeighbour_5;
            var $231 = $k_0135 + 1 | 0;
            if (($231 | 0) < ($188 | 0)) {
             var $tooHighNeighbour_4134 = $tooHighNeighbour_5;
             var $k_0135 = $231;
            } else {
             var $tooHighNeighbour_6 = $tooHighNeighbour_5;
             var $233 = $169;
             break L1439;
            }
           }
           var $229 = ($166 & $164 | ($218 & 63) << $162) & 16777215 | $168;
           HEAP32[$158 >> 2] = $229;
           var $tooHighNeighbour_6 = $tooHighNeighbour_4134;
           var $233 = $229;
          } else {
           var $tooHighNeighbour_6 = $tooHighNeighbour_3137;
           var $233 = $169;
          }
         } while (0);
         var $233;
         var $tooHighNeighbour_6;
         var $234 = $dir_0136 + 1 | 0;
         if (($234 | 0) < 4) {
          var $dir_0136 = $234;
          var $tooHighNeighbour_3137 = $tooHighNeighbour_6;
          var $161 = $233;
         } else {
          break;
         }
        }
        var $237 = $i_0138 + 1 | 0;
        if (($237 | 0) < ($154 | 0)) {
         var $i_0138 = $237;
         var $tooHighNeighbour_2139 = $tooHighNeighbour_6;
        } else {
         var $tooHighNeighbour_2_lcssa = $tooHighNeighbour_6;
         break;
        }
       }
      }
      var $tooHighNeighbour_2_lcssa;
      var $239 = $x2_0142 + 1 | 0;
      if (($239 | 0) < ($11 | 0)) {
       var $x2_0142 = $239;
       var $tooHighNeighbour_1144 = $tooHighNeighbour_2_lcssa;
      } else {
       var $tooHighNeighbour_1_lcssa = $tooHighNeighbour_2_lcssa;
       break;
      }
     }
    } else {
     var $tooHighNeighbour_1_lcssa = $tooHighNeighbour_0151;
    }
    var $tooHighNeighbour_1_lcssa;
    var $241 = $y1_0149 + 1 | 0;
    if (($241 | 0) < ($13 | 0)) {
     var $y1_0149 = $241;
     var $tooHighNeighbour_0151 = $tooHighNeighbour_1_lcssa;
    } else {
     break;
    }
   }
   if (($tooHighNeighbour_1_lcssa | 0) <= 62) {
    break;
   }
   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 5712, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $tooHighNeighbour_1_lcssa, HEAP32[tempVarArgs + 8 >> 2] = 62, tempVarArgs));
   STACKTOP = tempVarArgs;
  }
 } while (0);
 if ((HEAP8[$1] & 1) == 0) {
  var $_0 = 1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 3);
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZN10dtNodePoolC2Eii($this, $maxNodes, $hashSize) {
 var $1 = $this | 0;
 HEAP32[$1 >> 2] = 0;
 var $2 = $this + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 var $3 = $this + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 var $4 = $this + 12 | 0;
 HEAP32[$4 >> 2] = $maxNodes;
 var $5 = $this + 16 | 0;
 HEAP32[$5 >> 2] = $hashSize;
 HEAP32[$this + 20 >> 2] = 0;
 var $7 = $hashSize - 1 | 0;
 var $9 = $7 >>> 1 | $7;
 var $11 = $9 >>> 2 | $9;
 var $13 = $11 >>> 4 | $11;
 var $15 = $13 >>> 8 | $13;
 if ((($15 >>> 16 | $15) + 1 | 0) != ($hashSize | 0)) {
  ___assert_func(8448, 45, 9072, 8264);
 }
 if (($maxNodes | 0) <= 0) {
  ___assert_func(8448, 46, 9072, 6536);
 }
 HEAP32[$1 >> 2] = _malloc($maxNodes * 28 & -1);
 HEAP32[$3 >> 2] = _malloc(HEAP32[$4 >> 2] << 1);
 var $33 = _malloc($hashSize << 1);
 HEAP32[$2 >> 2] = $33;
 if ((HEAP32[$1 >> 2] | 0) == 0) {
  ___assert_func(8448, 52, 9072, 5840);
 }
 if ((HEAP32[$3 >> 2] | 0) == 0) {
  ___assert_func(8448, 53, 9072, 4488);
 }
 if (($33 | 0) == 0) {
  ___assert_func(8448, 54, 9072, 3776);
 } else {
  _memset($33, -1, HEAP32[$5 >> 2] << 1);
  _memset(HEAP32[$3 >> 2], -1, HEAP32[$4 >> 2] << 1);
  return;
 }
}
function __Z19rcErodeWalkableAreaP9rcContextiR20rcCompactHeightfield($ctx, $radius, $chf) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 var $2 = HEAP32[$chf >> 2];
 var $4 = HEAP32[$chf + 4 >> 2];
 var $5 = $ctx + 5 | 0;
 if ((HEAP8[$5] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 13);
 }
 var $14 = $chf + 8 | 0;
 var $16 = _malloc(HEAP32[$14 >> 2]);
 var $18 = HEAP32[$14 >> 2];
 if (($16 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $18, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($16, -1, $18);
 if (($4 | 0) > 0) {
  var $22 = ($2 | 0) > 0;
  var $23 = $chf + 60 | 0;
  var $24 = $chf + 72 | 0;
  var $25 = $chf + 64 | 0;
  if ($22) {
   var $y_0213_us = 0;
   while (1) {
    var $y_0213_us;
    var $76 = Math.imul($y_0213_us, $2) | 0;
    var $78 = Math.imul($y_0213_us - 1 | 0, $2) | 0;
    var $79 = $y_0213_us + 1 | 0;
    var $80 = Math.imul($79, $2) | 0;
    var $x_0209_us = 0;
    while (1) {
     var $x_0209_us;
     var $32 = HEAP32[HEAP32[$23 >> 2] + ($x_0209_us + $76 << 2) >> 2];
     var $33 = $32 & 16777215;
     var $34 = $32 >>> 24;
     var $35 = $33 + $34 | 0;
     if (($34 | 0) == 0) {
      var $_pre_phi = $x_0209_us + 1 | 0;
     } else {
      var $37 = $x_0209_us + $78 | 0;
      var $38 = $x_0209_us + 1 | 0;
      var $39 = $38 + $76 | 0;
      var $40 = $x_0209_us + $80 | 0;
      var $42 = $x_0209_us - 1 + $76 | 0;
      var $i_0203_us = $33;
      while (1) {
       var $i_0203_us;
       var $44 = HEAP32[$24 >> 2];
       do {
        if ((HEAP8[$44 + $i_0203_us | 0] | 0) == 0) {
         HEAP8[$16 + $i_0203_us | 0] = 0;
        } else {
         var $52 = HEAP32[HEAP32[$25 >> 2] + ($i_0203_us << 3) + 4 >> 2];
         var $53 = $52 & 63;
         if (($53 | 0) == 63) {
          var $nc_1_us = 0;
         } else {
          var $nc_1_us = (HEAP8[$44 + ((HEAP32[HEAP32[$23 >> 2] + ($42 << 2) >> 2] & 16777215) + $53) | 0] | 0) != 0 | 0;
         }
         var $nc_1_us;
         var $69 = $52 >>> 6 & 63;
         if (($69 | 0) == 63) {
          var $nc_1_us_1 = $nc_1_us;
         } else {
          var $nc_1_us_1 = ((HEAP8[$44 + ((HEAP32[HEAP32[$23 >> 2] + ($40 << 2) >> 2] & 16777215) + $69) | 0] | 0) != 0) + $nc_1_us | 0;
         }
         var $nc_1_us_1;
         var $371 = $52 >>> 12 & 63;
         if (($371 | 0) == 63) {
          var $nc_1_us_2 = $nc_1_us_1;
         } else {
          var $nc_1_us_2 = ((HEAP8[$44 + ((HEAP32[HEAP32[$23 >> 2] + ($39 << 2) >> 2] & 16777215) + $371) | 0] | 0) != 0) + $nc_1_us_1 | 0;
         }
         var $nc_1_us_2;
         var $385 = $52 >>> 18 & 63;
         if (($385 | 0) == 63) {
          var $nc_1_us_3 = $nc_1_us_2;
         } else {
          var $nc_1_us_3 = ((HEAP8[$44 + ((HEAP32[HEAP32[$23 >> 2] + ($37 << 2) >> 2] & 16777215) + $385) | 0] | 0) != 0) + $nc_1_us_2 | 0;
         }
         var $nc_1_us_3;
         if (($nc_1_us_3 | 0) == 4) {
          break;
         }
         HEAP8[$16 + $i_0203_us | 0] = 0;
        }
       } while (0);
       var $74 = $i_0203_us + 1 | 0;
       if (($74 | 0) < ($35 | 0)) {
        var $i_0203_us = $74;
       } else {
        var $_pre_phi = $38;
        break;
       }
      }
     }
     var $_pre_phi;
     if (($_pre_phi | 0) < ($2 | 0)) {
      var $x_0209_us = $_pre_phi;
     } else {
      break;
     }
    }
    if (($79 | 0) < ($4 | 0)) {
     var $y_0213_us = $79;
    } else {
     var $y1_0200 = 0;
     break;
    }
   }
  } else {
   var $y1_0200 = 0;
  }
  while (1) {
   var $y1_0200;
   if ($22) {
    var $81 = Math.imul($y1_0200, $2) | 0;
    var $83 = Math.imul($y1_0200 - 1 | 0, $2) | 0;
    var $84 = $83 + 1 | 0;
    var $x2_0196 = 0;
    while (1) {
     var $x2_0196;
     var $89 = HEAP32[HEAP32[$23 >> 2] + ($x2_0196 + $81 << 2) >> 2];
     var $90 = $89 & 16777215;
     var $91 = $89 >>> 24;
     var $92 = $90 + $91 | 0;
     if (($91 | 0) != 0) {
      var $94 = $x2_0196 + $83 | 0;
      var $95 = $84 + $x2_0196 | 0;
      var $96 = $x2_0196 - 1 | 0;
      var $97 = $96 + $81 | 0;
      var $98 = $96 + $83 | 0;
      var $i4_0191 = $90;
      while (1) {
       var $i4_0191;
       var $99 = HEAP32[$25 >> 2];
       var $101 = $99 + ($i4_0191 << 3) + 4 | 0;
       var $103 = HEAP32[$101 >> 2] & 63;
       do {
        if (($103 | 0) != 63) {
         var $111 = (HEAP32[HEAP32[$23 >> 2] + ($97 << 2) >> 2] & 16777215) + $103 | 0;
         var $115 = HEAPU8[$16 + $111 | 0] + 2 | 0;
         var $117 = $115 >>> 0 < 255 ? $115 : 255;
         var $119 = $16 + $i4_0191 | 0;
         var $120 = HEAP8[$119];
         if (($117 & 255) >>> 0 < ($120 & 255) >>> 0) {
          var $124 = $117 & 255;
          HEAP8[$119] = $124;
          var $126 = $124;
         } else {
          var $126 = $120;
         }
         var $126;
         var $131 = HEAP32[$99 + ($111 << 3) + 4 >> 2] >>> 18 & 63;
         if (($131 | 0) == 63) {
          break;
         }
         var $143 = HEAPU8[$16 + ((HEAP32[HEAP32[$23 >> 2] + ($98 << 2) >> 2] & 16777215) + $131) | 0] + 3 | 0;
         var $145 = $143 >>> 0 < 255 ? $143 : 255;
         if (($145 & 255) >>> 0 >= ($126 & 255) >>> 0) {
          break;
         }
         HEAP8[$119] = $145 & 255;
        }
       } while (0);
       var $153 = HEAP32[$101 >> 2] >>> 18 & 63;
       do {
        if (($153 | 0) != 63) {
         var $161 = (HEAP32[HEAP32[$23 >> 2] + ($94 << 2) >> 2] & 16777215) + $153 | 0;
         var $162 = HEAP32[$25 >> 2];
         var $166 = HEAPU8[$16 + $161 | 0] + 2 | 0;
         var $168 = $166 >>> 0 < 255 ? $166 : 255;
         var $170 = $16 + $i4_0191 | 0;
         var $171 = HEAP8[$170];
         if (($168 & 255) >>> 0 < ($171 & 255) >>> 0) {
          var $175 = $168 & 255;
          HEAP8[$170] = $175;
          var $177 = $175;
         } else {
          var $177 = $171;
         }
         var $177;
         var $182 = HEAP32[$162 + ($161 << 3) + 4 >> 2] >>> 12 & 63;
         if (($182 | 0) == 63) {
          break;
         }
         var $194 = HEAPU8[$16 + ((HEAP32[HEAP32[$23 >> 2] + ($95 << 2) >> 2] & 16777215) + $182) | 0] + 3 | 0;
         var $196 = $194 >>> 0 < 255 ? $194 : 255;
         if (($196 & 255) >>> 0 >= ($177 & 255) >>> 0) {
          break;
         }
         HEAP8[$170] = $196 & 255;
        }
       } while (0);
       var $203 = $i4_0191 + 1 | 0;
       if (($203 | 0) < ($92 | 0)) {
        var $i4_0191 = $203;
       } else {
        break;
       }
      }
     }
     var $205 = $x2_0196 + 1 | 0;
     if (($205 | 0) < ($2 | 0)) {
      var $x2_0196 = $205;
     } else {
      break;
     }
    }
   }
   var $207 = $y1_0200 + 1 | 0;
   if (($207 | 0) < ($4 | 0)) {
    var $y1_0200 = $207;
   } else {
    var $y14_0189_in = $4;
    break;
   }
  }
  while (1) {
   var $y14_0189_in;
   var $y14_0189 = $y14_0189_in - 1 | 0;
   if ($22) {
    var $210 = Math.imul($y14_0189, $2) | 0;
    var $211 = Math.imul($y14_0189_in, $2) | 0;
    var $212 = $211 - 2 | 0;
    var $x15_0184_in = $2;
    while (1) {
     var $x15_0184_in;
     var $x15_0184 = $x15_0184_in - 1 | 0;
     var $218 = HEAP32[HEAP32[$23 >> 2] + ($x15_0184 + $210 << 2) >> 2];
     var $219 = $218 & 16777215;
     var $220 = $218 >>> 24;
     var $221 = $219 + $220 | 0;
     if (($220 | 0) != 0) {
      var $223 = $x15_0184 + $211 | 0;
      var $224 = $212 + $x15_0184_in | 0;
      var $225 = $x15_0184_in + $210 | 0;
      var $226 = $x15_0184_in + $211 | 0;
      var $i17_0178 = $219;
      while (1) {
       var $i17_0178;
       var $227 = HEAP32[$25 >> 2];
       var $229 = $227 + ($i17_0178 << 3) + 4 | 0;
       var $232 = HEAP32[$229 >> 2] >>> 12 & 63;
       do {
        if (($232 | 0) != 63) {
         var $240 = (HEAP32[HEAP32[$23 >> 2] + ($225 << 2) >> 2] & 16777215) + $232 | 0;
         var $244 = HEAPU8[$16 + $240 | 0] + 2 | 0;
         var $246 = $244 >>> 0 < 255 ? $244 : 255;
         var $248 = $16 + $i17_0178 | 0;
         var $249 = HEAP8[$248];
         if (($246 & 255) >>> 0 < ($249 & 255) >>> 0) {
          var $253 = $246 & 255;
          HEAP8[$248] = $253;
          var $255 = $253;
         } else {
          var $255 = $249;
         }
         var $255;
         var $260 = HEAP32[$227 + ($240 << 3) + 4 >> 2] >>> 6 & 63;
         if (($260 | 0) == 63) {
          break;
         }
         var $272 = HEAPU8[$16 + ((HEAP32[HEAP32[$23 >> 2] + ($226 << 2) >> 2] & 16777215) + $260) | 0] + 3 | 0;
         var $274 = $272 >>> 0 < 255 ? $272 : 255;
         if (($274 & 255) >>> 0 >= ($255 & 255) >>> 0) {
          break;
         }
         HEAP8[$248] = $274 & 255;
        }
       } while (0);
       var $282 = HEAP32[$229 >> 2] >>> 6 & 63;
       do {
        if (($282 | 0) != 63) {
         var $290 = (HEAP32[HEAP32[$23 >> 2] + ($223 << 2) >> 2] & 16777215) + $282 | 0;
         var $291 = HEAP32[$25 >> 2];
         var $295 = HEAPU8[$16 + $290 | 0] + 2 | 0;
         var $297 = $295 >>> 0 < 255 ? $295 : 255;
         var $299 = $16 + $i17_0178 | 0;
         var $300 = HEAP8[$299];
         if (($297 & 255) >>> 0 < ($300 & 255) >>> 0) {
          var $304 = $297 & 255;
          HEAP8[$299] = $304;
          var $306 = $304;
         } else {
          var $306 = $300;
         }
         var $306;
         var $310 = HEAP32[$291 + ($290 << 3) + 4 >> 2] & 63;
         if (($310 | 0) == 63) {
          break;
         }
         var $322 = HEAPU8[$16 + ((HEAP32[HEAP32[$23 >> 2] + ($224 << 2) >> 2] & 16777215) + $310) | 0] + 3 | 0;
         var $324 = $322 >>> 0 < 255 ? $322 : 255;
         if (($324 & 255) >>> 0 >= ($306 & 255) >>> 0) {
          break;
         }
         HEAP8[$299] = $324 & 255;
        }
       } while (0);
       var $331 = $i17_0178 + 1 | 0;
       if (($331 | 0) < ($221 | 0)) {
        var $i17_0178 = $331;
       } else {
        break;
       }
      }
     }
     if (($x15_0184 | 0) > 0) {
      var $x15_0184_in = $x15_0184;
     } else {
      break;
     }
    }
   }
   if (($y14_0189 | 0) > 0) {
    var $y14_0189_in = $y14_0189;
   } else {
    break;
   }
  }
 }
 var $333 = HEAP32[$14 >> 2];
 if (($333 | 0) > 0) {
  var $336 = $radius << 1 & 254;
  var $337 = $chf + 72 | 0;
  var $i34_0177 = 0;
  var $339 = $333;
  while (1) {
   var $339;
   var $i34_0177;
   if (HEAPU8[$16 + $i34_0177 | 0] >>> 0 < $336 >>> 0) {
    HEAP8[HEAP32[$337 >> 2] + $i34_0177 | 0] = 0;
    var $348 = HEAP32[$14 >> 2];
   } else {
    var $348 = $339;
   }
   var $348;
   var $349 = $i34_0177 + 1 | 0;
   if (($349 | 0) < ($348 | 0)) {
    var $i34_0177 = $349;
    var $339 = $348;
   } else {
    break;
   }
  }
 }
 _free($16);
 if ((HEAP8[$5] & 1) == 0) {
  var $_0 = 1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 13);
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __Z20rcMarkConvexPolyAreaP9rcContextPKfiffhR20rcCompactHeightfield($ctx, $verts, $nverts, $hmin, $hmax, $areaId, $chf) {
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 16);
 }
 var $10 = HEAPF32[$verts >> 2];
 var $12 = HEAPF32[$verts + 8 >> 2];
 if (($nverts | 0) > 1) {
  var $15 = $12;
  var $bmin_sroa_0_0_load677182 = $10;
  var $14 = $12;
  var $bmax_sroa_0_0_load657083 = $10;
  var $i_084 = 1;
  while (1) {
   var $i_084;
   var $bmax_sroa_0_0_load657083;
   var $14;
   var $bmin_sroa_0_0_load677182;
   var $15;
   var $16 = $i_084 * 3 & -1;
   var $18 = HEAPF32[$verts + ($16 << 2) >> 2];
   var $20 = $bmin_sroa_0_0_load677182 < $18 ? $bmin_sroa_0_0_load677182 : $18;
   var $22 = HEAPF32[$verts + ($16 + 2 << 2) >> 2];
   var $24 = $15 < $22 ? $15 : $22;
   var $26 = $bmax_sroa_0_0_load657083 > $18 ? $bmax_sroa_0_0_load657083 : $18;
   var $28 = $14 > $22 ? $14 : $22;
   var $29 = $i_084 + 1 | 0;
   if (($29 | 0) < ($nverts | 0)) {
    var $15 = $24;
    var $bmin_sroa_0_0_load677182 = $20;
    var $14 = $28;
    var $bmax_sroa_0_0_load657083 = $26;
    var $i_084 = $29;
   } else {
    var $_lcssa = $24;
    var $bmin_sroa_0_0_load6771_lcssa = $20;
    var $_lcssa81 = $28;
    var $bmax_sroa_0_0_load6570_lcssa = $26;
    break;
   }
  }
 } else {
  var $_lcssa = $12;
  var $bmin_sroa_0_0_load6771_lcssa = $10;
  var $_lcssa81 = $12;
  var $bmax_sroa_0_0_load6570_lcssa = $10;
 }
 var $bmax_sroa_0_0_load6570_lcssa;
 var $_lcssa81;
 var $bmin_sroa_0_0_load6771_lcssa;
 var $_lcssa;
 var $31 = $chf + 28 | 0;
 var $32 = HEAPF32[$31 >> 2];
 var $34 = $chf + 52 | 0;
 var $35 = HEAPF32[$34 >> 2];
 var $37 = ($bmin_sroa_0_0_load6771_lcssa - $32) / $35 & -1;
 var $39 = HEAPF32[$chf + 32 >> 2];
 var $42 = HEAPF32[$chf + 56 >> 2];
 var $44 = ($hmin - $39) / $42 & -1;
 var $45 = $chf + 36 | 0;
 var $46 = HEAPF32[$45 >> 2];
 var $49 = ($_lcssa - $46) / $35 & -1;
 var $52 = ($bmax_sroa_0_0_load6570_lcssa - $32) / $35 & -1;
 var $55 = ($hmax - $39) / $42 & -1;
 var $58 = ($_lcssa81 - $46) / $35 & -1;
 if (($52 | 0) < 0) {
  return;
 }
 var $61 = $chf | 0;
 var $62 = HEAP32[$61 >> 2];
 if (($37 | 0) >= ($62 | 0) | ($58 | 0) < 0) {
  return;
 }
 var $67 = HEAP32[$chf + 4 >> 2];
 if (($49 | 0) >= ($67 | 0)) {
  return;
 }
 var $_ = ($37 | 0) < 0 ? 0 : $37;
 var $maxx_0 = ($52 | 0) < ($62 | 0) ? $52 : $62 - 1 | 0;
 var $_63 = ($49 | 0) < 0 ? 0 : $49;
 var $maxz_0 = ($58 | 0) < ($67 | 0) ? $58 : $67 - 1 | 0;
 if (($_63 | 0) <= ($maxz_0 | 0)) {
  var $77 = ($_ | 0) > ($maxx_0 | 0);
  var $78 = $chf + 60 | 0;
  var $79 = $chf + 72 | 0;
  var $80 = $chf + 64 | 0;
  var $81 = ($nverts | 0) > 0;
  var $82 = $nverts - 1 | 0;
  var $z_078 = $_63;
  while (1) {
   var $z_078;
   if (!$77) {
    var $84 = ($z_078 | 0) + .5;
    var $x_075 = $_;
    while (1) {
     var $x_075;
     var $87 = Math.imul(HEAP32[$61 >> 2], $z_078) + $x_075 | 0;
     var $91 = HEAP32[HEAP32[$78 >> 2] + ($87 << 2) >> 2];
     var $92 = $91 & 16777215;
     var $93 = $91 >>> 24;
     var $94 = $92 + $93 | 0;
     if (($93 | 0) != 0) {
      var $97 = ($x_075 | 0) + .5;
      var $i1_073 = $92;
      while (1) {
       var $i1_073;
       var $99 = HEAP32[$79 >> 2] + $i1_073 | 0;
       do {
        if ((HEAP8[$99] | 0) != 0) {
         var $106 = HEAPU16[HEAP32[$80 >> 2] + ($i1_073 << 3) >> 1];
         if (($106 | 0) < ($44 | 0) | ($106 | 0) > ($55 | 0)) {
          break;
         }
         var $111 = HEAPF32[$34 >> 2];
         var $113 = HEAPF32[$31 >> 2] + $97 * $111;
         var $116 = HEAPF32[$45 >> 2] + $84 * $111;
         if ($81) {
          var $c_018_i = 0;
          var $j_019_i = $82;
          var $i_020_i = 0;
         } else {
          break;
         }
         while (1) {
          var $i_020_i;
          var $j_019_i;
          var $c_018_i;
          var $117 = $i_020_i * 3 & -1;
          var $118 = $j_019_i * 3 & -1;
          var $120 = HEAPF32[$verts + ($117 + 2 << 2) >> 2];
          var $123 = HEAPF32[$verts + ($118 + 2 << 2) >> 2];
          do {
           if ($120 > $116 ^ $123 > $116) {
            var $130 = HEAPF32[$verts + ($117 << 2) >> 2];
            if ($113 >= $130 + ($116 - $120) * (HEAPF32[$verts + ($118 << 2) >> 2] - $130) / ($123 - $120)) {
             var $c_1_i = $c_018_i;
             break;
            }
            var $c_1_i = ($c_018_i | 0) == 0 | 0;
           } else {
            var $c_1_i = $c_018_i;
           }
          } while (0);
          var $c_1_i;
          var $142 = $i_020_i + 1 | 0;
          if (($142 | 0) < ($nverts | 0)) {
           var $c_018_i = $c_1_i;
           var $j_019_i = $i_020_i;
           var $i_020_i = $142;
          } else {
           break;
          }
         }
         if (($c_1_i | 0) == 0) {
          break;
         }
         HEAP8[$99] = $areaId;
        }
       } while (0);
       var $146 = $i1_073 + 1 | 0;
       if (($146 | 0) < ($94 | 0)) {
        var $i1_073 = $146;
       } else {
        break;
       }
      }
     }
     var $148 = $x_075 + 1 | 0;
     if (($148 | 0) > ($maxx_0 | 0)) {
      break;
     } else {
      var $x_075 = $148;
     }
    }
   }
   var $150 = $z_078 + 1 | 0;
   if (($150 | 0) > ($maxz_0 | 0)) {
    break;
   } else {
    var $z_078 = $150;
   }
  }
 }
 if ((HEAP8[$1] & 1) == 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 16);
 return;
}
function __Z15rcBuildContoursP9rcContextR20rcCompactHeightfieldfiR12rcContourSeti($ctx, $chf, $maxError, $maxEdgeLen, $cset) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $regs_i_i = sp;
 var $verts_sroa_1;
 var $simplified_sroa_1;
 var $1 = $chf | 0;
 var $2 = HEAP32[$1 >> 2];
 var $3 = $chf + 4 | 0;
 var $4 = HEAP32[$3 >> 2];
 var $5 = $chf + 20 | 0;
 var $6 = HEAP32[$5 >> 2];
 var $7 = $ctx + 5 | 0;
 if ((HEAP8[$7] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 4);
 }
 var $16 = $cset + 8 | 0;
 var $18 = HEAPF32[$chf + 28 >> 2];
 HEAPF32[$16 >> 2] = $18;
 HEAPF32[$cset + 12 >> 2] = HEAPF32[$chf + 32 >> 2];
 var $23 = HEAPF32[$chf + 36 >> 2];
 var $24 = $cset + 16 | 0;
 HEAPF32[$24 >> 2] = $23;
 var $25 = $cset + 20 | 0;
 var $27 = HEAPF32[$chf + 40 >> 2];
 HEAPF32[$25 >> 2] = $27;
 HEAPF32[$cset + 24 >> 2] = HEAPF32[$chf + 44 >> 2];
 var $32 = HEAPF32[$chf + 48 >> 2];
 var $33 = $cset + 28 | 0;
 HEAPF32[$33 >> 2] = $32;
 var $34 = ($6 | 0) > 0;
 if ($34) {
  var $37 = $chf + 52 | 0;
  var $39 = ($6 | 0) * HEAPF32[$37 >> 2];
  HEAPF32[$16 >> 2] = $18 + $39;
  HEAPF32[$24 >> 2] = $39 + $23;
  HEAPF32[$25 >> 2] = $27 - $39;
  HEAPF32[$33 >> 2] = $32 - $39;
  var $_pre_phi = $37;
 } else {
  var $_pre_phi = $chf + 52 | 0;
 }
 var $_pre_phi;
 HEAPF32[$cset + 32 >> 2] = HEAPF32[$_pre_phi >> 2];
 HEAPF32[$cset + 36 >> 2] = HEAPF32[$chf + 56 >> 2];
 HEAP32[$cset + 40 >> 2] = HEAP32[$1 >> 2] - (HEAP32[$5 >> 2] << 1);
 HEAP32[$cset + 44 >> 2] = HEAP32[$3 >> 2] - (HEAP32[$5 >> 2] << 1);
 HEAP32[$cset + 48 >> 2] = HEAP32[$5 >> 2];
 var $64 = HEAPU16[$chf + 26 >> 1];
 var $66 = $64 >>> 0 > 8 ? $64 : 8;
 var $68 = _malloc($66 * 20 & -1);
 var $70 = $cset | 0;
 HEAP32[$70 >> 2] = $68;
 if (($68 | 0) == 0) {
  var $_2 = 0;
  var $_2;
  STACKTOP = sp;
  return $_2;
 }
 var $73 = $cset + 4 | 0;
 HEAP32[$73 >> 2] = 0;
 var $74 = $chf + 8 | 0;
 var $76 = _malloc(HEAP32[$74 >> 2]);
 if (($76 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6560, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$74 >> 2], tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_2 = 0;
  var $_2;
  STACKTOP = sp;
  return $_2;
 }
 if ((HEAP8[$7] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 5);
 }
 var $93 = ($4 | 0) > 0;
 if ($93) {
  var $94 = ($2 | 0) > 0;
  var $95 = $chf + 60 | 0;
  var $96 = $chf + 64 | 0;
  var $y_0401 = 0;
  while (1) {
   var $y_0401;
   if ($94) {
    var $97 = Math.imul($y_0401, $2) | 0;
    var $99 = Math.imul($y_0401 - 1 | 0, $2) | 0;
    var $100 = $y_0401 + 1 | 0;
    var $101 = Math.imul($100, $2) | 0;
    var $x_0397 = 0;
    while (1) {
     var $x_0397;
     var $106 = HEAP32[HEAP32[$95 >> 2] + ($x_0397 + $97 << 2) >> 2];
     var $107 = $106 & 16777215;
     var $108 = $106 >>> 24;
     var $109 = $107 + $108 | 0;
     if (($108 | 0) == 0) {
      var $_pre_phi569 = $x_0397 + 1 | 0;
     } else {
      var $111 = $x_0397 + $99 | 0;
      var $112 = $x_0397 + 1 | 0;
      var $113 = $112 + $97 | 0;
      var $114 = $x_0397 + $101 | 0;
      var $116 = $x_0397 - 1 + $97 | 0;
      var $i_0391 = $107;
      while (1) {
       var $i_0391;
       var $117 = HEAP32[$96 >> 2];
       var $119 = HEAP16[$117 + ($i_0391 << 3) + 2 >> 1];
       if ($119 << 16 >> 16 < 1) {
        HEAP8[$76 + $i_0391 | 0] = 0;
       } else {
        var $123 = HEAP32[$117 + ($i_0391 << 3) + 4 >> 2];
        var $124 = $119 & 65535;
        var $125 = $123 & 63;
        if (($125 | 0) == 63) {
         var $r_0 = 0;
        } else {
         var $r_0 = HEAPU16[$117 + ((HEAP32[HEAP32[$95 >> 2] + ($116 << 2) >> 2] & 16777215) + $125 << 3) + 2 >> 1];
        }
        var $r_0;
        var $_ = ($r_0 | 0) == ($124 | 0) | 0;
        var $141 = $123 >>> 6 & 63;
        if (($141 | 0) == 63) {
         var $r_0_1 = 0;
        } else {
         var $r_0_1 = HEAPU16[$117 + ((HEAP32[HEAP32[$95 >> 2] + ($114 << 2) >> 2] & 16777215) + $141 << 3) + 2 >> 1];
        }
        var $r_0_1;
        var $__ = ($r_0_1 | 0) == ($124 | 0) ? $_ | 2 : $_;
        var $1608 = $123 >>> 12 & 63;
        if (($1608 | 0) == 63) {
         var $r_0_2 = 0;
        } else {
         var $r_0_2 = HEAPU16[$117 + ((HEAP32[HEAP32[$95 >> 2] + ($113 << 2) >> 2] & 16777215) + $1608 << 3) + 2 >> 1];
        }
        var $r_0_2;
        var $___ = ($r_0_2 | 0) == ($124 | 0) ? $__ | 4 : $__;
        var $1623 = $123 >>> 18 & 63;
        if (($1623 | 0) == 63) {
         var $r_0_3 = 0;
        } else {
         var $r_0_3 = HEAPU16[$117 + ((HEAP32[HEAP32[$95 >> 2] + ($111 << 2) >> 2] & 16777215) + $1623 << 3) + 2 >> 1];
        }
        var $r_0_3;
        HEAP8[$76 + $i_0391 | 0] = (($r_0_3 | 0) == ($124 | 0) ? $___ | 8 : $___) ^ 15;
       }
       var $144 = $i_0391 + 1 | 0;
       if (($144 | 0) < ($109 | 0)) {
        var $i_0391 = $144;
       } else {
        var $_pre_phi569 = $112;
        break;
       }
      }
     }
     var $_pre_phi569;
     if (($_pre_phi569 | 0) < ($2 | 0)) {
      var $x_0397 = $_pre_phi569;
     } else {
      var $_pre_phi571 = $100;
      break;
     }
    }
   } else {
    var $_pre_phi571 = $y_0401 + 1 | 0;
   }
   var $_pre_phi571;
   if (($_pre_phi571 | 0) < ($4 | 0)) {
    var $y_0401 = $_pre_phi571;
   } else {
    break;
   }
  }
 }
 if ((HEAP8[$7] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 5);
 }
 $verts_sroa_1 = 0;
 var $157 = _malloc(1024);
 var $158 = $157;
 var $verts_sroa_1_0_load555 = $verts_sroa_1;
 if (!(($verts_sroa_1_0_load555 | 0) == 0 | ($157 | 0) == 0)) {
  var $162 = $verts_sroa_1_0_load555 << 2;
  _memcpy($157, 0, $162) | 0;
 }
 $verts_sroa_1 = 256;
 $simplified_sroa_1 = 0;
 var $163 = _malloc(256);
 var $164 = $163;
 var $simplified_sroa_1_0_load474 = $simplified_sroa_1;
 if (!(($simplified_sroa_1_0_load474 | 0) == 0 | ($163 | 0) == 0)) {
  var $168 = $simplified_sroa_1_0_load474 << 2;
  _memcpy($163, 0, $168) | 0;
 }
 $simplified_sroa_1 = 64;
 L1693 : do {
  if ($93) {
   var $169 = ($2 | 0) > 0;
   var $170 = $chf + 60 | 0;
   var $171 = $chf + 64 | 0;
   var $172 = $chf + 72 | 0;
   var $173 = $regs_i_i;
   var $174 = $regs_i_i | 0;
   var $175 = $regs_i_i + 12 | 0;
   var $176 = $regs_i_i + 8 | 0;
   var $177 = $regs_i_i + 4 | 0;
   var $178 = $maxError * $maxError;
   var $179 = Math.imul($maxEdgeLen, $maxEdgeLen) | 0;
   var $180 = $ctx;
   var $_not = ($maxEdgeLen | 0) < 1;
   var $y1_0385 = 0;
   var $maxContours_0387 = $66;
   var $simplified_sroa_0_0 = $164;
   var $simplified_sroa_2_0 = 64;
   var $verts_sroa_0_0 = $158;
   var $verts_sroa_2_0 = 256;
   L1695 : while (1) {
    var $verts_sroa_2_0;
    var $verts_sroa_0_0;
    var $simplified_sroa_2_0;
    var $simplified_sroa_0_0;
    var $maxContours_0387;
    var $y1_0385;
    if ($169) {
     var $181 = Math.imul($y1_0385, $2) | 0;
     var $x2_0379 = 0;
     var $maxContours_1381 = $maxContours_0387;
     var $simplified_sroa_0_2 = $simplified_sroa_0_0;
     var $simplified_sroa_2_1 = $simplified_sroa_2_0;
     var $verts_sroa_0_2 = $verts_sroa_0_0;
     var $verts_sroa_2_1 = $verts_sroa_2_0;
     while (1) {
      var $verts_sroa_2_1;
      var $verts_sroa_0_2;
      var $simplified_sroa_2_1;
      var $simplified_sroa_0_2;
      var $maxContours_1381;
      var $x2_0379;
      var $188 = HEAP32[HEAP32[$170 >> 2] + ($x2_0379 + $181 << 2) >> 2];
      var $189 = $188 & 16777215;
      var $190 = $188 >>> 24;
      var $191 = $189 + $190 | 0;
      if (($190 | 0) == 0) {
       var $maxContours_2_lcssa = $maxContours_1381;
       var $simplified_sroa_0_37 = $simplified_sroa_0_2;
       var $simplified_sroa_2_48 = $simplified_sroa_2_1;
       var $verts_sroa_0_16 = $verts_sroa_0_2;
       var $verts_sroa_2_16 = $verts_sroa_2_1;
      } else {
       var $i4_0362 = $189;
       var $maxContours_2365 = $maxContours_1381;
       var $simplified_sroa_0_3 = $simplified_sroa_0_2;
       var $simplified_sroa_2_2 = $simplified_sroa_2_1;
       var $verts_sroa_0_3 = $verts_sroa_0_2;
       var $verts_sroa_2_2 = $verts_sroa_2_1;
       while (1) {
        var $verts_sroa_2_2;
        var $verts_sroa_0_3;
        var $simplified_sroa_2_2;
        var $simplified_sroa_0_3;
        var $maxContours_2365;
        var $i4_0362;
        var $193 = $76 + $i4_0362 | 0;
        var $194 = HEAP8[$193];
        do {
         if ($194 << 24 >> 24 == 0 | $194 << 24 >> 24 == 15) {
          HEAP8[$193] = 0;
          var $maxContours_4 = $maxContours_2365;
          var $simplified_sroa_0_36 = $simplified_sroa_0_3;
          var $simplified_sroa_2_47 = $simplified_sroa_2_2;
          var $verts_sroa_0_15 = $verts_sroa_0_3;
          var $verts_sroa_2_15 = $verts_sroa_2_2;
         } else {
          var $204 = HEAP16[HEAP32[$171 >> 2] + ($i4_0362 << 3) + 2 >> 1];
          if ($204 << 16 >> 16 < 1) {
           var $maxContours_4 = $maxContours_2365;
           var $simplified_sroa_0_36 = $simplified_sroa_0_3;
           var $simplified_sroa_2_47 = $simplified_sroa_2_2;
           var $verts_sroa_0_15 = $verts_sroa_0_3;
           var $verts_sroa_2_15 = $verts_sroa_2_2;
           break;
          }
          var $209 = HEAP8[HEAP32[$172 >> 2] + $i4_0362 | 0];
          do {
           if (($verts_sroa_2_2 | 0) < 0) {
            var $211 = $verts_sroa_2_2;
            while (1) {
             var $211;
             var $212 = $211 << 1;
             if (($212 | 0) < 0) {
              var $211 = $212;
             } else {
              break;
             }
            }
            var $216 = _malloc($211 << 3);
            var $217 = $216;
            var $verts_sroa_1_0_load556 = $verts_sroa_1;
            if (!(($verts_sroa_1_0_load556 | 0) == 0 | ($216 | 0) == 0)) {
             var $221 = $verts_sroa_0_3;
             var $222 = $verts_sroa_1_0_load556 << 2;
             _memcpy($216, $221, $222) | 0;
            }
            if (($verts_sroa_0_3 | 0) == 0) {
             var $verts_sroa_0_7 = $217;
             var $verts_sroa_2_3 = $212;
             break;
            }
            _free($verts_sroa_0_3);
            var $verts_sroa_0_7 = $217;
            var $verts_sroa_2_3 = $212;
           } else {
            var $verts_sroa_0_7 = $verts_sroa_0_3;
            var $verts_sroa_2_3 = $verts_sroa_2_2;
           }
          } while (0);
          var $verts_sroa_2_3;
          var $verts_sroa_0_7;
          $verts_sroa_1 = 0;
          do {
           if (($simplified_sroa_2_2 | 0) < 0) {
            var $227 = $simplified_sroa_2_2;
            while (1) {
             var $227;
             var $228 = $227 << 1;
             if (($228 | 0) < 0) {
              var $227 = $228;
             } else {
              break;
             }
            }
            var $232 = _malloc($227 << 3);
            var $233 = $232;
            var $simplified_sroa_1_0_load475 = $simplified_sroa_1;
            if (!(($simplified_sroa_1_0_load475 | 0) == 0 | ($232 | 0) == 0)) {
             var $237 = $simplified_sroa_0_3;
             var $238 = $simplified_sroa_1_0_load475 << 2;
             _memcpy($232, $237, $238) | 0;
            }
            if (($simplified_sroa_0_3 | 0) == 0) {
             var $simplified_sroa_0_7 = $233;
             var $simplified_sroa_2_3 = $228;
             break;
            }
            _free($simplified_sroa_0_3);
            var $simplified_sroa_0_7 = $233;
            var $simplified_sroa_2_3 = $228;
           } else {
            var $simplified_sroa_0_7 = $simplified_sroa_0_3;
            var $simplified_sroa_2_3 = $simplified_sroa_2_2;
           }
          } while (0);
          var $simplified_sroa_2_3;
          var $simplified_sroa_0_7;
          $simplified_sroa_1 = 0;
          if ((HEAP8[$7] & 1) != 0) {
           FUNCTION_TABLE[HEAP32[HEAP32[$180 >> 2] + 20 >> 2]]($ctx, 5);
          }
          var $250 = HEAPU8[$193];
          var $dir_0_i = 0;
          while (1) {
           var $dir_0_i;
           if ((1 << ($dir_0_i & 255) & $250 | 0) == 0) {
            var $dir_0_i = $dir_0_i + 1 & 255;
           } else {
            break;
           }
          }
          var $260 = HEAP8[HEAP32[$172 >> 2] + $i4_0362 | 0];
          var $_0_i215 = $x2_0379;
          var $_062_i = $y1_0385;
          var $_064_i = $i4_0362;
          var $dir_1_i = $dir_0_i;
          var $iter_0_i = 0;
          var $verts_sroa_0_8 = $verts_sroa_0_7;
          var $verts_sroa_2_4 = $verts_sroa_2_3;
          while (1) {
           var $verts_sroa_2_4;
           var $verts_sroa_0_8;
           var $iter_0_i;
           var $dir_1_i;
           var $_064_i;
           var $_062_i;
           var $_0_i215;
           var $262 = $iter_0_i + 1 | 0;
           if (($262 | 0) >= 4e4) {
            var $verts_sroa_0_14 = $verts_sroa_0_8;
            var $verts_sroa_2_14 = $verts_sroa_2_4;
            break;
           }
           var $265 = $76 + $_064_i | 0;
           var $268 = $dir_1_i & 255;
           var $269 = 1 << $268;
           if ((HEAPU8[$265] & $269 | 0) == 0) {
            var $575 = $268 & 3;
            var $578 = HEAP32[9712 + ($575 << 2) >> 2] + $_0_i215 | 0;
            var $581 = HEAP32[9696 + ($575 << 2) >> 2] + $_062_i | 0;
            var $589 = (HEAP32[HEAP32[$171 >> 2] + ($_064_i << 3) + 4 >> 2] & 16777215) >>> (($268 * 6 & -1) >>> 0) & 63;
            if (($589 | 0) == 63) {
             var $verts_sroa_0_14 = $verts_sroa_0_8;
             var $verts_sroa_2_14 = $verts_sroa_2_4;
             break;
            }
            var $594 = Math.imul(HEAP32[$1 >> 2], $581) + $578 | 0;
            var $600 = (HEAP32[HEAP32[$170 >> 2] + ($594 << 2) >> 2] & 16777215) + $589 | 0;
            if (($600 | 0) == -1) {
             var $verts_sroa_0_14 = $verts_sroa_0_8;
             var $verts_sroa_2_14 = $verts_sroa_2_4;
             break;
            }
            var $_1_i = $578;
            var $_163_i = $581;
            var $_165_i = $600;
            var $dir_2_in_i = $dir_1_i + 3 & 255;
            var $verts_sroa_0_13 = $verts_sroa_0_8;
            var $verts_sroa_2_13 = $verts_sroa_2_4;
           } else {
            var $273 = HEAP32[$171 >> 2];
            var $276 = HEAPU16[$273 + ($_064_i << 3) >> 1];
            var $278 = $268 + 1 & 3;
            HEAP32[$173 >> 2] = 0;
            HEAP32[$173 + 4 >> 2] = 0;
            HEAP32[$173 + 8 >> 2] = 0;
            HEAP32[$173 + 12 >> 2] = 0;
            var $282 = HEAP32[$172 >> 2];
            HEAP32[$174 >> 2] = HEAPU8[$282 + $_064_i | 0] << 16 | HEAPU16[$273 + ($_064_i << 3) + 2 >> 1];
            var $288 = $268 * 6 & -1;
            var $292 = HEAP32[$273 + ($_064_i << 3) + 4 >> 2] & 16777215;
            var $294 = $292 >>> ($288 >>> 0) & 63;
            var $295 = ($294 | 0) == 63;
            do {
             if ($295) {
              var $ch_0_i_i = $276;
              var $_pre_phi_i_i = $278 * 6 & -1;
             } else {
              var $297 = $268 & 3;
              var $300 = HEAP32[9712 + ($297 << 2) >> 2] + $_0_i215 | 0;
              var $303 = HEAP32[9696 + ($297 << 2) >> 2] + $_062_i | 0;
              var $304 = HEAP32[$1 >> 2];
              var $306 = Math.imul($303, $304) + $300 | 0;
              var $307 = HEAP32[$170 >> 2];
              var $312 = (HEAP32[$307 + ($306 << 2) >> 2] & 16777215) + $294 | 0;
              var $315 = HEAPU16[$273 + ($312 << 3) >> 1];
              var $317 = $276 >>> 0 > $315 >>> 0 ? $276 : $315;
              HEAP32[$177 >> 2] = HEAPU8[$282 + $312 | 0] << 16 | HEAPU16[$273 + ($312 << 3) + 2 >> 1];
              var $326 = $278 * 6 & -1;
              var $332 = (HEAP32[$273 + ($312 << 3) + 4 >> 2] & 16777215) >>> ($326 >>> 0) & 63;
              if (($332 | 0) == 63) {
               var $ch_0_i_i = $317;
               var $_pre_phi_i_i = $326;
               break;
              }
              var $337 = HEAP32[9712 + ($278 << 2) >> 2] + $300 | 0;
              var $347 = (HEAP32[$307 + ($337 + Math.imul(HEAP32[9696 + ($278 << 2) >> 2] + $303 | 0, $304) << 2) >> 2] & 16777215) + $332 | 0;
              var $350 = HEAPU16[$273 + ($347 << 3) >> 1];
              HEAP32[$176 >> 2] = HEAPU8[$282 + $347 | 0] << 16 | HEAPU16[$273 + ($347 << 3) + 2 >> 1];
              var $ch_0_i_i = $317 >>> 0 > $350 >>> 0 ? $317 : $350;
              var $_pre_phi_i_i = $326;
             }
            } while (0);
            var $_pre_phi_i_i;
            var $ch_0_i_i;
            var $363 = $292 >>> ($_pre_phi_i_i >>> 0) & 63;
            do {
             if (($363 | 0) == 63) {
              var $ch_1_i_i = $ch_0_i_i;
             } else {
              var $368 = HEAP32[9712 + ($278 << 2) >> 2] + $_0_i215 | 0;
              var $371 = HEAP32[9696 + ($278 << 2) >> 2] + $_062_i | 0;
              var $372 = HEAP32[$1 >> 2];
              var $374 = Math.imul($371, $372) + $368 | 0;
              var $375 = HEAP32[$170 >> 2];
              var $380 = (HEAP32[$375 + ($374 << 2) >> 2] & 16777215) + $363 | 0;
              var $383 = HEAPU16[$273 + ($380 << 3) >> 1];
              var $385 = ($ch_0_i_i | 0) > ($383 | 0) ? $ch_0_i_i : $383;
              HEAP32[$175 >> 2] = HEAPU8[$282 + $380 | 0] << 16 | HEAPU16[$273 + ($380 << 3) + 2 >> 1];
              var $399 = (HEAP32[$273 + ($380 << 3) + 4 >> 2] & 16777215) >>> ($288 >>> 0) & 63;
              if (($399 | 0) == 63) {
               var $ch_1_i_i = $385;
               break;
              }
              var $402 = $268 & 3;
              var $405 = HEAP32[9712 + ($402 << 2) >> 2] + $368 | 0;
              var $415 = (HEAP32[$375 + ($405 + Math.imul(HEAP32[9696 + ($402 << 2) >> 2] + $371 | 0, $372) << 2) >> 2] & 16777215) + $399 | 0;
              var $418 = HEAPU16[$273 + ($415 << 3) >> 1];
              HEAP32[$176 >> 2] = HEAPU8[$282 + $415 | 0] << 16 | HEAPU16[$273 + ($415 << 3) + 2 >> 1];
              var $ch_1_i_i = ($385 | 0) > ($418 | 0) ? $385 : $418;
             }
            } while (0);
            var $ch_1_i_i;
            var $j_0_i_i = 0;
            while (1) {
             var $j_0_i_i;
             if (($j_0_i_i | 0) >= 4) {
              var $458 = 0;
              break;
             }
             var $433 = $j_0_i_i + 1 | 0;
             var $440 = HEAP32[$regs_i_i + ($j_0_i_i << 2) >> 2];
             var $442 = HEAP32[$regs_i_i + (($433 & 3) << 2) >> 2];
             var $446 = HEAP32[$regs_i_i + (($j_0_i_i + 2 & 3) << 2) >> 2];
             var $448 = HEAP32[$regs_i_i + (($j_0_i_i + 3 & 3) << 2) >> 2];
             if (($440 | 0) == 0) {
              var $457 = 1;
             } else {
              var $457 = ($448 | 0) != 0 & (($446 | 0) != 0 & ($442 | 0) != 0) ^ 1;
             }
             var $457;
             if (($440 & 32768 & $442 | 0) == 0 | ($440 | 0) != ($442 | 0) | (($448 | $446) & 32768 | 0) != 0 | ($446 >>> 16 | 0) != ($448 >>> 16 | 0) | $457) {
              var $j_0_i_i = $433;
             } else {
              var $458 = 1;
              break;
             }
            }
            var $458;
            if (($268 | 0) == 0) {
             var $px_0_i = $_0_i215;
             var $pz_0_i = $_062_i + 1 | 0;
            } else if (($268 | 0) == 1) {
             var $px_0_i = $_0_i215 + 1 | 0;
             var $pz_0_i = $_062_i + 1 | 0;
            } else if (($268 | 0) == 2) {
             var $px_0_i = $_0_i215 + 1 | 0;
             var $pz_0_i = $_062_i;
            } else {
             var $px_0_i = $_0_i215;
             var $pz_0_i = $_062_i;
            }
            var $pz_0_i;
            var $px_0_i;
            if ($295) {
             var $isAreaBorder_0_off0_i = 0;
             var $r_0_i = 0;
            } else {
             var $468 = $268 & 3;
             var $471 = HEAP32[9712 + ($468 << 2) >> 2] + $_0_i215 | 0;
             var $477 = $471 + Math.imul(HEAP32[9696 + ($468 << 2) >> 2] + $_062_i | 0, HEAP32[$1 >> 2]) | 0;
             var $483 = (HEAP32[HEAP32[$170 >> 2] + ($477 << 2) >> 2] & 16777215) + $294 | 0;
             var $isAreaBorder_0_off0_i = $260 << 24 >> 24 != (HEAP8[$282 + $483 | 0] | 0);
             var $r_0_i = HEAPU16[$273 + ($483 << 3) + 2 >> 1];
            }
            var $r_0_i;
            var $isAreaBorder_0_off0_i;
            var $r_1_i = $458 << 24 >> 24 == 0 ? $r_0_i : $r_0_i | 65536;
            var $_r_1_i = $isAreaBorder_0_off0_i ? $r_1_i | 131072 : $r_1_i;
            var $verts_sroa_1_0_load = $verts_sroa_1;
            var $492 = $verts_sroa_1_0_load + 1 | 0;
            do {
             if (($verts_sroa_2_4 | 0) < ($492 | 0)) {
              if (($verts_sroa_2_4 | 0) == 0) {
               var $verts_sroa_2_5 = $492;
              } else {
               var $496 = $verts_sroa_2_4;
               while (1) {
                var $496;
                var $497 = $496 << 1;
                if (($497 | 0) < ($492 | 0)) {
                 var $496 = $497;
                } else {
                 var $verts_sroa_2_5 = $497;
                 break;
                }
               }
              }
              var $verts_sroa_2_5;
              var $500 = _malloc($verts_sroa_2_5 << 2);
              var $501 = $500;
              var $verts_sroa_1_0_load557 = $verts_sroa_1;
              if (!(($verts_sroa_1_0_load557 | 0) == 0 | ($500 | 0) == 0)) {
               var $505 = $verts_sroa_0_8;
               var $506 = $verts_sroa_1_0_load557 << 2;
               _memcpy($500, $505, $506) | 0;
              }
              if (($verts_sroa_0_8 | 0) == 0) {
               var $verts_sroa_0_9 = $501;
               var $verts_sroa_2_6 = $verts_sroa_2_5;
               break;
              }
              _free($verts_sroa_0_8);
              var $verts_sroa_0_9 = $501;
              var $verts_sroa_2_6 = $verts_sroa_2_5;
             } else {
              var $verts_sroa_0_9 = $verts_sroa_0_8;
              var $verts_sroa_2_6 = $verts_sroa_2_4;
             }
            } while (0);
            var $verts_sroa_2_6;
            var $verts_sroa_0_9;
            $verts_sroa_1 = $492;
            HEAP32[$verts_sroa_0_9 + ($verts_sroa_1_0_load << 2) >> 2] = $px_0_i;
            var $verts_sroa_1_0_load545 = $verts_sroa_1;
            var $511 = $verts_sroa_1_0_load545 + 1 | 0;
            do {
             if (($verts_sroa_2_6 | 0) < ($511 | 0)) {
              if (($verts_sroa_2_6 | 0) == 0) {
               var $verts_sroa_2_7 = $511;
              } else {
               var $515 = $verts_sroa_2_6;
               while (1) {
                var $515;
                var $516 = $515 << 1;
                if (($516 | 0) < ($511 | 0)) {
                 var $515 = $516;
                } else {
                 var $verts_sroa_2_7 = $516;
                 break;
                }
               }
              }
              var $verts_sroa_2_7;
              var $519 = _malloc($verts_sroa_2_7 << 2);
              var $520 = $519;
              var $verts_sroa_1_0_load558 = $verts_sroa_1;
              if (!(($verts_sroa_1_0_load558 | 0) == 0 | ($519 | 0) == 0)) {
               var $524 = $verts_sroa_0_9;
               var $525 = $verts_sroa_1_0_load558 << 2;
               _memcpy($519, $524, $525) | 0;
              }
              if (($verts_sroa_0_9 | 0) == 0) {
               var $verts_sroa_0_10 = $520;
               var $verts_sroa_2_8 = $verts_sroa_2_7;
               break;
              }
              _free($verts_sroa_0_9);
              var $verts_sroa_0_10 = $520;
              var $verts_sroa_2_8 = $verts_sroa_2_7;
             } else {
              var $verts_sroa_0_10 = $verts_sroa_0_9;
              var $verts_sroa_2_8 = $verts_sroa_2_6;
             }
            } while (0);
            var $verts_sroa_2_8;
            var $verts_sroa_0_10;
            $verts_sroa_1 = $511;
            HEAP32[$verts_sroa_0_10 + ($verts_sroa_1_0_load545 << 2) >> 2] = $ch_1_i_i;
            var $verts_sroa_1_0_load547 = $verts_sroa_1;
            var $530 = $verts_sroa_1_0_load547 + 1 | 0;
            do {
             if (($verts_sroa_2_8 | 0) < ($530 | 0)) {
              if (($verts_sroa_2_8 | 0) == 0) {
               var $verts_sroa_2_9 = $530;
              } else {
               var $534 = $verts_sroa_2_8;
               while (1) {
                var $534;
                var $535 = $534 << 1;
                if (($535 | 0) < ($530 | 0)) {
                 var $534 = $535;
                } else {
                 var $verts_sroa_2_9 = $535;
                 break;
                }
               }
              }
              var $verts_sroa_2_9;
              var $538 = _malloc($verts_sroa_2_9 << 2);
              var $539 = $538;
              var $verts_sroa_1_0_load559 = $verts_sroa_1;
              if (!(($verts_sroa_1_0_load559 | 0) == 0 | ($538 | 0) == 0)) {
               var $543 = $verts_sroa_0_10;
               var $544 = $verts_sroa_1_0_load559 << 2;
               _memcpy($538, $543, $544) | 0;
              }
              if (($verts_sroa_0_10 | 0) == 0) {
               var $verts_sroa_0_11 = $539;
               var $verts_sroa_2_10 = $verts_sroa_2_9;
               break;
              }
              _free($verts_sroa_0_10);
              var $verts_sroa_0_11 = $539;
              var $verts_sroa_2_10 = $verts_sroa_2_9;
             } else {
              var $verts_sroa_0_11 = $verts_sroa_0_10;
              var $verts_sroa_2_10 = $verts_sroa_2_8;
             }
            } while (0);
            var $verts_sroa_2_10;
            var $verts_sroa_0_11;
            $verts_sroa_1 = $530;
            HEAP32[$verts_sroa_0_11 + ($verts_sroa_1_0_load547 << 2) >> 2] = $pz_0_i;
            var $verts_sroa_1_0_load549 = $verts_sroa_1;
            var $549 = $verts_sroa_1_0_load549 + 1 | 0;
            do {
             if (($verts_sroa_2_10 | 0) < ($549 | 0)) {
              if (($verts_sroa_2_10 | 0) == 0) {
               var $verts_sroa_2_11 = $549;
              } else {
               var $553 = $verts_sroa_2_10;
               while (1) {
                var $553;
                var $554 = $553 << 1;
                if (($554 | 0) < ($549 | 0)) {
                 var $553 = $554;
                } else {
                 var $verts_sroa_2_11 = $554;
                 break;
                }
               }
              }
              var $verts_sroa_2_11;
              var $557 = _malloc($verts_sroa_2_11 << 2);
              var $558 = $557;
              var $verts_sroa_1_0_load560 = $verts_sroa_1;
              if (!(($verts_sroa_1_0_load560 | 0) == 0 | ($557 | 0) == 0)) {
               var $562 = $verts_sroa_0_11;
               var $563 = $verts_sroa_1_0_load560 << 2;
               _memcpy($557, $562, $563) | 0;
              }
              if (($verts_sroa_0_11 | 0) == 0) {
               var $verts_sroa_0_12 = $558;
               var $verts_sroa_2_12 = $verts_sroa_2_11;
               break;
              }
              _free($verts_sroa_0_11);
              var $verts_sroa_0_12 = $558;
              var $verts_sroa_2_12 = $verts_sroa_2_11;
             } else {
              var $verts_sroa_0_12 = $verts_sroa_0_11;
              var $verts_sroa_2_12 = $verts_sroa_2_10;
             }
            } while (0);
            var $verts_sroa_2_12;
            var $verts_sroa_0_12;
            $verts_sroa_1 = $549;
            HEAP32[$verts_sroa_0_12 + ($verts_sroa_1_0_load549 << 2) >> 2] = $_r_1_i;
            HEAP8[$265] = HEAPU8[$265] & ($269 ^ 255) & 255;
            var $_1_i = $_0_i215;
            var $_163_i = $_062_i;
            var $_165_i = $_064_i;
            var $dir_2_in_i = $dir_1_i + 1 & 255;
            var $verts_sroa_0_13 = $verts_sroa_0_12;
            var $verts_sroa_2_13 = $verts_sroa_2_12;
           }
           var $verts_sroa_2_13;
           var $verts_sroa_0_13;
           var $dir_2_in_i;
           var $_165_i;
           var $_163_i;
           var $_1_i;
           var $dir_2_i = $dir_2_in_i & 3;
           if (($_165_i | 0) == ($i4_0362 | 0) & $dir_0_i << 24 >> 24 == $dir_2_i << 24 >> 24) {
            var $verts_sroa_0_14 = $verts_sroa_0_13;
            var $verts_sroa_2_14 = $verts_sroa_2_13;
            break;
           } else {
            var $_0_i215 = $_1_i;
            var $_062_i = $_163_i;
            var $_064_i = $_165_i;
            var $dir_1_i = $dir_2_i;
            var $iter_0_i = $262;
            var $verts_sroa_0_8 = $verts_sroa_0_13;
            var $verts_sroa_2_4 = $verts_sroa_2_13;
           }
          }
          var $verts_sroa_2_14;
          var $verts_sroa_0_14;
          var $607 = HEAP8[$7];
          if (($607 & 1) == 0) {
           var $614 = $607;
          } else {
           FUNCTION_TABLE[HEAP32[HEAP32[$180 >> 2] + 24 >> 2]]($ctx, 5);
           var $614 = HEAP8[$7];
          }
          var $614;
          if (($614 & 1) != 0) {
           FUNCTION_TABLE[HEAP32[HEAP32[$180 >> 2] + 20 >> 2]]($ctx, 6);
          }
          var $verts_sroa_1_0_load551 = $verts_sroa_1;
          var $i_0_i = 0;
          while (1) {
           var $i_0_i;
           if (($i_0_i | 0) >= ($verts_sroa_1_0_load551 | 0)) {
            var $simplified_sroa_0_14 = $simplified_sroa_0_7;
            var $simplified_sroa_2_14 = $simplified_sroa_2_3;
            break;
           }
           if ((HEAP32[$verts_sroa_0_14 + (($i_0_i | 3) << 2) >> 2] & 65535 | 0) == 0) {
            var $i_0_i = $i_0_i + 4 | 0;
           } else {
            label = 1294;
            break;
           }
          }
          do {
           if (label == 1294) {
            label = 0;
            var $631 = ($verts_sroa_1_0_load551 | 0) / 4 & -1;
            if (($verts_sroa_1_0_load551 | 0) > 3) {
             var $i1_0291_i = 0;
             var $simplified_sroa_0_8 = $simplified_sroa_0_7;
             var $simplified_sroa_2_4 = $simplified_sroa_2_3;
            } else {
             var $simplified_sroa_0_14 = $simplified_sroa_0_7;
             var $simplified_sroa_2_14 = $simplified_sroa_2_3;
             break;
            }
            while (1) {
             var $simplified_sroa_2_4;
             var $simplified_sroa_0_8;
             var $i1_0291_i;
             var $633 = $i1_0291_i + 1 | 0;
             var $635 = $i1_0291_i << 2;
             if (((HEAP32[$verts_sroa_0_14 + (((($633 | 0) % ($631 | 0) & -1) << 2 | 3) << 2) >> 2] ^ HEAP32[$verts_sroa_0_14 + (($635 | 3) << 2) >> 2]) & 196607 | 0) == 0) {
              var $simplified_sroa_0_13 = $simplified_sroa_0_8;
              var $simplified_sroa_2_13 = $simplified_sroa_2_4;
             } else {
              var $648 = HEAP32[$verts_sroa_0_14 + ($635 << 2) >> 2];
              var $simplified_sroa_1_0_load = $simplified_sroa_1;
              var $649 = $simplified_sroa_1_0_load + 1 | 0;
              do {
               if (($simplified_sroa_2_4 | 0) < ($649 | 0)) {
                if (($simplified_sroa_2_4 | 0) == 0) {
                 var $simplified_sroa_2_5 = $649;
                } else {
                 var $653 = $simplified_sroa_2_4;
                 while (1) {
                  var $653;
                  var $654 = $653 << 1;
                  if (($654 | 0) < ($649 | 0)) {
                   var $653 = $654;
                  } else {
                   var $simplified_sroa_2_5 = $654;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_5;
                var $657 = _malloc($simplified_sroa_2_5 << 2);
                var $658 = $657;
                var $simplified_sroa_1_0_load476 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load476 | 0) == 0 | ($657 | 0) == 0)) {
                 var $662 = $simplified_sroa_0_8;
                 var $663 = $simplified_sroa_1_0_load476 << 2;
                 _memcpy($657, $662, $663) | 0;
                }
                if (($simplified_sroa_0_8 | 0) == 0) {
                 var $simplified_sroa_0_9 = $658;
                 var $simplified_sroa_2_6 = $simplified_sroa_2_5;
                 break;
                }
                _free($simplified_sroa_0_8);
                var $simplified_sroa_0_9 = $658;
                var $simplified_sroa_2_6 = $simplified_sroa_2_5;
               } else {
                var $simplified_sroa_0_9 = $simplified_sroa_0_8;
                var $simplified_sroa_2_6 = $simplified_sroa_2_4;
               }
              } while (0);
              var $simplified_sroa_2_6;
              var $simplified_sroa_0_9;
              $simplified_sroa_1 = $649;
              HEAP32[$simplified_sroa_0_9 + ($simplified_sroa_1_0_load << 2) >> 2] = $648;
              var $670 = HEAP32[$verts_sroa_0_14 + (($635 | 1) << 2) >> 2];
              var $simplified_sroa_1_0_load442 = $simplified_sroa_1;
              var $671 = $simplified_sroa_1_0_load442 + 1 | 0;
              do {
               if (($simplified_sroa_2_6 | 0) < ($671 | 0)) {
                if (($simplified_sroa_2_6 | 0) == 0) {
                 var $simplified_sroa_2_7 = $671;
                } else {
                 var $675 = $simplified_sroa_2_6;
                 while (1) {
                  var $675;
                  var $676 = $675 << 1;
                  if (($676 | 0) < ($671 | 0)) {
                   var $675 = $676;
                  } else {
                   var $simplified_sroa_2_7 = $676;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_7;
                var $679 = _malloc($simplified_sroa_2_7 << 2);
                var $680 = $679;
                var $simplified_sroa_1_0_load477 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load477 | 0) == 0 | ($679 | 0) == 0)) {
                 var $684 = $simplified_sroa_0_9;
                 var $685 = $simplified_sroa_1_0_load477 << 2;
                 _memcpy($679, $684, $685) | 0;
                }
                if (($simplified_sroa_0_9 | 0) == 0) {
                 var $simplified_sroa_0_10 = $680;
                 var $simplified_sroa_2_8 = $simplified_sroa_2_7;
                 break;
                }
                _free($simplified_sroa_0_9);
                var $simplified_sroa_0_10 = $680;
                var $simplified_sroa_2_8 = $simplified_sroa_2_7;
               } else {
                var $simplified_sroa_0_10 = $simplified_sroa_0_9;
                var $simplified_sroa_2_8 = $simplified_sroa_2_6;
               }
              } while (0);
              var $simplified_sroa_2_8;
              var $simplified_sroa_0_10;
              $simplified_sroa_1 = $671;
              HEAP32[$simplified_sroa_0_10 + ($simplified_sroa_1_0_load442 << 2) >> 2] = $670;
              var $692 = HEAP32[$verts_sroa_0_14 + (($635 | 2) << 2) >> 2];
              var $simplified_sroa_1_0_load444 = $simplified_sroa_1;
              var $693 = $simplified_sroa_1_0_load444 + 1 | 0;
              do {
               if (($simplified_sroa_2_8 | 0) < ($693 | 0)) {
                if (($simplified_sroa_2_8 | 0) == 0) {
                 var $simplified_sroa_2_9 = $693;
                } else {
                 var $697 = $simplified_sroa_2_8;
                 while (1) {
                  var $697;
                  var $698 = $697 << 1;
                  if (($698 | 0) < ($693 | 0)) {
                   var $697 = $698;
                  } else {
                   var $simplified_sroa_2_9 = $698;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_9;
                var $701 = _malloc($simplified_sroa_2_9 << 2);
                var $702 = $701;
                var $simplified_sroa_1_0_load478 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load478 | 0) == 0 | ($701 | 0) == 0)) {
                 var $706 = $simplified_sroa_0_10;
                 var $707 = $simplified_sroa_1_0_load478 << 2;
                 _memcpy($701, $706, $707) | 0;
                }
                if (($simplified_sroa_0_10 | 0) == 0) {
                 var $simplified_sroa_0_11 = $702;
                 var $simplified_sroa_2_10 = $simplified_sroa_2_9;
                 break;
                }
                _free($simplified_sroa_0_10);
                var $simplified_sroa_0_11 = $702;
                var $simplified_sroa_2_10 = $simplified_sroa_2_9;
               } else {
                var $simplified_sroa_0_11 = $simplified_sroa_0_10;
                var $simplified_sroa_2_10 = $simplified_sroa_2_8;
               }
              } while (0);
              var $simplified_sroa_2_10;
              var $simplified_sroa_0_11;
              $simplified_sroa_1 = $693;
              HEAP32[$simplified_sroa_0_11 + ($simplified_sroa_1_0_load444 << 2) >> 2] = $692;
              var $simplified_sroa_1_0_load446 = $simplified_sroa_1;
              var $712 = $simplified_sroa_1_0_load446 + 1 | 0;
              do {
               if (($simplified_sroa_2_10 | 0) < ($712 | 0)) {
                if (($simplified_sroa_2_10 | 0) == 0) {
                 var $simplified_sroa_2_11 = $712;
                } else {
                 var $716 = $simplified_sroa_2_10;
                 while (1) {
                  var $716;
                  var $717 = $716 << 1;
                  if (($717 | 0) < ($712 | 0)) {
                   var $716 = $717;
                  } else {
                   var $simplified_sroa_2_11 = $717;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_11;
                var $720 = _malloc($simplified_sroa_2_11 << 2);
                var $721 = $720;
                var $simplified_sroa_1_0_load479 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load479 | 0) == 0 | ($720 | 0) == 0)) {
                 var $725 = $simplified_sroa_0_11;
                 var $726 = $simplified_sroa_1_0_load479 << 2;
                 _memcpy($720, $725, $726) | 0;
                }
                if (($simplified_sroa_0_11 | 0) == 0) {
                 var $simplified_sroa_0_12 = $721;
                 var $simplified_sroa_2_12 = $simplified_sroa_2_11;
                 break;
                }
                _free($simplified_sroa_0_11);
                var $simplified_sroa_0_12 = $721;
                var $simplified_sroa_2_12 = $simplified_sroa_2_11;
               } else {
                var $simplified_sroa_0_12 = $simplified_sroa_0_11;
                var $simplified_sroa_2_12 = $simplified_sroa_2_10;
               }
              } while (0);
              var $simplified_sroa_2_12;
              var $simplified_sroa_0_12;
              $simplified_sroa_1 = $712;
              HEAP32[$simplified_sroa_0_12 + ($simplified_sroa_1_0_load446 << 2) >> 2] = $i1_0291_i;
              var $simplified_sroa_0_13 = $simplified_sroa_0_12;
              var $simplified_sroa_2_13 = $simplified_sroa_2_12;
             }
             var $simplified_sroa_2_13;
             var $simplified_sroa_0_13;
             if (($633 | 0) < ($631 | 0)) {
              var $i1_0291_i = $633;
              var $simplified_sroa_0_8 = $simplified_sroa_0_13;
              var $simplified_sroa_2_4 = $simplified_sroa_2_13;
             } else {
              var $simplified_sroa_0_14 = $simplified_sroa_0_13;
              var $simplified_sroa_2_14 = $simplified_sroa_2_13;
              break;
             }
            }
           }
          } while (0);
          var $simplified_sroa_2_14;
          var $simplified_sroa_0_14;
          var $simplified_sroa_1_0_load448 = $simplified_sroa_1;
          if (($simplified_sroa_1_0_load448 | 0) == 0) {
           var $734 = HEAP32[$verts_sroa_0_14 >> 2];
           var $736 = HEAP32[$verts_sroa_0_14 + 4 >> 2];
           var $738 = HEAP32[$verts_sroa_0_14 + 8 >> 2];
           var $verts_sroa_1_0_load552 = $verts_sroa_1;
           L1874 : do {
            if (($verts_sroa_1_0_load552 | 0) > 0) {
             var $i2_0271_i = 0;
             var $uri_0272_i = 0;
             var $urz_0273_i = $738;
             var $ury_0274_i = $736;
             var $urx_0275_i = $734;
             var $lli_0276_i = 0;
             var $llz_0277_i = $738;
             var $lly_0278_i = $736;
             var $llx_0279_i = $734;
             var $740 = $734;
             while (1) {
              var $740;
              var $llx_0279_i;
              var $lly_0278_i;
              var $llz_0277_i;
              var $lli_0276_i;
              var $urx_0275_i;
              var $ury_0274_i;
              var $urz_0273_i;
              var $uri_0272_i;
              var $i2_0271_i;
              var $743 = HEAP32[$verts_sroa_0_14 + (($i2_0271_i | 1) << 2) >> 2];
              var $746 = HEAP32[$verts_sroa_0_14 + (($i2_0271_i | 2) << 2) >> 2];
              if (($740 | 0) < ($llx_0279_i | 0)) {
               label = 1330;
              } else {
               if (($740 | 0) == ($llx_0279_i | 0) & ($746 | 0) < ($llz_0277_i | 0)) {
                label = 1330;
               } else {
                var $llx_1_i = $llx_0279_i;
                var $lly_1_i = $lly_0278_i;
                var $llz_1_i = $llz_0277_i;
                var $lli_1_i = $lli_0276_i;
               }
              }
              if (label == 1330) {
               label = 0;
               var $llx_1_i = $740;
               var $lly_1_i = $743;
               var $llz_1_i = $746;
               var $lli_1_i = ($i2_0271_i | 0) / 4 & -1;
              }
              var $lli_1_i;
              var $llz_1_i;
              var $lly_1_i;
              var $llx_1_i;
              if (($740 | 0) > ($urx_0275_i | 0)) {
               label = 1333;
              } else {
               if (($740 | 0) == ($urx_0275_i | 0) & ($746 | 0) > ($urz_0273_i | 0)) {
                label = 1333;
               } else {
                var $urx_1_i = $urx_0275_i;
                var $ury_1_i = $ury_0274_i;
                var $urz_1_i = $urz_0273_i;
                var $uri_1_i = $uri_0272_i;
               }
              }
              if (label == 1333) {
               label = 0;
               var $urx_1_i = $740;
               var $ury_1_i = $743;
               var $urz_1_i = $746;
               var $uri_1_i = ($i2_0271_i | 0) / 4 & -1;
              }
              var $uri_1_i;
              var $urz_1_i;
              var $ury_1_i;
              var $urx_1_i;
              var $761 = $i2_0271_i + 4 | 0;
              if (($761 | 0) >= ($verts_sroa_1_0_load552 | 0)) {
               var $uri_0_lcssa_i = $uri_1_i;
               var $urz_0_lcssa_i = $urz_1_i;
               var $ury_0_lcssa_i = $ury_1_i;
               var $urx_0_lcssa_i = $urx_1_i;
               var $lli_0_lcssa_i = $lli_1_i;
               var $llz_0_lcssa_i = $llz_1_i;
               var $lly_0_lcssa_i = $lly_1_i;
               var $llx_0_lcssa_i = $llx_1_i;
               break L1874;
              }
              var $i2_0271_i = $761;
              var $uri_0272_i = $uri_1_i;
              var $urz_0273_i = $urz_1_i;
              var $ury_0274_i = $ury_1_i;
              var $urx_0275_i = $urx_1_i;
              var $lli_0276_i = $lli_1_i;
              var $llz_0277_i = $llz_1_i;
              var $lly_0278_i = $lly_1_i;
              var $llx_0279_i = $llx_1_i;
              var $740 = HEAP32[$verts_sroa_0_14 + ($761 << 2) >> 2];
             }
            } else {
             var $uri_0_lcssa_i = 0;
             var $urz_0_lcssa_i = $738;
             var $ury_0_lcssa_i = $736;
             var $urx_0_lcssa_i = $734;
             var $lli_0_lcssa_i = 0;
             var $llz_0_lcssa_i = $738;
             var $lly_0_lcssa_i = $736;
             var $llx_0_lcssa_i = $734;
            }
           } while (0);
           var $llx_0_lcssa_i;
           var $lly_0_lcssa_i;
           var $llz_0_lcssa_i;
           var $lli_0_lcssa_i;
           var $urx_0_lcssa_i;
           var $ury_0_lcssa_i;
           var $urz_0_lcssa_i;
           var $uri_0_lcssa_i;
           do {
            if (($simplified_sroa_2_14 | 0) < 1) {
             if (($simplified_sroa_2_14 | 0) == 0) {
              var $_lcssa_i155 = 4;
              var $simplified_sroa_2_15 = 1;
             } else {
              var $766 = $simplified_sroa_2_14;
              while (1) {
               var $766;
               var $767 = $766 << 1;
               if (($767 | 0) < 1) {
                var $766 = $767;
               } else {
                break;
               }
              }
              var $_lcssa_i155 = $766 << 3;
              var $simplified_sroa_2_15 = $767;
             }
             var $simplified_sroa_2_15;
             var $_lcssa_i155;
             var $769 = _malloc($_lcssa_i155);
             var $770 = $769;
             var $simplified_sroa_1_0_load480 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load480 | 0) == 0 | ($769 | 0) == 0)) {
              var $774 = $simplified_sroa_0_14;
              var $775 = $simplified_sroa_1_0_load480 << 2;
              _memcpy($769, $774, $775) | 0;
             }
             if (($simplified_sroa_0_14 | 0) == 0) {
              var $simplified_sroa_0_15 = $770;
              var $simplified_sroa_2_16 = $simplified_sroa_2_15;
              break;
             }
             _free($simplified_sroa_0_14);
             var $simplified_sroa_0_15 = $770;
             var $simplified_sroa_2_16 = $simplified_sroa_2_15;
            } else {
             var $simplified_sroa_0_15 = $simplified_sroa_0_14;
             var $simplified_sroa_2_16 = $simplified_sroa_2_14;
            }
           } while (0);
           var $simplified_sroa_2_16;
           var $simplified_sroa_0_15;
           $simplified_sroa_1 = 1;
           HEAP32[$simplified_sroa_0_15 >> 2] = $llx_0_lcssa_i;
           var $simplified_sroa_1_0_load450 = $simplified_sroa_1;
           var $779 = $simplified_sroa_1_0_load450 + 1 | 0;
           do {
            if (($simplified_sroa_2_16 | 0) < ($779 | 0)) {
             if (($simplified_sroa_2_16 | 0) == 0) {
              var $simplified_sroa_2_17 = $779;
             } else {
              var $783 = $simplified_sroa_2_16;
              while (1) {
               var $783;
               var $784 = $783 << 1;
               if (($784 | 0) < ($779 | 0)) {
                var $783 = $784;
               } else {
                var $simplified_sroa_2_17 = $784;
                break;
               }
              }
             }
             var $simplified_sroa_2_17;
             var $787 = _malloc($simplified_sroa_2_17 << 2);
             var $788 = $787;
             var $simplified_sroa_1_0_load481 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load481 | 0) == 0 | ($787 | 0) == 0)) {
              var $792 = $simplified_sroa_0_15;
              var $793 = $simplified_sroa_1_0_load481 << 2;
              _memcpy($787, $792, $793) | 0;
             }
             if (($simplified_sroa_0_15 | 0) == 0) {
              var $simplified_sroa_0_16 = $788;
              var $simplified_sroa_2_18 = $simplified_sroa_2_17;
              break;
             }
             _free($simplified_sroa_0_15);
             var $simplified_sroa_0_16 = $788;
             var $simplified_sroa_2_18 = $simplified_sroa_2_17;
            } else {
             var $simplified_sroa_0_16 = $simplified_sroa_0_15;
             var $simplified_sroa_2_18 = $simplified_sroa_2_16;
            }
           } while (0);
           var $simplified_sroa_2_18;
           var $simplified_sroa_0_16;
           $simplified_sroa_1 = $779;
           HEAP32[$simplified_sroa_0_16 + ($simplified_sroa_1_0_load450 << 2) >> 2] = $lly_0_lcssa_i;
           var $simplified_sroa_1_0_load452 = $simplified_sroa_1;
           var $798 = $simplified_sroa_1_0_load452 + 1 | 0;
           do {
            if (($simplified_sroa_2_18 | 0) < ($798 | 0)) {
             if (($simplified_sroa_2_18 | 0) == 0) {
              var $simplified_sroa_2_19 = $798;
             } else {
              var $802 = $simplified_sroa_2_18;
              while (1) {
               var $802;
               var $803 = $802 << 1;
               if (($803 | 0) < ($798 | 0)) {
                var $802 = $803;
               } else {
                var $simplified_sroa_2_19 = $803;
                break;
               }
              }
             }
             var $simplified_sroa_2_19;
             var $806 = _malloc($simplified_sroa_2_19 << 2);
             var $807 = $806;
             var $simplified_sroa_1_0_load482 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load482 | 0) == 0 | ($806 | 0) == 0)) {
              var $811 = $simplified_sroa_0_16;
              var $812 = $simplified_sroa_1_0_load482 << 2;
              _memcpy($806, $811, $812) | 0;
             }
             if (($simplified_sroa_0_16 | 0) == 0) {
              var $simplified_sroa_0_17 = $807;
              var $simplified_sroa_2_20 = $simplified_sroa_2_19;
              break;
             }
             _free($simplified_sroa_0_16);
             var $simplified_sroa_0_17 = $807;
             var $simplified_sroa_2_20 = $simplified_sroa_2_19;
            } else {
             var $simplified_sroa_0_17 = $simplified_sroa_0_16;
             var $simplified_sroa_2_20 = $simplified_sroa_2_18;
            }
           } while (0);
           var $simplified_sroa_2_20;
           var $simplified_sroa_0_17;
           $simplified_sroa_1 = $798;
           HEAP32[$simplified_sroa_0_17 + ($simplified_sroa_1_0_load452 << 2) >> 2] = $llz_0_lcssa_i;
           var $simplified_sroa_1_0_load454 = $simplified_sroa_1;
           var $817 = $simplified_sroa_1_0_load454 + 1 | 0;
           do {
            if (($simplified_sroa_2_20 | 0) < ($817 | 0)) {
             if (($simplified_sroa_2_20 | 0) == 0) {
              var $simplified_sroa_2_21 = $817;
             } else {
              var $821 = $simplified_sroa_2_20;
              while (1) {
               var $821;
               var $822 = $821 << 1;
               if (($822 | 0) < ($817 | 0)) {
                var $821 = $822;
               } else {
                var $simplified_sroa_2_21 = $822;
                break;
               }
              }
             }
             var $simplified_sroa_2_21;
             var $825 = _malloc($simplified_sroa_2_21 << 2);
             var $826 = $825;
             var $simplified_sroa_1_0_load483 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load483 | 0) == 0 | ($825 | 0) == 0)) {
              var $830 = $simplified_sroa_0_17;
              var $831 = $simplified_sroa_1_0_load483 << 2;
              _memcpy($825, $830, $831) | 0;
             }
             if (($simplified_sroa_0_17 | 0) == 0) {
              var $simplified_sroa_0_18 = $826;
              var $simplified_sroa_2_22 = $simplified_sroa_2_21;
              break;
             }
             _free($simplified_sroa_0_17);
             var $simplified_sroa_0_18 = $826;
             var $simplified_sroa_2_22 = $simplified_sroa_2_21;
            } else {
             var $simplified_sroa_0_18 = $simplified_sroa_0_17;
             var $simplified_sroa_2_22 = $simplified_sroa_2_20;
            }
           } while (0);
           var $simplified_sroa_2_22;
           var $simplified_sroa_0_18;
           $simplified_sroa_1 = $817;
           HEAP32[$simplified_sroa_0_18 + ($simplified_sroa_1_0_load454 << 2) >> 2] = $lli_0_lcssa_i;
           var $simplified_sroa_1_0_load456 = $simplified_sroa_1;
           var $836 = $simplified_sroa_1_0_load456 + 1 | 0;
           do {
            if (($simplified_sroa_2_22 | 0) < ($836 | 0)) {
             if (($simplified_sroa_2_22 | 0) == 0) {
              var $simplified_sroa_2_23 = $836;
             } else {
              var $840 = $simplified_sroa_2_22;
              while (1) {
               var $840;
               var $841 = $840 << 1;
               if (($841 | 0) < ($836 | 0)) {
                var $840 = $841;
               } else {
                var $simplified_sroa_2_23 = $841;
                break;
               }
              }
             }
             var $simplified_sroa_2_23;
             var $844 = _malloc($simplified_sroa_2_23 << 2);
             var $845 = $844;
             var $simplified_sroa_1_0_load484 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load484 | 0) == 0 | ($844 | 0) == 0)) {
              var $849 = $simplified_sroa_0_18;
              var $850 = $simplified_sroa_1_0_load484 << 2;
              _memcpy($844, $849, $850) | 0;
             }
             if (($simplified_sroa_0_18 | 0) == 0) {
              var $simplified_sroa_0_19 = $845;
              var $simplified_sroa_2_24 = $simplified_sroa_2_23;
              break;
             }
             _free($simplified_sroa_0_18);
             var $simplified_sroa_0_19 = $845;
             var $simplified_sroa_2_24 = $simplified_sroa_2_23;
            } else {
             var $simplified_sroa_0_19 = $simplified_sroa_0_18;
             var $simplified_sroa_2_24 = $simplified_sroa_2_22;
            }
           } while (0);
           var $simplified_sroa_2_24;
           var $simplified_sroa_0_19;
           $simplified_sroa_1 = $836;
           HEAP32[$simplified_sroa_0_19 + ($simplified_sroa_1_0_load456 << 2) >> 2] = $urx_0_lcssa_i;
           var $simplified_sroa_1_0_load458 = $simplified_sroa_1;
           var $855 = $simplified_sroa_1_0_load458 + 1 | 0;
           do {
            if (($simplified_sroa_2_24 | 0) < ($855 | 0)) {
             if (($simplified_sroa_2_24 | 0) == 0) {
              var $simplified_sroa_2_25 = $855;
             } else {
              var $859 = $simplified_sroa_2_24;
              while (1) {
               var $859;
               var $860 = $859 << 1;
               if (($860 | 0) < ($855 | 0)) {
                var $859 = $860;
               } else {
                var $simplified_sroa_2_25 = $860;
                break;
               }
              }
             }
             var $simplified_sroa_2_25;
             var $863 = _malloc($simplified_sroa_2_25 << 2);
             var $864 = $863;
             var $simplified_sroa_1_0_load485 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load485 | 0) == 0 | ($863 | 0) == 0)) {
              var $868 = $simplified_sroa_0_19;
              var $869 = $simplified_sroa_1_0_load485 << 2;
              _memcpy($863, $868, $869) | 0;
             }
             if (($simplified_sroa_0_19 | 0) == 0) {
              var $simplified_sroa_0_20 = $864;
              var $simplified_sroa_2_26 = $simplified_sroa_2_25;
              break;
             }
             _free($simplified_sroa_0_19);
             var $simplified_sroa_0_20 = $864;
             var $simplified_sroa_2_26 = $simplified_sroa_2_25;
            } else {
             var $simplified_sroa_0_20 = $simplified_sroa_0_19;
             var $simplified_sroa_2_26 = $simplified_sroa_2_24;
            }
           } while (0);
           var $simplified_sroa_2_26;
           var $simplified_sroa_0_20;
           $simplified_sroa_1 = $855;
           HEAP32[$simplified_sroa_0_20 + ($simplified_sroa_1_0_load458 << 2) >> 2] = $ury_0_lcssa_i;
           var $simplified_sroa_1_0_load460 = $simplified_sroa_1;
           var $874 = $simplified_sroa_1_0_load460 + 1 | 0;
           do {
            if (($simplified_sroa_2_26 | 0) < ($874 | 0)) {
             if (($simplified_sroa_2_26 | 0) == 0) {
              var $simplified_sroa_2_27 = $874;
             } else {
              var $878 = $simplified_sroa_2_26;
              while (1) {
               var $878;
               var $879 = $878 << 1;
               if (($879 | 0) < ($874 | 0)) {
                var $878 = $879;
               } else {
                var $simplified_sroa_2_27 = $879;
                break;
               }
              }
             }
             var $simplified_sroa_2_27;
             var $882 = _malloc($simplified_sroa_2_27 << 2);
             var $883 = $882;
             var $simplified_sroa_1_0_load486 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load486 | 0) == 0 | ($882 | 0) == 0)) {
              var $887 = $simplified_sroa_0_20;
              var $888 = $simplified_sroa_1_0_load486 << 2;
              _memcpy($882, $887, $888) | 0;
             }
             if (($simplified_sroa_0_20 | 0) == 0) {
              var $simplified_sroa_0_21 = $883;
              var $simplified_sroa_2_28 = $simplified_sroa_2_27;
              break;
             }
             _free($simplified_sroa_0_20);
             var $simplified_sroa_0_21 = $883;
             var $simplified_sroa_2_28 = $simplified_sroa_2_27;
            } else {
             var $simplified_sroa_0_21 = $simplified_sroa_0_20;
             var $simplified_sroa_2_28 = $simplified_sroa_2_26;
            }
           } while (0);
           var $simplified_sroa_2_28;
           var $simplified_sroa_0_21;
           $simplified_sroa_1 = $874;
           HEAP32[$simplified_sroa_0_21 + ($simplified_sroa_1_0_load460 << 2) >> 2] = $urz_0_lcssa_i;
           var $simplified_sroa_1_0_load462 = $simplified_sroa_1;
           var $893 = $simplified_sroa_1_0_load462 + 1 | 0;
           do {
            if (($simplified_sroa_2_28 | 0) < ($893 | 0)) {
             if (($simplified_sroa_2_28 | 0) == 0) {
              var $simplified_sroa_2_29 = $893;
             } else {
              var $897 = $simplified_sroa_2_28;
              while (1) {
               var $897;
               var $898 = $897 << 1;
               if (($898 | 0) < ($893 | 0)) {
                var $897 = $898;
               } else {
                var $simplified_sroa_2_29 = $898;
                break;
               }
              }
             }
             var $simplified_sroa_2_29;
             var $901 = _malloc($simplified_sroa_2_29 << 2);
             var $902 = $901;
             var $simplified_sroa_1_0_load487 = $simplified_sroa_1;
             if (!(($simplified_sroa_1_0_load487 | 0) == 0 | ($901 | 0) == 0)) {
              var $906 = $simplified_sroa_0_21;
              var $907 = $simplified_sroa_1_0_load487 << 2;
              _memcpy($901, $906, $907) | 0;
             }
             if (($simplified_sroa_0_21 | 0) == 0) {
              var $simplified_sroa_0_22 = $902;
              var $simplified_sroa_2_30 = $simplified_sroa_2_29;
              break;
             }
             _free($simplified_sroa_0_21);
             var $simplified_sroa_0_22 = $902;
             var $simplified_sroa_2_30 = $simplified_sroa_2_29;
            } else {
             var $simplified_sroa_0_22 = $simplified_sroa_0_21;
             var $simplified_sroa_2_30 = $simplified_sroa_2_28;
            }
           } while (0);
           var $simplified_sroa_2_30;
           var $simplified_sroa_0_22;
           $simplified_sroa_1 = $893;
           HEAP32[$simplified_sroa_0_22 + ($simplified_sroa_1_0_load462 << 2) >> 2] = $uri_0_lcssa_i;
           var $912 = $simplified_sroa_1;
           var $simplified_sroa_0_23 = $simplified_sroa_0_22;
           var $simplified_sroa_2_31 = $simplified_sroa_2_30;
          } else {
           var $912 = $simplified_sroa_1_0_load448;
           var $simplified_sroa_0_23 = $simplified_sroa_0_14;
           var $simplified_sroa_2_31 = $simplified_sroa_2_14;
          }
          var $simplified_sroa_2_31;
          var $simplified_sroa_0_23;
          var $912;
          var $913 = ($verts_sroa_1 | 0) / 4 & -1;
          L1979 : do {
           if (($912 | 0) > 3) {
            var $916 = $913 - 1 | 0;
            var $i3_0_ph301_i = 0;
            var $920 = ($912 | 0) / 4 & -1;
            var $919 = $912;
            var $simplified_sroa_0_24 = $simplified_sroa_0_23;
            var $simplified_sroa_2_32 = $simplified_sroa_2_31;
            while (1) {
             var $simplified_sroa_2_32;
             var $simplified_sroa_0_24;
             var $919;
             var $920;
             var $i3_0_ph301_i;
             var $921 = $i3_0_ph301_i + 1 | 0;
             var $922 = $i3_0_ph301_i << 2;
             var $923 = $922 | 2;
             var $924 = $922 | 3;
             var $925 = $921 << 2;
             var $926 = $925 | 1;
             var $927 = $925 | 2;
             var $928 = $925 | 3;
             var $930 = $920;
             var $929 = $919;
             var $simplified_sroa_0_25 = $simplified_sroa_0_24;
             var $simplified_sroa_2_33 = $simplified_sroa_2_32;
             while (1) {
              var $simplified_sroa_2_33;
              var $simplified_sroa_0_25;
              var $929;
              var $930;
              var $933 = HEAP32[$simplified_sroa_0_25 + ($922 << 2) >> 2];
              var $935 = HEAP32[$simplified_sroa_0_25 + ($923 << 2) >> 2];
              var $937 = HEAP32[$simplified_sroa_0_25 + ($924 << 2) >> 2];
              var $938 = (($921 | 0) % ($930 | 0) & -1) << 2;
              var $940 = HEAP32[$simplified_sroa_0_25 + ($938 << 2) >> 2];
              var $943 = HEAP32[$simplified_sroa_0_25 + (($938 | 2) << 2) >> 2];
              var $946 = HEAP32[$simplified_sroa_0_25 + (($938 | 3) << 2) >> 2];
              do {
               if (($940 | 0) > ($933 | 0)) {
                label = 1400;
               } else {
                if (($940 | 0) == ($933 | 0) & ($943 | 0) > ($935 | 0)) {
                 label = 1400;
                 break;
                }
                var $_pn237_i = $946 + $916 | 0;
                var $endi_0_i = $937;
                var $cinc_0_i = $916;
               }
              } while (0);
              if (label == 1400) {
               label = 0;
               var $_pn237_i = $937 + 1 | 0;
               var $endi_0_i = $946;
               var $cinc_0_i = 1;
              }
              var $cinc_0_i;
              var $endi_0_i;
              var $_pn237_i;
              var $ci_0_i = ($_pn237_i | 0) % ($913 | 0) & -1;
              var $959 = HEAP32[$verts_sroa_0_14 + (($ci_0_i << 2 | 3) << 2) >> 2];
              if (($959 & 65535 | 0) != 0 & ($959 & 131072 | 0) == 0 | ($ci_0_i | 0) == ($endi_0_i | 0)) {
               break;
              }
              var $966 = $940 - $933 | 0;
              var $968 = $943 - $935 | 0;
              var $971 = $966 * $966 + $968 * $968;
              var $972 = $971 > 0;
              var $973 = $933 | 0;
              var $974 = $935 | 0;
              var $ci_1257_i = $ci_0_i;
              var $maxi_0258_i = -1;
              var $maxd_0259_i = 0;
              while (1) {
               var $maxd_0259_i;
               var $maxi_0258_i;
               var $ci_1257_i;
               var $976 = $ci_1257_i << 2;
               var $978 = HEAP32[$verts_sroa_0_14 + ($976 << 2) >> 2];
               var $981 = HEAP32[$verts_sroa_0_14 + (($976 | 2) << 2) >> 2];
               var $988 = $966 * ($978 - $933 | 0) + $968 * ($981 - $935 | 0);
               if ($972) {
                var $t_0_i_i = $988 / $971;
               } else {
                var $t_0_i_i = $988;
               }
               var $t_0_i_i;
               do {
                if ($t_0_i_i < 0) {
                 var $t_1_i_i = 0;
                } else {
                 if ($t_0_i_i <= 1) {
                  var $t_1_i_i = $t_0_i_i;
                  break;
                 }
                 var $t_1_i_i = 1;
                }
               } while (0);
               var $t_1_i_i;
               var $999 = $973 + $966 * $t_1_i_i - ($978 | 0);
               var $1003 = $974 + $968 * $t_1_i_i - ($981 | 0);
               var $1006 = $999 * $999 + $1003 * $1003;
               var $1007 = $1006 > $maxd_0259_i;
               var $maxi_1_i = $1007 ? $ci_1257_i : $maxi_0258_i;
               var $maxd_1_i = $1007 ? $1006 : $maxd_0259_i;
               var $1009 = ($ci_1257_i + $cinc_0_i | 0) % ($913 | 0) & -1;
               if (($1009 | 0) == ($endi_0_i | 0)) {
                break;
               } else {
                var $ci_1257_i = $1009;
                var $maxi_0258_i = $maxi_1_i;
                var $maxd_0259_i = $maxd_1_i;
               }
              }
              if (!(($maxi_1_i | 0) != -1 & $maxd_1_i > $178)) {
               break;
              }
              var $1014 = $929 + 4 | 0;
              do {
               if (($simplified_sroa_2_33 | 0) < ($1014 | 0)) {
                if (($simplified_sroa_2_33 | 0) == 0) {
                 var $simplified_sroa_2_34 = $1014;
                } else {
                 var $1018 = $simplified_sroa_2_33;
                 while (1) {
                  var $1018;
                  var $1019 = $1018 << 1;
                  if (($1019 | 0) < ($1014 | 0)) {
                   var $1018 = $1019;
                  } else {
                   var $simplified_sroa_2_34 = $1019;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_34;
                var $1022 = _malloc($simplified_sroa_2_34 << 2);
                var $1023 = $1022;
                var $simplified_sroa_1_0_load488 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load488 | 0) == 0 | ($1022 | 0) == 0)) {
                 var $1027 = $simplified_sroa_0_25;
                 var $1028 = $simplified_sroa_1_0_load488 << 2;
                 _memcpy($1022, $1027, $1028) | 0;
                }
                if (($simplified_sroa_0_25 | 0) == 0) {
                 var $simplified_sroa_0_26 = $1023;
                 var $simplified_sroa_2_35 = $simplified_sroa_2_34;
                 break;
                }
                _free($simplified_sroa_0_25);
                var $simplified_sroa_0_26 = $1023;
                var $simplified_sroa_2_35 = $simplified_sroa_2_34;
               } else {
                var $simplified_sroa_0_26 = $simplified_sroa_0_25;
                var $simplified_sroa_2_35 = $simplified_sroa_2_33;
               }
              } while (0);
              var $simplified_sroa_2_35;
              var $simplified_sroa_0_26;
              $simplified_sroa_1 = $1014;
              var $1032 = ($1014 | 0) / 4 & -1;
              var $j_0263_i = $1032 - 1 | 0;
              if (($j_0263_i | 0) > ($i3_0_ph301_i | 0)) {
               var $j_0_in264_i = $1032;
               var $j_0265_i = $j_0263_i;
               while (1) {
                var $j_0265_i;
                var $j_0_in264_i;
                var $1034 = $j_0_in264_i << 2;
                var $1038 = $j_0265_i << 2;
                HEAP32[$simplified_sroa_0_26 + ($1038 << 2) >> 2] = HEAP32[$simplified_sroa_0_26 + ($1034 - 8 << 2) >> 2];
                HEAP32[$simplified_sroa_0_26 + (($1038 | 1) << 2) >> 2] = HEAP32[$simplified_sroa_0_26 + ($1034 - 7 << 2) >> 2];
                HEAP32[$simplified_sroa_0_26 + (($1038 | 2) << 2) >> 2] = HEAP32[$simplified_sroa_0_26 + ($1034 - 6 << 2) >> 2];
                HEAP32[$simplified_sroa_0_26 + (($1038 | 3) << 2) >> 2] = HEAP32[$simplified_sroa_0_26 + ($1034 - 5 << 2) >> 2];
                var $j_0_i = $j_0265_i - 1 | 0;
                if (($j_0_i | 0) > ($i3_0_ph301_i | 0)) {
                 var $j_0_in264_i = $j_0265_i;
                 var $j_0265_i = $j_0_i;
                } else {
                 break;
                }
               }
              }
              var $1056 = $maxi_1_i << 2;
              HEAP32[$simplified_sroa_0_26 + ($925 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + ($1056 << 2) >> 2];
              HEAP32[$simplified_sroa_0_26 + ($926 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + (($1056 | 1) << 2) >> 2];
              HEAP32[$simplified_sroa_0_26 + ($927 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + (($1056 | 2) << 2) >> 2];
              HEAP32[$simplified_sroa_0_26 + ($928 << 2) >> 2] = $maxi_1_i;
              var $simplified_sroa_1_0_load466 = $simplified_sroa_1;
              var $1069 = ($simplified_sroa_1_0_load466 | 0) / 4 & -1;
              if (($i3_0_ph301_i | 0) < ($1069 | 0)) {
               var $930 = $1069;
               var $929 = $simplified_sroa_1_0_load466;
               var $simplified_sroa_0_25 = $simplified_sroa_0_26;
               var $simplified_sroa_2_33 = $simplified_sroa_2_35;
              } else {
               var $1071 = $simplified_sroa_1_0_load466;
               var $simplified_sroa_0_27 = $simplified_sroa_0_26;
               var $simplified_sroa_2_36 = $simplified_sroa_2_35;
               break L1979;
              }
             }
             var $917 = ($929 | 0) / 4 & -1;
             if (($921 | 0) < ($917 | 0)) {
              var $i3_0_ph301_i = $921;
              var $920 = $917;
              var $919 = $929;
              var $simplified_sroa_0_24 = $simplified_sroa_0_25;
              var $simplified_sroa_2_32 = $simplified_sroa_2_33;
             } else {
              var $1071 = $929;
              var $simplified_sroa_0_27 = $simplified_sroa_0_25;
              var $simplified_sroa_2_36 = $simplified_sroa_2_33;
              break;
             }
            }
           } else {
            var $1071 = $912;
            var $simplified_sroa_0_27 = $simplified_sroa_0_23;
            var $simplified_sroa_2_36 = $simplified_sroa_2_31;
           }
          } while (0);
          var $simplified_sroa_2_36;
          var $simplified_sroa_0_27;
          var $1071;
          L2020 : do {
           if ($_not) {
            var $1072 = $1071;
            var $simplified_sroa_0_28 = $simplified_sroa_0_27;
            var $simplified_sroa_2_37 = $simplified_sroa_2_36;
            label = 1422;
           } else {
            if (($1071 | 0) <= 3) {
             var $1285 = $1071;
             var $simplified_sroa_0_35 = $simplified_sroa_0_27;
             var $simplified_sroa_2_46 = $simplified_sroa_2_36;
             break;
            }
            var $i5_0_ph300_i = 0;
            var $1079 = ($1071 | 0) / 4 & -1;
            var $1078 = $1071;
            var $simplified_sroa_0_29 = $simplified_sroa_0_27;
            var $simplified_sroa_2_38 = $simplified_sroa_2_36;
            while (1) {
             var $simplified_sroa_2_38;
             var $simplified_sroa_0_29;
             var $1078;
             var $1079;
             var $i5_0_ph300_i;
             var $1080 = $i5_0_ph300_i + 1 | 0;
             var $1081 = $i5_0_ph300_i << 2;
             var $1082 = $1081 | 2;
             var $1083 = $1081 | 3;
             var $1084 = $1080 << 2;
             var $1085 = $1084 | 1;
             var $1086 = $1084 | 2;
             var $1087 = $1084 | 3;
             var $1090 = $1079;
             var $1089 = $1078;
             var $simplified_sroa_0_30 = $simplified_sroa_0_29;
             var $simplified_sroa_2_39 = $simplified_sroa_2_38;
             while (1) {
              var $simplified_sroa_2_39;
              var $simplified_sroa_0_30;
              var $1089;
              var $1090;
              var $1093 = HEAP32[$simplified_sroa_0_30 + ($1081 << 2) >> 2];
              var $1095 = HEAP32[$simplified_sroa_0_30 + ($1082 << 2) >> 2];
              var $1097 = HEAP32[$simplified_sroa_0_30 + ($1083 << 2) >> 2];
              var $1098 = (($1080 | 0) % ($1090 | 0) & -1) << 2;
              var $1100 = HEAP32[$simplified_sroa_0_30 + ($1098 << 2) >> 2];
              var $1103 = HEAP32[$simplified_sroa_0_30 + (($1098 | 2) << 2) >> 2];
              var $1106 = HEAP32[$simplified_sroa_0_30 + (($1098 | 3) << 2) >> 2];
              if ((HEAP32[$verts_sroa_0_14 + (((($1097 + 1 | 0) % ($913 | 0) & -1) << 2 | 3) << 2) >> 2] & 65535 | 0) != 0) {
               break;
              }
              var $1116 = $1100 - $1093 | 0;
              var $1117 = $1103 - $1095 | 0;
              var $1118 = Math.imul($1116, $1116) | 0;
              if ((Math.imul($1117, $1117) + $1118 | 0) <= ($179 | 0)) {
               break;
              }
              var $1125 = (($1106 | 0) < ($1097 | 0) ? $913 : 0) + ($1106 - $1097) | 0;
              if (($1125 | 0) <= 1) {
               break;
              }
              if (($1100 | 0) > ($1093 | 0)) {
               var $_sink_i = $1125;
              } else {
               var $_sink_i = $1125 + (($1100 | 0) == ($1093 | 0) & ($1103 | 0) > ($1095 | 0) & 1 ^ 1) | 0;
              }
              var $_sink_i;
              var $1137 = ((($_sink_i | 0) / 2 & -1) + $1097 | 0) % ($913 | 0) & -1;
              if (($1137 | 0) == -1) {
               break;
              }
              var $1140 = $1089 + 4 | 0;
              do {
               if (($simplified_sroa_2_39 | 0) < ($1140 | 0)) {
                if (($simplified_sroa_2_39 | 0) == 0) {
                 var $simplified_sroa_2_40 = $1140;
                } else {
                 var $1144 = $simplified_sroa_2_39;
                 while (1) {
                  var $1144;
                  var $1145 = $1144 << 1;
                  if (($1145 | 0) < ($1140 | 0)) {
                   var $1144 = $1145;
                  } else {
                   var $simplified_sroa_2_40 = $1145;
                   break;
                  }
                 }
                }
                var $simplified_sroa_2_40;
                var $1148 = _malloc($simplified_sroa_2_40 << 2);
                var $1149 = $1148;
                var $simplified_sroa_1_0_load489 = $simplified_sroa_1;
                if (!(($simplified_sroa_1_0_load489 | 0) == 0 | ($1148 | 0) == 0)) {
                 var $1153 = $simplified_sroa_0_30;
                 var $1154 = $simplified_sroa_1_0_load489 << 2;
                 _memcpy($1148, $1153, $1154) | 0;
                }
                if (($simplified_sroa_0_30 | 0) == 0) {
                 var $simplified_sroa_0_31 = $1149;
                 var $simplified_sroa_2_41 = $simplified_sroa_2_40;
                 break;
                }
                _free($simplified_sroa_0_30);
                var $simplified_sroa_0_31 = $1149;
                var $simplified_sroa_2_41 = $simplified_sroa_2_40;
               } else {
                var $simplified_sroa_0_31 = $simplified_sroa_0_30;
                var $simplified_sroa_2_41 = $simplified_sroa_2_39;
               }
              } while (0);
              var $simplified_sroa_2_41;
              var $simplified_sroa_0_31;
              $simplified_sroa_1 = $1140;
              var $1158 = ($1140 | 0) / 4 & -1;
              var $j17_0249_i = $1158 - 1 | 0;
              if (($j17_0249_i | 0) > ($i5_0_ph300_i | 0)) {
               var $j17_0_in250_i = $1158;
               var $j17_0251_i = $j17_0249_i;
               while (1) {
                var $j17_0251_i;
                var $j17_0_in250_i;
                var $1160 = $j17_0_in250_i << 2;
                var $1164 = $j17_0251_i << 2;
                HEAP32[$simplified_sroa_0_31 + ($1164 << 2) >> 2] = HEAP32[$simplified_sroa_0_31 + ($1160 - 8 << 2) >> 2];
                HEAP32[$simplified_sroa_0_31 + (($1164 | 1) << 2) >> 2] = HEAP32[$simplified_sroa_0_31 + ($1160 - 7 << 2) >> 2];
                HEAP32[$simplified_sroa_0_31 + (($1164 | 2) << 2) >> 2] = HEAP32[$simplified_sroa_0_31 + ($1160 - 6 << 2) >> 2];
                HEAP32[$simplified_sroa_0_31 + (($1164 | 3) << 2) >> 2] = HEAP32[$simplified_sroa_0_31 + ($1160 - 5 << 2) >> 2];
                var $j17_0_i = $j17_0251_i - 1 | 0;
                if (($j17_0_i | 0) > ($i5_0_ph300_i | 0)) {
                 var $j17_0_in250_i = $j17_0251_i;
                 var $j17_0251_i = $j17_0_i;
                } else {
                 break;
                }
               }
              }
              var $1182 = $1137 << 2;
              HEAP32[$simplified_sroa_0_31 + ($1084 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + ($1182 << 2) >> 2];
              HEAP32[$simplified_sroa_0_31 + ($1085 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + (($1182 | 1) << 2) >> 2];
              HEAP32[$simplified_sroa_0_31 + ($1086 << 2) >> 2] = HEAP32[$verts_sroa_0_14 + (($1182 | 2) << 2) >> 2];
              HEAP32[$simplified_sroa_0_31 + ($1087 << 2) >> 2] = $1137;
              var $simplified_sroa_1_0_load468 = $simplified_sroa_1;
              var $1195 = ($simplified_sroa_1_0_load468 | 0) / 4 & -1;
              if (($i5_0_ph300_i | 0) < ($1195 | 0)) {
               var $1090 = $1195;
               var $1089 = $simplified_sroa_1_0_load468;
               var $simplified_sroa_0_30 = $simplified_sroa_0_31;
               var $simplified_sroa_2_39 = $simplified_sroa_2_41;
              } else {
               var $1072 = $simplified_sroa_1_0_load468;
               var $simplified_sroa_0_28 = $simplified_sroa_0_31;
               var $simplified_sroa_2_37 = $simplified_sroa_2_41;
               label = 1422;
               break L2020;
              }
             }
             var $1076 = ($1089 | 0) / 4 & -1;
             if (($1080 | 0) < ($1076 | 0)) {
              var $i5_0_ph300_i = $1080;
              var $1079 = $1076;
              var $1078 = $1089;
              var $simplified_sroa_0_29 = $simplified_sroa_0_30;
              var $simplified_sroa_2_38 = $simplified_sroa_2_39;
             } else {
              var $1072 = $1089;
              var $simplified_sroa_0_28 = $simplified_sroa_0_30;
              var $simplified_sroa_2_37 = $simplified_sroa_2_39;
              label = 1422;
              break;
             }
            }
           }
          } while (0);
          do {
           if (label == 1422) {
            label = 0;
            var $simplified_sroa_2_37;
            var $simplified_sroa_0_28;
            var $1072;
            if (($1072 | 0) > 3) {
             var $i18_0248_i = 0;
            } else {
             var $1285 = $1072;
             var $simplified_sroa_0_35 = $simplified_sroa_0_28;
             var $simplified_sroa_2_46 = $simplified_sroa_2_37;
             break;
            }
            while (1) {
             var $i18_0248_i;
             var $1199 = $simplified_sroa_0_28 + (($i18_0248_i << 2 | 3) << 2) | 0;
             var $1200 = HEAP32[$1199 >> 2];
             HEAP32[$1199 >> 2] = HEAP32[$verts_sroa_0_14 + (($1200 << 2 | 3) << 2) >> 2] & 65536 | HEAP32[$verts_sroa_0_14 + (((($1200 + 1 | 0) % ($913 | 0) & -1) << 2 | 3) << 2) >> 2] & 196607;
             var $1214 = $i18_0248_i + 1 | 0;
             var $simplified_sroa_1_0_load469 = $simplified_sroa_1;
             var $1215 = ($simplified_sroa_1_0_load469 | 0) / 4 & -1;
             if (($1214 | 0) < ($1215 | 0)) {
              var $i18_0248_i = $1214;
             } else {
              break;
             }
            }
            if (($simplified_sroa_1_0_load469 | 0) > 3) {
             var $i_033_i = 0;
             var $1219 = $1215;
             var $1218 = $simplified_sroa_1_0_load469;
             var $simplified_sroa_0_32 = $simplified_sroa_0_28;
             var $simplified_sroa_2_42 = $simplified_sroa_2_37;
            } else {
             var $1285 = $simplified_sroa_1_0_load469;
             var $simplified_sroa_0_35 = $simplified_sroa_0_28;
             var $simplified_sroa_2_46 = $simplified_sroa_2_37;
             break;
            }
            while (1) {
             var $simplified_sroa_2_42;
             var $simplified_sroa_0_32;
             var $1218;
             var $1219;
             var $i_033_i;
             var $1220 = $i_033_i + 1 | 0;
             var $1222 = $i_033_i << 2;
             var $1225 = ($1220 | 0) < ($1219 | 0) ? $1220 << 2 : 0;
             do {
              if ((HEAP32[$simplified_sroa_0_32 + ($1222 << 2) >> 2] | 0) == (HEAP32[$simplified_sroa_0_32 + ($1225 << 2) >> 2] | 0)) {
               if ((HEAP32[$simplified_sroa_0_32 + (($1222 | 2) << 2) >> 2] | 0) != (HEAP32[$simplified_sroa_0_32 + (($1225 | 2) << 2) >> 2] | 0)) {
                var $1229 = $1218;
                var $simplified_sroa_0_33 = $simplified_sroa_0_32;
                var $simplified_sroa_2_43 = $simplified_sroa_2_42;
                break;
               }
               if (($i_033_i | 0) < ((($1218 | 0) / 4 & -1) - 1 | 0)) {
                var $j_032_i = $i_033_i;
                while (1) {
                 var $j_032_i;
                 var $1243 = $j_032_i + 1 | 0;
                 var $1244 = $1243 << 2;
                 var $1247 = $j_032_i << 2;
                 HEAP32[$simplified_sroa_0_32 + ($1247 << 2) >> 2] = HEAP32[$simplified_sroa_0_32 + ($1244 << 2) >> 2];
                 HEAP32[$simplified_sroa_0_32 + (($1247 | 1) << 2) >> 2] = HEAP32[$simplified_sroa_0_32 + (($1244 | 1) << 2) >> 2];
                 HEAP32[$simplified_sroa_0_32 + (($1247 | 2) << 2) >> 2] = HEAP32[$simplified_sroa_0_32 + (($1244 | 2) << 2) >> 2];
                 HEAP32[$simplified_sroa_0_32 + (($1247 | 3) << 2) >> 2] = HEAP32[$simplified_sroa_0_32 + (($1244 | 3) << 2) >> 2];
                 var $simplified_sroa_1_0_load470 = $simplified_sroa_1;
                 if (($1243 | 0) < ((($simplified_sroa_1_0_load470 | 0) / 4 & -1) - 1 | 0)) {
                  var $j_032_i = $1243;
                 } else {
                  var $_lcssa_i = $simplified_sroa_1_0_load470;
                  break;
                 }
                }
               } else {
                var $_lcssa_i = $1218;
               }
               var $_lcssa_i;
               var $1267 = $_lcssa_i - 4 | 0;
               do {
                if (($simplified_sroa_2_42 | 0) < ($1267 | 0)) {
                 if (($simplified_sroa_2_42 | 0) == 0) {
                  var $simplified_sroa_2_44 = $1267;
                 } else {
                  var $1271 = $simplified_sroa_2_42;
                  while (1) {
                   var $1271;
                   var $1272 = $1271 << 1;
                   if (($1272 | 0) < ($1267 | 0)) {
                    var $1271 = $1272;
                   } else {
                    var $simplified_sroa_2_44 = $1272;
                    break;
                   }
                  }
                 }
                 var $simplified_sroa_2_44;
                 var $1275 = _malloc($simplified_sroa_2_44 << 2);
                 var $1276 = $1275;
                 var $simplified_sroa_1_0_load490 = $simplified_sroa_1;
                 if (!(($simplified_sroa_1_0_load490 | 0) == 0 | ($1275 | 0) == 0)) {
                  var $1280 = $simplified_sroa_0_32;
                  var $1281 = $simplified_sroa_1_0_load490 << 2;
                  _memcpy($1275, $1280, $1281) | 0;
                 }
                 if (($simplified_sroa_0_32 | 0) == 0) {
                  var $simplified_sroa_0_34 = $1276;
                  var $simplified_sroa_2_45 = $simplified_sroa_2_44;
                  break;
                 }
                 _free($simplified_sroa_0_32);
                 var $simplified_sroa_0_34 = $1276;
                 var $simplified_sroa_2_45 = $simplified_sroa_2_44;
                } else {
                 var $simplified_sroa_0_34 = $simplified_sroa_0_32;
                 var $simplified_sroa_2_45 = $simplified_sroa_2_42;
                }
               } while (0);
               var $simplified_sroa_2_45;
               var $simplified_sroa_0_34;
               $simplified_sroa_1 = $1267;
               var $1229 = $1267;
               var $simplified_sroa_0_33 = $simplified_sroa_0_34;
               var $simplified_sroa_2_43 = $simplified_sroa_2_45;
              } else {
               var $1229 = $1218;
               var $simplified_sroa_0_33 = $simplified_sroa_0_32;
               var $simplified_sroa_2_43 = $simplified_sroa_2_42;
              }
             } while (0);
             var $simplified_sroa_2_43;
             var $simplified_sroa_0_33;
             var $1229;
             var $1230 = ($1229 | 0) / 4 & -1;
             if (($1220 | 0) < ($1230 | 0)) {
              var $i_033_i = $1220;
              var $1219 = $1230;
              var $1218 = $1229;
              var $simplified_sroa_0_32 = $simplified_sroa_0_33;
              var $simplified_sroa_2_42 = $simplified_sroa_2_43;
             } else {
              var $1285 = $1229;
              var $simplified_sroa_0_35 = $simplified_sroa_0_33;
              var $simplified_sroa_2_46 = $simplified_sroa_2_43;
              break;
             }
            }
           }
          } while (0);
          var $simplified_sroa_2_46;
          var $simplified_sroa_0_35;
          var $1285;
          if ((HEAP8[$7] & 1) == 0) {
           var $1293 = $1285;
          } else {
           FUNCTION_TABLE[HEAP32[HEAP32[$180 >> 2] + 24 >> 2]]($ctx, 6);
           var $1293 = $simplified_sroa_1;
          }
          var $1293;
          if (($1293 | 0) <= 11) {
           var $maxContours_4 = $maxContours_2365;
           var $simplified_sroa_0_36 = $simplified_sroa_0_35;
           var $simplified_sroa_2_47 = $simplified_sroa_2_46;
           var $verts_sroa_0_15 = $verts_sroa_0_14;
           var $verts_sroa_2_15 = $verts_sroa_2_14;
           break;
          }
          var $1296 = HEAP32[$73 >> 2];
          if (($1296 | 0) < ($maxContours_2365 | 0)) {
           var $maxContours_3 = $maxContours_2365;
           var $1323 = $1296;
           var $1322 = $1293;
          } else {
           var $1299 = $maxContours_2365 << 1;
           var $1302 = _malloc($maxContours_2365 * 40 & -1);
           if ((HEAP32[$73 >> 2] | 0) > 0) {
            var $j_0335 = 0;
            while (1) {
             var $j_0335;
             var $1308 = $1302 + ($j_0335 * 20 & -1) | 0;
             var $1309 = HEAP32[$70 >> 2] + ($j_0335 * 20 & -1) | 0;
             HEAP32[$1308 >> 2] = HEAP32[$1309 >> 2];
             HEAP32[$1308 + 4 >> 2] = HEAP32[$1309 + 4 >> 2];
             HEAP32[$1308 + 8 >> 2] = HEAP32[$1309 + 8 >> 2];
             HEAP32[$1308 + 12 >> 2] = HEAP32[$1309 + 12 >> 2];
             HEAP32[$1308 + 16 >> 2] = HEAP32[$1309 + 16 >> 2];
             HEAP32[HEAP32[$70 >> 2] + ($j_0335 * 20 & -1) >> 2] = 0;
             HEAP32[HEAP32[$70 >> 2] + ($j_0335 * 20 & -1) + 8 >> 2] = 0;
             var $1314 = $j_0335 + 1 | 0;
             if (($1314 | 0) < (HEAP32[$73 >> 2] | 0)) {
              var $j_0335 = $1314;
             } else {
              break;
             }
            }
           }
           var $1317 = HEAP32[$70 >> 2];
           if (($1317 | 0) != 0) {
            _free($1317);
           }
           HEAP32[$70 >> 2] = $1302;
           __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 7792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $maxContours_2365, HEAP32[tempVarArgs + 8 >> 2] = $1299, tempVarArgs));
           STACKTOP = tempVarArgs;
           var $maxContours_3 = $1299;
           var $1323 = HEAP32[$73 >> 2];
           var $1322 = $simplified_sroa_1;
          }
          var $1322;
          var $1323;
          var $maxContours_3;
          HEAP32[$73 >> 2] = $1323 + 1;
          var $1325 = HEAP32[$70 >> 2];
          var $1326 = ($1322 | 0) / 4 & -1;
          var $1327 = $1325 + ($1323 * 20 & -1) + 4 | 0;
          HEAP32[$1327 >> 2] = $1326;
          var $1329 = _malloc($1326 << 4);
          var $1331 = $1325 + ($1323 * 20 & -1) | 0;
          HEAP32[$1331 >> 2] = $1329;
          if (($1329 | 0) == 0) {
           label = 1470;
           break L1695;
          }
          var $1336 = $simplified_sroa_0_35;
          var $1338 = HEAP32[$1327 >> 2] << 4;
          _memcpy($1329, $1336, $1338) | 0;
          do {
           if ($34) {
            if ((HEAP32[$1327 >> 2] | 0) > 0) {
             var $j6_0341 = 0;
            } else {
             break;
            }
            while (1) {
             var $j6_0341;
             var $1341 = $j6_0341 << 2;
             var $1342 = HEAP32[$1331 >> 2];
             var $1343 = $1342 + ($1341 << 2) | 0;
             HEAP32[$1343 >> 2] = HEAP32[$1343 >> 2] - $6;
             var $1346 = $1342 + (($1341 | 2) << 2) | 0;
             HEAP32[$1346 >> 2] = HEAP32[$1346 >> 2] - $6;
             var $1349 = $j6_0341 + 1 | 0;
             if (($1349 | 0) < (HEAP32[$1327 >> 2] | 0)) {
              var $j6_0341 = $1349;
             } else {
              break;
             }
            }
           }
          } while (0);
          var $1352 = ($verts_sroa_1 | 0) / 4 & -1;
          var $1353 = $1325 + ($1323 * 20 & -1) + 12 | 0;
          HEAP32[$1353 >> 2] = $1352;
          var $1355 = _malloc($1352 << 4);
          var $1357 = $1325 + ($1323 * 20 & -1) + 8 | 0;
          HEAP32[$1357 >> 2] = $1355;
          if (($1355 | 0) == 0) {
           label = 1475;
           break L1695;
          }
          var $1362 = $verts_sroa_0_14;
          var $1364 = HEAP32[$1353 >> 2] << 4;
          _memcpy($1355, $1362, $1364) | 0;
          do {
           if ($34) {
            if ((HEAP32[$1353 >> 2] | 0) > 0) {
             var $j7_0345 = 0;
            } else {
             break;
            }
            while (1) {
             var $j7_0345;
             var $1367 = $j7_0345 << 2;
             var $1368 = HEAP32[$1357 >> 2];
             var $1369 = $1368 + ($1367 << 2) | 0;
             HEAP32[$1369 >> 2] = HEAP32[$1369 >> 2] - $6;
             var $1372 = $1368 + (($1367 | 2) << 2) | 0;
             HEAP32[$1372 >> 2] = HEAP32[$1372 >> 2] - $6;
             var $1375 = $j7_0345 + 1 | 0;
             if (($1375 | 0) < (HEAP32[$1353 >> 2] | 0)) {
              var $j7_0345 = $1375;
             } else {
              break;
             }
            }
           }
          } while (0);
          HEAP16[$1325 + ($1323 * 20 & -1) + 16 >> 1] = $204;
          HEAP8[$1325 + ($1323 * 20 & -1) + 18 | 0] = $209;
          var $maxContours_4 = $maxContours_3;
          var $simplified_sroa_0_36 = $simplified_sroa_0_35;
          var $simplified_sroa_2_47 = $simplified_sroa_2_46;
          var $verts_sroa_0_15 = $verts_sroa_0_14;
          var $verts_sroa_2_15 = $verts_sroa_2_14;
         }
        } while (0);
        var $verts_sroa_2_15;
        var $verts_sroa_0_15;
        var $simplified_sroa_2_47;
        var $simplified_sroa_0_36;
        var $maxContours_4;
        var $1381 = $i4_0362 + 1 | 0;
        if (($1381 | 0) < ($191 | 0)) {
         var $i4_0362 = $1381;
         var $maxContours_2365 = $maxContours_4;
         var $simplified_sroa_0_3 = $simplified_sroa_0_36;
         var $simplified_sroa_2_2 = $simplified_sroa_2_47;
         var $verts_sroa_0_3 = $verts_sroa_0_15;
         var $verts_sroa_2_2 = $verts_sroa_2_15;
        } else {
         var $maxContours_2_lcssa = $maxContours_4;
         var $simplified_sroa_0_37 = $simplified_sroa_0_36;
         var $simplified_sroa_2_48 = $simplified_sroa_2_47;
         var $verts_sroa_0_16 = $verts_sroa_0_15;
         var $verts_sroa_2_16 = $verts_sroa_2_15;
         break;
        }
       }
      }
      var $verts_sroa_2_16;
      var $verts_sroa_0_16;
      var $simplified_sroa_2_48;
      var $simplified_sroa_0_37;
      var $maxContours_2_lcssa;
      var $1383 = $x2_0379 + 1 | 0;
      if (($1383 | 0) < ($2 | 0)) {
       var $x2_0379 = $1383;
       var $maxContours_1381 = $maxContours_2_lcssa;
       var $simplified_sroa_0_2 = $simplified_sroa_0_37;
       var $simplified_sroa_2_1 = $simplified_sroa_2_48;
       var $verts_sroa_0_2 = $verts_sroa_0_16;
       var $verts_sroa_2_1 = $verts_sroa_2_16;
      } else {
       var $maxContours_1_lcssa = $maxContours_2_lcssa;
       var $simplified_sroa_0_38 = $simplified_sroa_0_37;
       var $simplified_sroa_2_49 = $simplified_sroa_2_48;
       var $verts_sroa_0_17 = $verts_sroa_0_16;
       var $verts_sroa_2_17 = $verts_sroa_2_16;
       break;
      }
     }
    } else {
     var $maxContours_1_lcssa = $maxContours_0387;
     var $simplified_sroa_0_38 = $simplified_sroa_0_0;
     var $simplified_sroa_2_49 = $simplified_sroa_2_0;
     var $verts_sroa_0_17 = $verts_sroa_0_0;
     var $verts_sroa_2_17 = $verts_sroa_2_0;
    }
    var $verts_sroa_2_17;
    var $verts_sroa_0_17;
    var $simplified_sroa_2_49;
    var $simplified_sroa_0_38;
    var $maxContours_1_lcssa;
    var $1385 = $y1_0385 + 1 | 0;
    if (($1385 | 0) < ($4 | 0)) {
     var $y1_0385 = $1385;
     var $maxContours_0387 = $maxContours_1_lcssa;
     var $simplified_sroa_0_0 = $simplified_sroa_0_38;
     var $simplified_sroa_2_0 = $simplified_sroa_2_49;
     var $verts_sroa_0_0 = $verts_sroa_0_17;
     var $verts_sroa_2_0 = $verts_sroa_2_17;
    } else {
     var $simplified_sroa_0_1 = $simplified_sroa_0_38;
     var $verts_sroa_0_1 = $verts_sroa_0_17;
     label = 1206;
     break L1693;
    }
   }
   if (label == 1470) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$1327 >> 2], tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $simplified_sroa_0_39 = $simplified_sroa_0_35;
    var $verts_sroa_0_18 = $verts_sroa_0_14;
    break;
   } else if (label == 1475) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 5664, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$1353 >> 2], tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $simplified_sroa_0_39 = $simplified_sroa_0_35;
    var $verts_sroa_0_18 = $verts_sroa_0_14;
    break;
   }
  } else {
   var $simplified_sroa_0_1 = $164;
   var $verts_sroa_0_1 = $158;
   label = 1206;
  }
 } while (0);
 do {
  if (label == 1206) {
   var $verts_sroa_0_1;
   var $simplified_sroa_0_1;
   var $182 = HEAP32[$73 >> 2];
   if (($182 | 0) > 0) {
    var $i9_0293 = 0;
    var $1387 = $182;
    while (1) {
     var $1387;
     var $i9_0293;
     var $1388 = HEAP32[$70 >> 2];
     var $1389 = $1388 + ($i9_0293 * 20 & -1) | 0;
     var $1390 = HEAP32[$1389 >> 2];
     var $1391 = $1388 + ($i9_0293 * 20 & -1) + 4 | 0;
     var $1392 = HEAP32[$1391 >> 2];
     L2116 : do {
      if (($1392 | 0) > 0) {
       var $j_011_i = $1392 - 1 | 0;
       var $i_012_i = 0;
       var $area_013_i = 0;
       while (1) {
        var $area_013_i;
        var $i_012_i;
        var $j_011_i;
        var $1396 = $i_012_i << 2;
        var $1398 = $j_011_i << 2;
        var $1403 = Math.imul(HEAP32[$1390 + (($1398 | 2) << 2) >> 2], HEAP32[$1390 + ($1396 << 2) >> 2]) | 0;
        var $1409 = $1403 + $area_013_i - Math.imul(HEAP32[$1390 + (($1396 | 2) << 2) >> 2], HEAP32[$1390 + ($1398 << 2) >> 2]) | 0;
        var $1410 = $i_012_i + 1 | 0;
        if (($1410 | 0) < ($1392 | 0)) {
         var $j_011_i = $i_012_i;
         var $i_012_i = $1410;
         var $area_013_i = $1409;
        } else {
         break;
        }
       }
       if (($1409 + 1 | 0) >= -1) {
        break;
       }
       L2122 : do {
        if (($1387 | 0) > 0) {
         var $1414 = $1388 + ($i9_0293 * 20 & -1) + 16 | 0;
         var $j11_0284 = 0;
         L2124 : while (1) {
          var $j11_0284;
          do {
           if (($i9_0293 | 0) != ($j11_0284 | 0)) {
            var $1418 = $1388 + ($j11_0284 * 20 & -1) + 4 | 0;
            var $1419 = HEAP32[$1418 >> 2];
            if (($1419 | 0) == 0) {
             break;
            }
            if ((HEAP16[$1388 + ($j11_0284 * 20 & -1) + 16 >> 1] | 0) != (HEAP16[$1414 >> 1] | 0)) {
             break;
            }
            var $1427 = $1388 + ($j11_0284 * 20 & -1) | 0;
            var $1428 = HEAP32[$1427 >> 2];
            if (($1419 | 0) <= 0) {
             break;
            }
            var $1430 = $1419 - 1 | 0;
            var $j_011_i258 = $1430;
            var $i_012_i257 = 0;
            var $area_013_i256 = 0;
            while (1) {
             var $area_013_i256;
             var $i_012_i257;
             var $j_011_i258;
             var $1432 = $i_012_i257 << 2;
             var $1434 = $j_011_i258 << 2;
             var $1439 = Math.imul(HEAP32[$1428 + (($1434 | 2) << 2) >> 2], HEAP32[$1428 + ($1432 << 2) >> 2]) | 0;
             var $1445 = $1439 + $area_013_i256 - Math.imul(HEAP32[$1428 + (($1432 | 2) << 2) >> 2], HEAP32[$1428 + ($1434 << 2) >> 2]) | 0;
             var $1446 = $i_012_i257 + 1 | 0;
             if (($1446 | 0) < ($1419 | 0)) {
              var $j_011_i258 = $i_012_i257;
              var $i_012_i257 = $1446;
              var $area_013_i256 = $1445;
             } else {
              break;
             }
            }
            if (($1445 + 2 | 0) >>> 0 >= 3) {
             break L2124;
            }
           }
          } while (0);
          var $1449 = $j11_0284 + 1 | 0;
          if (($1449 | 0) < ($1387 | 0)) {
           var $j11_0284 = $1449;
          } else {
           break L2122;
          }
         }
         if (($j11_0284 | 0) == -1) {
          break;
         } else {
          var $i_038_i = 0;
          var $closestDist_039_i = 268435455;
          var $1455 = -1;
          var $1454 = -1;
         }
         while (1) {
          var $1454;
          var $1455;
          var $closestDist_039_i;
          var $i_038_i;
          var $1456 = $i_038_i + 1 | 0;
          var $1460 = $i_038_i << 2;
          var $1461 = ($1456 | 0) == ($1419 | 0) ? 0 : $1456 << 2;
          var $1462 = $1428 + ($1461 << 2) | 0;
          var $1463 = (($1430 + $i_038_i | 0) % ($1419 | 0) & -1) << 2;
          var $1468 = $1428 + (($1461 | 2) << 2) | 0;
          var $1469 = HEAP32[$1428 + ($1460 << 2) >> 2];
          var $1470 = HEAP32[$1428 + ($1463 << 2) >> 2];
          var $1471 = $1469 - $1470 | 0;
          var $1472 = HEAP32[$1428 + (($1463 | 2) << 2) >> 2];
          var $1473 = HEAP32[$1428 + (($1460 | 2) << 2) >> 2];
          var $1474 = $1473 - $1472 | 0;
          var $j_036_i = 0;
          var $closestDist_137_i = $closestDist_039_i;
          var $1476 = $1455;
          var $1475 = $1454;
          while (1) {
           var $1475;
           var $1476;
           var $closestDist_137_i;
           var $j_036_i;
           var $1477 = $j_036_i << 2;
           var $1480 = HEAP32[$1390 + (($1477 | 2) << 2) >> 2];
           var $1482 = Math.imul($1480 - $1472 | 0, $1471) | 0;
           var $1483 = HEAP32[$1390 + ($1477 << 2) >> 2];
           do {
            if (($1482 - Math.imul($1474, $1483 - $1470 | 0) | 0) < 1) {
             var $1491 = $1480 - $1473 | 0;
             var $1492 = Math.imul(HEAP32[$1462 >> 2] - $1469 | 0, $1491) | 0;
             var $1493 = $1483 - $1469 | 0;
             if (($1492 - Math.imul(HEAP32[$1468 >> 2] - $1473 | 0, $1493) | 0) >= 1) {
              var $closestDist_2_i = $closestDist_137_i;
              var $1506 = $1476;
              var $1505 = $1475;
              break;
             }
             var $1500 = Math.imul($1493, $1493) | 0;
             var $1502 = Math.imul($1491, $1491) + $1500 | 0;
             var $1503 = ($1502 | 0) < ($closestDist_137_i | 0);
             var $closestDist_2_i = $1503 ? $1502 : $closestDist_137_i;
             var $1506 = $1503 ? $j_036_i : $1476;
             var $1505 = $1503 ? $i_038_i : $1475;
            } else {
             var $closestDist_2_i = $closestDist_137_i;
             var $1506 = $1476;
             var $1505 = $1475;
            }
           } while (0);
           var $1505;
           var $1506;
           var $closestDist_2_i;
           var $1507 = $j_036_i + 1 | 0;
           if (($1507 | 0) < ($1392 | 0)) {
            var $j_036_i = $1507;
            var $closestDist_137_i = $closestDist_2_i;
            var $1476 = $1506;
            var $1475 = $1505;
           } else {
            break;
           }
          }
          if (($1456 | 0) < ($1419 | 0)) {
           var $i_038_i = $1456;
           var $closestDist_039_i = $closestDist_2_i;
           var $1455 = $1506;
           var $1454 = $1505;
          } else {
           break;
          }
         }
         if (($1505 | 0) == -1 | ($1506 | 0) == -1) {
          __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 3696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $i9_0293, HEAP32[tempVarArgs + 8 >> 2] = $j11_0284, tempVarArgs));
          STACKTOP = tempVarArgs;
          break L2116;
         }
         var $1514 = _malloc(($1392 + $1419 << 4) + 32 | 0);
         var $1515 = $1514;
         if (($1514 | 0) == 0) {
          __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 2936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $i9_0293, HEAP32[tempVarArgs + 8 >> 2] = $j11_0284, tempVarArgs));
          STACKTOP = tempVarArgs;
          break L2116;
         }
         var $1517 = HEAP32[$1418 >> 2];
         if (($1517 | 0) < 0) {
          var $nv_0_lcssa_i = 0;
         } else {
          var $nv_056_i = 0;
          var $1521 = $1517;
          while (1) {
           var $1521;
           var $nv_056_i;
           var $1522 = $nv_056_i << 2;
           var $1526 = (($nv_056_i + $1505 | 0) % ($1521 | 0) & -1) << 2;
           var $1527 = HEAP32[$1427 >> 2];
           HEAP32[$1515 + ($1522 << 2) >> 2] = HEAP32[$1527 + ($1526 << 2) >> 2];
           HEAP32[$1515 + (($1522 | 1) << 2) >> 2] = HEAP32[$1527 + (($1526 | 1) << 2) >> 2];
           HEAP32[$1515 + (($1522 | 2) << 2) >> 2] = HEAP32[$1527 + (($1526 | 2) << 2) >> 2];
           HEAP32[$1515 + (($1522 | 3) << 2) >> 2] = HEAP32[$1527 + (($1526 | 3) << 2) >> 2];
           var $1539 = $nv_056_i + 1 | 0;
           var $1540 = HEAP32[$1418 >> 2];
           if (($1539 | 0) > ($1540 | 0)) {
            var $nv_0_lcssa_i = $1539;
            break;
           } else {
            var $nv_056_i = $1539;
            var $1521 = $1540;
           }
          }
         }
         var $nv_0_lcssa_i;
         var $1519 = HEAP32[$1391 >> 2];
         if (($1519 | 0) < 0) {
          var $nv_1_lcssa_i = $nv_0_lcssa_i;
         } else {
          var $i1_052_i = 0;
          var $nv_153_i = $nv_0_lcssa_i;
          var $1542 = $1519;
          while (1) {
           var $1542;
           var $nv_153_i;
           var $i1_052_i;
           var $1543 = $nv_153_i << 2;
           var $1547 = (($i1_052_i + $1506 | 0) % ($1542 | 0) & -1) << 2;
           var $1548 = HEAP32[$1389 >> 2];
           HEAP32[$1515 + ($1543 << 2) >> 2] = HEAP32[$1548 + ($1547 << 2) >> 2];
           HEAP32[$1515 + (($1543 | 1) << 2) >> 2] = HEAP32[$1548 + (($1547 | 1) << 2) >> 2];
           HEAP32[$1515 + (($1543 | 2) << 2) >> 2] = HEAP32[$1548 + (($1547 | 2) << 2) >> 2];
           HEAP32[$1515 + (($1543 | 3) << 2) >> 2] = HEAP32[$1548 + (($1547 | 3) << 2) >> 2];
           var $1560 = $nv_153_i + 1 | 0;
           var $1561 = $i1_052_i + 1 | 0;
           var $1562 = HEAP32[$1391 >> 2];
           if (($1561 | 0) > ($1562 | 0)) {
            var $nv_1_lcssa_i = $1560;
            break;
           } else {
            var $i1_052_i = $1561;
            var $nv_153_i = $1560;
            var $1542 = $1562;
           }
          }
         }
         var $nv_1_lcssa_i;
         var $1564 = HEAP32[$1427 >> 2];
         if (($1564 | 0) != 0) {
          _free($1564);
         }
         HEAP32[$1427 >> 2] = $1515;
         HEAP32[$1418 >> 2] = $nv_1_lcssa_i;
         var $1568 = HEAP32[$1389 >> 2];
         if (($1568 | 0) != 0) {
          _free($1568);
         }
         HEAP32[$1389 >> 2] = 0;
         HEAP32[$1391 >> 2] = 0;
         break L2116;
        }
       } while (0);
       __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $i9_0293, tempVarArgs));
       STACKTOP = tempVarArgs;
      }
     } while (0);
     var $1572 = $i9_0293 + 1 | 0;
     var $1573 = HEAP32[$73 >> 2];
     if (($1572 | 0) < ($1573 | 0)) {
      var $i9_0293 = $1572;
      var $1387 = $1573;
     } else {
      break;
     }
    }
   }
   if ((HEAP8[$7] & 1) == 0) {
    var $_0 = 1;
    var $simplified_sroa_0_39 = $simplified_sroa_0_1;
    var $verts_sroa_0_18 = $verts_sroa_0_1;
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 4);
   var $_0 = 1;
   var $simplified_sroa_0_39 = $simplified_sroa_0_1;
   var $verts_sroa_0_18 = $verts_sroa_0_1;
  }
 } while (0);
 var $verts_sroa_0_18;
 var $simplified_sroa_0_39;
 var $_0;
 if (($simplified_sroa_0_39 | 0) != 0) {
  _free($simplified_sroa_0_39);
 }
 if (($verts_sroa_0_18 | 0) != 0) {
  _free($verts_sroa_0_18);
 }
 _free($76);
 var $_2 = $_0;
 var $_2;
 STACKTOP = sp;
 return $_2;
}
function __Z35rcFilterLowHangingWalkableObstaclesP9rcContextiR13rcHeightfield($ctx, $walkableClimb, $solid) {
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 10);
 }
 var $11 = HEAP32[$solid >> 2];
 var $13 = HEAP32[$solid + 4 >> 2];
 do {
  if (($13 | 0) > 0) {
   var $16 = $solid + 40 | 0;
   if (($11 | 0) > 0) {
    var $y_027_us = 0;
   } else {
    break;
   }
   while (1) {
    var $y_027_us;
    var $48 = Math.imul($y_027_us, $11) | 0;
    var $x_024_us = 0;
    while (1) {
     var $x_024_us;
     var $s_019_us = HEAP32[HEAP32[$16 >> 2] + ($x_024_us + $48 << 2) >> 2];
     if (($s_019_us | 0) != 0) {
      var $ps_020_us = 0;
      var $previousWalkable_0_off021_us = 1;
      var $previousArea_022_us = 0;
      var $s_023_us = $s_019_us;
      while (1) {
       var $s_023_us;
       var $previousArea_022_us;
       var $previousWalkable_0_off021_us;
       var $ps_020_us;
       var $24 = $s_023_us;
       var $25 = HEAP32[$24 >> 2];
       var $26 = $25 >>> 0 > 67108863;
       do {
        if ($26 | $previousWalkable_0_off021_us) {
         var $42 = $25;
        } else {
         var $33 = ($25 >>> 13 & 8191) - (HEAP32[$ps_020_us >> 2] >>> 13 & 8191) | 0;
         if (((($33 | 0) < 0 ? -$33 | 0 : $33) | 0) > ($walkableClimb | 0)) {
          var $42 = $25;
          break;
         }
         var $40 = $25 & 67108863 | $previousArea_022_us;
         HEAP32[$24 >> 2] = $40;
         var $42 = $40;
        }
       } while (0);
       var $42;
       var $s_0_us = HEAP32[$s_023_us + 4 >> 2];
       if (($s_0_us | 0) == 0) {
        break;
       } else {
        var $ps_020_us = $24;
        var $previousWalkable_0_off021_us = $26 ^ 1;
        var $previousArea_022_us = $42 & -67108864;
        var $s_023_us = $s_0_us;
       }
      }
     }
     var $46 = $x_024_us + 1 | 0;
     if (($46 | 0) < ($11 | 0)) {
      var $x_024_us = $46;
     } else {
      break;
     }
    }
    var $18 = $y_027_us + 1 | 0;
    if (($18 | 0) < ($13 | 0)) {
     var $y_027_us = $18;
    } else {
     break;
    }
   }
  }
 } while (0);
 if ((HEAP8[$1] & 1) == 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 10);
 return;
}
function __Z18rcFilterLedgeSpansP9rcContextiiR13rcHeightfield($ctx, $walkableHeight, $walkableClimb, $solid) {
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 7);
 }
 var $11 = HEAP32[$solid >> 2];
 var $13 = HEAP32[$solid + 4 >> 2];
 if (($13 | 0) > 0) {
  var $15 = ($11 | 0) > 0;
  var $16 = $solid + 40 | 0;
  var $17 = -$walkableClimb | 0;
  var $y_084 = 0;
  while (1) {
   var $y_084;
   if ($15) {
    var $18 = Math.imul($y_084, $11) | 0;
    var $x_080 = 0;
    while (1) {
     var $x_080;
     var $s_078 = HEAP32[HEAP32[$16 >> 2] + ($x_080 + $18 << 2) >> 2];
     if (($s_078 | 0) != 0) {
      var $s_079 = $s_078;
      while (1) {
       var $s_079;
       var $23 = $s_079;
       var $24 = HEAP32[$23 >> 2];
       do {
        if ($24 >>> 0 < 67108864) {
         var $s_0 = HEAP32[$s_079 + 4 >> 2];
        } else {
         var $28 = $24 >>> 13 & 8191;
         var $30 = HEAP32[$s_079 + 4 >> 2];
         if (($30 | 0) == 0) {
          var $37 = 65535;
         } else {
          var $37 = HEAP32[$30 >> 2] & 8191;
         }
         var $37;
         var $39 = ($28 | 0) > ($17 | 0) ? $28 : $17;
         var $40 = $17 - $28 | 0;
         var $41 = -($28 + $walkableClimb | 0) | 0;
         var $minh_074 = 65535;
         var $asmin_075 = $28;
         var $asmax_076 = $28;
         var $dir_077 = 0;
         while (1) {
          var $dir_077;
          var $asmax_076;
          var $asmin_075;
          var $minh_074;
          var $45 = HEAP32[9712 + ($dir_077 << 2) >> 2] + $x_080 | 0;
          var $48 = HEAP32[9696 + ($dir_077 << 2) >> 2] + $y_084 | 0;
          L2224 : do {
           if (($48 | $45 | 0) > -1 & ($45 | 0) < ($11 | 0) & ($48 | 0) < ($13 | 0)) {
            var $57 = Math.imul($48, $11) + $45 | 0;
            var $60 = HEAP32[HEAP32[$16 >> 2] + ($57 << 2) >> 2];
            if (($60 | 0) == 0) {
             var $67 = 65535;
            } else {
             var $67 = HEAP32[$60 >> 2] & 8191;
            }
            var $67;
            if ((($37 >>> 0 < $67 >>> 0 ? $37 : $67) - $39 | 0) > ($walkableHeight | 0)) {
             var $asmax_1_ph_ph = $asmax_076;
             var $asmin_1_ph_ph = $asmin_075;
             var $minh_2_ph_ph = ($minh_074 | 0) < ($40 | 0) ? $minh_074 : $40;
             var $ns_092 = $60;
            } else {
             var $asmax_1_ph_ph = $asmax_076;
             var $asmin_1_ph_ph = $asmin_075;
             var $minh_2_ph_ph = $minh_074;
             var $ns_092 = $60;
            }
            while (1) {
             var $ns_092;
             var $minh_2_ph_ph;
             var $asmin_1_ph_ph;
             var $asmax_1_ph_ph;
             var $minh_2_ph = $minh_2_ph_ph;
             var $ns_091 = $ns_092;
             while (1) {
              var $ns_091;
              var $minh_2_ph;
              var $ns_0 = $ns_091;
              while (1) {
               var $ns_0;
               if (($ns_0 | 0) == 0) {
                var $asmax_3 = $asmax_1_ph_ph;
                var $asmin_4 = $asmin_1_ph_ph;
                var $minh_4 = $minh_2_ph;
                break L2224;
               }
               var $81 = HEAP32[$ns_0 >> 2] >>> 13 & 8191;
               var $83 = HEAP32[$ns_0 + 4 >> 2];
               if (($83 | 0) == 0) {
                var $90 = 65535;
               } else {
                var $90 = HEAP32[$83 >> 2] & 8191;
               }
               var $90;
               if ((($37 >>> 0 < $90 >>> 0 ? $37 : $90) - ($28 >>> 0 > $81 >>> 0 ? $28 : $81) | 0) > ($walkableHeight | 0)) {
                break;
               } else {
                var $ns_0 = $83;
               }
              }
              var $98 = $81 - $28 | 0;
              var $100 = ($minh_2_ph | 0) < ($98 | 0) ? $minh_2_ph : $98;
              if (((($98 | 0) < 0 ? -$98 | 0 : $98) | 0) > ($walkableClimb | 0)) {
               var $minh_2_ph = $100;
               var $ns_091 = $83;
              } else {
               break;
              }
             }
             var $asmax_1_ph_ph = ($81 | 0) > ($asmax_1_ph_ph | 0) ? $81 : $asmax_1_ph_ph;
             var $asmin_1_ph_ph = ($81 | 0) < ($asmin_1_ph_ph | 0) ? $81 : $asmin_1_ph_ph;
             var $minh_2_ph_ph = $100;
             var $ns_092 = $83;
            }
           } else {
            var $asmax_3 = $asmax_076;
            var $asmin_4 = $asmin_075;
            var $minh_4 = ($minh_074 | 0) < ($41 | 0) ? $minh_074 : $41;
           }
          } while (0);
          var $minh_4;
          var $asmin_4;
          var $asmax_3;
          var $108 = $dir_077 + 1 | 0;
          if (($108 | 0) < 4) {
           var $minh_074 = $minh_4;
           var $asmin_075 = $asmin_4;
           var $asmax_076 = $asmax_3;
           var $dir_077 = $108;
          } else {
           break;
          }
         }
         if (($minh_4 | 0) < ($17 | 0)) {
          var $113 = $24 & 67108863;
          HEAP32[$23 >> 2] = $113;
          var $115 = $113;
         } else {
          var $115 = $24;
         }
         var $115;
         if (($asmax_3 - $asmin_4 | 0) <= ($walkableClimb | 0)) {
          var $s_0 = $30;
          break;
         }
         HEAP32[$23 >> 2] = $115 & 67108863;
         var $s_0 = $30;
        }
       } while (0);
       var $s_0;
       if (($s_0 | 0) == 0) {
        break;
       } else {
        var $s_079 = $s_0;
       }
      }
     }
     var $122 = $x_080 + 1 | 0;
     if (($122 | 0) < ($11 | 0)) {
      var $x_080 = $122;
     } else {
      break;
     }
    }
   }
   var $124 = $y_084 + 1 | 0;
   if (($124 | 0) < ($13 | 0)) {
    var $y_084 = $124;
   } else {
    break;
   }
  }
 }
 if ((HEAP8[$1] & 1) == 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 7);
 return;
}
function __Z30rcFilterWalkableLowHeightSpansP9rcContextiR13rcHeightfield($ctx, $walkableHeight, $solid) {
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 8);
 }
 var $11 = HEAP32[$solid >> 2];
 var $13 = HEAP32[$solid + 4 >> 2];
 do {
  if (($13 | 0) > 0) {
   var $16 = $solid + 40 | 0;
   if (($11 | 0) > 0) {
    var $y_021_us = 0;
   } else {
    break;
   }
   while (1) {
    var $y_021_us;
    var $43 = Math.imul($y_021_us, $11) | 0;
    var $x_018_us = 0;
    while (1) {
     var $x_018_us;
     var $s_016_us = HEAP32[HEAP32[$16 >> 2] + ($x_018_us + $43 << 2) >> 2];
     if (($s_016_us | 0) != 0) {
      var $s_017_us = $s_016_us;
      while (1) {
       var $s_017_us;
       var $24 = $s_017_us;
       var $25 = HEAP32[$24 >> 2];
       var $29 = HEAP32[$s_017_us + 4 >> 2];
       var $30 = ($29 | 0) == 0;
       if ($30) {
        var $36 = 65535;
       } else {
        var $36 = HEAP32[$29 >> 2] & 8191;
       }
       var $36;
       if (($36 - ($25 >>> 13 & 8191) | 0) <= ($walkableHeight | 0)) {
        HEAP32[$24 >> 2] = $25 & 67108863;
       }
       if ($30) {
        break;
       } else {
        var $s_017_us = $29;
       }
      }
     }
     var $41 = $x_018_us + 1 | 0;
     if (($41 | 0) < ($11 | 0)) {
      var $x_018_us = $41;
     } else {
      break;
     }
    }
    var $18 = $y_021_us + 1 | 0;
    if (($18 | 0) < ($13 | 0)) {
     var $y_021_us = $18;
    } else {
     break;
    }
   }
  }
 } while (0);
 if ((HEAP8[$1] & 1) == 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 8);
 return;
}
function __Z15rcBuildPolyMeshP9rcContextR12rcContourSetiR10rcPolyMesh($ctx, $cset, $nvp, $mesh) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $ea18_i = sp;
 var $eb19_i = sp + 8;
 var $ea = sp + 16;
 var $eb = sp + 24;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 11);
 }
 HEAPF32[$mesh + 36 >> 2] = HEAPF32[$cset + 8 >> 2];
 HEAPF32[$mesh + 40 >> 2] = HEAPF32[$cset + 12 >> 2];
 HEAPF32[$mesh + 44 >> 2] = HEAPF32[$cset + 16 >> 2];
 HEAPF32[$mesh + 48 >> 2] = HEAPF32[$cset + 20 >> 2];
 HEAPF32[$mesh + 52 >> 2] = HEAPF32[$cset + 24 >> 2];
 HEAPF32[$mesh + 56 >> 2] = HEAPF32[$cset + 28 >> 2];
 HEAPF32[$mesh + 60 >> 2] = HEAPF32[$cset + 32 >> 2];
 HEAPF32[$mesh + 64 >> 2] = HEAPF32[$cset + 36 >> 2];
 var $36 = $mesh + 68 | 0;
 HEAP32[$36 >> 2] = HEAP32[$cset + 48 >> 2];
 var $37 = $cset + 4 | 0;
 var $38 = HEAP32[$37 >> 2];
 do {
  if (($38 | 0) > 0) {
   var $41 = HEAP32[$cset >> 2];
   var $i_0629 = 0;
   var $maxVertsPerCont_0630 = 0;
   var $maxTris_0631 = 0;
   var $maxVertices_0632 = 0;
   while (1) {
    var $maxVertices_0632;
    var $maxTris_0631;
    var $maxVertsPerCont_0630;
    var $i_0629;
    var $44 = HEAP32[$41 + ($i_0629 * 20 & -1) + 4 >> 2];
    if (($44 | 0) < 3) {
     var $maxVertices_1 = $maxVertices_0632;
     var $maxTris_1 = $maxTris_0631;
     var $maxVertsPerCont_1 = $maxVertsPerCont_0630;
    } else {
     var $maxVertices_1 = $44 + $maxVertices_0632 | 0;
     var $maxTris_1 = $maxTris_0631 - 2 + $44 | 0;
     var $maxVertsPerCont_1 = ($maxVertsPerCont_0630 | 0) > ($44 | 0) ? $maxVertsPerCont_0630 : $44;
    }
    var $maxVertsPerCont_1;
    var $maxTris_1;
    var $maxVertices_1;
    var $53 = $i_0629 + 1 | 0;
    if (($53 | 0) < ($38 | 0)) {
     var $i_0629 = $53;
     var $maxVertsPerCont_0630 = $maxVertsPerCont_1;
     var $maxTris_0631 = $maxTris_1;
     var $maxVertices_0632 = $maxVertices_1;
    } else {
     break;
    }
   }
   if (($maxVertices_1 | 0) <= 65533) {
    var $maxVertices_0_lcssa801 = $maxVertices_1;
    var $maxTris_0_lcssa802 = $maxTris_1;
    var $maxVertsPerCont_0_lcssa803 = $maxVertsPerCont_1;
    break;
   }
   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6480, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertices_1, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $_6 = 0;
   var $_6;
   STACKTOP = sp;
   return $_6;
  } else {
   var $maxVertices_0_lcssa801 = 0;
   var $maxTris_0_lcssa802 = 0;
   var $maxVertsPerCont_0_lcssa803 = 0;
  }
 } while (0);
 var $maxVertsPerCont_0_lcssa803;
 var $maxTris_0_lcssa802;
 var $maxVertices_0_lcssa801;
 var $57 = _malloc($maxVertices_0_lcssa801);
 if (($57 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7688, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertices_0_lcssa801, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_6 = 0;
  var $_6;
  STACKTOP = sp;
  return $_6;
 }
 _memset($57, 0, $maxVertices_0_lcssa801);
 var $65 = $maxVertices_0_lcssa801 * 6 & -1;
 var $66 = _malloc($65);
 var $68 = $mesh | 0;
 HEAP32[$68 >> 2] = $66;
 do {
  if (($66 | 0) == 0) {
   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6312, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertices_0_lcssa801, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $_5 = 0;
  } else {
   var $72 = $maxTris_0_lcssa802 << 1;
   var $73 = $nvp << 1;
   var $74 = Math.imul($73, $72) | 0;
   var $75 = _malloc($74);
   var $77 = $mesh + 4 | 0;
   HEAP32[$77 >> 2] = $75;
   if (($75 | 0) == 0) {
    var $80 = Math.imul($73, $maxTris_0_lcssa802) | 0;
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 5608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $80, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_5 = 0;
    break;
   }
   var $82 = _malloc($72);
   var $84 = $mesh + 8 | 0;
   HEAP32[$84 >> 2] = $82;
   if (($82 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 4360, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxTris_0_lcssa802, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_5 = 0;
    break;
   }
   var $88 = _malloc($maxTris_0_lcssa802);
   var $89 = $mesh + 16 | 0;
   HEAP32[$89 >> 2] = $88;
   if (($88 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 3640, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxTris_0_lcssa802, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_5 = 0;
    break;
   }
   var $93 = $mesh + 20 | 0;
   HEAP32[$93 >> 2] = 0;
   var $94 = $mesh + 24 | 0;
   HEAP32[$94 >> 2] = 0;
   var $95 = $mesh + 32 | 0;
   HEAP32[$95 >> 2] = $nvp;
   HEAP32[$mesh + 28 >> 2] = $maxTris_0_lcssa802;
   _memset(HEAP32[$68 >> 2], 0, $65);
   _memset(HEAP32[$77 >> 2], -1, $74);
   _memset(HEAP32[$84 >> 2], 0, $72);
   _memset(HEAP32[$89 >> 2], 0, $maxTris_0_lcssa802);
   var $104 = $maxVertices_0_lcssa801 << 2;
   var $105 = _malloc($104);
   var $106 = $105;
   if (($105 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 2888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertices_0_lcssa801, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_5 = 0;
    break;
   }
   _memset($105, 0, $104);
   var $114 = _malloc(16384);
   var $115 = $114;
   if (($114 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 1840, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 4096, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_4 = 0;
   } else {
    _memset($114, -1, 16384);
    var $124 = _malloc($maxVertsPerCont_0_lcssa803 << 2);
    var $125 = $124;
    if (($124 | 0) == 0) {
     __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 1184, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertsPerCont_0_lcssa803, tempVarArgs));
     STACKTOP = tempVarArgs;
     var $_3 = 0;
    } else {
     var $134 = _malloc($maxVertsPerCont_0_lcssa803 * 12 & -1);
     var $135 = $134;
     if (($134 | 0) == 0) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $maxVertsPerCont_0_lcssa803 * 3 & -1, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_2 = 0;
     } else {
      var $147 = _malloc(Math.imul(($maxVertsPerCont_0_lcssa803 << 1) + 2 | 0, $nvp) | 0);
      var $148 = $147;
      var $150 = Math.imul($maxVertsPerCont_0_lcssa803, $nvp) | 0;
      if (($147 | 0) == 0) {
       __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 8992, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $150, tempVarArgs));
       STACKTOP = tempVarArgs;
       var $_1 = 0;
      } else {
       L2327 : do {
        if ((HEAP32[$37 >> 2] | 0) > 0) {
         var $159 = $cset | 0;
         var $160 = $150 << 1;
         var $161 = ($nvp | 0) > 3;
         var $162 = ($nvp | 0) > 0;
         var $163 = $148 + ($150 << 1) | 0;
         var $i2_0622 = 0;
         L2329 : while (1) {
          var $i2_0622;
          var $168 = HEAP32[$159 >> 2];
          var $169 = $168 + ($i2_0622 * 20 & -1) + 4 | 0;
          L2331 : do {
           if ((HEAP32[$169 >> 2] | 0) >= 3) {
            var $j_0567 = 0;
            while (1) {
             var $j_0567;
             HEAP32[$125 + ($j_0567 << 2) >> 2] = $j_0567;
             var $173 = $j_0567 + 1 | 0;
             var $174 = HEAP32[$169 >> 2];
             if (($173 | 0) < ($174 | 0)) {
              var $j_0567 = $173;
             } else {
              break;
             }
            }
            var $176 = $168 + ($i2_0622 * 20 & -1) | 0;
            var $178 = __ZL11triangulateiPKiPiS1_($174, HEAP32[$176 >> 2], $125, $135);
            if (($178 | 0) < 1) {
             __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 8176, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $i2_0622, tempVarArgs));
             STACKTOP = tempVarArgs;
             var $ntris_0 = -$178 | 0;
            } else {
             var $ntris_0 = $178;
            }
            var $ntris_0;
            if ((HEAP32[$169 >> 2] | 0) > 0) {
             var $j3_0571 = 0;
             while (1) {
              var $j3_0571;
              var $186 = $j3_0571 << 2;
              var $187 = HEAP32[$176 >> 2];
              var $189 = HEAP32[$187 + ($186 << 2) >> 2];
              var $190 = $189 & 65535;
              var $192 = HEAP32[$187 + (($186 | 1) << 2) >> 2];
              var $193 = $192 & 65535;
              var $195 = HEAP32[$187 + (($186 | 2) << 2) >> 2];
              var $196 = $195 & 65535;
              var $197 = HEAP32[$68 >> 2];
              var $200 = Math.imul($189 & 65535, -1918454973) | 0;
              var $204 = $115 + ((Math.imul($195 & 65535, -887442657) + $200 & 4095) << 2) | 0;
              var $i_035_i = HEAP32[$204 >> 2];
              L2342 : do {
               if (($i_035_i | 0) == -1) {
                label = 1669;
               } else {
                var $206 = $192 & 65535;
                var $i_036_i = $i_035_i;
                while (1) {
                 var $i_036_i;
                 var $208 = $i_036_i * 3 & -1;
                 do {
                  if ((HEAP16[$197 + ($208 << 1) >> 1] | 0) == $190 << 16 >> 16) {
                   var $216 = HEAPU16[$197 + ($208 + 1 << 1) >> 1] - $206 | 0;
                   if (((($216 | 0) < 0 ? -$216 | 0 : $216) | 0) >= 3) {
                    break;
                   }
                   if ((HEAP16[$197 + ($208 + 2 << 1) >> 1] | 0) == $196 << 16 >> 16) {
                    var $_sink = $i_036_i;
                    break L2342;
                   }
                  }
                 } while (0);
                 var $i_0_i = HEAP32[$106 + ($i_036_i << 2) >> 2];
                 if (($i_0_i | 0) == -1) {
                  label = 1669;
                  break;
                 } else {
                  var $i_036_i = $i_0_i;
                 }
                }
               }
              } while (0);
              if (label == 1669) {
               label = 0;
               var $228 = HEAP32[$93 >> 2];
               HEAP32[$93 >> 2] = $228 + 1;
               var $230 = $228 * 3 & -1;
               HEAP16[$197 + ($230 << 1) >> 1] = $190;
               HEAP16[$197 + ($230 + 1 << 1) >> 1] = $193;
               HEAP16[$197 + ($230 + 2 << 1) >> 1] = $196;
               HEAP32[$106 + ($228 << 2) >> 2] = HEAP32[$204 >> 2];
               HEAP32[$204 >> 2] = $228;
               var $_sink = $228;
              }
              var $_sink;
              var $236 = $_sink & 65535;
              HEAP32[$125 + ($j3_0571 << 2) >> 2] = $236;
              if ((HEAP32[$187 + (($186 | 3) << 2) >> 2] & 65536 | 0) != 0) {
               HEAP8[$57 + $236 | 0] = 1;
              }
              var $245 = $j3_0571 + 1 | 0;
              if (($245 | 0) < (HEAP32[$169 >> 2] | 0)) {
               var $j3_0571 = $245;
              } else {
               break;
              }
             }
            }
            _memset($147, -1, $160);
            if (($ntris_0 | 0) > 0) {
             var $npolys_0575 = 0;
             var $j4_0576 = 0;
            } else {
             break;
            }
            while (1) {
             var $j4_0576;
             var $npolys_0575;
             var $249 = $j4_0576 * 3 & -1;
             var $251 = HEAP32[$135 + ($249 << 2) >> 2];
             var $252 = $135 + ($249 + 1 << 2) | 0;
             var $253 = HEAP32[$252 >> 2];
             do {
              if (($251 | 0) == ($253 | 0)) {
               var $npolys_1 = $npolys_0575;
              } else {
               var $256 = $135 + ($249 + 2 << 2) | 0;
               var $257 = HEAP32[$256 >> 2];
               if (($251 | 0) == ($257 | 0) | ($253 | 0) == ($257 | 0)) {
                var $npolys_1 = $npolys_0575;
                break;
               }
               var $263 = HEAP32[$125 + ($251 << 2) >> 2] & 65535;
               var $264 = Math.imul($npolys_0575, $nvp) | 0;
               HEAP16[$148 + ($264 << 1) >> 1] = $263;
               HEAP16[$148 + ($264 + 1 << 1) >> 1] = HEAP32[$125 + (HEAP32[$252 >> 2] << 2) >> 2] & 65535;
               HEAP16[$148 + ($264 + 2 << 1) >> 1] = HEAP32[$125 + (HEAP32[$256 >> 2] << 2) >> 2] & 65535;
               var $npolys_1 = $npolys_0575 + 1 | 0;
              }
             } while (0);
             var $npolys_1;
             var $280 = $j4_0576 + 1 | 0;
             if (($280 | 0) < ($ntris_0 | 0)) {
              var $npolys_0575 = $npolys_1;
              var $j4_0576 = $280;
             } else {
              break;
             }
            }
            if (($npolys_1 | 0) == 0) {
             break;
            }
            L2365 : do {
             if ($161) {
              var $npolys_2 = $npolys_1;
              while (1) {
               var $npolys_2;
               var $284 = $npolys_2 - 1 | 0;
               if (($284 | 0) > 0) {
                var $bestMergeVal_0596 = 0;
                var $bestPa_0597 = 0;
                var $bestPb_0598 = 0;
                var $bestEa_0599 = 0;
                var $bestEb_0600 = 0;
                var $j5_0601 = 0;
               } else {
                var $npolys_3 = $npolys_2;
                break L2365;
               }
               while (1) {
                var $j5_0601;
                var $bestEb_0600;
                var $bestEa_0599;
                var $bestPb_0598;
                var $bestPa_0597;
                var $bestMergeVal_0596;
                var $288 = $148 + (Math.imul($j5_0601, $nvp) << 1) | 0;
                var $289 = $j5_0601 + 1 | 0;
                if (($289 | 0) < ($npolys_2 | 0)) {
                 var $bestMergeVal_1582 = $bestMergeVal_0596;
                 var $bestPa_1583 = $bestPa_0597;
                 var $bestPb_1584 = $bestPb_0598;
                 var $bestEa_1585 = $bestEa_0599;
                 var $bestEb_1586 = $bestEb_0600;
                 var $k_0587 = $289;
                 while (1) {
                  var $k_0587;
                  var $bestEb_1586;
                  var $bestEa_1585;
                  var $bestPb_1584;
                  var $bestPa_1583;
                  var $bestMergeVal_1582;
                  var $292 = $148 + (Math.imul($k_0587, $nvp) << 1) | 0;
                  var $294 = __ZL17getPolyMergeValuePtS_PKtRiS2_i($288, $292, HEAP32[$68 >> 2], $ea, $eb, $nvp);
                  if (($294 | 0) > ($bestMergeVal_1582 | 0)) {
                   var $bestEb_2 = HEAP32[$eb >> 2];
                   var $bestEa_2 = HEAP32[$ea >> 2];
                   var $bestPb_2 = $k_0587;
                   var $bestPa_2 = $j5_0601;
                   var $bestMergeVal_2 = $294;
                  } else {
                   var $bestEb_2 = $bestEb_1586;
                   var $bestEa_2 = $bestEa_1585;
                   var $bestPb_2 = $bestPb_1584;
                   var $bestPa_2 = $bestPa_1583;
                   var $bestMergeVal_2 = $bestMergeVal_1582;
                  }
                  var $bestMergeVal_2;
                  var $bestPa_2;
                  var $bestPb_2;
                  var $bestEa_2;
                  var $bestEb_2;
                  var $300 = $k_0587 + 1 | 0;
                  if (($300 | 0) < ($npolys_2 | 0)) {
                   var $bestMergeVal_1582 = $bestMergeVal_2;
                   var $bestPa_1583 = $bestPa_2;
                   var $bestPb_1584 = $bestPb_2;
                   var $bestEa_1585 = $bestEa_2;
                   var $bestEb_1586 = $bestEb_2;
                   var $k_0587 = $300;
                  } else {
                   var $bestMergeVal_1_lcssa = $bestMergeVal_2;
                   var $bestPa_1_lcssa = $bestPa_2;
                   var $bestPb_1_lcssa = $bestPb_2;
                   var $bestEa_1_lcssa = $bestEa_2;
                   var $bestEb_1_lcssa = $bestEb_2;
                   break;
                  }
                 }
                } else {
                 var $bestMergeVal_1_lcssa = $bestMergeVal_0596;
                 var $bestPa_1_lcssa = $bestPa_0597;
                 var $bestPb_1_lcssa = $bestPb_0598;
                 var $bestEa_1_lcssa = $bestEa_0599;
                 var $bestEb_1_lcssa = $bestEb_0600;
                }
                var $bestEb_1_lcssa;
                var $bestEa_1_lcssa;
                var $bestPb_1_lcssa;
                var $bestPa_1_lcssa;
                var $bestMergeVal_1_lcssa;
                if (($289 | 0) < ($284 | 0)) {
                 var $bestMergeVal_0596 = $bestMergeVal_1_lcssa;
                 var $bestPa_0597 = $bestPa_1_lcssa;
                 var $bestPb_0598 = $bestPb_1_lcssa;
                 var $bestEa_0599 = $bestEa_1_lcssa;
                 var $bestEb_0600 = $bestEb_1_lcssa;
                 var $j5_0601 = $289;
                } else {
                 break;
                }
               }
               if (($bestMergeVal_1_lcssa | 0) <= 0) {
                var $npolys_3 = $npolys_2;
                break L2365;
               }
               var $304 = Math.imul($bestPa_1_lcssa, $nvp) | 0;
               var $305 = $148 + ($304 << 1) | 0;
               var $306 = Math.imul($bestPb_1_lcssa, $nvp) | 0;
               var $307 = $148 + ($306 << 1) | 0;
               var $i_0_i_i297 = 0;
               while (1) {
                var $i_0_i_i297;
                if (($i_0_i_i297 | 0) >= ($nvp | 0)) {
                 var $_0_i_i298 = $nvp;
                 break;
                }
                if ((HEAP16[$148 + ($i_0_i_i297 + $304 << 1) >> 1] | 0) == -1) {
                 var $_0_i_i298 = $i_0_i_i297;
                 break;
                } else {
                 var $i_0_i_i297 = $i_0_i_i297 + 1 | 0;
                }
               }
               var $_0_i_i298;
               var $i_0_i22_i = 0;
               while (1) {
                var $i_0_i22_i;
                if (($i_0_i22_i | 0) >= ($nvp | 0)) {
                 var $_0_i23_i = $nvp;
                 break;
                }
                if ((HEAP16[$148 + ($i_0_i22_i + $306 << 1) >> 1] | 0) == -1) {
                 var $_0_i23_i = $i_0_i22_i;
                 break;
                } else {
                 var $i_0_i22_i = $i_0_i22_i + 1 | 0;
                }
               }
               var $_0_i23_i;
               _memset($163, -1, $73);
               var $322 = $_0_i_i298 - 1 | 0;
               if (($322 | 0) > 0) {
                var $324 = $bestEa_1_lcssa + 1 | 0;
                var $i_028_i = 0;
                while (1) {
                 var $i_028_i;
                 var $333 = $i_028_i + 1 | 0;
                 HEAP16[$148 + ($i_028_i + $150 << 1) >> 1] = HEAP16[$148 + ((($324 + $i_028_i | 0) % ($_0_i_i298 | 0) & -1) + $304 << 1) >> 1];
                 if (($333 | 0) < ($322 | 0)) {
                  var $i_028_i = $333;
                 } else {
                  var $n_0_lcssa_i = $322;
                  break;
                 }
                }
               } else {
                var $n_0_lcssa_i = 0;
               }
               var $n_0_lcssa_i;
               var $325 = $_0_i23_i - 1 | 0;
               if (($325 | 0) > 0) {
                var $327 = $bestEb_1_lcssa + 1 | 0;
                var $n_125_i = $n_0_lcssa_i;
                var $i1_026_i = 0;
                while (1) {
                 var $i1_026_i;
                 var $n_125_i;
                 HEAP16[$148 + ($n_125_i + $150 << 1) >> 1] = HEAP16[$148 + ((($327 + $i1_026_i | 0) % ($_0_i23_i | 0) & -1) + $306 << 1) >> 1];
                 var $343 = $i1_026_i + 1 | 0;
                 if (($343 | 0) < ($325 | 0)) {
                  var $n_125_i = $n_125_i + 1 | 0;
                  var $i1_026_i = $343;
                 } else {
                  break;
                 }
                }
               }
               var $345 = $305;
               _memcpy($345, $163, $73) | 0;
               var $346 = $307;
               var $349 = $148 + (Math.imul($284, $nvp) << 1) | 0;
               _memcpy($346, $349, $73) | 0;
               var $npolys_2 = $284;
              }
             } else {
              var $npolys_3 = $npolys_1;
             }
            } while (0);
            var $npolys_3;
            var $350 = $168 + ($i2_0622 * 20 & -1) + 16 | 0;
            var $351 = $168 + ($i2_0622 * 20 & -1) + 18 | 0;
            var $j7_0 = 0;
            while (1) {
             var $j7_0;
             if (($j7_0 | 0) >= ($npolys_3 | 0)) {
              break L2331;
             }
             var $355 = HEAP32[$94 >> 2];
             var $356 = Math.imul($73, $355) | 0;
             var $357 = HEAP32[$77 >> 2];
             var $358 = Math.imul($j7_0, $nvp) | 0;
             if ($162) {
              var $k8_0613 = 0;
              while (1) {
               var $k8_0613;
               HEAP16[$357 + ($k8_0613 + $356 << 1) >> 1] = HEAP16[$148 + ($k8_0613 + $358 << 1) >> 1];
               var $362 = $k8_0613 + 1 | 0;
               if (($362 | 0) < ($nvp | 0)) {
                var $k8_0613 = $362;
               } else {
                break;
               }
              }
              var $365 = HEAP32[$94 >> 2];
             } else {
              var $365 = $355;
             }
             var $365;
             HEAP16[HEAP32[$84 >> 2] + ($365 << 1) >> 1] = HEAP16[$350 >> 1];
             HEAP8[HEAP32[$89 >> 2] + HEAP32[$94 >> 2] | 0] = HEAP8[$351];
             var $374 = HEAP32[$94 >> 2] + 1 | 0;
             HEAP32[$94 >> 2] = $374;
             if (($374 | 0) > ($maxTris_0_lcssa802 | 0)) {
              break L2329;
             } else {
              var $j7_0 = $j7_0 + 1 | 0;
             }
            }
           }
          } while (0);
          var $378 = $i2_0622 + 1 | 0;
          if (($378 | 0) < (HEAP32[$37 >> 2] | 0)) {
           var $i2_0622 = $378;
          } else {
           label = 1655;
           break L2327;
          }
         }
         __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $374, HEAP32[tempVarArgs + 8 >> 2] = $maxTris_0_lcssa802, tempVarArgs));
         STACKTOP = tempVarArgs;
         var $_0 = 0;
        } else {
         label = 1655;
        }
       } while (0);
       L2408 : do {
        if (label == 1655) {
         var $164 = HEAP32[$93 >> 2];
         L2410 : do {
          if (($164 | 0) > 0) {
           var $i9_0561 = 0;
           var $382 = $164;
           L2412 : while (1) {
            var $382;
            var $i9_0561;
            L2414 : do {
             if ((HEAP8[$57 + $i9_0561 | 0] | 0) == 0) {
              var $i9_1 = $i9_0561;
              var $1064 = $382;
             } else {
              var $387 = $i9_0561 & 65535;
              var $388 = HEAP32[$95 >> 2];
              var $389 = HEAP32[$94 >> 2];
              if (($389 | 0) <= 0) {
               var $i9_1 = $i9_0561;
               var $1064 = $382;
               break;
              }
              var $391 = $388 << 1;
              var $392 = HEAP32[$77 >> 2];
              var $i_0102_i = 0;
              var $numRemainingEdges_0103_i = 0;
              var $numTouchedVerts_0104_i = 0;
              while (1) {
               var $numTouchedVerts_0104_i;
               var $numRemainingEdges_0103_i;
               var $i_0102_i;
               var $394 = Math.imul($i_0102_i, $391) | 0;
               var $i_0_i_i303 = 0;
               while (1) {
                var $i_0_i_i303;
                if (($i_0_i_i303 | 0) >= ($388 | 0)) {
                 var $_0_i_i304 = $388;
                 break;
                }
                if ((HEAP16[$392 + ($i_0_i_i303 + $394 << 1) >> 1] | 0) == -1) {
                 var $_0_i_i304 = $i_0_i_i303;
                 break;
                } else {
                 var $i_0_i_i303 = $i_0_i_i303 + 1 | 0;
                }
               }
               var $_0_i_i304;
               do {
                if (($_0_i_i304 | 0) > 0) {
                 var $numVerts_094_i = 0;
                 var $numRemoved_095_i = 0;
                 var $numTouchedVerts_196_i = $numTouchedVerts_0104_i;
                 while (1) {
                  var $numTouchedVerts_196_i;
                  var $numRemoved_095_i;
                  var $numVerts_094_i;
                  if ((HEAP16[$392 + ($numVerts_094_i + $394 << 1) >> 1] | 0) == $387 << 16 >> 16) {
                   var $numTouchedVerts_2_i = $numTouchedVerts_196_i + 1 | 0;
                   var $numRemoved_1_i = $numRemoved_095_i + 1 | 0;
                  } else {
                   var $numTouchedVerts_2_i = $numTouchedVerts_196_i;
                   var $numRemoved_1_i = $numRemoved_095_i;
                  }
                  var $numRemoved_1_i;
                  var $numTouchedVerts_2_i;
                  var $410 = $numVerts_094_i + 1 | 0;
                  if (($410 | 0) < ($_0_i_i304 | 0)) {
                   var $numVerts_094_i = $410;
                   var $numRemoved_095_i = $numRemoved_1_i;
                   var $numTouchedVerts_196_i = $numTouchedVerts_2_i;
                  } else {
                   break;
                  }
                 }
                 if (($numRemoved_1_i | 0) == 0) {
                  var $numRemainingEdges_1_i = $numRemainingEdges_0103_i;
                  var $numTouchedVerts_1_lcssa115_i = $numTouchedVerts_2_i;
                  break;
                 }
                 var $numRemainingEdges_1_i = $numRemainingEdges_0103_i - 1 + $_0_i_i304 - $numRemoved_1_i | 0;
                 var $numTouchedVerts_1_lcssa115_i = $numTouchedVerts_2_i;
                } else {
                 var $numRemainingEdges_1_i = $numRemainingEdges_0103_i;
                 var $numTouchedVerts_1_lcssa115_i = $numTouchedVerts_0104_i;
                }
               } while (0);
               var $numTouchedVerts_1_lcssa115_i;
               var $numRemainingEdges_1_i;
               var $416 = $i_0102_i + 1 | 0;
               if (($416 | 0) < ($389 | 0)) {
                var $i_0102_i = $416;
                var $numRemainingEdges_0103_i = $numRemainingEdges_1_i;
                var $numTouchedVerts_0104_i = $numTouchedVerts_1_lcssa115_i;
               } else {
                break;
               }
              }
              if (($numRemainingEdges_1_i | 0) < 3) {
               var $i9_1 = $i9_0561;
               var $1064 = $382;
               break;
              }
              var $420 = _malloc($numTouchedVerts_1_lcssa115_i * 24 & -1);
              var $421 = $420;
              L2434 : do {
               if (($420 | 0) == 0) {
                __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 3880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $numTouchedVerts_1_lcssa115_i * 6 & -1, tempVarArgs));
                STACKTOP = tempVarArgs;
               } else {
                var $423 = HEAP32[$94 >> 2];
                do {
                 if (($423 | 0) > 0) {
                  var $nedges_089_i = 0;
                  var $i1_090_i = 0;
                  var $430 = $423;
                  while (1) {
                   var $430;
                   var $i1_090_i;
                   var $nedges_089_i;
                   var $431 = Math.imul($i1_090_i, $391) | 0;
                   var $432 = HEAP32[$77 >> 2];
                   var $i_0_i58_i = 0;
                   while (1) {
                    var $i_0_i58_i;
                    if (($i_0_i58_i | 0) >= ($388 | 0)) {
                     var $_0_i59_i = $388;
                     break;
                    }
                    if ((HEAP16[$432 + ($i_0_i58_i + $431 << 1) >> 1] | 0) == -1) {
                     var $_0_i59_i = $i_0_i58_i;
                     break;
                    } else {
                     var $i_0_i58_i = $i_0_i58_i + 1 | 0;
                    }
                   }
                   var $_0_i59_i;
                   if (($_0_i59_i | 0) > 0) {
                    var $nedges_182_i = $nedges_089_i;
                    var $j4_083_i = 0;
                    var $k_084_i = $_0_i59_i - 1 | 0;
                    while (1) {
                     var $k_084_i;
                     var $j4_083_i;
                     var $nedges_182_i;
                     var $444 = HEAP16[$432 + ($j4_083_i + $431 << 1) >> 1];
                     var $_pre798 = HEAP16[$432 + ($k_084_i + $431 << 1) >> 1];
                     if ($444 << 16 >> 16 == $387 << 16 >> 16) {
                      var $448 = $_pre798;
                      label = 1736;
                     } else {
                      if ($_pre798 << 16 >> 16 == $387 << 16 >> 16) {
                       var $448 = $387;
                       label = 1736;
                      } else {
                       var $nedges_2_i308 = $nedges_182_i;
                      }
                     }
                     do {
                      if (label == 1736) {
                       label = 0;
                       var $448;
                       var $449 = $444 & 65535;
                       var $450 = $448 & 65535;
                       var $451 = $448 << 16 >> 16 == $387 << 16 >> 16;
                       var $_70_i = $451 ? $450 : $449;
                       var $_71_i = $451 ? $449 : $450;
                       if (($nedges_182_i | 0) > 0) {
                        var $exists_0_off076_i = 0;
                        var $m_077_i = 0;
                        while (1) {
                         var $m_077_i;
                         var $exists_0_off076_i;
                         var $453 = $m_077_i * 3 & -1;
                         if ((HEAP32[$421 + ($453 + 1 << 2) >> 2] | 0) == ($_71_i | 0)) {
                          var $458 = $421 + ($453 + 2 << 2) | 0;
                          HEAP32[$458 >> 2] = HEAP32[$458 >> 2] + 1;
                          var $exists_1_off0_i = 1;
                         } else {
                          var $exists_1_off0_i = $exists_0_off076_i;
                         }
                         var $exists_1_off0_i;
                         var $462 = $m_077_i + 1 | 0;
                         if (($462 | 0) < ($nedges_182_i | 0)) {
                          var $exists_0_off076_i = $exists_1_off0_i;
                          var $m_077_i = $462;
                         } else {
                          break;
                         }
                        }
                        if ($exists_1_off0_i) {
                         var $nedges_2_i308 = $nedges_182_i;
                         break;
                        }
                       }
                       var $464 = $nedges_182_i * 3 & -1;
                       HEAP32[$421 + ($464 << 2) >> 2] = $_70_i;
                       HEAP32[$421 + ($464 + 1 << 2) >> 2] = $_71_i;
                       HEAP32[$421 + ($464 + 2 << 2) >> 2] = 1;
                       var $nedges_2_i308 = $nedges_182_i + 1 | 0;
                      }
                     } while (0);
                     var $nedges_2_i308;
                     var $470 = $j4_083_i + 1 | 0;
                     if (($470 | 0) < ($_0_i59_i | 0)) {
                      var $nedges_182_i = $nedges_2_i308;
                      var $k_084_i = $j4_083_i;
                      var $j4_083_i = $470;
                     } else {
                      break;
                     }
                    }
                    var $nedges_1_lcssa_i310 = $nedges_2_i308;
                    var $472 = HEAP32[$94 >> 2];
                   } else {
                    var $nedges_1_lcssa_i310 = $nedges_089_i;
                    var $472 = $430;
                   }
                   var $472;
                   var $nedges_1_lcssa_i310;
                   var $473 = $i1_090_i + 1 | 0;
                   if (($473 | 0) < ($472 | 0)) {
                    var $nedges_089_i = $nedges_1_lcssa_i310;
                    var $i1_090_i = $473;
                    var $430 = $472;
                   } else {
                    break;
                   }
                  }
                  if (($nedges_1_lcssa_i310 | 0) > 0) {
                   var $numOpenEdges_074_i = 0;
                   var $i6_075_i = 0;
                  } else {
                   _free($420);
                   break;
                  }
                  while (1) {
                   var $i6_075_i;
                   var $numOpenEdges_074_i;
                   var $_numOpenEdges_0_i = ((HEAP32[$421 + (($i6_075_i * 3 & -1) + 2 << 2) >> 2] | 0) < 2) + $numOpenEdges_074_i | 0;
                   var $481 = $i6_075_i + 1 | 0;
                   if (($481 | 0) < ($nedges_1_lcssa_i310 | 0)) {
                    var $numOpenEdges_074_i = $_numOpenEdges_0_i;
                    var $i6_075_i = $481;
                   } else {
                    break;
                   }
                  }
                  _free($420);
                  if (($_numOpenEdges_0_i | 0) >= 3) {
                   break L2434;
                  }
                 } else {
                  _free($420);
                 }
                } while (0);
                var $483 = HEAP32[$95 >> 2];
                var $484 = HEAP32[$94 >> 2];
                if (($484 | 0) > 0) {
                 var $486 = $483 << 1;
                 var $487 = HEAP32[$77 >> 2];
                 var $i_0553_i = 0;
                 var $numRemovedVerts_0554_i = 0;
                 while (1) {
                  var $numRemovedVerts_0554_i;
                  var $i_0553_i;
                  var $489 = Math.imul($i_0553_i, $486) | 0;
                  var $i_0_i_i = 0;
                  while (1) {
                   var $i_0_i_i;
                   if (($i_0_i_i | 0) >= ($483 | 0)) {
                    var $_0_i_i = $483;
                    break;
                   }
                   if ((HEAP16[$487 + ($i_0_i_i + $489 << 1) >> 1] | 0) == -1) {
                    var $_0_i_i = $i_0_i_i;
                    break;
                   } else {
                    var $i_0_i_i = $i_0_i_i + 1 | 0;
                   }
                  }
                  var $_0_i_i;
                  if (($_0_i_i | 0) > 0) {
                   var $j_0547_i = 0;
                   var $numRemovedVerts_1548_i = $numRemovedVerts_0554_i;
                   while (1) {
                    var $numRemovedVerts_1548_i;
                    var $j_0547_i;
                    var $_numRemovedVerts_1_i = ((HEAP16[$487 + ($j_0547_i + $489 << 1) >> 1] | 0) == $387 << 16 >> 16) + $numRemovedVerts_1548_i | 0;
                    var $502 = $j_0547_i + 1 | 0;
                    if (($502 | 0) < ($_0_i_i | 0)) {
                     var $j_0547_i = $502;
                     var $numRemovedVerts_1548_i = $_numRemovedVerts_1_i;
                    } else {
                     var $numRemovedVerts_1_lcssa_i = $_numRemovedVerts_1_i;
                     break;
                    }
                   }
                  } else {
                   var $numRemovedVerts_1_lcssa_i = $numRemovedVerts_0554_i;
                  }
                  var $numRemovedVerts_1_lcssa_i;
                  var $504 = $i_0553_i + 1 | 0;
                  if (($504 | 0) < ($484 | 0)) {
                   var $i_0553_i = $504;
                   var $numRemovedVerts_0554_i = $numRemovedVerts_1_lcssa_i;
                  } else {
                   var $numRemovedVerts_0_lcssa_i = $numRemovedVerts_1_lcssa_i;
                   break;
                  }
                 }
                } else {
                 var $numRemovedVerts_0_lcssa_i = 0;
                }
                var $numRemovedVerts_0_lcssa_i;
                var $507 = Math.imul($numRemovedVerts_0_lcssa_i << 2, $483) | 0;
                var $509 = _malloc($507 << 2);
                var $510 = $509;
                if (($509 | 0) == 0) {
                 label = 1757;
                 break L2412;
                }
                var $519 = _malloc($507);
                var $520 = $519;
                if (($519 | 0) == 0) {
                 label = 1760;
                 break L2412;
                }
                var $528 = _malloc($507);
                var $529 = $528;
                if (($528 | 0) == 0) {
                 label = 1763;
                 break L2412;
                }
                var $537 = _malloc($507);
                var $538 = $537;
                if (($537 | 0) == 0) {
                 label = 1768;
                 break L2412;
                }
                var $540 = HEAP32[$94 >> 2];
                if (($540 | 0) > 0) {
                 var $542 = $483 << 1;
                 var $i1_0542_i = 0;
                 var $nedges_0543_i = 0;
                 var $548 = $540;
                 while (1) {
                  var $548;
                  var $nedges_0543_i;
                  var $i1_0542_i;
                  var $549 = Math.imul($i1_0542_i, $542) | 0;
                  var $550 = HEAP32[$77 >> 2];
                  var $551 = $550 + ($549 << 1) | 0;
                  var $i_0_i287_i = 0;
                  while (1) {
                   var $i_0_i287_i;
                   if (($i_0_i287_i | 0) >= ($483 | 0)) {
                    var $_0_i288_i = $483;
                    break;
                   }
                   if ((HEAP16[$550 + ($i_0_i287_i + $549 << 1) >> 1] | 0) == -1) {
                    var $_0_i288_i = $i_0_i287_i;
                    break;
                   } else {
                    var $i_0_i287_i = $i_0_i287_i + 1 | 0;
                   }
                  }
                  var $_0_i288_i;
                  do {
                   if (($_0_i288_i | 0) > 0) {
                    var $j4_0529_i = 0;
                    var $hasRem_0_off0530_i = 0;
                    while (1) {
                     var $hasRem_0_off0530_i;
                     var $j4_0529_i;
                     var $_hasRem_0_off0_i = (HEAP16[$550 + ($j4_0529_i + $549 << 1) >> 1] | 0) == $387 << 16 >> 16 | $hasRem_0_off0530_i;
                     var $563 = $j4_0529_i + 1 | 0;
                     if (($563 | 0) < ($_0_i288_i | 0)) {
                      var $j4_0529_i = $563;
                      var $hasRem_0_off0530_i = $_hasRem_0_off0_i;
                     } else {
                      break;
                     }
                    }
                    if (!$_hasRem_0_off0_i) {
                     var $nedges_3_i = $nedges_0543_i;
                     var $i1_1_i = $i1_0542_i;
                     var $618 = $548;
                     break;
                    }
                    var $k_0534_i = $_0_i288_i - 1 | 0;
                    var $j5_0535_i = 0;
                    var $nedges_1536_i = $nedges_0543_i;
                    while (1) {
                     var $nedges_1536_i;
                     var $j5_0535_i;
                     var $k_0534_i;
                     var $567 = $550 + ($j5_0535_i + $549 << 1) | 0;
                     do {
                      if ((HEAP16[$567 >> 1] | 0) == $387 << 16 >> 16) {
                       var $nedges_2_i = $nedges_1536_i;
                      } else {
                       var $572 = HEAP16[$550 + ($k_0534_i + $549 << 1) >> 1];
                       if ($572 << 16 >> 16 == $387 << 16 >> 16) {
                        var $nedges_2_i = $nedges_1536_i;
                        break;
                       }
                       var $575 = $nedges_1536_i << 2;
                       HEAP32[$510 + ($575 << 2) >> 2] = $572 & 65535;
                       HEAP32[$510 + (($575 | 1) << 2) >> 2] = HEAPU16[$567 >> 1];
                       HEAP32[$510 + (($575 | 2) << 2) >> 2] = HEAPU16[HEAP32[$84 >> 2] + ($i1_0542_i << 1) >> 1];
                       HEAP32[$510 + (($575 | 3) << 2) >> 2] = HEAPU8[HEAP32[$89 >> 2] + $i1_0542_i | 0];
                       var $nedges_2_i = $nedges_1536_i + 1 | 0;
                      }
                     } while (0);
                     var $nedges_2_i;
                     var $593 = $j5_0535_i + 1 | 0;
                     if (($593 | 0) < ($_0_i288_i | 0)) {
                      var $k_0534_i = $j5_0535_i;
                      var $j5_0535_i = $593;
                      var $nedges_1536_i = $nedges_2_i;
                     } else {
                      break;
                     }
                    }
                    var $_pre568_i = HEAP32[$77 >> 2];
                    var $599 = $551;
                    var $600 = $_pre568_i + (Math.imul(HEAP32[$94 >> 2] - 1 | 0, $542) << 1) | 0;
                    _memcpy($599, $600, $542) | 0;
                    _memset($550 + ($549 + $483 << 1) | 0, -1, $542);
                    var $605 = HEAP32[$84 >> 2];
                    HEAP16[$605 + ($i1_0542_i << 1) >> 1] = HEAP16[$605 + (HEAP32[$94 >> 2] - 1 << 1) >> 1];
                    var $611 = HEAP32[$89 >> 2];
                    HEAP8[$611 + $i1_0542_i | 0] = HEAP8[$611 + (HEAP32[$94 >> 2] - 1) | 0];
                    var $616 = HEAP32[$94 >> 2] - 1 | 0;
                    HEAP32[$94 >> 2] = $616;
                    var $nedges_3_i = $nedges_2_i;
                    var $i1_1_i = $i1_0542_i - 1 | 0;
                    var $618 = $616;
                   } else {
                    var $nedges_3_i = $nedges_0543_i;
                    var $i1_1_i = $i1_0542_i;
                    var $618 = $548;
                   }
                  } while (0);
                  var $618;
                  var $i1_1_i;
                  var $nedges_3_i;
                  var $619 = $i1_1_i + 1 | 0;
                  if (($619 | 0) < ($618 | 0)) {
                   var $i1_0542_i = $619;
                   var $nedges_0543_i = $nedges_3_i;
                   var $548 = $618;
                  } else {
                   var $nedges_0_lcssa_i = $nedges_3_i;
                   var $621 = $618;
                   break;
                  }
                 }
                } else {
                 var $nedges_0_lcssa_i = 0;
                 var $621 = $540;
                }
                var $621;
                var $nedges_0_lcssa_i;
                var $622 = $i9_0561 & 65535;
                var $623 = HEAP32[$93 >> 2];
                if (($622 | 0) < ($623 | 0)) {
                 var $i7_0523_i = $622;
                 while (1) {
                  var $i7_0523_i;
                  var $625 = $i7_0523_i + 1 | 0;
                  var $626 = $625 * 3 & -1;
                  var $627 = HEAP32[$68 >> 2];
                  var $630 = $i7_0523_i * 3 & -1;
                  HEAP16[$627 + ($630 << 1) >> 1] = HEAP16[$627 + ($626 << 1) >> 1];
                  var $633 = HEAP32[$68 >> 2];
                  HEAP16[$633 + ($630 + 1 << 1) >> 1] = HEAP16[$633 + ($626 + 1 << 1) >> 1];
                  var $639 = HEAP32[$68 >> 2];
                  HEAP16[$639 + ($630 + 2 << 1) >> 1] = HEAP16[$639 + ($626 + 2 << 1) >> 1];
                  var $644 = HEAP32[$93 >> 2];
                  if (($625 | 0) < ($644 | 0)) {
                   var $i7_0523_i = $625;
                  } else {
                   break;
                  }
                 }
                 var $_lcssa522_i = $644;
                 var $647 = HEAP32[$94 >> 2];
                } else {
                 var $_lcssa522_i = $623;
                 var $647 = $621;
                }
                var $647;
                var $_lcssa522_i;
                HEAP32[$93 >> 2] = $_lcssa522_i - 1;
                if (($647 | 0) > 0) {
                 var $650 = $483 << 1;
                 var $i8_0518_i = 0;
                 var $652 = $647;
                 while (1) {
                  var $652;
                  var $i8_0518_i;
                  var $653 = Math.imul($i8_0518_i, $650) | 0;
                  var $654 = HEAP32[$77 >> 2];
                  var $i_0_i291_i = 0;
                  while (1) {
                   var $i_0_i291_i;
                   if (($i_0_i291_i | 0) >= ($483 | 0)) {
                    var $_0_i292_i = $483;
                    break;
                   }
                   if ((HEAP16[$654 + ($i_0_i291_i + $653 << 1) >> 1] | 0) == -1) {
                    var $_0_i292_i = $i_0_i291_i;
                    break;
                   } else {
                    var $i_0_i291_i = $i_0_i291_i + 1 | 0;
                   }
                  }
                  var $_0_i292_i;
                  if (($_0_i292_i | 0) > 0) {
                   var $j11_0515_i = 0;
                   while (1) {
                    var $j11_0515_i;
                    var $663 = $654 + ($j11_0515_i + $653 << 1) | 0;
                    var $664 = HEAP16[$663 >> 1];
                    if (($664 & 65535) > ($387 & 65535)) {
                     HEAP16[$663 >> 1] = $664 - 1 & 65535;
                    }
                    var $669 = $j11_0515_i + 1 | 0;
                    if (($669 | 0) < ($_0_i292_i | 0)) {
                     var $j11_0515_i = $669;
                    } else {
                     break;
                    }
                   }
                   var $671 = HEAP32[$94 >> 2];
                  } else {
                   var $671 = $652;
                  }
                  var $671;
                  var $672 = $i8_0518_i + 1 | 0;
                  if (($672 | 0) < ($671 | 0)) {
                   var $i8_0518_i = $672;
                   var $652 = $671;
                  } else {
                   break;
                  }
                 }
                }
                if (($nedges_0_lcssa_i | 0) > 0) {
                 var $i12_0512_i = 0;
                 while (1) {
                  var $i12_0512_i;
                  var $674 = $i12_0512_i << 2;
                  var $675 = $510 + ($674 << 2) | 0;
                  var $676 = HEAP32[$675 >> 2];
                  if (($676 | 0) > ($622 | 0)) {
                   HEAP32[$675 >> 2] = $676 - 1;
                  }
                  var $682 = $510 + (($674 | 1) << 2) | 0;
                  var $683 = HEAP32[$682 >> 2];
                  if (($683 | 0) > ($622 | 0)) {
                   HEAP32[$682 >> 2] = $683 - 1;
                  }
                  var $688 = $i12_0512_i + 1 | 0;
                  if (($688 | 0) < ($nedges_0_lcssa_i | 0)) {
                   var $i12_0512_i = $688;
                  } else {
                   break;
                  }
                 }
                }
                do {
                 if (($nedges_0_lcssa_i | 0) == 0) {
                  var $_6_i = 1;
                 } else {
                  HEAP32[$520 >> 2] = HEAP32[$510 >> 2];
                  HEAP32[$529 >> 2] = HEAP32[$509 + 8 >> 2];
                  HEAP32[$538 >> 2] = HEAP32[$509 + 12 >> 2];
                  var $nedges_4_i = $nedges_0_lcssa_i;
                  var $702 = 1;
                  var $701 = 1;
                  var $700 = 1;
                  while (1) {
                   var $700;
                   var $701;
                   var $702;
                   var $nedges_4_i;
                   if (($nedges_4_i | 0) > 0) {
                    var $706 = $700;
                    var $705 = $701;
                    var $704 = $702;
                    var $match_0_off0501_i = 0;
                    var $i13_0502_i = 0;
                    var $nedges_5503_i = $nedges_4_i;
                   } else {
                    var $773 = $700;
                    break;
                   }
                   while (1) {
                    var $nedges_5503_i;
                    var $i13_0502_i;
                    var $match_0_off0501_i;
                    var $704;
                    var $705;
                    var $706;
                    var $707 = $i13_0502_i << 2;
                    var $708 = $510 + ($707 << 2) | 0;
                    var $709 = HEAP32[$708 >> 2];
                    var $711 = $510 + (($707 | 1) << 2) | 0;
                    var $712 = HEAP32[$711 >> 2];
                    var $714 = $510 + (($707 | 2) << 2) | 0;
                    var $715 = HEAP32[$714 >> 2];
                    var $717 = $510 + (($707 | 3) << 2) | 0;
                    var $718 = HEAP32[$717 >> 2];
                    do {
                     if ((HEAP32[$520 >> 2] | 0) == ($712 | 0)) {
                      if (($706 | 0) > 0) {
                       var $i_09_i_i = $706;
                       while (1) {
                        var $i_09_i_i;
                        var $722 = $i_09_i_i - 1 | 0;
                        HEAP32[$520 + ($i_09_i_i << 2) >> 2] = HEAP32[$520 + ($722 << 2) >> 2];
                        if (($722 | 0) > 0) {
                         var $i_09_i_i = $722;
                        } else {
                         break;
                        }
                       }
                      }
                      HEAP32[$520 >> 2] = $709;
                      if (($705 | 0) > 0) {
                       var $i_09_i304_i = $705;
                       while (1) {
                        var $i_09_i304_i;
                        var $728 = $i_09_i304_i - 1 | 0;
                        HEAP32[$529 + ($i_09_i304_i << 2) >> 2] = HEAP32[$529 + ($728 << 2) >> 2];
                        if (($728 | 0) > 0) {
                         var $i_09_i304_i = $728;
                        } else {
                         break;
                        }
                       }
                      }
                      HEAP32[$529 >> 2] = $715;
                      if (($704 | 0) > 0) {
                       var $i_09_i308_i = $704;
                       while (1) {
                        var $i_09_i308_i;
                        var $734 = $i_09_i308_i - 1 | 0;
                        HEAP32[$538 + ($i_09_i308_i << 2) >> 2] = HEAP32[$538 + ($734 << 2) >> 2];
                        if (($734 | 0) > 0) {
                         var $i_09_i308_i = $734;
                        } else {
                         break;
                        }
                       }
                      }
                      HEAP32[$538 >> 2] = $718;
                      label = 1816;
                     } else {
                      if ((HEAP32[$520 + ($706 - 1 << 2) >> 2] | 0) != ($709 | 0)) {
                       var $nedges_6_i = $nedges_5503_i;
                       var $i13_1_i = $i13_0502_i;
                       var $match_1_off0_i = $match_0_off0501_i;
                       var $769 = $704;
                       var $768 = $705;
                       var $767 = $706;
                       break;
                      }
                      HEAP32[$520 + ($706 << 2) >> 2] = $712;
                      HEAP32[$529 + ($705 << 2) >> 2] = $715;
                      HEAP32[$538 + ($704 << 2) >> 2] = $718;
                      label = 1816;
                     }
                    } while (0);
                    if (label == 1816) {
                     label = 0;
                     var $751 = $nedges_5503_i << 2;
                     HEAP32[$708 >> 2] = HEAP32[$510 + ($751 - 4 << 2) >> 2];
                     HEAP32[$711 >> 2] = HEAP32[$510 + ($751 - 3 << 2) >> 2];
                     HEAP32[$714 >> 2] = HEAP32[$510 + ($751 - 2 << 2) >> 2];
                     HEAP32[$717 >> 2] = HEAP32[$510 + ($751 - 1 << 2) >> 2];
                     var $nedges_6_i = $nedges_5503_i - 1 | 0;
                     var $i13_1_i = $i13_0502_i - 1 | 0;
                     var $match_1_off0_i = 1;
                     var $769 = $704 + 1 | 0;
                     var $768 = $705 + 1 | 0;
                     var $767 = $706 + 1 | 0;
                    }
                    var $767;
                    var $768;
                    var $769;
                    var $match_1_off0_i;
                    var $i13_1_i;
                    var $nedges_6_i;
                    var $770 = $i13_1_i + 1 | 0;
                    if (($770 | 0) < ($nedges_6_i | 0)) {
                     var $706 = $767;
                     var $705 = $768;
                     var $704 = $769;
                     var $match_0_off0501_i = $match_1_off0_i;
                     var $i13_0502_i = $770;
                     var $nedges_5503_i = $nedges_6_i;
                    } else {
                     break;
                    }
                   }
                   if ($match_1_off0_i) {
                    var $nedges_4_i = $nedges_6_i;
                    var $702 = $769;
                    var $701 = $768;
                    var $700 = $767;
                   } else {
                    var $773 = $767;
                    break;
                   }
                  }
                  var $773;
                  var $775 = _malloc($773 * 12 & -1);
                  var $776 = $775;
                  if (($775 | 0) == 0) {
                   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4720, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $773 * 3 & -1, tempVarArgs));
                   STACKTOP = tempVarArgs;
                   var $_6_i = 0;
                   break;
                  }
                  var $785 = _malloc($773 << 4);
                  var $786 = $785;
                  var $788 = $773 << 2;
                  if (($785 | 0) == 0) {
                   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $788, tempVarArgs));
                   STACKTOP = tempVarArgs;
                   var $_5_i = 0;
                  } else {
                   var $794 = _malloc($788);
                   var $795 = $794;
                   if (($773 | 0) > 0) {
                    var $i14_0493_i = 0;
                    while (1) {
                     var $i14_0493_i;
                     var $803 = HEAP32[$520 + ($i14_0493_i << 2) >> 2] * 3 & -1;
                     var $808 = $i14_0493_i << 2;
                     HEAP32[$786 + ($808 << 2) >> 2] = HEAPU16[HEAP32[$68 >> 2] + ($803 << 1) >> 1];
                     HEAP32[$786 + (($808 | 1) << 2) >> 2] = HEAPU16[HEAP32[$68 >> 2] + ($803 + 1 << 1) >> 1];
                     HEAP32[$786 + (($808 | 2) << 2) >> 2] = HEAPU16[HEAP32[$68 >> 2] + ($803 + 2 << 1) >> 1];
                     HEAP32[$786 + (($808 | 3) << 2) >> 2] = 0;
                     HEAP32[$795 + ($i14_0493_i << 2) >> 2] = $i14_0493_i;
                     var $827 = $i14_0493_i + 1 | 0;
                     if (($827 | 0) < ($773 | 0)) {
                      var $i14_0493_i = $827;
                     } else {
                      break;
                     }
                    }
                   }
                   var $829 = __ZL11triangulateiPKiPiS1_($773, $786, $795, $776);
                   if (($829 | 0) < 0) {
                    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4520, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
                    STACKTOP = tempVarArgs;
                    var $ntris_0_i = -$829 | 0;
                   } else {
                    var $ntris_0_i = $829;
                   }
                   var $ntris_0_i;
                   var $834 = $ntris_0_i + 1 | 0;
                   var $835 = $483 << 1;
                   var $837 = _malloc(Math.imul($834, $835) | 0);
                   var $838 = $837;
                   if (($837 | 0) == 0) {
                    var $841 = Math.imul($834, $483) | 0;
                    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 4312, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $841, tempVarArgs));
                    STACKTOP = tempVarArgs;
                    var $_2_i45 = 0;
                   } else {
                    var $847 = _malloc($ntris_0_i << 1);
                    var $848 = $847;
                    if (($847 | 0) == 0) {
                     __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 4152, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $ntris_0_i, tempVarArgs));
                     STACKTOP = tempVarArgs;
                     var $_2_i = 0;
                    } else {
                     var $861 = _malloc($ntris_0_i);
                     var $862 = Math.imul($ntris_0_i, $483) | 0;
                     var $863 = $838 + ($862 << 1) | 0;
                     _memset($837, -1, $862 << 1);
                     L2586 : do {
                      if (($ntris_0_i | 0) > 0) {
                       var $npolys_0487_i = 0;
                       var $j15_0488_i = 0;
                       while (1) {
                        var $j15_0488_i;
                        var $npolys_0487_i;
                        var $866 = $j15_0488_i * 3 & -1;
                        var $867 = $776 + ($866 << 2) | 0;
                        var $868 = HEAP32[$867 >> 2];
                        var $869 = $776 + ($866 + 1 << 2) | 0;
                        var $870 = HEAP32[$869 >> 2];
                        do {
                         if (($868 | 0) == ($870 | 0)) {
                          var $npolys_1_i = $npolys_0487_i;
                         } else {
                          var $873 = $776 + ($866 + 2 << 2) | 0;
                          var $874 = HEAP32[$873 >> 2];
                          if (($868 | 0) == ($874 | 0) | ($870 | 0) == ($874 | 0)) {
                           var $npolys_1_i = $npolys_0487_i;
                           break;
                          }
                          var $880 = HEAP32[$520 + ($868 << 2) >> 2] & 65535;
                          var $881 = Math.imul($npolys_0487_i, $483) | 0;
                          HEAP16[$838 + ($881 << 1) >> 1] = $880;
                          HEAP16[$838 + ($881 + 1 << 1) >> 1] = HEAP32[$520 + (HEAP32[$869 >> 2] << 2) >> 2] & 65535;
                          HEAP16[$838 + ($881 + 2 << 1) >> 1] = HEAP32[$520 + (HEAP32[$873 >> 2] << 2) >> 2] & 65535;
                          HEAP16[$848 + ($npolys_0487_i << 1) >> 1] = HEAP32[$529 + (HEAP32[$867 >> 2] << 2) >> 2] & 65535;
                          HEAP8[$861 + $npolys_0487_i | 0] = HEAP32[$538 + (HEAP32[$867 >> 2] << 2) >> 2] & 255;
                          var $npolys_1_i = $npolys_0487_i + 1 | 0;
                         }
                        } while (0);
                        var $npolys_1_i;
                        var $907 = $j15_0488_i + 1 | 0;
                        if (($907 | 0) < ($ntris_0_i | 0)) {
                         var $npolys_0487_i = $npolys_1_i;
                         var $j15_0488_i = $907;
                        } else {
                         break;
                        }
                       }
                       if (($npolys_1_i | 0) == 0) {
                        var $_0_i = 1;
                        break;
                       }
                       L2595 : do {
                        if (($483 | 0) > 3) {
                         var $912 = $863;
                         var $913 = $npolys_1_i - 1 | 0;
                         if (($913 | 0) > 0) {
                          var $npolys_2_i389 = $npolys_1_i;
                          var $915 = $913;
                         } else {
                          var $npolys_3_i = $npolys_1_i;
                          break;
                         }
                         while (1) {
                          var $915;
                          var $npolys_2_i389;
                          var $bestMergeVal_0471_i = 0;
                          var $bestPa_0472_i = 0;
                          var $bestPb_0473_i = 0;
                          var $bestEa_0474_i = 0;
                          var $bestEb_0475_i = 0;
                          var $j16_0476_i = 0;
                          while (1) {
                           var $j16_0476_i;
                           var $bestEb_0475_i;
                           var $bestEa_0474_i;
                           var $bestPb_0473_i;
                           var $bestPa_0472_i;
                           var $bestMergeVal_0471_i;
                           var $918 = $838 + (Math.imul($j16_0476_i, $483) << 1) | 0;
                           var $919 = $j16_0476_i + 1 | 0;
                           if (($919 | 0) < ($npolys_2_i389 | 0)) {
                            var $bestMergeVal_1458_i = $bestMergeVal_0471_i;
                            var $bestPa_1459_i = $bestPa_0472_i;
                            var $bestPb_1460_i = $bestPb_0473_i;
                            var $bestEa_1461_i = $bestEa_0474_i;
                            var $bestEb_1462_i = $bestEb_0475_i;
                            var $k17_0463_i = $919;
                            while (1) {
                             var $k17_0463_i;
                             var $bestEb_1462_i;
                             var $bestEa_1461_i;
                             var $bestPb_1460_i;
                             var $bestPa_1459_i;
                             var $bestMergeVal_1458_i;
                             var $922 = $838 + (Math.imul($k17_0463_i, $483) << 1) | 0;
                             var $924 = __ZL17getPolyMergeValuePtS_PKtRiS2_i($918, $922, HEAP32[$68 >> 2], $ea18_i, $eb19_i, $483);
                             if (($924 | 0) > ($bestMergeVal_1458_i | 0)) {
                              var $bestEb_2_i = HEAP32[$eb19_i >> 2];
                              var $bestEa_2_i = HEAP32[$ea18_i >> 2];
                              var $bestPb_2_i = $k17_0463_i;
                              var $bestPa_2_i = $j16_0476_i;
                              var $bestMergeVal_2_i = $924;
                             } else {
                              var $bestEb_2_i = $bestEb_1462_i;
                              var $bestEa_2_i = $bestEa_1461_i;
                              var $bestPb_2_i = $bestPb_1460_i;
                              var $bestPa_2_i = $bestPa_1459_i;
                              var $bestMergeVal_2_i = $bestMergeVal_1458_i;
                             }
                             var $bestMergeVal_2_i;
                             var $bestPa_2_i;
                             var $bestPb_2_i;
                             var $bestEa_2_i;
                             var $bestEb_2_i;
                             var $930 = $k17_0463_i + 1 | 0;
                             if (($930 | 0) < ($npolys_2_i389 | 0)) {
                              var $bestMergeVal_1458_i = $bestMergeVal_2_i;
                              var $bestPa_1459_i = $bestPa_2_i;
                              var $bestPb_1460_i = $bestPb_2_i;
                              var $bestEa_1461_i = $bestEa_2_i;
                              var $bestEb_1462_i = $bestEb_2_i;
                              var $k17_0463_i = $930;
                             } else {
                              var $bestMergeVal_1_lcssa_i = $bestMergeVal_2_i;
                              var $bestPa_1_lcssa_i = $bestPa_2_i;
                              var $bestPb_1_lcssa_i = $bestPb_2_i;
                              var $bestEa_1_lcssa_i = $bestEa_2_i;
                              var $bestEb_1_lcssa_i = $bestEb_2_i;
                              break;
                             }
                            }
                           } else {
                            var $bestMergeVal_1_lcssa_i = $bestMergeVal_0471_i;
                            var $bestPa_1_lcssa_i = $bestPa_0472_i;
                            var $bestPb_1_lcssa_i = $bestPb_0473_i;
                            var $bestEa_1_lcssa_i = $bestEa_0474_i;
                            var $bestEb_1_lcssa_i = $bestEb_0475_i;
                           }
                           var $bestEb_1_lcssa_i;
                           var $bestEa_1_lcssa_i;
                           var $bestPb_1_lcssa_i;
                           var $bestPa_1_lcssa_i;
                           var $bestMergeVal_1_lcssa_i;
                           if (($919 | 0) < ($915 | 0)) {
                            var $bestMergeVal_0471_i = $bestMergeVal_1_lcssa_i;
                            var $bestPa_0472_i = $bestPa_1_lcssa_i;
                            var $bestPb_0473_i = $bestPb_1_lcssa_i;
                            var $bestEa_0474_i = $bestEa_1_lcssa_i;
                            var $bestEb_0475_i = $bestEb_1_lcssa_i;
                            var $j16_0476_i = $919;
                           } else {
                            break;
                           }
                          }
                          if (($bestMergeVal_1_lcssa_i | 0) <= 0) {
                           var $npolys_3_i = $npolys_2_i389;
                           break L2595;
                          }
                          var $934 = Math.imul($bestPa_1_lcssa_i, $483) | 0;
                          var $935 = $838 + ($934 << 1) | 0;
                          var $936 = Math.imul($bestPb_1_lcssa_i, $483) | 0;
                          var $937 = $838 + ($936 << 1) | 0;
                          var $i_0_i_i_i = 0;
                          while (1) {
                           var $i_0_i_i_i;
                           if (($i_0_i_i_i | 0) >= ($483 | 0)) {
                            var $_0_i_i_i = $483;
                            break;
                           }
                           if ((HEAP16[$838 + ($i_0_i_i_i + $934 << 1) >> 1] | 0) == -1) {
                            var $_0_i_i_i = $i_0_i_i_i;
                            break;
                           } else {
                            var $i_0_i_i_i = $i_0_i_i_i + 1 | 0;
                           }
                          }
                          var $_0_i_i_i;
                          var $i_0_i22_i_i = 0;
                          while (1) {
                           var $i_0_i22_i_i;
                           if (($i_0_i22_i_i | 0) >= ($483 | 0)) {
                            var $_0_i23_i_i = $483;
                            break;
                           }
                           if ((HEAP16[$838 + ($i_0_i22_i_i + $936 << 1) >> 1] | 0) == -1) {
                            var $_0_i23_i_i = $i_0_i22_i_i;
                            break;
                           } else {
                            var $i_0_i22_i_i = $i_0_i22_i_i + 1 | 0;
                           }
                          }
                          var $_0_i23_i_i;
                          _memset($912, -1, $835);
                          var $952 = $_0_i_i_i - 1 | 0;
                          if (($952 | 0) > 0) {
                           var $954 = $bestEa_1_lcssa_i + 1 | 0;
                           var $i_028_i_i = 0;
                           while (1) {
                            var $i_028_i_i;
                            var $963 = $i_028_i_i + 1 | 0;
                            HEAP16[$838 + ($i_028_i_i + $862 << 1) >> 1] = HEAP16[$838 + ((($954 + $i_028_i_i | 0) % ($_0_i_i_i | 0) & -1) + $934 << 1) >> 1];
                            if (($963 | 0) < ($952 | 0)) {
                             var $i_028_i_i = $963;
                            } else {
                             var $n_0_lcssa_i_i = $952;
                             break;
                            }
                           }
                          } else {
                           var $n_0_lcssa_i_i = 0;
                          }
                          var $n_0_lcssa_i_i;
                          var $955 = $_0_i23_i_i - 1 | 0;
                          if (($955 | 0) > 0) {
                           var $957 = $bestEb_1_lcssa_i + 1 | 0;
                           var $n_125_i_i = $n_0_lcssa_i_i;
                           var $i1_026_i_i = 0;
                           while (1) {
                            var $i1_026_i_i;
                            var $n_125_i_i;
                            HEAP16[$838 + ($n_125_i_i + $862 << 1) >> 1] = HEAP16[$838 + ((($957 + $i1_026_i_i | 0) % ($_0_i23_i_i | 0) & -1) + $936 << 1) >> 1];
                            var $973 = $i1_026_i_i + 1 | 0;
                            if (($973 | 0) < ($955 | 0)) {
                             var $n_125_i_i = $n_125_i_i + 1 | 0;
                             var $i1_026_i_i = $973;
                            } else {
                             break;
                            }
                           }
                          }
                          var $975 = $935;
                          _memcpy($975, $912, $835) | 0;
                          var $976 = $937;
                          var $979 = $838 + (Math.imul($915, $483) << 1) | 0;
                          _memcpy($976, $979, $835) | 0;
                          HEAP16[$848 + ($bestPb_1_lcssa_i << 1) >> 1] = HEAP16[$848 + ($915 << 1) >> 1];
                          HEAP8[$861 + $bestPb_1_lcssa_i | 0] = HEAP8[$861 + $915 | 0];
                          var $986 = $915 - 1 | 0;
                          if (($986 | 0) > 0) {
                           var $npolys_2_i389 = $915;
                           var $915 = $986;
                          } else {
                           var $npolys_3_i = $915;
                           break;
                          }
                         }
                        } else {
                         var $npolys_3_i = $npolys_1_i;
                        }
                       } while (0);
                       var $npolys_3_i;
                       var $988 = $483 << 2;
                       if (($483 | 0) > 0) {
                        var $i20_0_us_i = 0;
                        while (1) {
                         var $i20_0_us_i;
                         if (($i20_0_us_i | 0) >= ($npolys_3_i | 0)) {
                          var $_0_i = 1;
                          break L2586;
                         }
                         var $992 = HEAP32[$94 >> 2];
                         if (($992 | 0) >= ($maxTris_0_lcssa802 | 0)) {
                          var $_0_i = 1;
                          break L2586;
                         }
                         var $1016 = Math.imul($992, $835) | 0;
                         var $1017 = HEAP32[$77 >> 2];
                         _memset($1017 + ($1016 << 1) | 0, -1, $988);
                         var $1020 = Math.imul($i20_0_us_i, $483) | 0;
                         var $j22_0456_us_i = 0;
                         while (1) {
                          var $j22_0456_us_i;
                          HEAP16[$1017 + ($j22_0456_us_i + $1016 << 1) >> 1] = HEAP16[$838 + ($j22_0456_us_i + $1020 << 1) >> 1];
                          var $1014 = $j22_0456_us_i + 1 | 0;
                          if (($1014 | 0) < ($483 | 0)) {
                           var $j22_0456_us_i = $1014;
                          } else {
                           break;
                          }
                         }
                         HEAP16[HEAP32[$84 >> 2] + (HEAP32[$94 >> 2] << 1) >> 1] = HEAP16[$848 + ($i20_0_us_i << 1) >> 1];
                         HEAP8[HEAP32[$89 >> 2] + HEAP32[$94 >> 2] | 0] = HEAP8[$861 + $i20_0_us_i | 0];
                         var $1006 = HEAP32[$94 >> 2] + 1 | 0;
                         HEAP32[$94 >> 2] = $1006;
                         if (($1006 | 0) > ($maxTris_0_lcssa802 | 0)) {
                          var $_lcssa_i = $1006;
                          break;
                         } else {
                          var $i20_0_us_i = $i20_0_us_i + 1 | 0;
                         }
                        }
                       } else {
                        var $i20_0_i = 0;
                        while (1) {
                         var $i20_0_i;
                         if (($i20_0_i | 0) >= ($npolys_3_i | 0)) {
                          var $_0_i = 1;
                          break L2586;
                         }
                         var $1023 = HEAP32[$94 >> 2];
                         if (($1023 | 0) >= ($maxTris_0_lcssa802 | 0)) {
                          var $_0_i = 1;
                          break L2586;
                         }
                         var $1026 = Math.imul($1023, $835) | 0;
                         _memset(HEAP32[$77 >> 2] + ($1026 << 1) | 0, -1, $988);
                         HEAP16[HEAP32[$84 >> 2] + (HEAP32[$94 >> 2] << 1) >> 1] = HEAP16[$848 + ($i20_0_i << 1) >> 1];
                         HEAP8[HEAP32[$89 >> 2] + HEAP32[$94 >> 2] | 0] = HEAP8[$861 + $i20_0_i | 0];
                         var $1041 = HEAP32[$94 >> 2] + 1 | 0;
                         HEAP32[$94 >> 2] = $1041;
                         if (($1041 | 0) > ($maxTris_0_lcssa802 | 0)) {
                          var $_lcssa_i = $1041;
                          break;
                         } else {
                          var $i20_0_i = $i20_0_i + 1 | 0;
                         }
                        }
                       }
                       var $_lcssa_i;
                       __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 3968, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $_lcssa_i, HEAP32[tempVarArgs + 8 >> 2] = $maxTris_0_lcssa802, tempVarArgs));
                       STACKTOP = tempVarArgs;
                       var $_0_i = 0;
                      } else {
                       var $_0_i = 1;
                      }
                     } while (0);
                     var $_0_i;
                     if (($861 | 0) != 0) {
                      _free($861);
                     }
                     _free($847);
                     var $_2_i = $_0_i;
                    }
                    var $_2_i;
                    _free($837);
                    var $_2_i45 = $_2_i;
                   }
                   var $_2_i45;
                   if (($794 | 0) != 0) {
                    _free($794);
                   }
                   _free($785);
                   var $_5_i = $_2_i45;
                  }
                  var $_5_i;
                  _free($775);
                  var $_6_i = $_5_i;
                 }
                } while (0);
                var $_6_i;
                if (($537 | 0) != 0) {
                 _free($537);
                }
                _free($528);
                _free($519);
                _free($509);
                if (!$_6_i) {
                 break L2412;
                }
                var $1054 = HEAP32[$93 >> 2];
                if (($i9_0561 | 0) < ($1054 | 0)) {
                 var $j10_0395 = $i9_0561;
                 while (1) {
                  var $j10_0395;
                  var $1056 = $j10_0395 + 1 | 0;
                  HEAP8[$57 + $j10_0395 | 0] = HEAP8[$57 + $1056 | 0];
                  var $1060 = HEAP32[$93 >> 2];
                  if (($1056 | 0) < ($1060 | 0)) {
                   var $j10_0395 = $1056;
                  } else {
                   var $1062 = $1060;
                   break;
                  }
                 }
                } else {
                 var $1062 = $1054;
                }
                var $1062;
                var $i9_1 = $i9_0561 - 1 | 0;
                var $1064 = $1062;
                break L2414;
               }
              } while (0);
              var $i9_1 = $i9_0561;
              var $1064 = HEAP32[$93 >> 2];
             }
            } while (0);
            var $1064;
            var $i9_1;
            var $1065 = $i9_1 + 1 | 0;
            if (($1065 | 0) < ($1064 | 0)) {
             var $i9_0561 = $1065;
             var $382 = $1064;
            } else {
             var $_lcssa424 = $1064;
             break L2410;
            }
           }
           if (label == 1757) {
            var $514 = Math.imul($483 << 2, $numRemovedVerts_0_lcssa_i) | 0;
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 5320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $514, tempVarArgs));
            STACKTOP = tempVarArgs;
           } else if (label == 1760) {
            var $523 = Math.imul($numRemovedVerts_0_lcssa_i, $483) | 0;
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 5144, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $523, tempVarArgs));
            STACKTOP = tempVarArgs;
            _free($509);
           } else if (label == 1763) {
            var $532 = Math.imul($numRemovedVerts_0_lcssa_i, $483) | 0;
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4968, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $532, tempVarArgs));
            STACKTOP = tempVarArgs;
            _free($519);
            _free($509);
           } else if (label == 1768) {
            var $544 = Math.imul($numRemovedVerts_0_lcssa_i, $483) | 0;
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 4824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $544, tempVarArgs));
            STACKTOP = tempVarArgs;
            _free($528);
            _free($519);
            _free($509);
           }
           __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7328, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $i9_0561, tempVarArgs));
           STACKTOP = tempVarArgs;
           var $_0 = 0;
           break L2408;
          } else {
           var $_lcssa424 = $164;
          }
         } while (0);
         var $_lcssa424;
         var $1067 = HEAP32[$77 >> 2];
         var $1068 = HEAP32[$94 >> 2];
         var $1069 = Math.imul($1068, $nvp) | 0;
         var $1072 = _malloc($1069 + $_lcssa424 << 1);
         var $1073 = $1072;
         do {
          if (($1072 | 0) != 0) {
           var $1077 = _malloc($1069 * 12 & -1);
           var $1078 = $1077;
           if (($1077 | 0) == 0) {
            _free($1072);
            break;
           }
           if (($_lcssa424 | 0) > 0) {
            _memset($1072, -1, $_lcssa424 << 1);
           }
           do {
            if (($1068 | 0) > 0) {
             var $i1_0122_i = 0;
             var $edgeCount_0123_i = 0;
             while (1) {
              var $edgeCount_0123_i;
              var $i1_0122_i;
              var $1122 = Math.imul($73, $i1_0122_i) | 0;
              var $1123 = $1067 + ($1122 << 1) | 0;
              var $1124 = $i1_0122_i & 65535;
              var $edgeCount_1_ph_i = $edgeCount_0123_i;
              var $j_0_ph_i = 0;
              L2686 : while (1) {
               var $j_0_ph_i;
               var $edgeCount_1_ph_i;
               var $j_0_i = $j_0_ph_i;
               while (1) {
                var $j_0_i;
                if (($j_0_i | 0) >= ($nvp | 0)) {
                 break L2686;
                }
                var $1129 = HEAP16[$1067 + ($j_0_i + $1122 << 1) >> 1];
                if ($1129 << 16 >> 16 == -1) {
                 break L2686;
                }
                var $1132 = $j_0_i + 1 | 0;
                if (($1132 | 0) < ($nvp | 0)) {
                 var $1136 = HEAP16[$1067 + ($1132 + $1122 << 1) >> 1];
                 if ($1136 << 16 >> 16 == -1) {
                  label = 1932;
                 } else {
                  var $1140 = $1136;
                 }
                } else {
                 label = 1932;
                }
                if (label == 1932) {
                 label = 0;
                 var $1140 = HEAP16[$1123 >> 1];
                }
                var $1140;
                if (($1129 & 65535) < ($1140 & 65535)) {
                 break;
                } else {
                 var $j_0_i = $1132;
                }
               }
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) >> 1] = $1129;
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) + 2 >> 1] = $1140;
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) + 8 >> 1] = $1124;
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) + 4 >> 1] = $j_0_i & 65535;
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) + 10 >> 1] = $1124;
               HEAP16[$1078 + ($edgeCount_1_ph_i * 12 & -1) + 6 >> 1] = 0;
               var $1151 = $1073 + (($1129 & 65535) << 1) | 0;
               HEAP16[$1073 + ($edgeCount_1_ph_i + $_lcssa424 << 1) >> 1] = HEAP16[$1151 >> 1];
               HEAP16[$1151 >> 1] = $edgeCount_1_ph_i & 65535;
               var $edgeCount_1_ph_i = $edgeCount_1_ph_i + 1 | 0;
               var $j_0_ph_i = $1132;
              }
              var $1157 = $i1_0122_i + 1 | 0;
              if (($1157 | 0) < ($1068 | 0)) {
               var $i1_0122_i = $1157;
               var $edgeCount_0123_i = $edgeCount_1_ph_i;
              } else {
               break;
              }
             }
             if (($nvp | 0) > 0) {
              var $i2_0114_us_i = 0;
              while (1) {
               var $i2_0114_us_i;
               var $1119 = Math.imul($73, $i2_0114_us_i) | 0;
               var $1120 = $1067 + ($1119 << 1) | 0;
               var $1121 = $i2_0114_us_i & 65535;
               var $j4_0109_us_i = 0;
               while (1) {
                var $j4_0109_us_i;
                var $1086 = HEAP16[$1067 + ($j4_0109_us_i + $1119 << 1) >> 1];
                if ($1086 << 16 >> 16 == -1) {
                 break;
                }
                var $1089 = $j4_0109_us_i + 1 | 0;
                var $1090 = ($1089 | 0) < ($nvp | 0);
                if ($1090) {
                 var $1093 = HEAP16[$1067 + ($1089 + $1119 << 1) >> 1];
                 if ($1093 << 16 >> 16 == -1) {
                  label = 1916;
                 } else {
                  var $1097 = $1093;
                 }
                } else {
                 label = 1916;
                }
                if (label == 1916) {
                 label = 0;
                 var $1097 = HEAP16[$1120 >> 1];
                }
                var $1097;
                L2711 : do {
                 if (($1086 & 65535) > ($1097 & 65535)) {
                  var $e_0106_us_i = HEAP16[$1073 + (($1097 & 65535) << 1) >> 1];
                  if ($e_0106_us_i << 16 >> 16 == -1) {
                   break;
                  } else {
                   var $_in_i = $e_0106_us_i;
                  }
                  while (1) {
                   var $_in_i;
                   var $1102 = $_in_i & 65535;
                   if ((HEAP16[$1078 + ($1102 * 12 & -1) + 2 >> 1] | 0) == $1086 << 16 >> 16) {
                    var $1109 = $1078 + ($1102 * 12 & -1) + 10 | 0;
                    if ((HEAP16[$1078 + ($1102 * 12 & -1) + 8 >> 1] | 0) == (HEAP16[$1109 >> 1] | 0)) {
                     break;
                    }
                   }
                   var $e_0_us_i = HEAP16[$1073 + ($1102 + $_lcssa424 << 1) >> 1];
                   if ($e_0_us_i << 16 >> 16 == -1) {
                    break L2711;
                   } else {
                    var $_in_i = $e_0_us_i;
                   }
                  }
                  HEAP16[$1109 >> 1] = $1121;
                  HEAP16[$1078 + ($1102 * 12 & -1) + 6 >> 1] = $j4_0109_us_i & 65535;
                 }
                } while (0);
                if ($1090) {
                 var $j4_0109_us_i = $1089;
                } else {
                 break;
                }
               }
               var $1117 = $i2_0114_us_i + 1 | 0;
               if (($1117 | 0) < ($1068 | 0)) {
                var $i2_0114_us_i = $1117;
               } else {
                break;
               }
              }
             }
             if (($edgeCount_1_ph_i | 0) > 0) {
              var $i8_0103_i = 0;
             } else {
              break;
             }
             while (1) {
              var $i8_0103_i;
              var $1160 = $1078 + ($i8_0103_i * 12 & -1) + 8 | 0;
              var $1161 = HEAP16[$1160 >> 1];
              var $1163 = HEAP16[$1078 + ($i8_0103_i * 12 & -1) + 10 >> 1];
              if ($1161 << 16 >> 16 != $1163 << 16 >> 16) {
               var $1168 = Math.imul($73, $1161 & 65535) | 0;
               var $1169 = Math.imul($73, $1163 & 65535) | 0;
               HEAP16[$1067 + ($1168 + $nvp + HEAPU16[$1078 + ($i8_0103_i * 12 & -1) + 4 >> 1] << 1) >> 1] = $1163;
               HEAP16[$1067 + ($1169 + $nvp + HEAPU16[$1078 + ($i8_0103_i * 12 & -1) + 6 >> 1] << 1) >> 1] = HEAP16[$1160 >> 1];
              }
              var $1182 = $i8_0103_i + 1 | 0;
              if (($1182 | 0) < ($edgeCount_1_ph_i | 0)) {
               var $i8_0103_i = $1182;
              } else {
               break;
              }
             }
            }
           } while (0);
           _free($1072);
           _free($1077);
           do {
            if ((HEAP32[$36 >> 2] | 0) > 0) {
             var $1189 = HEAP32[$cset + 40 >> 2];
             var $1191 = HEAP32[$cset + 44 >> 2];
             var $1192 = HEAP32[$94 >> 2];
             if (($1192 | 0) <= 0) {
              var $1261 = $1192;
              break;
             }
             var $1194 = ($nvp | 0) > 0;
             var $i11_0382 = 0;
             var $1195 = $1192;
             while (1) {
              var $1195;
              var $i11_0382;
              var $1197 = Math.imul($i11_0382 << 1, $nvp) | 0;
              var $1198 = HEAP32[$77 >> 2];
              if ($1194) {
               var $1199 = $1197 + $nvp | 0;
               var $j13_0381 = 0;
               while (1) {
                var $j13_0381;
                var $1202 = HEAP16[$1198 + ($j13_0381 + $1197 << 1) >> 1];
                if ($1202 << 16 >> 16 == -1) {
                 break;
                }
                var $1205 = $1198 + ($1199 + $j13_0381 << 1) | 0;
                var $1208 = $j13_0381 + 1 | 0;
                L2739 : do {
                 if ((HEAP16[$1205 >> 1] | 0) == -1) {
                  if (($1208 | 0) < ($nvp | 0)) {
                   if ((HEAP16[$1198 + ($1208 + $1197 << 1) >> 1] | 0) == -1) {
                    label = 1951;
                   } else {
                    var $nj_0 = $1208;
                   }
                  } else {
                   label = 1951;
                  }
                  if (label == 1951) {
                   label = 0;
                   var $nj_0 = 0;
                  }
                  var $nj_0;
                  var $1217 = ($1202 & 65535) * 3 & -1;
                  var $1218 = HEAP32[$68 >> 2];
                  var $1223 = HEAPU16[$1198 + ($nj_0 + $1197 << 1) >> 1] * 3 & -1;
                  var $1224 = $1218 + ($1223 << 1) | 0;
                  var $1225 = HEAP16[$1218 + ($1217 << 1) >> 1];
                  do {
                   if ($1225 << 16 >> 16 == 0) {
                    if ((HEAP16[$1224 >> 1] | 0) != 0) {
                     break;
                    }
                    HEAP16[$1205 >> 1] = -32768;
                    break L2739;
                   }
                  } while (0);
                  var $1233 = HEAP16[$1218 + ($1217 + 2 << 1) >> 1];
                  do {
                   if (($1233 & 65535 | 0) == ($1191 | 0)) {
                    if ((HEAPU16[$1218 + ($1223 + 2 << 1) >> 1] | 0) != ($1191 | 0)) {
                     break;
                    }
                    HEAP16[$1205 >> 1] = -32767;
                    break L2739;
                   }
                  } while (0);
                  do {
                   if (($1225 & 65535 | 0) == ($1189 | 0)) {
                    if ((HEAPU16[$1224 >> 1] | 0) != ($1189 | 0)) {
                     break;
                    }
                    HEAP16[$1205 >> 1] = -32766;
                    break L2739;
                   }
                  } while (0);
                  if ($1233 << 16 >> 16 != 0) {
                   break;
                  }
                  if ((HEAP16[$1218 + ($1223 + 2 << 1) >> 1] | 0) != 0) {
                   break;
                  }
                  HEAP16[$1205 >> 1] = -32765;
                 }
                } while (0);
                if (($1208 | 0) < ($nvp | 0)) {
                 var $j13_0381 = $1208;
                } else {
                 break;
                }
               }
               var $1258 = HEAP32[$94 >> 2];
              } else {
               var $1258 = $1195;
              }
              var $1258;
              var $1259 = $i11_0382 + 1 | 0;
              if (($1259 | 0) < ($1258 | 0)) {
               var $i11_0382 = $1259;
               var $1195 = $1258;
              } else {
               var $1261 = $1258;
               break;
              }
             }
            } else {
             var $1261 = HEAP32[$94 >> 2];
            }
           } while (0);
           var $1261;
           var $1263 = _malloc($1261 << 1);
           HEAP32[$mesh + 12 >> 2] = $1263;
           var $1267 = HEAP32[$94 >> 2];
           if (($1263 | 0) == 0) {
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6976, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1267, tempVarArgs));
            STACKTOP = tempVarArgs;
            var $_0 = 0;
            break L2408;
           }
           _memset($1263, 0, $1267 << 1);
           var $1271 = HEAP32[$93 >> 2];
           if (($1271 | 0) > 65535) {
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $1271, HEAP32[tempVarArgs + 8 >> 2] = 65535, tempVarArgs));
            STACKTOP = tempVarArgs;
           }
           var $1275 = HEAP32[$94 >> 2];
           if (($1275 | 0) > 65535) {
            __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6720, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $1275, HEAP32[tempVarArgs + 8 >> 2] = 65535, tempVarArgs));
            STACKTOP = tempVarArgs;
           }
           if ((HEAP8[$1] & 1) == 0) {
            var $_0 = 1;
            break L2408;
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 11);
           var $_0 = 1;
           break L2408;
          }
         } while (0);
         __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
         STACKTOP = tempVarArgs;
         var $_0 = 0;
        }
       } while (0);
       var $_0;
       _free($147);
       var $_1 = $_0;
      }
      var $_1;
      _free($134);
      var $_2 = $_1;
     }
     var $_2;
     _free($124);
     var $_3 = $_2;
    }
    var $_3;
    _free($114);
    var $_4 = $_3;
   }
   var $_4;
   _free($105);
   var $_5 = $_4;
  }
 } while (0);
 var $_5;
 _free($57);
 var $_6 = $_5;
 var $_6;
 STACKTOP = sp;
 return $_6;
}
function __ZL17getPolyMergeValuePtS_PKtRiS2_i($pa, $pb, $verts, $ea, $eb, $nvp) {
 var label = 0;
 var $i_0_i = 0;
 while (1) {
  var $i_0_i;
  if (($i_0_i | 0) >= ($nvp | 0)) {
   var $_0_i = $nvp;
   break;
  }
  if ((HEAP16[$pa + ($i_0_i << 1) >> 1] | 0) == -1) {
   var $_0_i = $i_0_i;
   break;
  } else {
   var $i_0_i = $i_0_i + 1 | 0;
  }
 }
 var $_0_i;
 var $i_0_i70 = 0;
 while (1) {
  var $i_0_i70;
  if (($i_0_i70 | 0) >= ($nvp | 0)) {
   var $_0_i71 = $nvp;
   break;
  }
  if ((HEAP16[$pb + ($i_0_i70 << 1) >> 1] | 0) == -1) {
   var $_0_i71 = $i_0_i70;
   break;
  } else {
   var $i_0_i70 = $i_0_i70 + 1 | 0;
  }
 }
 var $_0_i71;
 if (($_0_i - 2 + $_0_i71 | 0) > ($nvp | 0)) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 HEAP32[$ea >> 2] = -1;
 HEAP32[$eb >> 2] = -1;
 if (($_0_i | 0) > 0) {
  var $i_086 = 0;
  var $20 = -1;
 } else {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 while (1) {
  var $20;
  var $i_086;
  var $22 = HEAP16[$pa + ($i_086 << 1) >> 1];
  var $23 = $i_086 + 1 | 0;
  var $26 = HEAP16[$pa + ((($23 | 0) == ($_0_i | 0) ? 0 : $23) << 1) >> 1];
  var $27 = ($22 & 65535) > ($26 & 65535);
  var $_ = $27 ? $26 : $22;
  var $_77 = $27 ? $22 : $26;
  var $j_0 = 0;
  while (1) {
   var $j_0;
   if (($j_0 | 0) >= ($_0_i71 | 0)) {
    var $41 = $20;
    break;
   }
   var $32 = HEAP16[$pb + ($j_0 << 1) >> 1];
   var $33 = $j_0 + 1 | 0;
   var $36 = HEAP16[$pb + ((($33 | 0) % ($_0_i71 | 0) & -1) << 1) >> 1];
   var $37 = ($32 & 65535) > ($36 & 65535);
   if ($_ << 16 >> 16 == ($37 ? $36 : $32) << 16 >> 16 & $_77 << 16 >> 16 == ($37 ? $32 : $36) << 16 >> 16) {
    label = 2007;
    break;
   } else {
    var $j_0 = $33;
   }
  }
  if (label == 2007) {
   label = 0;
   HEAP32[$ea >> 2] = $i_086;
   HEAP32[$eb >> 2] = $j_0;
   var $41 = $j_0;
  }
  var $41;
  if (($23 | 0) < ($_0_i | 0)) {
   var $i_086 = $23;
   var $20 = $41;
  } else {
   break;
  }
 }
 var $43 = HEAP32[$ea >> 2];
 if (($43 | 0) == -1 | ($41 | 0) == -1) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $59 = HEAPU16[$pa + ((($_0_i - 1 + $43 | 0) % ($_0_i | 0) & -1) << 1) >> 1] * 3 & -1;
 var $62 = HEAPU16[$pa + ($43 << 1) >> 1] * 3 & -1;
 var $65 = HEAPU16[$pb + ((($41 + 2 | 0) % ($_0_i71 | 0) & -1) << 1) >> 1] * 3 & -1;
 var $68 = HEAPU16[$verts + ($62 << 1) >> 1];
 var $70 = HEAPU16[$verts + ($59 << 1) >> 1];
 var $77 = HEAPU16[$verts + ($59 + 2 << 1) >> 1];
 var $79 = Math.imul(HEAPU16[$verts + ($65 + 2 << 1) >> 1] - $77 | 0, $68 - $70 | 0) | 0;
 var $85 = HEAPU16[$verts + ($62 + 2 << 1) >> 1];
 if (($79 - Math.imul($85 - $77 | 0, HEAPU16[$verts + ($65 << 1) >> 1] - $70 | 0) | 0) >= 0) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $103 = HEAPU16[$pb + ((($_0_i71 - 1 + $41 | 0) % ($_0_i71 | 0) & -1) << 1) >> 1] * 3 & -1;
 var $106 = HEAPU16[$pb + ($41 << 1) >> 1] * 3 & -1;
 var $109 = HEAPU16[$pa + ((($43 + 2 | 0) % ($_0_i | 0) & -1) << 1) >> 1] * 3 & -1;
 var $114 = HEAPU16[$verts + ($103 << 1) >> 1];
 var $121 = HEAPU16[$verts + ($103 + 2 << 1) >> 1];
 var $123 = Math.imul(HEAPU16[$verts + ($109 + 2 << 1) >> 1] - $121 | 0, HEAPU16[$verts + ($106 << 1) >> 1] - $114 | 0) | 0;
 if (($123 - Math.imul(HEAPU16[$verts + ($106 + 2 << 1) >> 1] - $121 | 0, HEAPU16[$verts + ($109 << 1) >> 1] - $114 | 0) | 0) >= 0) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $140 = HEAPU16[$pa + ((($43 + 1 | 0) % ($_0_i | 0) & -1) << 1) >> 1] * 3 & -1;
 var $144 = $68 - HEAPU16[$verts + ($140 << 1) >> 1] | 0;
 var $149 = $85 - HEAPU16[$verts + ($140 + 2 << 1) >> 1] | 0;
 var $150 = Math.imul($144, $144) | 0;
 var $_0 = Math.imul($149, $149) + $150 | 0;
 var $_0;
 return $_0;
}
function __ZL8diagonaliiiPKiPi($i, $j, $n, $verts, $indices) {
 var label = 0;
 var $4 = HEAP32[$indices + ($i << 2) >> 2] << 2 & 1073741820;
 var $9 = HEAP32[$indices + ($j << 2) >> 2] << 2 & 1073741820;
 var $11 = $i + 1 | 0;
 var $16 = HEAP32[$indices + ((($11 | 0) < ($n | 0) ? $11 : 0) << 2) >> 2] << 2 & 1073741820;
 var $23 = HEAP32[$indices + ((($i | 0) > 0 ? $i : $n) - 1 << 2) >> 2] << 2 & 1073741820;
 var $25 = HEAP32[$verts + ($4 << 2) >> 2];
 var $26 = HEAP32[$verts + ($23 << 2) >> 2];
 var $29 = HEAP32[$verts + (($16 | 2) << 2) >> 2];
 var $31 = HEAP32[$verts + (($23 | 2) << 2) >> 2];
 var $33 = Math.imul($29 - $31 | 0, $25 - $26 | 0) | 0;
 var $34 = HEAP32[$verts + ($16 << 2) >> 2];
 var $37 = HEAP32[$verts + (($4 | 2) << 2) >> 2];
 var $41 = ($33 - Math.imul($37 - $31 | 0, $34 - $26 | 0) | 0) < 1;
 var $42 = HEAP32[$verts + ($9 << 2) >> 2];
 var $43 = $42 - $25 | 0;
 do {
  if ($41) {
   var $46 = Math.imul($43, $31 - $37 | 0) | 0;
   var $49 = HEAP32[$verts + (($9 | 2) << 2) >> 2];
   if (($46 - Math.imul($49 - $37 | 0, $26 - $25 | 0) | 0) >= 0) {
    var $217 = 0;
    var $217;
    return $217;
   }
   var $57 = Math.imul($29 - $49 | 0, $25 - $42 | 0) | 0;
   if (($57 - Math.imul($37 - $49 | 0, $34 - $42 | 0) | 0) < 0) {
    break;
   } else {
    var $217 = 0;
   }
   var $217;
   return $217;
  } else {
   var $65 = Math.imul($43, $29 - $37 | 0) | 0;
   var $68 = HEAP32[$verts + (($9 | 2) << 2) >> 2];
   if (($65 - Math.imul($68 - $37 | 0, $34 - $25 | 0) | 0) >= 1) {
    break;
   }
   var $75 = Math.imul($31 - $68 | 0, $25 - $42 | 0) | 0;
   if (($75 - Math.imul($37 - $68 | 0, $26 - $42 | 0) | 0) > 0) {
    break;
   } else {
    var $217 = 0;
   }
   var $217;
   return $217;
  }
 } while (0);
 if (($n | 0) <= 0) {
  var $217 = 1;
  var $217;
  return $217;
 }
 var $81 = $verts + (($9 | 2) << 2) | 0;
 var $82 = ($25 | 0) == ($42 | 0);
 var $k_055_i = 0;
 L2833 : while (1) {
  var $k_055_i;
  var $83 = $k_055_i + 1 | 0;
  var $84 = ($83 | 0) < ($n | 0);
  var $__i_i10 = $84 ? $83 : 0;
  do {
   if (!(($k_055_i | 0) == ($i | 0) | ($__i_i10 | 0) == ($i | 0) | ($k_055_i | 0) == ($j | 0) | ($__i_i10 | 0) == ($j | 0))) {
    var $93 = HEAP32[$indices + ($k_055_i << 2) >> 2] << 2 & 1073741820;
    var $98 = HEAP32[$indices + ($__i_i10 << 2) >> 2] << 2 & 1073741820;
    var $99 = $verts + ($98 << 2) | 0;
    var $100 = HEAP32[$verts + ($93 << 2) >> 2];
    if (($25 | 0) == ($100 | 0)) {
     if (($37 | 0) == (HEAP32[$verts + (($93 | 2) << 2) >> 2] | 0)) {
      break;
     }
    }
    if (($42 | 0) == ($100 | 0)) {
     if ((HEAP32[$81 >> 2] | 0) == (HEAP32[$verts + (($93 | 2) << 2) >> 2] | 0)) {
      break;
     }
    }
    var $110 = HEAP32[$99 >> 2];
    if (($25 | 0) == ($110 | 0)) {
     if (($37 | 0) == (HEAP32[$verts + (($98 | 2) << 2) >> 2] | 0)) {
      break;
     }
    }
    var $116 = HEAP32[$81 >> 2];
    if (($42 | 0) == ($110 | 0)) {
     if (($116 | 0) == (HEAP32[$verts + (($98 | 2) << 2) >> 2] | 0)) {
      break;
     }
    }
    var $_idx37_val_i = HEAP32[$verts + (($93 | 2) << 2) >> 2];
    var $121 = Math.imul($_idx37_val_i - $37 | 0, $43) | 0;
    var $123 = $116 - $37 | 0;
    var $124 = Math.imul($123, $100 - $25 | 0) | 0;
    do {
     if (($121 | 0) == ($124 | 0)) {
      if ($82) {
       if (!(($37 | 0) > ($_idx37_val_i | 0) | ($_idx37_val_i | 0) > ($116 | 0))) {
        var $217 = 0;
        label = 2086;
        break L2833;
       }
       if (($_idx37_val_i | 0) >= ($116 | 0) & ($37 | 0) >= ($_idx37_val_i | 0)) {
        var $217 = 0;
        label = 2071;
        break L2833;
       } else {
        break;
       }
      } else {
       if (!(($25 | 0) > ($100 | 0) | ($100 | 0) > ($42 | 0))) {
        var $217 = 0;
        label = 2070;
        break L2833;
       }
       if (($100 | 0) >= ($42 | 0) & ($25 | 0) >= ($100 | 0)) {
        var $217 = 0;
        label = 2088;
        break L2833;
       } else {
        break;
       }
      }
     } else {
      var $128 = HEAP32[$verts + (($98 | 2) << 2) >> 2];
      var $130 = Math.imul($128 - $37 | 0, $43) | 0;
      var $132 = Math.imul($123, $110 - $25 | 0) | 0;
      if (($130 | 0) == ($132 | 0)) {
       break;
      }
      var $135 = $110 - $100 | 0;
      var $137 = Math.imul($37 - $_idx37_val_i | 0, $135) | 0;
      var $139 = $128 - $_idx37_val_i | 0;
      var $140 = Math.imul($139, $25 - $100 | 0) | 0;
      if (($137 | 0) == ($140 | 0)) {
       break;
      }
      var $144 = Math.imul($116 - $_idx37_val_i | 0, $135) | 0;
      var $146 = Math.imul($139, $42 - $100 | 0) | 0;
      if (($144 | 0) == ($146 | 0)) {
       break;
      }
      if (!(($121 - $124 | 0) < 0 ^ ($130 - $132 | 0) < 0)) {
       break;
      }
      if (($137 - $140 | 0) < 0 ^ ($144 - $146 | 0) < 0) {
       var $217 = 0;
       label = 2067;
       break L2833;
      }
     }
    } while (0);
    var $d_idx32_val_i_i = HEAP32[$verts + (($98 | 2) << 2) >> 2];
    var $169 = Math.imul($d_idx32_val_i_i - $37 | 0, $43) | 0;
    do {
     if (($169 | 0) == (Math.imul($123, $110 - $25 | 0) | 0)) {
      if ($82) {
       if (!(($d_idx32_val_i_i | 0) < ($37 | 0) | ($d_idx32_val_i_i | 0) > ($116 | 0))) {
        var $217 = 0;
        label = 2074;
        break L2833;
       }
       if (($d_idx32_val_i_i | 0) >= ($116 | 0) & ($d_idx32_val_i_i | 0) <= ($37 | 0)) {
        var $217 = 0;
        label = 2075;
        break L2833;
       } else {
        break;
       }
      } else {
       if (!(($110 | 0) < ($25 | 0) | ($110 | 0) > ($42 | 0))) {
        var $217 = 0;
        label = 2072;
        break L2833;
       }
       if (($110 | 0) >= ($42 | 0) & ($110 | 0) <= ($25 | 0)) {
        var $217 = 0;
        label = 2084;
        break L2833;
       } else {
        break;
       }
      }
     }
    } while (0);
    var $183 = $110 - $100 | 0;
    var $185 = Math.imul($37 - $_idx37_val_i | 0, $183) | 0;
    var $187 = $d_idx32_val_i_i - $_idx37_val_i | 0;
    do {
     if (($185 | 0) == (Math.imul($187, $25 - $100 | 0) | 0)) {
      if (($110 | 0) == ($100 | 0)) {
       if (!(($_idx37_val_i | 0) > ($37 | 0) | ($d_idx32_val_i_i | 0) < ($37 | 0))) {
        var $217 = 0;
        label = 2073;
        break L2833;
       }
       if (($d_idx32_val_i_i | 0) <= ($37 | 0) & ($_idx37_val_i | 0) >= ($37 | 0)) {
        var $217 = 0;
        label = 2085;
        break L2833;
       } else {
        break;
       }
      } else {
       if (!(($100 | 0) > ($25 | 0) | ($110 | 0) < ($25 | 0))) {
        var $217 = 0;
        label = 2087;
        break L2833;
       }
       if (($110 | 0) <= ($25 | 0) & ($100 | 0) >= ($25 | 0)) {
        var $217 = 0;
        label = 2083;
        break L2833;
       } else {
        break;
       }
      }
     }
    } while (0);
    var $202 = Math.imul($116 - $_idx37_val_i | 0, $183) | 0;
    if (($202 | 0) != (Math.imul($187, $42 - $100 | 0) | 0)) {
     break;
    }
    if (($110 | 0) == ($100 | 0)) {
     if (!(($_idx37_val_i | 0) > ($116 | 0) | ($d_idx32_val_i_i | 0) < ($116 | 0))) {
      var $217 = 0;
      label = 2078;
      break L2833;
     }
     var $216 = ($d_idx32_val_i_i | 0) <= ($116 | 0);
     var $not_3_i_i_i = ($_idx37_val_i | 0) >= ($116 | 0);
     if ($216 & $not_3_i_i_i | $84 ^ 1) {
      var $217 = $216 & $not_3_i_i_i ^ 1;
      label = 2082;
      break L2833;
     } else {
      var $k_055_i = $83;
      continue L2833;
     }
    } else {
     if (!(($100 | 0) > ($42 | 0) | ($110 | 0) < ($42 | 0))) {
      var $217 = 0;
      label = 2080;
      break L2833;
     }
     var $212 = ($110 | 0) <= ($42 | 0);
     var $not__i_i_i = ($100 | 0) >= ($42 | 0);
     if ($212 & $not__i_i_i | $84 ^ 1) {
      var $217 = $212 & $not__i_i_i ^ 1;
      label = 2079;
      break L2833;
     } else {
      var $k_055_i = $83;
      continue L2833;
     }
    }
   }
  } while (0);
  if ($84) {
   var $k_055_i = $83;
  } else {
   var $217 = 1;
   label = 2081;
   break;
  }
 }
 if (label == 2067) {
  var $217;
  return $217;
 } else if (label == 2074) {
  var $217;
  return $217;
 } else if (label == 2075) {
  var $217;
  return $217;
 } else if (label == 2078) {
  var $217;
  return $217;
 } else if (label == 2079) {
  var $217;
  return $217;
 } else if (label == 2080) {
  var $217;
  return $217;
 } else if (label == 2081) {
  var $217;
  return $217;
 } else if (label == 2082) {
  var $217;
  return $217;
 } else if (label == 2083) {
  var $217;
  return $217;
 } else if (label == 2084) {
  var $217;
  return $217;
 } else if (label == 2085) {
  var $217;
  return $217;
 } else if (label == 2086) {
  var $217;
  return $217;
 } else if (label == 2087) {
  var $217;
  return $217;
 } else if (label == 2088) {
  var $217;
  return $217;
 } else if (label == 2070) {
  var $217;
  return $217;
 } else if (label == 2071) {
  var $217;
  return $217;
 } else if (label == 2072) {
  var $217;
  return $217;
 } else if (label == 2073) {
  var $217;
  return $217;
 }
}
function __ZL11triangulateiPKiPiS1_($n, $verts, $indices, $tris) {
 var label = 0;
 do {
  if (($n | 0) > 0) {
   var $i_0101 = 0;
   while (1) {
    var $i_0101;
    var $3 = $i_0101 + 1 | 0;
    var $4 = ($3 | 0) < ($n | 0);
    var $__i = $4 ? $3 : 0;
    var $5 = $__i + 1 | 0;
    if (__ZL8diagonaliiiPKiPi($i_0101, ($5 | 0) < ($n | 0) ? $5 : 0, $n, $verts, $indices)) {
     var $9 = $indices + ($__i << 2) | 0;
     HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | -2147483648;
    }
    if ($4) {
     var $i_0101 = $3;
    } else {
     break;
    }
   }
   if (($n | 0) > 3) {
    var $dst_095 = $tris;
    var $ntris_096 = 0;
    var $_08097 = $n;
   } else {
    var $dst_0_lcssa = $tris;
    var $ntris_0_lcssa = 1;
    break;
   }
   while (1) {
    var $_08097;
    var $ntris_096;
    var $dst_095;
    var $minLen_0_ph = -1;
    var $mini_0_ph = -1;
    var $i3_0_ph = 0;
    L2914 : while (1) {
     var $i3_0_ph;
     var $mini_0_ph;
     var $minLen_0_ph;
     var $i3_0 = $i3_0_ph;
     while (1) {
      var $i3_0;
      if (($i3_0 | 0) >= ($_08097 | 0)) {
       break L2914;
      }
      var $15 = $i3_0 + 1 | 0;
      var $__i85 = ($15 | 0) < ($_08097 | 0) ? $15 : 0;
      if ((HEAP32[$indices + ($__i85 << 2) >> 2] | 0) < 0) {
       break;
      } else {
       var $i3_0 = $15;
      }
     }
     var $24 = HEAP32[$indices + ($i3_0 << 2) >> 2] << 2 & 1073741820;
     var $26 = $__i85 + 1 | 0;
     var $31 = HEAP32[$indices + ((($26 | 0) < ($_08097 | 0) ? $26 : 0) << 2) >> 2] << 2 & 1073741820;
     var $35 = HEAP32[$verts + ($31 << 2) >> 2] - HEAP32[$verts + ($24 << 2) >> 2] | 0;
     var $40 = HEAP32[$verts + (($31 | 2) << 2) >> 2] - HEAP32[$verts + (($24 | 2) << 2) >> 2] | 0;
     var $41 = Math.imul($35, $35) | 0;
     var $43 = Math.imul($40, $40) + $41 | 0;
     var $or_cond = ($minLen_0_ph | 0) < 0 | ($43 | 0) < ($minLen_0_ph | 0);
     var $minLen_0_ph = $or_cond ? $43 : $minLen_0_ph;
     var $mini_0_ph = $or_cond ? $i3_0 : $mini_0_ph;
     var $i3_0_ph = $15;
    }
    if (($mini_0_ph | 0) == -1) {
     break;
    }
    var $51 = $mini_0_ph + 1 | 0;
    var $__i88 = ($51 | 0) < ($_08097 | 0) ? $51 : 0;
    var $53 = $__i88 + 1 | 0;
    HEAP32[$dst_095 >> 2] = HEAP32[$indices + ($mini_0_ph << 2) >> 2] & 268435455;
    HEAP32[$dst_095 + 4 >> 2] = HEAP32[$indices + ($__i88 << 2) >> 2] & 268435455;
    var $66 = $dst_095 + 12 | 0;
    HEAP32[$dst_095 + 8 >> 2] = HEAP32[$indices + ((($53 | 0) < ($_08097 | 0) ? $53 : 0) << 2) >> 2] & 268435455;
    var $67 = $ntris_096 + 1 | 0;
    var $68 = $_08097 - 1 | 0;
    var $69 = ($__i88 | 0) < ($68 | 0);
    if ($69) {
     var $k_091 = $__i88;
     while (1) {
      var $k_091;
      var $70 = $k_091 + 1 | 0;
      HEAP32[$indices + ($k_091 << 2) >> 2] = HEAP32[$indices + ($70 << 2) >> 2];
      if (($70 | 0) < ($68 | 0)) {
       var $k_091 = $70;
      } else {
       break;
      }
     }
    }
    var $_ = $69 ? $__i88 : 0;
    var $76 = (($_ | 0) > 0 ? $_ : $68) - 1 | 0;
    var $79 = __ZL8diagonaliiiPKiPi((($76 | 0) > 0 ? $76 : $68) - 1 | 0, $_, $68, $verts, $indices);
    var $80 = $indices + ($76 << 2) | 0;
    var $81 = HEAP32[$80 >> 2];
    HEAP32[$80 >> 2] = $79 ? $81 | -2147483648 : $81 & 268435455;
    var $84 = $_ + 1 | 0;
    var $86 = __ZL8diagonaliiiPKiPi($76, ($84 | 0) < ($68 | 0) ? $84 : 0, $68, $verts, $indices);
    var $87 = $indices + ($_ << 2) | 0;
    var $88 = HEAP32[$87 >> 2];
    HEAP32[$87 >> 2] = $86 ? $88 | -2147483648 : $88 & 268435455;
    if (($68 | 0) > 3) {
     var $dst_095 = $66;
     var $ntris_096 = $67;
     var $_08097 = $68;
    } else {
     label = 2104;
     break;
    }
   }
   if (label == 2104) {
    var $dst_0_lcssa = $66;
    var $ntris_0_lcssa = $ntris_096 + 2 | 0;
    break;
   }
   var $_0 = -$ntris_096 | 0;
   var $_0;
   return $_0;
  } else {
   var $dst_0_lcssa = $tris;
   var $ntris_0_lcssa = 1;
  }
 } while (0);
 var $ntris_0_lcssa;
 var $dst_0_lcssa;
 HEAP32[$dst_0_lcssa >> 2] = HEAP32[$indices >> 2] & 268435455;
 HEAP32[$dst_0_lcssa + 4 >> 2] = HEAP32[$indices + 4 >> 2] & 268435455;
 HEAP32[$dst_0_lcssa + 8 >> 2] = HEAP32[$indices + 8 >> 2] & 268435455;
 var $_0 = $ntris_0_lcssa;
 var $_0;
 return $_0;
}
function __Z21rcBuildPolyMeshDetailP9rcContextRK10rcPolyMeshRK20rcCompactHeightfieldffR16rcPolyMeshDetail($ctx, $mesh, $chf, $sampleDist, $sampleMaxError, $dmesh) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 4144 | 0;
 var $edge_i = sp;
 var $hull_i = sp + 400;
 var $idx_i = sp + 912;
 var $edges = sp + 1040;
 var $tris = sp + 1056;
 var $stack_sroa_1;
 var $samples_sroa_1;
 var $verts = sp + 1072;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 26);
 }
 if ((HEAP32[$mesh + 20 >> 2] | 0) == 0) {
  var $_2 = 1;
  var $_2;
  STACKTOP = sp;
  return $_2;
 }
 var $14 = $mesh + 24 | 0;
 if ((HEAP32[$14 >> 2] | 0) == 0) {
  var $_2 = 1;
  var $_2;
  STACKTOP = sp;
  return $_2;
 }
 var $19 = HEAP32[$mesh + 32 >> 2];
 var $21 = HEAPF32[$mesh + 60 >> 2];
 var $23 = HEAPF32[$mesh + 64 >> 2];
 var $24 = $mesh + 36 | 0;
 var $26 = HEAP32[$mesh + 68 >> 2];
 var $27 = $edges | 0;
 HEAP32[$27 >> 2] = 0;
 var $28 = $edges + 4 | 0;
 HEAP32[$28 >> 2] = 0;
 var $29 = $edges + 8 | 0;
 HEAP32[$29 >> 2] = 64;
 HEAP32[$27 >> 2] = _malloc(256);
 HEAP32[$28 >> 2] = 64;
 var $32 = $tris | 0;
 HEAP32[$32 >> 2] = 0;
 var $33 = $tris + 4 | 0;
 HEAP32[$33 >> 2] = 0;
 var $34 = $tris + 8 | 0;
 HEAP32[$34 >> 2] = 512;
 var $35 = _malloc(2048);
 var $37 = HEAP32[$33 >> 2];
 if (!(($37 | 0) == 0 | ($35 | 0) == 0)) {
  var $41 = $37 << 2;
  _memcpy($35, 0, $41) | 0;
 }
 HEAP32[$32 >> 2] = $35;
 HEAP32[$33 >> 2] = 512;
 $stack_sroa_1 = 0;
 var $42 = _malloc(2048);
 var $43 = $42;
 var $stack_sroa_1_0_load632 = $stack_sroa_1;
 if (!(($stack_sroa_1_0_load632 | 0) == 0 | ($42 | 0) == 0)) {
  var $47 = $stack_sroa_1_0_load632 << 2;
  _memcpy($42, 0, $47) | 0;
 }
 $stack_sroa_1 = 512;
 $samples_sroa_1 = 0;
 var $48 = _malloc(2048);
 var $49 = $48;
 var $samples_sroa_1_0_load487 = $samples_sroa_1;
 if (!(($samples_sroa_1_0_load487 | 0) == 0 | ($48 | 0) == 0)) {
  var $53 = $samples_sroa_1_0_load487 << 2;
  _memcpy($48, 0, $53) | 0;
 }
 $samples_sroa_1 = 512;
 var $56 = _malloc(HEAP32[$14 >> 2] << 4);
 var $57 = $56;
 do {
  if (($56 | 0) == 0) {
   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6128, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$14 >> 2] << 2, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $_1441442 = 0;
   var $samples_sroa_0_19 = $49;
   var $stack_sroa_0_33 = $43;
  } else {
   var $68 = _malloc($19 * 12 & -1);
   var $69 = $68;
   if (($68 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7544, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $19 * 3 & -1, tempVarArgs));
    STACKTOP = tempVarArgs;
    _free($56);
    var $_1441442 = 0;
    var $samples_sroa_0_19 = $49;
    var $stack_sroa_0_33 = $43;
    break;
   }
   if ((HEAP32[$14 >> 2] | 0) > 0) {
    var $73 = $19 << 1;
    var $74 = $mesh + 4 | 0;
    var $75 = $chf | 0;
    var $76 = $chf + 4 | 0;
    var $77 = ($19 | 0) > 0;
    var $78 = $mesh | 0;
    var $i_0458 = 0;
    var $maxhh_0459 = 0;
    var $maxhw_0460 = 0;
    var $nPolyVerts_0461 = 0;
    while (1) {
     var $nPolyVerts_0461;
     var $maxhw_0460;
     var $maxhh_0459;
     var $i_0458;
     var $86 = Math.imul($73, $i_0458) | 0;
     var $87 = HEAP32[$74 >> 2];
     var $88 = $i_0458 << 2;
     var $89 = $57 + ($88 << 2) | 0;
     var $91 = $57 + (($88 | 1) << 2) | 0;
     var $93 = $57 + (($88 | 2) << 2) | 0;
     var $95 = $57 + (($88 | 3) << 2) | 0;
     var $96 = HEAP32[$75 >> 2];
     HEAP32[$89 >> 2] = $96;
     HEAP32[$91 >> 2] = 0;
     var $97 = HEAP32[$76 >> 2];
     HEAP32[$93 >> 2] = $97;
     HEAP32[$95 >> 2] = 0;
     L2961 : do {
      if ($77) {
       var $j_0450 = 0;
       var $nPolyVerts_1451 = $nPolyVerts_0461;
       var $101 = $96;
       var $100 = 0;
       var $99 = $97;
       var $98 = 0;
       while (1) {
        var $98;
        var $99;
        var $100;
        var $101;
        var $nPolyVerts_1451;
        var $j_0450;
        var $103 = HEAP16[$87 + ($j_0450 + $86 << 1) >> 1];
        if ($103 << 16 >> 16 == -1) {
         var $nPolyVerts_1_lcssa = $nPolyVerts_1451;
         var $133 = $101;
         var $132 = $100;
         var $131 = $99;
         var $130 = $98;
         break L2961;
        }
        var $107 = ($103 & 65535) * 3 & -1;
        var $108 = HEAP32[$78 >> 2];
        var $109 = $108 + ($107 << 1) | 0;
        var $111 = HEAPU16[$109 >> 1];
        var $113 = ($101 | 0) < ($111 | 0) ? $101 : $111;
        HEAP32[$89 >> 2] = $113;
        var $115 = HEAPU16[$109 >> 1];
        var $117 = ($100 | 0) > ($115 | 0) ? $100 : $115;
        HEAP32[$91 >> 2] = $117;
        var $118 = $108 + ($107 + 2 << 1) | 0;
        var $120 = HEAPU16[$118 >> 1];
        var $122 = ($99 | 0) < ($120 | 0) ? $99 : $120;
        HEAP32[$93 >> 2] = $122;
        var $124 = HEAPU16[$118 >> 1];
        var $126 = ($98 | 0) > ($124 | 0) ? $98 : $124;
        HEAP32[$95 >> 2] = $126;
        var $127 = $nPolyVerts_1451 + 1 | 0;
        var $128 = $j_0450 + 1 | 0;
        if (($128 | 0) < ($19 | 0)) {
         var $j_0450 = $128;
         var $nPolyVerts_1451 = $127;
         var $101 = $113;
         var $100 = $117;
         var $99 = $122;
         var $98 = $126;
        } else {
         var $nPolyVerts_1_lcssa = $127;
         var $133 = $113;
         var $132 = $117;
         var $131 = $122;
         var $130 = $126;
         break;
        }
       }
      } else {
       var $nPolyVerts_1_lcssa = $nPolyVerts_0461;
       var $133 = $96;
       var $132 = 0;
       var $131 = $97;
       var $130 = 0;
      }
     } while (0);
     var $130;
     var $131;
     var $132;
     var $133;
     var $nPolyVerts_1_lcssa;
     var $134 = $133 - 1 | 0;
     var $136 = ($134 | 0) < 0 ? 0 : $134;
     HEAP32[$89 >> 2] = $136;
     var $137 = HEAP32[$75 >> 2];
     var $138 = $132 + 1 | 0;
     var $140 = ($137 | 0) < ($138 | 0) ? $137 : $138;
     HEAP32[$91 >> 2] = $140;
     var $141 = $131 - 1 | 0;
     var $143 = ($141 | 0) < 0 ? 0 : $141;
     HEAP32[$93 >> 2] = $143;
     var $144 = HEAP32[$76 >> 2];
     var $145 = $130 + 1 | 0;
     var $147 = ($144 | 0) < ($145 | 0) ? $144 : $145;
     HEAP32[$95 >> 2] = $147;
     if (($136 | 0) < ($140 | 0) & ($143 | 0) < ($147 | 0)) {
      var $151 = $140 - $136 | 0;
      var $154 = $147 - $143 | 0;
      var $maxhw_1 = ($maxhw_0460 | 0) > ($151 | 0) ? $maxhw_0460 : $151;
      var $maxhh_1 = ($maxhh_0459 | 0) > ($154 | 0) ? $maxhh_0459 : $154;
     } else {
      var $maxhw_1 = $maxhw_0460;
      var $maxhh_1 = $maxhh_0459;
     }
     var $maxhh_1;
     var $maxhw_1;
     var $158 = $i_0458 + 1 | 0;
     if (($158 | 0) < (HEAP32[$14 >> 2] | 0)) {
      var $i_0458 = $158;
      var $maxhh_0459 = $maxhh_1;
      var $maxhw_0460 = $maxhw_1;
      var $nPolyVerts_0461 = $nPolyVerts_1_lcssa;
     } else {
      var $maxhh_0_lcssa = $maxhh_1;
      var $maxhw_0_lcssa = $maxhw_1;
      var $nPolyVerts_0_lcssa = $nPolyVerts_1_lcssa;
      break;
     }
    }
   } else {
    var $maxhh_0_lcssa = 0;
    var $maxhw_0_lcssa = 0;
    var $nPolyVerts_0_lcssa = 0;
   }
   var $nPolyVerts_0_lcssa;
   var $maxhw_0_lcssa;
   var $maxhh_0_lcssa;
   var $163 = _malloc(Math.imul($maxhh_0_lcssa << 1, $maxhw_0_lcssa) | 0);
   var $164 = $163;
   L2970 : do {
    if (($163 | 0) == 0) {
     var $167 = Math.imul($maxhw_0_lcssa, $maxhh_0_lcssa) | 0;
     __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6256, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $167, tempVarArgs));
     STACKTOP = tempVarArgs;
     var $_0 = 0;
     var $samples_sroa_0_17 = $49;
     var $stack_sroa_0_31 = $43;
    } else {
     var $169 = HEAP32[$14 >> 2];
     var $170 = $dmesh + 12 | 0;
     HEAP32[$170 >> 2] = $169;
     var $171 = $dmesh + 16 | 0;
     HEAP32[$171 >> 2] = 0;
     var $172 = $dmesh + 20 | 0;
     HEAP32[$172 >> 2] = 0;
     var $174 = _malloc($169 << 4);
     var $176 = $dmesh | 0;
     HEAP32[$176 >> 2] = $174;
     if (($174 | 0) == 0) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 5512, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$170 >> 2] << 2, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_0 = 0;
      var $samples_sroa_0_17 = $49;
      var $stack_sroa_0_31 = $43;
      break;
     }
     var $183 = (($nPolyVerts_0_lcssa | 0) / 2 & -1) + $nPolyVerts_0_lcssa | 0;
     HEAP32[$171 >> 2] = 0;
     var $186 = _malloc($183 * 12 & -1);
     var $188 = $dmesh + 4 | 0;
     HEAP32[$188 >> 2] = $186;
     if (($186 | 0) == 0) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 4248, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $183 * 3 & -1, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_0 = 0;
      var $samples_sroa_0_17 = $49;
      var $stack_sroa_0_31 = $43;
      break;
     }
     HEAP32[$172 >> 2] = 0;
     var $194 = _malloc($183 << 5);
     var $195 = $dmesh + 8 | 0;
     HEAP32[$195 >> 2] = $194;
     if (($194 | 0) == 0) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 3528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $183 << 3, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_0 = 0;
      var $samples_sroa_0_17 = $49;
      var $stack_sroa_0_31 = $43;
      break;
     }
     L2982 : do {
      if ((HEAP32[$14 >> 2] | 0) > 0) {
       var $199 = $19 << 1;
       var $200 = $mesh + 4 | 0;
       var $201 = ($19 | 0) > 0;
       var $202 = $mesh | 0;
       var $203 = $chf | 0;
       var $204 = $chf + 60 | 0;
       var $205 = $chf + 64 | 0;
       var $206 = $verts | 0;
       var $209 = $idx_i;
       var $210 = $hull_i | 0;
       var $211 = $mesh + 40 | 0;
       var $212 = $mesh + 44 | 0;
       var $213 = $chf + 56 | 0;
       var $215 = $68 + 4 | 0;
       var $217 = $68 + 8 | 0;
       var $218 = $sampleDist * -.5;
       var $219 = $chf + 52 | 0;
       var $220 = $sampleDist > 0;
       var $221 = $idx_i + 4 | 0;
       var $222 = $sampleMaxError * $sampleMaxError;
       var $vcap_0445 = $183;
       var $tcap_0446 = $183 << 1;
       var $i1_0447 = 0;
       var $samples_sroa_0_3 = $49;
       var $samples_sroa_2_0 = 512;
       var $stack_sroa_0_2 = $43;
       var $stack_sroa_2_0 = 512;
       while (1) {
        var $stack_sroa_2_0;
        var $stack_sroa_0_2;
        var $samples_sroa_2_0;
        var $samples_sroa_0_3;
        var $i1_0447;
        var $tcap_0446;
        var $vcap_0445;
        var $226 = Math.imul($199, $i1_0447) | 0;
        var $227 = HEAP32[$200 >> 2];
        L2986 : do {
         if ($201) {
          var $j3_0374 = 0;
          while (1) {
           var $j3_0374;
           var $229 = HEAP16[$227 + ($j3_0374 + $226 << 1) >> 1];
           if ($229 << 16 >> 16 == -1) {
            var $npoly_0_lcssa = $j3_0374;
            break L2986;
           }
           var $233 = ($229 & 65535) * 3 & -1;
           var $234 = HEAP32[$202 >> 2];
           var $240 = $j3_0374 * 3 & -1;
           HEAPF32[$69 + ($240 << 2) >> 2] = $21 * (HEAPU16[$234 + ($233 << 1) >> 1] | 0);
           HEAPF32[$69 + ($240 + 1 << 2) >> 2] = $23 * (HEAPU16[$234 + ($233 + 1 << 1) >> 1] | 0);
           HEAPF32[$69 + ($240 + 2 << 2) >> 2] = $21 * (HEAPU16[$234 + ($233 + 2 << 1) >> 1] | 0);
           var $256 = $j3_0374 + 1 | 0;
           if (($256 | 0) < ($19 | 0)) {
            var $j3_0374 = $256;
           } else {
            var $npoly_0_lcssa = $256;
            break;
           }
          }
         } else {
          var $npoly_0_lcssa = 0;
         }
        } while (0);
        var $npoly_0_lcssa;
        var $258 = $i1_0447 << 2;
        var $260 = HEAP32[$57 + ($258 << 2) >> 2];
        var $261 = $258 | 2;
        var $263 = HEAP32[$57 + ($261 << 2) >> 2];
        var $264 = $258 | 1;
        var $266 = HEAP32[$57 + ($264 << 2) >> 2];
        var $267 = $266 - $260 | 0;
        var $268 = $258 | 3;
        var $270 = HEAP32[$57 + ($268 << 2) >> 2];
        var $271 = $270 - $263 | 0;
        var $272 = HEAP32[$202 >> 2];
        var $274 = Math.imul($267 << 1, $271) | 0;
        _memset($163, 0, $274);
        do {
         if (($stack_sroa_2_0 | 0) < 0) {
          var $276 = $stack_sroa_2_0;
          while (1) {
           var $276;
           var $277 = $276 << 1;
           if (($277 | 0) < 0) {
            var $276 = $277;
           } else {
            break;
           }
          }
          var $281 = _malloc($276 << 3);
          var $282 = $281;
          var $stack_sroa_1_0_load633 = $stack_sroa_1;
          if (!(($stack_sroa_1_0_load633 | 0) == 0 | ($281 | 0) == 0)) {
           var $286 = $stack_sroa_0_2;
           var $287 = $stack_sroa_1_0_load633 << 2;
           _memcpy($281, $286, $287) | 0;
          }
          if (($stack_sroa_0_2 | 0) == 0) {
           var $stack_sroa_0_3 = $282;
           var $stack_sroa_2_1 = $277;
           break;
          }
          _free($stack_sroa_0_2);
          var $stack_sroa_0_3 = $282;
          var $stack_sroa_2_1 = $277;
         } else {
          var $stack_sroa_0_3 = $stack_sroa_0_2;
          var $stack_sroa_2_1 = $stack_sroa_2_0;
         }
        } while (0);
        var $stack_sroa_2_1;
        var $stack_sroa_0_3;
        $stack_sroa_1 = 0;
        var $291 = ($npoly_0_lcssa | 0) > 0;
        L3000 : do {
         if ($291) {
          var $j_0242_i = 0;
          var $stack_sroa_0_4 = $stack_sroa_0_3;
          var $stack_sroa_2_2 = $stack_sroa_2_1;
          while (1) {
           var $stack_sroa_2_2;
           var $stack_sroa_0_4;
           var $j_0242_i;
           var $295 = HEAPU16[$227 + ($j_0242_i + $226 << 1) >> 1] * 3 & -1;
           var $298 = HEAPU16[$272 + ($295 << 1) >> 1];
           var $302 = HEAPU16[$272 + ($295 + 1 << 1) >> 1];
           var $306 = HEAPU16[$272 + ($295 + 2 << 1) >> 1];
           var $k_0237_i = 0;
           var $dmin_0238_i = 65535;
           var $ci_0239_i = -1;
           var $cz_0240_i = 0;
           var $cx_0241_i = 0;
           while (1) {
            var $cx_0241_i;
            var $cz_0240_i;
            var $ci_0239_i;
            var $dmin_0238_i;
            var $k_0237_i;
            var $308 = $k_0237_i << 1;
            var $311 = HEAP32[9592 + ($308 << 2) >> 2] + $298 | 0;
            var $315 = HEAP32[9592 + (($308 | 1) << 2) >> 2] + $306 | 0;
            do {
             if (($315 | 0) < ($270 | 0) & ((($311 | 0) >= ($266 | 0) | ($311 | 0) < ($260 | 0) | ($315 | 0) < ($263 | 0)) ^ 1)) {
              var $323 = $311 + $26 + Math.imul(HEAP32[$203 >> 2], $315 + $26 | 0) | 0;
              var $327 = HEAP32[HEAP32[$204 >> 2] + ($323 << 2) >> 2];
              var $328 = $327 & 16777215;
              var $329 = $327 >>> 24;
              var $330 = $328 + $329 | 0;
              if (($329 | 0) == 0) {
               var $cx_3_i = $cx_0241_i;
               var $cz_3_i = $cz_0240_i;
               var $ci_3_i = $ci_0239_i;
               var $dmin_3_i = $dmin_0238_i;
               break;
              }
              var $332 = HEAP32[$205 >> 2];
              var $i_0225_i = $328;
              var $dmin_1226_i = $dmin_0238_i;
              var $ci_1227_i = $ci_0239_i;
              var $cz_1228_i = $cz_0240_i;
              var $cx_1229_i = $cx_0241_i;
              while (1) {
               var $cx_1229_i;
               var $cz_1228_i;
               var $ci_1227_i;
               var $dmin_1226_i;
               var $i_0225_i;
               var $337 = $302 - HEAPU16[$332 + ($i_0225_i << 3) >> 1] | 0;
               var $340 = ($337 | 0) < 0 ? -$337 | 0 : $337;
               var $341 = ($340 | 0) < ($dmin_1226_i | 0);
               var $_dmin_1_i = $341 ? $340 : $dmin_1226_i;
               var $i_0_ci_1_i = $341 ? $i_0225_i : $ci_1227_i;
               var $_cz_1_i = $341 ? $315 : $cz_1228_i;
               var $_cx_1_i = $341 ? $311 : $cx_1229_i;
               var $342 = $i_0225_i + 1 | 0;
               if (($342 | 0) < ($330 | 0)) {
                var $i_0225_i = $342;
                var $dmin_1226_i = $_dmin_1_i;
                var $ci_1227_i = $i_0_ci_1_i;
                var $cz_1228_i = $_cz_1_i;
                var $cx_1229_i = $_cx_1_i;
               } else {
                var $cx_3_i = $_cx_1_i;
                var $cz_3_i = $_cz_1_i;
                var $ci_3_i = $i_0_ci_1_i;
                var $dmin_3_i = $_dmin_1_i;
                break;
               }
              }
             } else {
              var $cx_3_i = $cx_0241_i;
              var $cz_3_i = $cz_0240_i;
              var $ci_3_i = $ci_0239_i;
              var $dmin_3_i = $dmin_0238_i;
             }
            } while (0);
            var $dmin_3_i;
            var $ci_3_i;
            var $cz_3_i;
            var $cx_3_i;
            var $344 = $k_0237_i + 1 | 0;
            if (($344 | 0) < 9) {
             var $k_0237_i = $344;
             var $dmin_0238_i = $dmin_3_i;
             var $ci_0239_i = $ci_3_i;
             var $cz_0240_i = $cz_3_i;
             var $cx_0241_i = $cx_3_i;
            } else {
             break;
            }
           }
           if (($ci_3_i | 0) == -1) {
            var $stack_sroa_0_8 = $stack_sroa_0_4;
            var $stack_sroa_2_9 = $stack_sroa_2_2;
           } else {
            var $stack_sroa_1_0_load = $stack_sroa_1;
            var $349 = $stack_sroa_1_0_load + 1 | 0;
            do {
             if (($stack_sroa_2_2 | 0) < ($349 | 0)) {
              if (($stack_sroa_2_2 | 0) == 0) {
               var $stack_sroa_2_3 = $349;
              } else {
               var $353 = $stack_sroa_2_2;
               while (1) {
                var $353;
                var $354 = $353 << 1;
                if (($354 | 0) < ($349 | 0)) {
                 var $353 = $354;
                } else {
                 var $stack_sroa_2_3 = $354;
                 break;
                }
               }
              }
              var $stack_sroa_2_3;
              var $357 = _malloc($stack_sroa_2_3 << 2);
              var $358 = $357;
              var $stack_sroa_1_0_load634 = $stack_sroa_1;
              if (!(($stack_sroa_1_0_load634 | 0) == 0 | ($357 | 0) == 0)) {
               var $362 = $stack_sroa_0_4;
               var $363 = $stack_sroa_1_0_load634 << 2;
               _memcpy($357, $362, $363) | 0;
              }
              if (($stack_sroa_0_4 | 0) == 0) {
               var $stack_sroa_0_5 = $358;
               var $stack_sroa_2_4 = $stack_sroa_2_3;
               break;
              }
              _free($stack_sroa_0_4);
              var $stack_sroa_0_5 = $358;
              var $stack_sroa_2_4 = $stack_sroa_2_3;
             } else {
              var $stack_sroa_0_5 = $stack_sroa_0_4;
              var $stack_sroa_2_4 = $stack_sroa_2_2;
             }
            } while (0);
            var $stack_sroa_2_4;
            var $stack_sroa_0_5;
            $stack_sroa_1 = $349;
            HEAP32[$stack_sroa_0_5 + ($stack_sroa_1_0_load << 2) >> 2] = $cx_3_i;
            var $stack_sroa_1_0_load603 = $stack_sroa_1;
            var $368 = $stack_sroa_1_0_load603 + 1 | 0;
            do {
             if (($stack_sroa_2_4 | 0) < ($368 | 0)) {
              if (($stack_sroa_2_4 | 0) == 0) {
               var $stack_sroa_2_5 = $368;
              } else {
               var $372 = $stack_sroa_2_4;
               while (1) {
                var $372;
                var $373 = $372 << 1;
                if (($373 | 0) < ($368 | 0)) {
                 var $372 = $373;
                } else {
                 var $stack_sroa_2_5 = $373;
                 break;
                }
               }
              }
              var $stack_sroa_2_5;
              var $376 = _malloc($stack_sroa_2_5 << 2);
              var $377 = $376;
              var $stack_sroa_1_0_load635 = $stack_sroa_1;
              if (!(($stack_sroa_1_0_load635 | 0) == 0 | ($376 | 0) == 0)) {
               var $381 = $stack_sroa_0_5;
               var $382 = $stack_sroa_1_0_load635 << 2;
               _memcpy($376, $381, $382) | 0;
              }
              if (($stack_sroa_0_5 | 0) == 0) {
               var $stack_sroa_0_6 = $377;
               var $stack_sroa_2_6 = $stack_sroa_2_5;
               break;
              }
              _free($stack_sroa_0_5);
              var $stack_sroa_0_6 = $377;
              var $stack_sroa_2_6 = $stack_sroa_2_5;
             } else {
              var $stack_sroa_0_6 = $stack_sroa_0_5;
              var $stack_sroa_2_6 = $stack_sroa_2_4;
             }
            } while (0);
            var $stack_sroa_2_6;
            var $stack_sroa_0_6;
            $stack_sroa_1 = $368;
            HEAP32[$stack_sroa_0_6 + ($stack_sroa_1_0_load603 << 2) >> 2] = $cz_3_i;
            var $stack_sroa_1_0_load605 = $stack_sroa_1;
            var $387 = $stack_sroa_1_0_load605 + 1 | 0;
            do {
             if (($stack_sroa_2_6 | 0) < ($387 | 0)) {
              if (($stack_sroa_2_6 | 0) == 0) {
               var $stack_sroa_2_7 = $387;
              } else {
               var $391 = $stack_sroa_2_6;
               while (1) {
                var $391;
                var $392 = $391 << 1;
                if (($392 | 0) < ($387 | 0)) {
                 var $391 = $392;
                } else {
                 var $stack_sroa_2_7 = $392;
                 break;
                }
               }
              }
              var $stack_sroa_2_7;
              var $395 = _malloc($stack_sroa_2_7 << 2);
              var $396 = $395;
              var $stack_sroa_1_0_load636 = $stack_sroa_1;
              if (!(($stack_sroa_1_0_load636 | 0) == 0 | ($395 | 0) == 0)) {
               var $400 = $stack_sroa_0_6;
               var $401 = $stack_sroa_1_0_load636 << 2;
               _memcpy($395, $400, $401) | 0;
              }
              if (($stack_sroa_0_6 | 0) == 0) {
               var $stack_sroa_0_7 = $396;
               var $stack_sroa_2_8 = $stack_sroa_2_7;
               break;
              }
              _free($stack_sroa_0_6);
              var $stack_sroa_0_7 = $396;
              var $stack_sroa_2_8 = $stack_sroa_2_7;
             } else {
              var $stack_sroa_0_7 = $stack_sroa_0_6;
              var $stack_sroa_2_8 = $stack_sroa_2_6;
             }
            } while (0);
            var $stack_sroa_2_8;
            var $stack_sroa_0_7;
            $stack_sroa_1 = $387;
            HEAP32[$stack_sroa_0_7 + ($stack_sroa_1_0_load605 << 2) >> 2] = $ci_3_i;
            var $stack_sroa_0_8 = $stack_sroa_0_7;
            var $stack_sroa_2_9 = $stack_sroa_2_8;
           }
           var $stack_sroa_2_9;
           var $stack_sroa_0_8;
           var $407 = $j_0242_i + 1 | 0;
           if (($407 | 0) < ($npoly_0_lcssa | 0)) {
            var $j_0242_i = $407;
            var $stack_sroa_0_4 = $stack_sroa_0_8;
            var $stack_sroa_2_2 = $stack_sroa_2_9;
           } else {
            var $j1_0217_i = 0;
            var $pcz_0218_i = 0;
            var $pcx_0219_i = 0;
            break;
           }
          }
          while (1) {
           var $pcx_0219_i;
           var $pcz_0218_i;
           var $j1_0217_i;
           var $412 = HEAPU16[$227 + ($j1_0217_i + $226 << 1) >> 1] * 3 & -1;
           var $416 = HEAPU16[$272 + ($412 << 1) >> 1] + $pcx_0219_i | 0;
           var $421 = HEAPU16[$272 + ($412 + 2 << 1) >> 1] + $pcz_0218_i | 0;
           var $422 = $j1_0217_i + 1 | 0;
           if (($422 | 0) < ($npoly_0_lcssa | 0)) {
            var $j1_0217_i = $422;
            var $pcz_0218_i = $421;
            var $pcx_0219_i = $416;
           } else {
            break;
           }
          }
          var $424 = ($416 | 0) / ($npoly_0_lcssa | 0) & -1;
          var $425 = ($421 | 0) / ($npoly_0_lcssa | 0) & -1;
          if (($stack_sroa_1 | 0) > 0) {
           var $i2_0211_i = 0;
          } else {
           var $stack_sroa_0_20 = $stack_sroa_0_8;
           var $stack_sroa_2_27 = $stack_sroa_2_9;
           break;
          }
          while (1) {
           var $i2_0211_i;
           var $432 = HEAP32[$stack_sroa_0_8 + ($i2_0211_i << 2) >> 2] - $260 | 0;
           HEAP16[$164 + ($432 + Math.imul(HEAP32[$stack_sroa_0_8 + ($i2_0211_i + 1 << 2) >> 2] - $263 | 0, $267) << 1) >> 1] = 1;
           var $437 = $i2_0211_i + 3 | 0;
           var $stack_sroa_1_0_load608 = $stack_sroa_1;
           if (($437 | 0) < ($stack_sroa_1_0_load608 | 0)) {
            var $i2_0211_i = $437;
           } else {
            break;
           }
          }
          if (($stack_sroa_1_0_load608 | 0) > 0) {
           var $440 = $stack_sroa_1_0_load608;
           var $stack_sroa_0_10 = $stack_sroa_0_8;
           var $stack_sroa_2_11 = $stack_sroa_2_9;
          } else {
           var $stack_sroa_0_20 = $stack_sroa_0_8;
           var $stack_sroa_2_27 = $stack_sroa_2_9;
           break;
          }
          while (1) {
           var $stack_sroa_2_11;
           var $stack_sroa_0_10;
           var $440;
           var $441 = $440 - 1 | 0;
           $stack_sroa_1 = $441;
           var $443 = HEAP32[$stack_sroa_0_10 + ($441 << 2) >> 2];
           do {
            if (($441 | 0) > 0) {
             var $445 = $440 - 2 | 0;
             $stack_sroa_1 = $445;
             var $447 = HEAP32[$stack_sroa_0_10 + ($445 << 2) >> 2];
             if (($445 | 0) <= 0) {
              var $452 = $447;
              var $451 = $447;
              break;
             }
             var $450 = $440 - 3 | 0;
             $stack_sroa_1 = $450;
             var $452 = $447;
             var $451 = HEAP32[$stack_sroa_0_10 + ($450 << 2) >> 2];
            } else {
             var $452 = $443;
             var $451 = $443;
            }
           } while (0);
           var $451;
           var $452;
           var $453 = $451 - $424 | 0;
           if (((($453 | 0) < 0 ? -$453 | 0 : $453) | 0) < 2) {
            var $459 = $452 - $425 | 0;
            if (((($459 | 0) < 0 ? -$459 | 0 : $459) | 0) < 2) {
             break;
            }
           }
           var $538 = HEAP32[$205 >> 2] + ($443 << 3) + 4 | 0;
           var $dir_0203_i = 0;
           var $stack_sroa_0_15 = $stack_sroa_0_10;
           var $stack_sroa_2_19 = $stack_sroa_2_11;
           while (1) {
            var $stack_sroa_2_19;
            var $stack_sroa_0_15;
            var $dir_0203_i;
            var $543 = (HEAP32[$538 >> 2] & 16777215) >>> (($dir_0203_i * 6 & -1) >>> 0) & 63;
            do {
             if (($543 | 0) == 63) {
              var $stack_sroa_0_19 = $stack_sroa_0_15;
              var $stack_sroa_2_26 = $stack_sroa_2_19;
             } else {
              var $548 = HEAP32[9712 + ($dir_0203_i << 2) >> 2] + $451 | 0;
              var $551 = HEAP32[9696 + ($dir_0203_i << 2) >> 2] + $452 | 0;
              if (!(($551 | 0) < ($270 | 0) & ((($548 | 0) >= ($266 | 0) | ($548 | 0) < ($260 | 0) | ($551 | 0) < ($263 | 0)) ^ 1))) {
               var $stack_sroa_0_19 = $stack_sroa_0_15;
               var $stack_sroa_2_26 = $stack_sroa_2_19;
               break;
              }
              var $559 = $164 + ($548 - $260 + Math.imul($551 - $263 | 0, $267) << 1) | 0;
              if ((HEAP16[$559 >> 1] | 0) != 0) {
               var $stack_sroa_0_19 = $stack_sroa_0_15;
               var $stack_sroa_2_26 = $stack_sroa_2_19;
               break;
              }
              var $567 = $548 + $26 + Math.imul(HEAP32[$203 >> 2], $551 + $26 | 0) | 0;
              var $573 = (HEAP32[HEAP32[$204 >> 2] + ($567 << 2) >> 2] & 16777215) + $543 | 0;
              HEAP16[$559 >> 1] = 1;
              var $stack_sroa_1_0_load616 = $stack_sroa_1;
              var $574 = $stack_sroa_1_0_load616 + 1 | 0;
              do {
               if (($stack_sroa_2_19 | 0) < ($574 | 0)) {
                if (($stack_sroa_2_19 | 0) == 0) {
                 var $stack_sroa_2_20 = $574;
                } else {
                 var $578 = $stack_sroa_2_19;
                 while (1) {
                  var $578;
                  var $579 = $578 << 1;
                  if (($579 | 0) < ($574 | 0)) {
                   var $578 = $579;
                  } else {
                   var $stack_sroa_2_20 = $579;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_20;
                var $582 = _malloc($stack_sroa_2_20 << 2);
                var $583 = $582;
                var $stack_sroa_1_0_load641 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load641 | 0) == 0 | ($582 | 0) == 0)) {
                 var $587 = $stack_sroa_0_15;
                 var $588 = $stack_sroa_1_0_load641 << 2;
                 _memcpy($582, $587, $588) | 0;
                }
                if (($stack_sroa_0_15 | 0) == 0) {
                 var $stack_sroa_0_16 = $583;
                 var $stack_sroa_2_21 = $stack_sroa_2_20;
                 break;
                }
                _free($stack_sroa_0_15);
                var $stack_sroa_0_16 = $583;
                var $stack_sroa_2_21 = $stack_sroa_2_20;
               } else {
                var $stack_sroa_0_16 = $stack_sroa_0_15;
                var $stack_sroa_2_21 = $stack_sroa_2_19;
               }
              } while (0);
              var $stack_sroa_2_21;
              var $stack_sroa_0_16;
              $stack_sroa_1 = $574;
              HEAP32[$stack_sroa_0_16 + ($stack_sroa_1_0_load616 << 2) >> 2] = $548;
              var $stack_sroa_1_0_load618 = $stack_sroa_1;
              var $593 = $stack_sroa_1_0_load618 + 1 | 0;
              do {
               if (($stack_sroa_2_21 | 0) < ($593 | 0)) {
                if (($stack_sroa_2_21 | 0) == 0) {
                 var $stack_sroa_2_22 = $593;
                } else {
                 var $597 = $stack_sroa_2_21;
                 while (1) {
                  var $597;
                  var $598 = $597 << 1;
                  if (($598 | 0) < ($593 | 0)) {
                   var $597 = $598;
                  } else {
                   var $stack_sroa_2_22 = $598;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_22;
                var $601 = _malloc($stack_sroa_2_22 << 2);
                var $602 = $601;
                var $stack_sroa_1_0_load642 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load642 | 0) == 0 | ($601 | 0) == 0)) {
                 var $606 = $stack_sroa_0_16;
                 var $607 = $stack_sroa_1_0_load642 << 2;
                 _memcpy($601, $606, $607) | 0;
                }
                if (($stack_sroa_0_16 | 0) == 0) {
                 var $stack_sroa_0_17 = $602;
                 var $stack_sroa_2_23 = $stack_sroa_2_22;
                 break;
                }
                _free($stack_sroa_0_16);
                var $stack_sroa_0_17 = $602;
                var $stack_sroa_2_23 = $stack_sroa_2_22;
               } else {
                var $stack_sroa_0_17 = $stack_sroa_0_16;
                var $stack_sroa_2_23 = $stack_sroa_2_21;
               }
              } while (0);
              var $stack_sroa_2_23;
              var $stack_sroa_0_17;
              $stack_sroa_1 = $593;
              HEAP32[$stack_sroa_0_17 + ($stack_sroa_1_0_load618 << 2) >> 2] = $551;
              var $stack_sroa_1_0_load620 = $stack_sroa_1;
              var $612 = $stack_sroa_1_0_load620 + 1 | 0;
              do {
               if (($stack_sroa_2_23 | 0) < ($612 | 0)) {
                if (($stack_sroa_2_23 | 0) == 0) {
                 var $stack_sroa_2_24 = $612;
                } else {
                 var $616 = $stack_sroa_2_23;
                 while (1) {
                  var $616;
                  var $617 = $616 << 1;
                  if (($617 | 0) < ($612 | 0)) {
                   var $616 = $617;
                  } else {
                   var $stack_sroa_2_24 = $617;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_24;
                var $620 = _malloc($stack_sroa_2_24 << 2);
                var $621 = $620;
                var $stack_sroa_1_0_load643 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load643 | 0) == 0 | ($620 | 0) == 0)) {
                 var $625 = $stack_sroa_0_17;
                 var $626 = $stack_sroa_1_0_load643 << 2;
                 _memcpy($620, $625, $626) | 0;
                }
                if (($stack_sroa_0_17 | 0) == 0) {
                 var $stack_sroa_0_18 = $621;
                 var $stack_sroa_2_25 = $stack_sroa_2_24;
                 break;
                }
                _free($stack_sroa_0_17);
                var $stack_sroa_0_18 = $621;
                var $stack_sroa_2_25 = $stack_sroa_2_24;
               } else {
                var $stack_sroa_0_18 = $stack_sroa_0_17;
                var $stack_sroa_2_25 = $stack_sroa_2_23;
               }
              } while (0);
              var $stack_sroa_2_25;
              var $stack_sroa_0_18;
              $stack_sroa_1 = $612;
              HEAP32[$stack_sroa_0_18 + ($stack_sroa_1_0_load620 << 2) >> 2] = $573;
              var $stack_sroa_0_19 = $stack_sroa_0_18;
              var $stack_sroa_2_26 = $stack_sroa_2_25;
             }
            } while (0);
            var $stack_sroa_2_26;
            var $stack_sroa_0_19;
            var $632 = $dir_0203_i + 1 | 0;
            if (($632 | 0) < 4) {
             var $dir_0203_i = $632;
             var $stack_sroa_0_15 = $stack_sroa_0_19;
             var $stack_sroa_2_19 = $stack_sroa_2_26;
            } else {
             break;
            }
           }
           var $stack_sroa_1_0_load609 = $stack_sroa_1;
           if (($stack_sroa_1_0_load609 | 0) > 0) {
            var $440 = $stack_sroa_1_0_load609;
            var $stack_sroa_0_10 = $stack_sroa_0_19;
            var $stack_sroa_2_11 = $stack_sroa_2_26;
           } else {
            var $stack_sroa_0_20 = $stack_sroa_0_19;
            var $stack_sroa_2_27 = $stack_sroa_2_26;
            break L3000;
           }
          }
          do {
           if (($stack_sroa_2_11 | 0) < 0) {
            var $466 = $stack_sroa_2_11;
            while (1) {
             var $466;
             var $467 = $466 << 1;
             if (($467 | 0) < 0) {
              var $466 = $467;
             } else {
              break;
             }
            }
            var $471 = _malloc($466 << 3);
            var $472 = $471;
            var $stack_sroa_1_0_load637 = $stack_sroa_1;
            if (!(($stack_sroa_1_0_load637 | 0) == 0 | ($471 | 0) == 0)) {
             var $476 = $stack_sroa_0_10;
             var $477 = $stack_sroa_1_0_load637 << 2;
             _memcpy($471, $476, $477) | 0;
            }
            if (($stack_sroa_0_10 | 0) == 0) {
             var $stack_sroa_0_11 = $472;
             var $stack_sroa_2_12 = $467;
             break;
            }
            _free($stack_sroa_0_10);
            var $stack_sroa_0_11 = $472;
            var $stack_sroa_2_12 = $467;
           } else {
            var $stack_sroa_0_11 = $stack_sroa_0_10;
            var $stack_sroa_2_12 = $stack_sroa_2_11;
           }
          } while (0);
          var $stack_sroa_2_12;
          var $stack_sroa_0_11;
          $stack_sroa_1 = 0;
          do {
           if (($stack_sroa_2_12 | 0) < 1) {
            if (($stack_sroa_2_12 | 0) == 0) {
             var $stack_sroa_2_13 = 1;
            } else {
             var $484 = $stack_sroa_2_12;
             while (1) {
              var $484;
              var $485 = $484 << 1;
              if (($485 | 0) < 1) {
               var $484 = $485;
              } else {
               var $stack_sroa_2_13 = $485;
               break;
              }
             }
            }
            var $stack_sroa_2_13;
            var $488 = _malloc($stack_sroa_2_13 << 2);
            var $489 = $488;
            var $stack_sroa_1_0_load638 = $stack_sroa_1;
            if (!(($stack_sroa_1_0_load638 | 0) == 0 | ($488 | 0) == 0)) {
             var $493 = $stack_sroa_0_11;
             var $494 = $stack_sroa_1_0_load638 << 2;
             _memcpy($488, $493, $494) | 0;
            }
            if (($stack_sroa_0_11 | 0) == 0) {
             var $stack_sroa_0_12 = $489;
             var $stack_sroa_2_14 = $stack_sroa_2_13;
             break;
            }
            _free($stack_sroa_0_11);
            var $stack_sroa_0_12 = $489;
            var $stack_sroa_2_14 = $stack_sroa_2_13;
           } else {
            var $stack_sroa_0_12 = $stack_sroa_0_11;
            var $stack_sroa_2_14 = $stack_sroa_2_12;
           }
          } while (0);
          var $stack_sroa_2_14;
          var $stack_sroa_0_12;
          $stack_sroa_1 = 1;
          HEAP32[$stack_sroa_0_12 >> 2] = $451;
          var $stack_sroa_1_0_load612 = $stack_sroa_1;
          var $498 = $stack_sroa_1_0_load612 + 1 | 0;
          do {
           if (($stack_sroa_2_14 | 0) < ($498 | 0)) {
            if (($stack_sroa_2_14 | 0) == 0) {
             var $stack_sroa_2_15 = $498;
            } else {
             var $502 = $stack_sroa_2_14;
             while (1) {
              var $502;
              var $503 = $502 << 1;
              if (($503 | 0) < ($498 | 0)) {
               var $502 = $503;
              } else {
               var $stack_sroa_2_15 = $503;
               break;
              }
             }
            }
            var $stack_sroa_2_15;
            var $506 = _malloc($stack_sroa_2_15 << 2);
            var $507 = $506;
            var $stack_sroa_1_0_load639 = $stack_sroa_1;
            if (!(($stack_sroa_1_0_load639 | 0) == 0 | ($506 | 0) == 0)) {
             var $511 = $stack_sroa_0_12;
             var $512 = $stack_sroa_1_0_load639 << 2;
             _memcpy($506, $511, $512) | 0;
            }
            if (($stack_sroa_0_12 | 0) == 0) {
             var $stack_sroa_0_13 = $507;
             var $stack_sroa_2_16 = $stack_sroa_2_15;
             break;
            }
            _free($stack_sroa_0_12);
            var $stack_sroa_0_13 = $507;
            var $stack_sroa_2_16 = $stack_sroa_2_15;
           } else {
            var $stack_sroa_0_13 = $stack_sroa_0_12;
            var $stack_sroa_2_16 = $stack_sroa_2_14;
           }
          } while (0);
          var $stack_sroa_2_16;
          var $stack_sroa_0_13;
          $stack_sroa_1 = $498;
          HEAP32[$stack_sroa_0_13 + ($stack_sroa_1_0_load612 << 2) >> 2] = $452;
          var $stack_sroa_1_0_load614 = $stack_sroa_1;
          var $517 = $stack_sroa_1_0_load614 + 1 | 0;
          do {
           if (($stack_sroa_2_16 | 0) < ($517 | 0)) {
            if (($stack_sroa_2_16 | 0) == 0) {
             var $stack_sroa_2_17 = $517;
            } else {
             var $521 = $stack_sroa_2_16;
             while (1) {
              var $521;
              var $522 = $521 << 1;
              if (($522 | 0) < ($517 | 0)) {
               var $521 = $522;
              } else {
               var $stack_sroa_2_17 = $522;
               break;
              }
             }
            }
            var $stack_sroa_2_17;
            var $525 = _malloc($stack_sroa_2_17 << 2);
            var $526 = $525;
            var $stack_sroa_1_0_load640 = $stack_sroa_1;
            if (!(($stack_sroa_1_0_load640 | 0) == 0 | ($525 | 0) == 0)) {
             var $530 = $stack_sroa_0_13;
             var $531 = $stack_sroa_1_0_load640 << 2;
             _memcpy($525, $530, $531) | 0;
            }
            if (($stack_sroa_0_13 | 0) == 0) {
             var $stack_sroa_0_14 = $526;
             var $stack_sroa_2_18 = $stack_sroa_2_17;
             break;
            }
            _free($stack_sroa_0_13);
            var $stack_sroa_0_14 = $526;
            var $stack_sroa_2_18 = $stack_sroa_2_17;
           } else {
            var $stack_sroa_0_14 = $stack_sroa_0_13;
            var $stack_sroa_2_18 = $stack_sroa_2_16;
           }
          } while (0);
          var $stack_sroa_2_18;
          var $stack_sroa_0_14;
          $stack_sroa_1 = $517;
          HEAP32[$stack_sroa_0_14 + ($stack_sroa_1_0_load614 << 2) >> 2] = $443;
          var $stack_sroa_0_20 = $stack_sroa_0_14;
          var $stack_sroa_2_27 = $stack_sroa_2_18;
         } else {
          var $stack_sroa_0_20 = $stack_sroa_0_3;
          var $stack_sroa_2_27 = $stack_sroa_2_1;
         }
        } while (0);
        var $stack_sroa_2_27;
        var $stack_sroa_0_20;
        _memset($163, -1, $274);
        do {
         if (($stack_sroa_1 | 0) > 0) {
          var $i10_0200_i = 0;
          while (1) {
           var $i10_0200_i;
           var $643 = HEAP32[$stack_sroa_0_20 + ($i10_0200_i + 2 << 2) >> 2];
           var $644 = HEAP32[$stack_sroa_0_20 + ($i10_0200_i << 2) >> 2] - $260 | 0;
           var $647 = $644 + Math.imul(HEAP32[$stack_sroa_0_20 + ($i10_0200_i + 1 << 2) >> 2] - $263 | 0, $267) | 0;
           HEAP16[$164 + ($647 << 1) >> 1] = HEAP16[HEAP32[$205 >> 2] + ($643 << 3) >> 1];
           var $652 = $i10_0200_i + 3 | 0;
           var $stack_sroa_1_0_load623 = $stack_sroa_1;
           if (($652 | 0) < ($stack_sroa_1_0_load623 | 0)) {
            var $i10_0200_i = $652;
           } else {
            break;
           }
          }
          if (($stack_sroa_1_0_load623 | 0) > 0) {
           var $head_0199_i = 0;
           var $657 = 0;
           var $656 = $stack_sroa_1_0_load623;
           var $stack_sroa_0_21 = $stack_sroa_0_20;
           var $stack_sroa_2_28 = $stack_sroa_2_27;
          } else {
           var $stack_sroa_0_29 = $stack_sroa_0_20;
           var $stack_sroa_2_40 = $stack_sroa_2_27;
           break;
          }
          while (1) {
           var $stack_sroa_2_28;
           var $stack_sroa_0_21;
           var $656;
           var $657;
           var $head_0199_i;
           var $659 = HEAP32[$stack_sroa_0_21 + ($657 << 2) >> 2];
           var $662 = HEAP32[$stack_sroa_0_21 + ($657 + 1 << 2) >> 2];
           var $665 = HEAP32[$stack_sroa_0_21 + ($657 + 2 << 2) >> 2];
           var $666 = $head_0199_i + 1 | 0;
           if (($666 | 0) > 255) {
            if (($656 | 0) > 768) {
             _memmove($stack_sroa_0_21, $stack_sroa_0_21 + 3072 | 0, ($656 << 2) - 3072 | 0, 4, 0);
             var $677 = $stack_sroa_1;
            } else {
             var $677 = $656;
            }
            var $677;
            var $678 = $677 - 768 | 0;
            do {
             if (($stack_sroa_2_28 | 0) < ($678 | 0)) {
              if (($stack_sroa_2_28 | 0) == 0) {
               var $stack_sroa_2_29 = $678;
              } else {
               var $682 = $stack_sroa_2_28;
               while (1) {
                var $682;
                var $683 = $682 << 1;
                if (($683 | 0) < ($678 | 0)) {
                 var $682 = $683;
                } else {
                 var $stack_sroa_2_29 = $683;
                 break;
                }
               }
              }
              var $stack_sroa_2_29;
              var $686 = _malloc($stack_sroa_2_29 << 2);
              var $687 = $686;
              var $stack_sroa_1_0_load644 = $stack_sroa_1;
              if (!(($stack_sroa_1_0_load644 | 0) == 0 | ($686 | 0) == 0)) {
               var $691 = $stack_sroa_0_21;
               var $692 = $stack_sroa_1_0_load644 << 2;
               _memcpy($686, $691, $692) | 0;
              }
              if (($stack_sroa_0_21 | 0) == 0) {
               var $stack_sroa_0_22 = $687;
               var $stack_sroa_2_30 = $stack_sroa_2_29;
               break;
              }
              _free($stack_sroa_0_21);
              var $stack_sroa_0_22 = $687;
              var $stack_sroa_2_30 = $stack_sroa_2_29;
             } else {
              var $stack_sroa_0_22 = $stack_sroa_0_21;
              var $stack_sroa_2_30 = $stack_sroa_2_28;
             }
            } while (0);
            var $stack_sroa_2_30;
            var $stack_sroa_0_22;
            $stack_sroa_1 = $678;
            var $head_1_i = 0;
            var $stack_sroa_0_23 = $stack_sroa_0_22;
            var $stack_sroa_2_31 = $stack_sroa_2_30;
           } else {
            var $head_1_i = $666;
            var $stack_sroa_0_23 = $stack_sroa_0_21;
            var $stack_sroa_2_31 = $stack_sroa_2_28;
           }
           var $stack_sroa_2_31;
           var $stack_sroa_0_23;
           var $head_1_i;
           var $698 = HEAP32[$205 >> 2] + ($665 << 3) + 4 | 0;
           var $dir20_0198_i = 0;
           var $stack_sroa_0_24 = $stack_sroa_0_23;
           var $stack_sroa_2_32 = $stack_sroa_2_31;
           while (1) {
            var $stack_sroa_2_32;
            var $stack_sroa_0_24;
            var $dir20_0198_i;
            var $703 = (HEAP32[$698 >> 2] & 16777215) >>> (($dir20_0198_i * 6 & -1) >>> 0) & 63;
            do {
             if (($703 | 0) == 63) {
              var $stack_sroa_0_28 = $stack_sroa_0_24;
              var $stack_sroa_2_39 = $stack_sroa_2_32;
             } else {
              var $708 = HEAP32[9712 + ($dir20_0198_i << 2) >> 2] + $659 | 0;
              var $711 = HEAP32[9696 + ($dir20_0198_i << 2) >> 2] + $662 | 0;
              if (!(($711 | 0) < ($270 | 0) & ((($708 | 0) >= ($266 | 0) | ($708 | 0) < ($260 | 0) | ($711 | 0) < ($263 | 0)) ^ 1))) {
               var $stack_sroa_0_28 = $stack_sroa_0_24;
               var $stack_sroa_2_39 = $stack_sroa_2_32;
               break;
              }
              var $719 = $164 + ($708 - $260 + Math.imul($711 - $263 | 0, $267) << 1) | 0;
              if ((HEAP16[$719 >> 1] | 0) != -1) {
               var $stack_sroa_0_28 = $stack_sroa_0_24;
               var $stack_sroa_2_39 = $stack_sroa_2_32;
               break;
              }
              var $727 = $708 + $26 + Math.imul(HEAP32[$203 >> 2], $711 + $26 | 0) | 0;
              var $733 = (HEAP32[HEAP32[$204 >> 2] + ($727 << 2) >> 2] & 16777215) + $703 | 0;
              HEAP16[$719 >> 1] = HEAP16[HEAP32[$205 >> 2] + ($733 << 3) >> 1];
              var $stack_sroa_1_0_load626 = $stack_sroa_1;
              var $737 = $stack_sroa_1_0_load626 + 1 | 0;
              do {
               if (($stack_sroa_2_32 | 0) < ($737 | 0)) {
                if (($stack_sroa_2_32 | 0) == 0) {
                 var $stack_sroa_2_33 = $737;
                } else {
                 var $741 = $stack_sroa_2_32;
                 while (1) {
                  var $741;
                  var $742 = $741 << 1;
                  if (($742 | 0) < ($737 | 0)) {
                   var $741 = $742;
                  } else {
                   var $stack_sroa_2_33 = $742;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_33;
                var $745 = _malloc($stack_sroa_2_33 << 2);
                var $746 = $745;
                var $stack_sroa_1_0_load645 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load645 | 0) == 0 | ($745 | 0) == 0)) {
                 var $750 = $stack_sroa_0_24;
                 var $751 = $stack_sroa_1_0_load645 << 2;
                 _memcpy($745, $750, $751) | 0;
                }
                if (($stack_sroa_0_24 | 0) == 0) {
                 var $stack_sroa_0_25 = $746;
                 var $stack_sroa_2_34 = $stack_sroa_2_33;
                 break;
                }
                _free($stack_sroa_0_24);
                var $stack_sroa_0_25 = $746;
                var $stack_sroa_2_34 = $stack_sroa_2_33;
               } else {
                var $stack_sroa_0_25 = $stack_sroa_0_24;
                var $stack_sroa_2_34 = $stack_sroa_2_32;
               }
              } while (0);
              var $stack_sroa_2_34;
              var $stack_sroa_0_25;
              $stack_sroa_1 = $737;
              HEAP32[$stack_sroa_0_25 + ($stack_sroa_1_0_load626 << 2) >> 2] = $708;
              var $stack_sroa_1_0_load628 = $stack_sroa_1;
              var $756 = $stack_sroa_1_0_load628 + 1 | 0;
              do {
               if (($stack_sroa_2_34 | 0) < ($756 | 0)) {
                if (($stack_sroa_2_34 | 0) == 0) {
                 var $stack_sroa_2_35 = $756;
                } else {
                 var $760 = $stack_sroa_2_34;
                 while (1) {
                  var $760;
                  var $761 = $760 << 1;
                  if (($761 | 0) < ($756 | 0)) {
                   var $760 = $761;
                  } else {
                   var $stack_sroa_2_35 = $761;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_35;
                var $764 = _malloc($stack_sroa_2_35 << 2);
                var $765 = $764;
                var $stack_sroa_1_0_load646 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load646 | 0) == 0 | ($764 | 0) == 0)) {
                 var $769 = $stack_sroa_0_25;
                 var $770 = $stack_sroa_1_0_load646 << 2;
                 _memcpy($764, $769, $770) | 0;
                }
                if (($stack_sroa_0_25 | 0) == 0) {
                 var $stack_sroa_0_26 = $765;
                 var $stack_sroa_2_36 = $stack_sroa_2_35;
                 break;
                }
                _free($stack_sroa_0_25);
                var $stack_sroa_0_26 = $765;
                var $stack_sroa_2_36 = $stack_sroa_2_35;
               } else {
                var $stack_sroa_0_26 = $stack_sroa_0_25;
                var $stack_sroa_2_36 = $stack_sroa_2_34;
               }
              } while (0);
              var $stack_sroa_2_36;
              var $stack_sroa_0_26;
              $stack_sroa_1 = $756;
              HEAP32[$stack_sroa_0_26 + ($stack_sroa_1_0_load628 << 2) >> 2] = $711;
              var $stack_sroa_1_0_load630 = $stack_sroa_1;
              var $775 = $stack_sroa_1_0_load630 + 1 | 0;
              do {
               if (($stack_sroa_2_36 | 0) < ($775 | 0)) {
                if (($stack_sroa_2_36 | 0) == 0) {
                 var $stack_sroa_2_37 = $775;
                } else {
                 var $779 = $stack_sroa_2_36;
                 while (1) {
                  var $779;
                  var $780 = $779 << 1;
                  if (($780 | 0) < ($775 | 0)) {
                   var $779 = $780;
                  } else {
                   var $stack_sroa_2_37 = $780;
                   break;
                  }
                 }
                }
                var $stack_sroa_2_37;
                var $783 = _malloc($stack_sroa_2_37 << 2);
                var $784 = $783;
                var $stack_sroa_1_0_load647 = $stack_sroa_1;
                if (!(($stack_sroa_1_0_load647 | 0) == 0 | ($783 | 0) == 0)) {
                 var $788 = $stack_sroa_0_26;
                 var $789 = $stack_sroa_1_0_load647 << 2;
                 _memcpy($783, $788, $789) | 0;
                }
                if (($stack_sroa_0_26 | 0) == 0) {
                 var $stack_sroa_0_27 = $784;
                 var $stack_sroa_2_38 = $stack_sroa_2_37;
                 break;
                }
                _free($stack_sroa_0_26);
                var $stack_sroa_0_27 = $784;
                var $stack_sroa_2_38 = $stack_sroa_2_37;
               } else {
                var $stack_sroa_0_27 = $stack_sroa_0_26;
                var $stack_sroa_2_38 = $stack_sroa_2_36;
               }
              } while (0);
              var $stack_sroa_2_38;
              var $stack_sroa_0_27;
              $stack_sroa_1 = $775;
              HEAP32[$stack_sroa_0_27 + ($stack_sroa_1_0_load630 << 2) >> 2] = $733;
              var $stack_sroa_0_28 = $stack_sroa_0_27;
              var $stack_sroa_2_39 = $stack_sroa_2_38;
             }
            } while (0);
            var $stack_sroa_2_39;
            var $stack_sroa_0_28;
            var $795 = $dir20_0198_i + 1 | 0;
            if (($795 | 0) < 4) {
             var $dir20_0198_i = $795;
             var $stack_sroa_0_24 = $stack_sroa_0_28;
             var $stack_sroa_2_32 = $stack_sroa_2_39;
            } else {
             break;
            }
           }
           var $stack_sroa_1_0_load624 = $stack_sroa_1;
           var $654 = $head_1_i * 3 & -1;
           if (($654 | 0) < ($stack_sroa_1_0_load624 | 0)) {
            var $head_0199_i = $head_1_i;
            var $657 = $654;
            var $656 = $stack_sroa_1_0_load624;
            var $stack_sroa_0_21 = $stack_sroa_0_28;
            var $stack_sroa_2_28 = $stack_sroa_2_39;
           } else {
            var $stack_sroa_0_29 = $stack_sroa_0_28;
            var $stack_sroa_2_40 = $stack_sroa_2_39;
            break;
           }
          }
         } else {
          var $stack_sroa_0_29 = $stack_sroa_0_20;
          var $stack_sroa_2_40 = $stack_sroa_2_27;
         }
        } while (0);
        var $stack_sroa_2_40;
        var $stack_sroa_0_29;
        do {
         if ($291) {
          var $i_0161_i = 0;
          while (1) {
           var $i_0161_i;
           var $799 = $i_0161_i * 3 & -1;
           HEAPF32[$verts + ($799 << 2) >> 2] = HEAPF32[$69 + ($799 << 2) >> 2];
           var $_sum66_i = $799 + 1 | 0;
           HEAPF32[$verts + ($_sum66_i << 2) >> 2] = HEAPF32[$69 + ($_sum66_i << 2) >> 2];
           var $_sum68_i = $799 + 2 | 0;
           HEAPF32[$verts + ($_sum68_i << 2) >> 2] = HEAPF32[$69 + ($_sum68_i << 2) >> 2];
           var $809 = $i_0161_i + 1 | 0;
           if (($809 | 0) < ($npoly_0_lcssa | 0)) {
            var $i_0161_i = $809;
           } else {
            break;
           }
          }
          var $811 = HEAPF32[$219 >> 2];
          var $812 = 1 / $811;
          if (!$220) {
           var $nhull_4_i = 0;
           var $1058 = $npoly_0_lcssa;
           var $1057 = $811;
           var $1056 = $812;
           break;
          }
          var $j_0155_i = $npoly_0_lcssa - 1 | 0;
          var $i1_0156_i = 0;
          var $nhull_0157_i = 0;
          var $815 = $npoly_0_lcssa;
          while (1) {
           var $815;
           var $nhull_0157_i;
           var $i1_0156_i;
           var $j_0155_i;
           var $816 = $j_0155_i * 3 & -1;
           var $817 = $69 + ($816 << 2) | 0;
           var $818 = $i1_0156_i * 3 & -1;
           var $819 = $69 + ($818 << 2) | 0;
           var $820 = HEAPF32[$817 >> 2];
           var $821 = HEAPF32[$819 >> 2];
           do {
            if (Math.abs($820 - $821) < 9.999999974752427e-7) {
             if (HEAPF32[$69 + ($816 + 2 << 2) >> 2] <= HEAPF32[$69 + ($818 + 2 << 2) >> 2]) {
              var $swapped_0_off0_i = 0;
              var $837 = $819;
              var $836 = $817;
              break;
             }
             var $swapped_0_off0_i = 1;
             var $837 = $817;
             var $836 = $819;
            } else {
             if ($820 <= $821) {
              var $swapped_0_off0_i = 0;
              var $837 = $819;
              var $836 = $817;
              break;
             }
             var $swapped_0_off0_i = 1;
             var $837 = $817;
             var $836 = $819;
            }
           } while (0);
           var $836;
           var $837;
           var $swapped_0_off0_i;
           var $839 = HEAPF32[$836 >> 2];
           var $840 = HEAPF32[$837 >> 2] - $839;
           var $844 = HEAPF32[$836 + 4 >> 2];
           var $845 = HEAPF32[$837 + 4 >> 2] - $844;
           var $849 = HEAPF32[$836 + 8 >> 2];
           var $850 = HEAPF32[$837 + 8 >> 2] - $849;
           var $858 = (Math.floor(Math.sqrt($840 * $840 + $850 * $850) / $sampleDist) & -1) + 1 | 0;
           var $__i = ($858 | 0) > 31 ? 31 : $858;
           var $nn_1_i = ($__i + $815 | 0) > 126 ? 126 - $815 | 0 : $__i;
           if (($nn_1_i | 0) >= 0) {
            var $864 = $nn_1_i | 0;
            var $865 = HEAPF32[$213 >> 2];
            var $k_0110_i = 0;
            while (1) {
             var $k_0110_i;
             var $868 = ($k_0110_i | 0) / $864;
             var $869 = $k_0110_i * 3 & -1;
             var $872 = $839 + $840 * $868;
             HEAPF32[$edge_i + ($869 << 2) >> 2] = $872;
             var $874 = $844 + $845 * $868;
             var $875 = $edge_i + ($869 + 1 << 2) | 0;
             var $877 = $849 + $850 * $868;
             HEAPF32[$edge_i + ($869 + 2 << 2) >> 2] = $877;
             var $882 = Math.floor($812 * $872 + .009999999776482582) & -1;
             var $886 = Math.floor($812 * $877 + .009999999776482582) & -1;
             var $887 = $882 - $260 | 0;
             if (($887 | 0) < 0) {
              var $892 = 0;
             } else {
              var $892 = ($887 | 0) > ($267 | 0) ? $267 : $887;
             }
             var $892;
             var $893 = $886 - $263 | 0;
             if (($893 | 0) < 0) {
              var $898 = 0;
             } else {
              var $898 = ($893 | 0) > ($271 | 0) ? $271 : $893;
             }
             var $898;
             var $902 = HEAP16[$164 + (Math.imul($898, $267) + $892 << 1) >> 1];
             if ($902 << 16 >> 16 == -1) {
              var $i_02_i274 = 0;
              var $dmin_03_i273 = 3.4028234663852886e+38;
              var $h_04_i272 = -1;
              while (1) {
               var $h_04_i272;
               var $dmin_03_i273;
               var $i_02_i274;
               var $904 = $i_02_i274 << 1;
               var $907 = HEAP32[9528 + ($904 << 2) >> 2] + $892 | 0;
               var $911 = HEAP32[9528 + (($904 | 1) << 2) >> 2] + $898 | 0;
               do {
                if (($911 | $907 | 0) > -1 & ($907 | 0) < ($267 | 0) & ($911 | 0) < ($271 | 0)) {
                 var $920 = HEAP16[$164 + (Math.imul($911, $267) + $907 << 1) >> 1];
                 if ($920 << 16 >> 16 == -1) {
                  var $h_1_i279 = $h_04_i272;
                  var $dmin_1_i278 = $dmin_03_i273;
                  break;
                 }
                 var $927 = Math.abs($865 * ($920 & 65535 | 0) - $874);
                 if ($927 >= $dmin_03_i273) {
                  var $h_1_i279 = $h_04_i272;
                  var $dmin_1_i278 = $dmin_03_i273;
                  break;
                 }
                 var $h_1_i279 = $920;
                 var $dmin_1_i278 = $927;
                } else {
                 var $h_1_i279 = $h_04_i272;
                 var $dmin_1_i278 = $dmin_03_i273;
                }
               } while (0);
               var $dmin_1_i278;
               var $h_1_i279;
               var $931 = $i_02_i274 + 1 | 0;
               if (($931 | 0) < 8) {
                var $i_02_i274 = $931;
                var $dmin_03_i273 = $dmin_1_i278;
                var $h_04_i272 = $h_1_i279;
               } else {
                var $h_2_i280 = $h_1_i279;
                break;
               }
              }
             } else {
              var $h_2_i280 = $902;
             }
             var $h_2_i280;
             HEAPF32[$875 >> 2] = $865 * ($h_2_i280 & 65535 | 0);
             var $936 = $k_0110_i + 1 | 0;
             if (($936 | 0) > ($nn_1_i | 0)) {
              break;
             } else {
              var $k_0110_i = $936;
             }
            }
           }
           _memset($209, 0, 128);
           HEAP32[$221 >> 2] = $nn_1_i;
           var $k2_0_ph152_i = 0;
           var $nidx_0_ph153_i = 2;
           L3247 : while (1) {
            var $nidx_0_ph153_i;
            var $k2_0_ph152_i;
            var $940 = $idx_i + ($k2_0_ph152_i << 2) | 0;
            var $941 = $k2_0_ph152_i + 1 | 0;
            var $942 = $idx_i + ($941 << 2) | 0;
            var $nidx_0131_i = $nidx_0_ph153_i;
            var $943 = HEAP32[$942 >> 2];
            while (1) {
             var $943;
             var $nidx_0131_i;
             var $944 = HEAP32[$940 >> 2];
             var $945 = $944 * 3 & -1;
             var $946 = $943 * 3 & -1;
             var $m_0114_i = $944 + 1 | 0;
             if (($m_0114_i | 0) >= ($943 | 0)) {
              break;
             }
             var $_val6_i = HEAPF32[$edge_i + ($945 << 2) >> 2];
             var $_idx7_val_i = HEAPF32[$edge_i + ($945 + 1 << 2) >> 2];
             var $_idx8_val_i = HEAPF32[$edge_i + ($945 + 2 << 2) >> 2];
             var $950 = HEAPF32[$edge_i + ($946 << 2) >> 2] - $_val6_i;
             var $951 = HEAPF32[$edge_i + ($946 + 1 << 2) >> 2] - $_idx7_val_i;
             var $952 = HEAPF32[$edge_i + ($946 + 2 << 2) >> 2] - $_idx8_val_i;
             var $957 = $950 * $950 + $951 * $951 + $952 * $952;
             var $958 = $957 > 0;
             var $maxd_0115_i = 0;
             var $maxi_0116_i = -1;
             var $m_0117_i = $m_0114_i;
             while (1) {
              var $m_0117_i;
              var $maxi_0116_i;
              var $maxd_0115_i;
              var $960 = $m_0117_i * 3 & -1;
              var $_val_i = HEAPF32[$edge_i + ($960 << 2) >> 2];
              var $_idx_val_i = HEAPF32[$edge_i + ($960 + 1 << 2) >> 2];
              var $_idx5_val_i = HEAPF32[$edge_i + ($960 + 2 << 2) >> 2];
              var $969 = $950 * ($_val_i - $_val6_i) + $951 * ($_idx_val_i - $_idx7_val_i) + $952 * ($_idx5_val_i - $_idx8_val_i);
              if ($958) {
               var $t_0_i_i = $969 / $957;
              } else {
               var $t_0_i_i = $969;
              }
              var $t_0_i_i;
              do {
               if ($t_0_i_i < 0) {
                var $t_1_i_i = 0;
               } else {
                if ($t_0_i_i <= 1) {
                 var $t_1_i_i = $t_0_i_i;
                 break;
                }
                var $t_1_i_i = 1;
               }
              } while (0);
              var $t_1_i_i;
              var $979 = $_val6_i + $950 * $t_1_i_i - $_val_i;
              var $982 = $_idx7_val_i + $951 * $t_1_i_i - $_idx_val_i;
              var $985 = $_idx8_val_i + $952 * $t_1_i_i - $_idx5_val_i;
              var $990 = $985 * $985 + ($979 * $979 + $982 * $982);
              var $991 = $990 > $maxd_0115_i;
              var $maxd_1_i = $991 ? $990 : $maxd_0115_i;
              var $maxi_1_i = $991 ? $m_0117_i : $maxi_0116_i;
              var $m_0_i = $m_0117_i + 1 | 0;
              if (($m_0_i | 0) < ($943 | 0)) {
               var $maxd_0115_i = $maxd_1_i;
               var $maxi_0116_i = $maxi_1_i;
               var $m_0117_i = $m_0_i;
              } else {
               break;
              }
             }
             if (!(($maxi_1_i | 0) != -1 & $maxd_1_i > $222)) {
              break;
             }
             if (($nidx_0131_i | 0) > ($k2_0_ph152_i | 0)) {
              var $m3_0124_i = $nidx_0131_i;
             } else {
              label = 2331;
              break L3247;
             }
             while (1) {
              var $m3_0124_i;
              var $997 = $m3_0124_i - 1 | 0;
              HEAP32[$idx_i + ($m3_0124_i << 2) >> 2] = HEAP32[$idx_i + ($997 << 2) >> 2];
              if (($997 | 0) > ($k2_0_ph152_i | 0)) {
               var $m3_0124_i = $997;
              } else {
               break;
              }
             }
             HEAP32[$942 >> 2] = $maxi_1_i;
             var $nidx_0131_i = $nidx_0131_i + 1 | 0;
             var $943 = $maxi_1_i;
            }
            var $938 = $nidx_0131_i - 1 | 0;
            if (($941 | 0) < ($938 | 0)) {
             var $k2_0_ph152_i = $941;
             var $nidx_0_ph153_i = $nidx_0131_i;
            } else {
             var $nidx_0_lcssa_i = $nidx_0131_i;
             var $_lcssa128_i = $938;
             break;
            }
           }
           if (label == 2331) {
            label = 0;
            HEAP32[$942 >> 2] = $maxi_1_i;
            var $nidx_0_lcssa_i = $nidx_0131_i + 1 | 0;
            var $_lcssa128_i = $nidx_0131_i;
           }
           var $_lcssa128_i;
           var $nidx_0_lcssa_i;
           var $1003 = $nhull_0157_i + 1 | 0;
           HEAP32[$hull_i + ($nhull_0157_i << 2) >> 2] = $j_0155_i;
           do {
            if ($swapped_0_off0_i) {
             var $1008 = $nidx_0_lcssa_i - 2 | 0;
             if (($1008 | 0) > 0) {
              var $k4_0143_i = $1008;
              var $nhull_1144_i = $1003;
              var $1010 = $815;
             } else {
              var $nhull_3_i = $1003;
              var $1053 = $815;
              break;
             }
             while (1) {
              var $1010;
              var $nhull_1144_i;
              var $k4_0143_i;
              var $1011 = $1010 * 3 & -1;
              var $1015 = HEAP32[$idx_i + ($k4_0143_i << 2) >> 2] * 3 & -1;
              HEAPF32[$verts + ($1011 << 2) >> 2] = HEAPF32[$edge_i + ($1015 << 2) >> 2];
              HEAPF32[$verts + ($1011 + 1 << 2) >> 2] = HEAPF32[$edge_i + ($1015 + 1 << 2) >> 2];
              HEAPF32[$verts + ($1011 + 2 << 2) >> 2] = HEAPF32[$edge_i + ($1015 + 2 << 2) >> 2];
              HEAP32[$hull_i + ($nhull_1144_i << 2) >> 2] = $1010;
              var $1027 = $k4_0143_i - 1 | 0;
              if (($1027 | 0) > 0) {
               var $k4_0143_i = $1027;
               var $nhull_1144_i = $nhull_1144_i + 1 | 0;
               var $1010 = $1010 + 1 | 0;
              } else {
               break;
              }
             }
             var $nhull_3_i = $nhull_0157_i - 1 + $nidx_0_lcssa_i | 0;
             var $1053 = $1008 + $815 | 0;
            } else {
             if (($_lcssa128_i | 0) <= 1) {
              var $nhull_3_i = $1003;
              var $1053 = $815;
              break;
             }
             var $1006 = $_lcssa128_i - 1 | 0;
             var $k5_0138_i = 1;
             var $nhull_2139_i = $1003;
             var $1029 = $815;
             while (1) {
              var $1029;
              var $nhull_2139_i;
              var $k5_0138_i;
              var $1030 = $1029 * 3 & -1;
              var $1034 = HEAP32[$idx_i + ($k5_0138_i << 2) >> 2] * 3 & -1;
              HEAPF32[$verts + ($1030 << 2) >> 2] = HEAPF32[$edge_i + ($1034 << 2) >> 2];
              HEAPF32[$verts + ($1030 + 1 << 2) >> 2] = HEAPF32[$edge_i + ($1034 + 1 << 2) >> 2];
              HEAPF32[$verts + ($1030 + 2 << 2) >> 2] = HEAPF32[$edge_i + ($1034 + 2 << 2) >> 2];
              HEAP32[$hull_i + ($nhull_2139_i << 2) >> 2] = $1029;
              var $1044 = $k5_0138_i + 1 | 0;
              if (($1044 | 0) >= ($_lcssa128_i | 0)) {
               break;
              }
              var $k5_0138_i = $1044;
              var $nhull_2139_i = $nhull_2139_i + 1 | 0;
              var $1029 = $1029 + 1 | 0;
             }
             var $nhull_3_i = $_lcssa128_i + $nhull_0157_i | 0;
             var $1053 = $1006 + $815 | 0;
            }
           } while (0);
           var $1053;
           var $nhull_3_i;
           var $1054 = $i1_0156_i + 1 | 0;
           if (($1054 | 0) < ($npoly_0_lcssa | 0)) {
            var $j_0155_i = $i1_0156_i;
            var $i1_0156_i = $1054;
            var $nhull_0157_i = $nhull_3_i;
            var $815 = $1053;
           } else {
            var $nhull_4_i = $nhull_3_i;
            var $1058 = $1053;
            var $1057 = $811;
            var $1056 = $812;
            break;
           }
          }
         } else {
          var $797 = HEAPF32[$219 >> 2];
          var $nhull_4_i = 0;
          var $1058 = $npoly_0_lcssa;
          var $1057 = $797;
          var $1056 = 1 / $797;
         }
        } while (0);
        var $1056;
        var $1057;
        var $1058;
        var $nhull_4_i;
        var $1059 = HEAP32[$29 >> 2];
        if (($1059 | 0) < 0) {
         var $1061 = $1059;
         while (1) {
          var $1061;
          var $1062 = $1061 << 1;
          if (($1062 | 0) < 0) {
           var $1061 = $1062;
          } else {
           break;
          }
         }
         HEAP32[$29 >> 2] = $1062;
         var $1066 = _malloc($1061 << 3);
         var $1068 = HEAP32[$28 >> 2];
         var $_pre657 = HEAP32[$27 >> 2];
         if (!(($1068 | 0) == 0 | ($1066 | 0) == 0)) {
          var $1072 = $_pre657;
          var $1073 = $1068 << 2;
          _memcpy($1066, $1072, $1073) | 0;
         }
         if (($_pre657 | 0) != 0) {
          _free($_pre657);
         }
         HEAP32[$27 >> 2] = $1066;
        }
        HEAP32[$28 >> 2] = 0;
        var $1077 = HEAP32[$34 >> 2];
        if (($1077 | 0) < 0) {
         var $1079 = $1077;
         while (1) {
          var $1079;
          var $1080 = $1079 << 1;
          if (($1080 | 0) < 0) {
           var $1079 = $1080;
          } else {
           break;
          }
         }
         HEAP32[$34 >> 2] = $1080;
         var $1084 = _malloc($1079 << 3);
         var $1086 = HEAP32[$33 >> 2];
         var $_pre658 = HEAP32[$32 >> 2];
         if (!(($1086 | 0) == 0 | ($1084 | 0) == 0)) {
          var $1090 = $_pre658;
          var $1091 = $1086 << 2;
          _memcpy($1084, $1090, $1091) | 0;
         }
         if (($_pre658 | 0) != 0) {
          _free($_pre658);
         }
         HEAP32[$32 >> 2] = $1084;
        }
        HEAP32[$33 >> 2] = 0;
        __ZL12delaunayHullP9rcContextiPKfiPKiR10rcIntArrayS6_($ctx, $1058, $206, $nhull_4_i, $210, $tris, $edges);
        var $1095 = HEAP32[$33 >> 2];
        do {
         if (($1095 | 0) == 0) {
          __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 776, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
          STACKTOP = tempVarArgs;
          if (($1058 | 0) > 2) {
           var $i6_070_i = 2;
           var $1099 = 0;
          } else {
           var $1650 = $1058;
           var $samples_sroa_0_15 = $samples_sroa_0_3;
           var $samples_sroa_2_16 = $samples_sroa_2_0;
           break;
          }
          while (1) {
           var $1099;
           var $i6_070_i;
           var $1100 = $1099 + 1 | 0;
           var $1101 = HEAP32[$34 >> 2];
           if (($1101 | 0) < ($1100 | 0)) {
            if (($1101 | 0) == 0) {
             HEAP32[$34 >> 2] = $1100;
             var $_lcssa_i272 = $1100;
            } else {
             var $1105 = $1101;
             while (1) {
              var $1105;
              var $1106 = $1105 << 1;
              if (($1106 | 0) < ($1100 | 0)) {
               var $1105 = $1106;
              } else {
               break;
              }
             }
             HEAP32[$34 >> 2] = $1106;
             var $_lcssa_i272 = $1106;
            }
            var $_lcssa_i272;
            var $1110 = _malloc($_lcssa_i272 << 2);
            var $1111 = $1110;
            var $_pre659 = HEAP32[$32 >> 2];
            if (!(($1099 | 0) == 0 | ($1110 | 0) == 0)) {
             var $1115 = $_pre659;
             var $1116 = $1099 << 2;
             _memcpy($1110, $1115, $1116) | 0;
            }
            if (($_pre659 | 0) != 0) {
             _free($_pre659);
            }
            HEAP32[$32 >> 2] = $1111;
            var $1121 = $1111;
            var $1120 = $_lcssa_i272;
           } else {
            var $1121 = HEAP32[$32 >> 2];
            var $1120 = $1101;
           }
           var $1120;
           var $1121;
           HEAP32[$33 >> 2] = $1100;
           HEAP32[$1121 + ($1099 << 2) >> 2] = 0;
           var $1123 = $1099 + 2 | 0;
           if (($1120 | 0) < ($1123 | 0)) {
            if (($1120 | 0) == 0) {
             HEAP32[$34 >> 2] = $1123;
             var $_lcssa_i285 = $1123;
            } else {
             var $1127 = $1120;
             while (1) {
              var $1127;
              var $1128 = $1127 << 1;
              if (($1128 | 0) < ($1123 | 0)) {
               var $1127 = $1128;
              } else {
               break;
              }
             }
             HEAP32[$34 >> 2] = $1128;
             var $_lcssa_i285 = $1128;
            }
            var $_lcssa_i285;
            var $1132 = _malloc($_lcssa_i285 << 2);
            var $1133 = $1132;
            if (!(($1100 | 0) == 0 | ($1132 | 0) == 0)) {
             var $1137 = $1121;
             var $1138 = $1100 << 2;
             _memcpy($1132, $1137, $1138) | 0;
            }
            if (($1121 | 0) != 0) {
             _free($1121);
            }
            HEAP32[$32 >> 2] = $1133;
            var $1142 = $1133;
           } else {
            var $1142 = $1121;
           }
           var $1142;
           HEAP32[$33 >> 2] = $1123;
           HEAP32[$1142 + ($1100 << 2) >> 2] = $i6_070_i - 1;
           var $1145 = HEAP32[$33 >> 2];
           var $1146 = $1145 + 1 | 0;
           var $1147 = HEAP32[$34 >> 2];
           if (($1147 | 0) < ($1146 | 0)) {
            if (($1147 | 0) == 0) {
             HEAP32[$34 >> 2] = $1146;
             var $_lcssa_i298 = $1146;
            } else {
             var $1151 = $1147;
             while (1) {
              var $1151;
              var $1152 = $1151 << 1;
              if (($1152 | 0) < ($1146 | 0)) {
               var $1151 = $1152;
              } else {
               break;
              }
             }
             HEAP32[$34 >> 2] = $1152;
             var $_lcssa_i298 = $1152;
            }
            var $_lcssa_i298;
            var $1156 = _malloc($_lcssa_i298 << 2);
            var $1157 = $1156;
            var $_pre660 = HEAP32[$32 >> 2];
            if (!(($1145 | 0) == 0 | ($1156 | 0) == 0)) {
             var $1161 = $_pre660;
             var $1162 = $1145 << 2;
             _memcpy($1156, $1161, $1162) | 0;
            }
            if (($_pre660 | 0) != 0) {
             _free($_pre660);
            }
            HEAP32[$32 >> 2] = $1157;
            var $1167 = $1157;
            var $1166 = $_lcssa_i298;
           } else {
            var $1167 = HEAP32[$32 >> 2];
            var $1166 = $1147;
           }
           var $1166;
           var $1167;
           HEAP32[$33 >> 2] = $1146;
           HEAP32[$1167 + ($1145 << 2) >> 2] = $i6_070_i;
           var $1169 = $1145 + 2 | 0;
           if (($1166 | 0) < ($1169 | 0)) {
            if (($1166 | 0) == 0) {
             HEAP32[$34 >> 2] = $1169;
             var $_lcssa_i311 = $1169;
            } else {
             var $1173 = $1166;
             while (1) {
              var $1173;
              var $1174 = $1173 << 1;
              if (($1174 | 0) < ($1169 | 0)) {
               var $1173 = $1174;
              } else {
               break;
              }
             }
             HEAP32[$34 >> 2] = $1174;
             var $_lcssa_i311 = $1174;
            }
            var $_lcssa_i311;
            var $1178 = _malloc($_lcssa_i311 << 2);
            var $1179 = $1178;
            if (!(($1146 | 0) == 0 | ($1178 | 0) == 0)) {
             var $1183 = $1167;
             var $1184 = $1146 << 2;
             _memcpy($1178, $1183, $1184) | 0;
            }
            if (($1167 | 0) != 0) {
             _free($1167);
            }
            HEAP32[$32 >> 2] = $1179;
            var $1188 = $1179;
           } else {
            var $1188 = $1167;
           }
           var $1188;
           HEAP32[$33 >> 2] = $1169;
           HEAP32[$1188 + ($1146 << 2) >> 2] = 0;
           var $1190 = $i6_070_i + 1 | 0;
           if (($1190 | 0) < ($1058 | 0)) {
            var $i6_070_i = $1190;
            var $1099 = $1169;
           } else {
            var $1650 = $1058;
            var $samples_sroa_0_15 = $samples_sroa_0_3;
            var $samples_sroa_2_16 = $samples_sroa_2_0;
            break;
           }
          }
         } else {
          if ($220) {
           var $1194 = HEAPF32[$69 >> 2];
           var $1195 = HEAPF32[$215 >> 2];
           var $1196 = HEAPF32[$217 >> 2];
           if (($npoly_0_lcssa | 0) > 1) {
            var $bmin_sroa_2_8_load253894_i = $1196;
            var $bmin_sroa_1_4_load243795_i = $1195;
            var $bmin_sroa_0_0_load233696_i = $1194;
            var $bmax_sroa_2_8_load223597_i = $1196;
            var $bmax_sroa_1_4_load213498_i = $1195;
            var $bmax_sroa_0_0_load203399_i = $1194;
            var $i7_0100_i = 1;
            while (1) {
             var $i7_0100_i;
             var $bmax_sroa_0_0_load203399_i;
             var $bmax_sroa_1_4_load213498_i;
             var $bmax_sroa_2_8_load223597_i;
             var $bmin_sroa_0_0_load233696_i;
             var $bmin_sroa_1_4_load243795_i;
             var $bmin_sroa_2_8_load253894_i;
             var $1198 = $i7_0100_i * 3 & -1;
             var $1200 = HEAPF32[$69 + ($1198 << 2) >> 2];
             var $1202 = $bmin_sroa_0_0_load233696_i < $1200 ? $bmin_sroa_0_0_load233696_i : $1200;
             var $1204 = HEAPF32[$69 + ($1198 + 1 << 2) >> 2];
             var $1206 = $bmin_sroa_1_4_load243795_i < $1204 ? $bmin_sroa_1_4_load243795_i : $1204;
             var $1208 = HEAPF32[$69 + ($1198 + 2 << 2) >> 2];
             var $1210 = $bmin_sroa_2_8_load253894_i < $1208 ? $bmin_sroa_2_8_load253894_i : $1208;
             var $1212 = $bmax_sroa_0_0_load203399_i > $1200 ? $bmax_sroa_0_0_load203399_i : $1200;
             var $1214 = $bmax_sroa_1_4_load213498_i > $1204 ? $bmax_sroa_1_4_load213498_i : $1204;
             var $1216 = $bmax_sroa_2_8_load223597_i > $1208 ? $bmax_sroa_2_8_load223597_i : $1208;
             var $1217 = $i7_0100_i + 1 | 0;
             if (($1217 | 0) < ($npoly_0_lcssa | 0)) {
              var $bmin_sroa_2_8_load253894_i = $1210;
              var $bmin_sroa_1_4_load243795_i = $1206;
              var $bmin_sroa_0_0_load233696_i = $1202;
              var $bmax_sroa_2_8_load223597_i = $1216;
              var $bmax_sroa_1_4_load213498_i = $1214;
              var $bmax_sroa_0_0_load203399_i = $1212;
              var $i7_0100_i = $1217;
             } else {
              var $bmin_sroa_2_8_load2538_lcssa_i = $1210;
              var $bmin_sroa_1_4_load2437_lcssa_i = $1206;
              var $bmin_sroa_0_0_load2336_lcssa_i = $1202;
              var $bmax_sroa_2_8_load2235_lcssa_i = $1216;
              var $bmax_sroa_1_4_load2134_lcssa_i = $1214;
              var $bmax_sroa_0_0_load2033_lcssa_i = $1212;
              break;
             }
            }
           } else {
            var $bmin_sroa_2_8_load2538_lcssa_i = $1196;
            var $bmin_sroa_1_4_load2437_lcssa_i = $1195;
            var $bmin_sroa_0_0_load2336_lcssa_i = $1194;
            var $bmax_sroa_2_8_load2235_lcssa_i = $1196;
            var $bmax_sroa_1_4_load2134_lcssa_i = $1195;
            var $bmax_sroa_0_0_load2033_lcssa_i = $1194;
           }
           var $bmax_sroa_0_0_load2033_lcssa_i;
           var $bmax_sroa_1_4_load2134_lcssa_i;
           var $bmax_sroa_2_8_load2235_lcssa_i;
           var $bmin_sroa_0_0_load2336_lcssa_i;
           var $bmin_sroa_1_4_load2437_lcssa_i;
           var $bmin_sroa_2_8_load2538_lcssa_i;
           var $1221 = Math.floor($bmin_sroa_0_0_load2336_lcssa_i / $sampleDist) & -1;
           var $1224 = Math.ceil($bmax_sroa_0_0_load2033_lcssa_i / $sampleDist) & -1;
           var $1227 = Math.floor($bmin_sroa_2_8_load2538_lcssa_i / $sampleDist) & -1;
           var $1230 = Math.ceil($bmax_sroa_2_8_load2235_lcssa_i / $sampleDist) & -1;
           do {
            if (($samples_sroa_2_0 | 0) < 0) {
             var $1232 = $samples_sroa_2_0;
             while (1) {
              var $1232;
              var $1233 = $1232 << 1;
              if (($1233 | 0) < 0) {
               var $1232 = $1233;
              } else {
               break;
              }
             }
             var $1237 = _malloc($1232 << 3);
             var $1238 = $1237;
             var $samples_sroa_1_0_load488 = $samples_sroa_1;
             if (!(($samples_sroa_1_0_load488 | 0) == 0 | ($1237 | 0) == 0)) {
              var $1242 = $samples_sroa_0_3;
              var $1243 = $samples_sroa_1_0_load488 << 2;
              _memcpy($1237, $1242, $1243) | 0;
             }
             if (($samples_sroa_0_3 | 0) == 0) {
              var $samples_sroa_0_4 = $1238;
              var $samples_sroa_2_1 = $1233;
              break;
             }
             _free($samples_sroa_0_3);
             var $samples_sroa_0_4 = $1238;
             var $samples_sroa_2_1 = $1233;
            } else {
             var $samples_sroa_0_4 = $samples_sroa_0_3;
             var $samples_sroa_2_1 = $samples_sroa_2_0;
            }
           } while (0);
           var $samples_sroa_2_1;
           var $samples_sroa_0_4;
           $samples_sroa_1 = 0;
           L3389 : do {
            if (($1227 | 0) < ($1230 | 0)) {
             var $1248 = ($1221 | 0) < ($1224 | 0);
             var $1250 = ($bmax_sroa_1_4_load2134_lcssa_i + $bmin_sroa_1_4_load2437_lcssa_i) * .5;
             var $1251 = $npoly_0_lcssa - 1 | 0;
             var $z_091_i = $1227;
             var $samples_sroa_0_5 = $samples_sroa_0_4;
             var $samples_sroa_2_2 = $samples_sroa_2_1;
             while (1) {
              var $samples_sroa_2_2;
              var $samples_sroa_0_5;
              var $z_091_i;
              if ($1248) {
               var $1253 = ($z_091_i | 0) * $sampleDist;
               var $1255 = $1056 * $1253 + .009999999776482582;
               var $x_088_i = $1221;
               var $samples_sroa_0_6 = $samples_sroa_0_5;
               var $samples_sroa_2_3 = $samples_sroa_2_2;
               while (1) {
                var $samples_sroa_2_3;
                var $samples_sroa_0_6;
                var $x_088_i;
                var $1258 = ($x_088_i | 0) * $sampleDist;
                do {
                 if ($291) {
                  var $j_026_i_i = $1251;
                  var $c_027_i_i = 0;
                  var $i_028_i_i = 0;
                  var $dmin_029_i_i = 3.4028234663852886e+38;
                  while (1) {
                   var $dmin_029_i_i;
                   var $i_028_i_i;
                   var $c_027_i_i;
                   var $j_026_i_i;
                   var $1259 = $i_028_i_i * 3 & -1;
                   var $1261 = $j_026_i_i * 3 & -1;
                   var $1264 = HEAPF32[$69 + ($1259 + 2 << 2) >> 2];
                   var $1267 = HEAPF32[$69 + ($1261 + 2 << 2) >> 2];
                   var $1270 = HEAPF32[$69 + ($1261 << 2) >> 2];
                   var $1271 = HEAPF32[$69 + ($1259 << 2) >> 2];
                   do {
                    if ($1264 > $1253 ^ $1267 > $1253) {
                     if ($1258 >= $1271 + ($1253 - $1264) * ($1270 - $1271) / ($1267 - $1264)) {
                      var $c_1_i_i = $c_027_i_i;
                      break;
                     }
                     var $c_1_i_i = ($c_027_i_i | 0) == 0 | 0;
                    } else {
                     var $c_1_i_i = $c_027_i_i;
                    }
                   } while (0);
                   var $c_1_i_i;
                   var $1283 = $1271 - $1270;
                   var $1284 = $1264 - $1267;
                   var $1289 = $1284 * $1284 + $1283 * $1283;
                   var $1292 = ($1253 - $1267) * $1284 + ($1258 - $1270) * $1283;
                   if ($1289 > 0) {
                    var $t_0_i_i_i = $1292 / $1289;
                   } else {
                    var $t_0_i_i_i = $1292;
                   }
                   var $t_0_i_i_i;
                   do {
                    if ($t_0_i_i_i < 0) {
                     var $t_1_i_i_i = 0;
                    } else {
                     if ($t_0_i_i_i <= 1) {
                      var $t_1_i_i_i = $t_0_i_i_i;
                      break;
                     }
                     var $t_1_i_i_i = 1;
                    }
                   } while (0);
                   var $t_1_i_i_i;
                   var $1303 = $1270 + $1283 * $t_1_i_i_i - $1258;
                   var $1306 = $1267 + $1284 * $t_1_i_i_i - $1253;
                   var $1309 = $1303 * $1303 + $1306 * $1306;
                   var $1311 = $dmin_029_i_i < $1309 ? $dmin_029_i_i : $1309;
                   var $1312 = $i_028_i_i + 1 | 0;
                   if (($1312 | 0) < ($npoly_0_lcssa | 0)) {
                    var $j_026_i_i = $i_028_i_i;
                    var $c_027_i_i = $c_1_i_i;
                    var $i_028_i_i = $1312;
                    var $dmin_029_i_i = $1311;
                   } else {
                    break;
                   }
                  }
                  if (($c_1_i_i | 0) == 0) {
                   var $1317 = $1311;
                   break;
                  }
                  var $1317 = -$1311;
                 } else {
                  var $1317 = 3.4028234663852886e+38;
                 }
                } while (0);
                var $1317;
                if ($1317 > $218) {
                 var $samples_sroa_0_11 = $samples_sroa_0_6;
                 var $samples_sroa_2_12 = $samples_sroa_2_3;
                } else {
                 var $samples_sroa_1_0_load = $samples_sroa_1;
                 var $1320 = $samples_sroa_1_0_load + 1 | 0;
                 do {
                  if (($samples_sroa_2_3 | 0) < ($1320 | 0)) {
                   if (($samples_sroa_2_3 | 0) == 0) {
                    var $samples_sroa_2_4 = $1320;
                   } else {
                    var $1324 = $samples_sroa_2_3;
                    while (1) {
                     var $1324;
                     var $1325 = $1324 << 1;
                     if (($1325 | 0) < ($1320 | 0)) {
                      var $1324 = $1325;
                     } else {
                      var $samples_sroa_2_4 = $1325;
                      break;
                     }
                    }
                   }
                   var $samples_sroa_2_4;
                   var $1328 = _malloc($samples_sroa_2_4 << 2);
                   var $1329 = $1328;
                   var $samples_sroa_1_0_load489 = $samples_sroa_1;
                   if (!(($samples_sroa_1_0_load489 | 0) == 0 | ($1328 | 0) == 0)) {
                    var $1333 = $samples_sroa_0_6;
                    var $1334 = $samples_sroa_1_0_load489 << 2;
                    _memcpy($1328, $1333, $1334) | 0;
                   }
                   if (($samples_sroa_0_6 | 0) == 0) {
                    var $samples_sroa_0_7 = $1329;
                    var $samples_sroa_2_5 = $samples_sroa_2_4;
                    break;
                   }
                   _free($samples_sroa_0_6);
                   var $samples_sroa_0_7 = $1329;
                   var $samples_sroa_2_5 = $samples_sroa_2_4;
                  } else {
                   var $samples_sroa_0_7 = $samples_sroa_0_6;
                   var $samples_sroa_2_5 = $samples_sroa_2_3;
                  }
                 } while (0);
                 var $samples_sroa_2_5;
                 var $samples_sroa_0_7;
                 $samples_sroa_1 = $1320;
                 HEAP32[$samples_sroa_0_7 + ($samples_sroa_1_0_load << 2) >> 2] = $x_088_i;
                 var $1339 = HEAPF32[$213 >> 2];
                 var $1343 = Math.floor($1056 * $1258 + .009999999776482582) & -1;
                 var $1345 = Math.floor($1255) & -1;
                 var $1346 = $1343 - $260 | 0;
                 if (($1346 | 0) < 0) {
                  var $1351 = 0;
                 } else {
                  var $1351 = ($1346 | 0) > ($267 | 0) ? $267 : $1346;
                 }
                 var $1351;
                 var $1352 = $1345 - $263 | 0;
                 if (($1352 | 0) < 0) {
                  var $1357 = 0;
                 } else {
                  var $1357 = ($1352 | 0) > ($271 | 0) ? $271 : $1352;
                 }
                 var $1357;
                 var $1361 = HEAP16[$164 + (Math.imul($1357, $267) + $1351 << 1) >> 1];
                 if ($1361 << 16 >> 16 == -1) {
                  var $i_02_i = 0;
                  var $dmin_03_i = 3.4028234663852886e+38;
                  var $h_04_i = -1;
                  while (1) {
                   var $h_04_i;
                   var $dmin_03_i;
                   var $i_02_i;
                   var $1363 = $i_02_i << 1;
                   var $1366 = HEAP32[9528 + ($1363 << 2) >> 2] + $1351 | 0;
                   var $1370 = HEAP32[9528 + (($1363 | 1) << 2) >> 2] + $1357 | 0;
                   do {
                    if (($1370 | $1366 | 0) > -1 & ($1366 | 0) < ($267 | 0) & ($1370 | 0) < ($271 | 0)) {
                     var $1379 = HEAP16[$164 + (Math.imul($1370, $267) + $1366 << 1) >> 1];
                     if ($1379 << 16 >> 16 == -1) {
                      var $h_1_i = $h_04_i;
                      var $dmin_1_i = $dmin_03_i;
                      break;
                     }
                     var $1386 = Math.abs($1339 * ($1379 & 65535 | 0) - $1250);
                     if ($1386 >= $dmin_03_i) {
                      var $h_1_i = $h_04_i;
                      var $dmin_1_i = $dmin_03_i;
                      break;
                     }
                     var $h_1_i = $1379;
                     var $dmin_1_i = $1386;
                    } else {
                     var $h_1_i = $h_04_i;
                     var $dmin_1_i = $dmin_03_i;
                    }
                   } while (0);
                   var $dmin_1_i;
                   var $h_1_i;
                   var $1390 = $i_02_i + 1 | 0;
                   if (($1390 | 0) < 8) {
                    var $i_02_i = $1390;
                    var $dmin_03_i = $dmin_1_i;
                    var $h_04_i = $h_1_i;
                   } else {
                    var $h_2_i = $h_1_i;
                    break;
                   }
                  }
                 } else {
                  var $h_2_i = $1361;
                 }
                 var $h_2_i;
                 var $samples_sroa_1_0_load480 = $samples_sroa_1;
                 var $1392 = $samples_sroa_1_0_load480 + 1 | 0;
                 do {
                  if (($samples_sroa_2_5 | 0) < ($1392 | 0)) {
                   if (($samples_sroa_2_5 | 0) == 0) {
                    var $samples_sroa_2_6 = $1392;
                   } else {
                    var $1396 = $samples_sroa_2_5;
                    while (1) {
                     var $1396;
                     var $1397 = $1396 << 1;
                     if (($1397 | 0) < ($1392 | 0)) {
                      var $1396 = $1397;
                     } else {
                      var $samples_sroa_2_6 = $1397;
                      break;
                     }
                    }
                   }
                   var $samples_sroa_2_6;
                   var $1400 = _malloc($samples_sroa_2_6 << 2);
                   var $1401 = $1400;
                   var $samples_sroa_1_0_load490 = $samples_sroa_1;
                   if (!(($samples_sroa_1_0_load490 | 0) == 0 | ($1400 | 0) == 0)) {
                    var $1405 = $samples_sroa_0_7;
                    var $1406 = $samples_sroa_1_0_load490 << 2;
                    _memcpy($1400, $1405, $1406) | 0;
                   }
                   if (($samples_sroa_0_7 | 0) == 0) {
                    var $samples_sroa_0_8 = $1401;
                    var $samples_sroa_2_7 = $samples_sroa_2_6;
                    break;
                   }
                   _free($samples_sroa_0_7);
                   var $samples_sroa_0_8 = $1401;
                   var $samples_sroa_2_7 = $samples_sroa_2_6;
                  } else {
                   var $samples_sroa_0_8 = $samples_sroa_0_7;
                   var $samples_sroa_2_7 = $samples_sroa_2_5;
                  }
                 } while (0);
                 var $samples_sroa_2_7;
                 var $samples_sroa_0_8;
                 $samples_sroa_1 = $1392;
                 HEAP32[$samples_sroa_0_8 + ($samples_sroa_1_0_load480 << 2) >> 2] = $h_2_i & 65535;
                 var $samples_sroa_1_0_load482 = $samples_sroa_1;
                 var $1412 = $samples_sroa_1_0_load482 + 1 | 0;
                 do {
                  if (($samples_sroa_2_7 | 0) < ($1412 | 0)) {
                   if (($samples_sroa_2_7 | 0) == 0) {
                    var $samples_sroa_2_8 = $1412;
                   } else {
                    var $1416 = $samples_sroa_2_7;
                    while (1) {
                     var $1416;
                     var $1417 = $1416 << 1;
                     if (($1417 | 0) < ($1412 | 0)) {
                      var $1416 = $1417;
                     } else {
                      var $samples_sroa_2_8 = $1417;
                      break;
                     }
                    }
                   }
                   var $samples_sroa_2_8;
                   var $1420 = _malloc($samples_sroa_2_8 << 2);
                   var $1421 = $1420;
                   var $samples_sroa_1_0_load491 = $samples_sroa_1;
                   if (!(($samples_sroa_1_0_load491 | 0) == 0 | ($1420 | 0) == 0)) {
                    var $1425 = $samples_sroa_0_8;
                    var $1426 = $samples_sroa_1_0_load491 << 2;
                    _memcpy($1420, $1425, $1426) | 0;
                   }
                   if (($samples_sroa_0_8 | 0) == 0) {
                    var $samples_sroa_0_9 = $1421;
                    var $samples_sroa_2_9 = $samples_sroa_2_8;
                    break;
                   }
                   _free($samples_sroa_0_8);
                   var $samples_sroa_0_9 = $1421;
                   var $samples_sroa_2_9 = $samples_sroa_2_8;
                  } else {
                   var $samples_sroa_0_9 = $samples_sroa_0_8;
                   var $samples_sroa_2_9 = $samples_sroa_2_7;
                  }
                 } while (0);
                 var $samples_sroa_2_9;
                 var $samples_sroa_0_9;
                 $samples_sroa_1 = $1412;
                 HEAP32[$samples_sroa_0_9 + ($samples_sroa_1_0_load482 << 2) >> 2] = $z_091_i;
                 var $samples_sroa_1_0_load484 = $samples_sroa_1;
                 var $1431 = $samples_sroa_1_0_load484 + 1 | 0;
                 do {
                  if (($samples_sroa_2_9 | 0) < ($1431 | 0)) {
                   if (($samples_sroa_2_9 | 0) == 0) {
                    var $samples_sroa_2_10 = $1431;
                   } else {
                    var $1435 = $samples_sroa_2_9;
                    while (1) {
                     var $1435;
                     var $1436 = $1435 << 1;
                     if (($1436 | 0) < ($1431 | 0)) {
                      var $1435 = $1436;
                     } else {
                      var $samples_sroa_2_10 = $1436;
                      break;
                     }
                    }
                   }
                   var $samples_sroa_2_10;
                   var $1439 = _malloc($samples_sroa_2_10 << 2);
                   var $1440 = $1439;
                   if (!(($samples_sroa_1_0_load484 | 0) == 0 | ($1439 | 0) == 0)) {
                    var $1444 = $samples_sroa_0_9;
                    var $1445 = $samples_sroa_1_0_load484 << 2;
                    _memcpy($1439, $1444, $1445) | 0;
                   }
                   if (($samples_sroa_0_9 | 0) == 0) {
                    var $samples_sroa_0_10 = $1440;
                    var $samples_sroa_2_11 = $samples_sroa_2_10;
                    break;
                   }
                   _free($samples_sroa_0_9);
                   var $samples_sroa_0_10 = $1440;
                   var $samples_sroa_2_11 = $samples_sroa_2_10;
                  } else {
                   var $samples_sroa_0_10 = $samples_sroa_0_9;
                   var $samples_sroa_2_11 = $samples_sroa_2_9;
                  }
                 } while (0);
                 var $samples_sroa_2_11;
                 var $samples_sroa_0_10;
                 $samples_sroa_1 = $1431;
                 HEAP32[$samples_sroa_0_10 + ($samples_sroa_1_0_load484 << 2) >> 2] = 0;
                 var $samples_sroa_0_11 = $samples_sroa_0_10;
                 var $samples_sroa_2_12 = $samples_sroa_2_11;
                }
                var $samples_sroa_2_12;
                var $samples_sroa_0_11;
                var $1451 = $x_088_i + 1 | 0;
                if (($1451 | 0) < ($1224 | 0)) {
                 var $x_088_i = $1451;
                 var $samples_sroa_0_6 = $samples_sroa_0_11;
                 var $samples_sroa_2_3 = $samples_sroa_2_12;
                } else {
                 var $samples_sroa_0_12 = $samples_sroa_0_11;
                 var $samples_sroa_2_13 = $samples_sroa_2_12;
                 break;
                }
               }
              } else {
               var $samples_sroa_0_12 = $samples_sroa_0_5;
               var $samples_sroa_2_13 = $samples_sroa_2_2;
              }
              var $samples_sroa_2_13;
              var $samples_sroa_0_12;
              var $1453 = $z_091_i + 1 | 0;
              if (($1453 | 0) < ($1230 | 0)) {
               var $z_091_i = $1453;
               var $samples_sroa_0_5 = $samples_sroa_0_12;
               var $samples_sroa_2_2 = $samples_sroa_2_13;
              } else {
               break;
              }
             }
             var $samples_sroa_1_0_load486_pre = $samples_sroa_1;
             var $1455 = ($samples_sroa_1_0_load486_pre | 0) / 4 & -1;
             if (($samples_sroa_1_0_load486_pre | 0) > 3) {
              var $iter_083_us_i = 0;
              var $1457 = $1058;
             } else {
              var $1626 = $1058;
              var $samples_sroa_2_14665 = $samples_sroa_2_13;
              var $samples_sroa_0_13667 = $samples_sroa_0_12;
              break;
             }
             while (1) {
              var $1457;
              var $iter_083_us_i;
              if (($1457 | 0) > 126) {
               var $1626 = $1457;
               var $samples_sroa_2_14665 = $samples_sroa_2_13;
               var $samples_sroa_0_13667 = $samples_sroa_0_12;
               break L3389;
              }
              var $1622 = HEAP32[$32 >> 2];
              var $1623 = HEAP32[$33 >> 2];
              var $1624 = ($1623 | 0) / 4 & -1;
              var $1625 = ($1623 | 0) > 3;
              var $1512 = 0;
              var $1511 = 0;
              var $1510 = 0;
              var $bestd_073_us_i = 0;
              var $besti_074_us_i = -1;
              var $i8_075_us_i = 0;
              while (1) {
               var $i8_075_us_i;
               var $besti_074_us_i;
               var $bestd_073_us_i;
               var $1510;
               var $1511;
               var $1512;
               var $1513 = $i8_075_us_i << 2;
               if ((HEAP32[$samples_sroa_0_12 + (($1513 | 3) << 2) >> 2] | 0) == 0) {
                var $1521 = (HEAP32[$samples_sroa_0_12 + ($1513 << 2) >> 2] | 0) * $sampleDist;
                var $1530 = $1521 + $1057 * (((Math.imul($i8_075_us_i, -1918454973) & 65535) >>> 0) / 65535 * 2 - 1) * .10000000149011612;
                var $1535 = (HEAP32[$samples_sroa_0_12 + (($1513 | 1) << 2) >> 2] | 0) * HEAPF32[$213 >> 2];
                var $1539 = (HEAP32[$samples_sroa_0_12 + (($1513 | 2) << 2) >> 2] | 0) * $sampleDist;
                var $1548 = $1539 + $1057 * (((Math.imul($i8_075_us_i, -669632447) & 65535) >>> 0) / 65535 * 2 - 1) * .10000000149011612;
                if ($1625) {
                 var $i_014_i_us_i = 0;
                 var $dmin_015_i_us_i = 3.4028234663852886e+38;
                 while (1) {
                  var $dmin_015_i_us_i;
                  var $i_014_i_us_i;
                  var $1549 = $i_014_i_us_i << 2;
                  var $1552 = HEAP32[$1622 + ($1549 << 2) >> 2] * 3 & -1;
                  var $1557 = HEAP32[$1622 + (($1549 | 1) << 2) >> 2] * 3 & -1;
                  var $1562 = HEAP32[$1622 + (($1549 | 2) << 2) >> 2] * 3 & -1;
                  var $_val_i_us_i = HEAPF32[$verts + ($1552 << 2) >> 2];
                  var $_idx_val_i_us_i = HEAPF32[$verts + ($1552 + 1 << 2) >> 2];
                  var $_idx2_val_i_us_i = HEAPF32[$verts + ($1552 + 2 << 2) >> 2];
                  var $1564 = HEAPF32[$verts + ($1562 << 2) >> 2] - $_val_i_us_i;
                  var $1565 = HEAPF32[$verts + ($1562 + 2 << 2) >> 2] - $_idx2_val_i_us_i;
                  var $1566 = HEAPF32[$verts + ($1557 << 2) >> 2] - $_val_i_us_i;
                  var $1567 = HEAPF32[$verts + ($1557 + 2 << 2) >> 2] - $_idx2_val_i_us_i;
                  var $1568 = $1530 - $_val_i_us_i;
                  var $1569 = $1548 - $_idx2_val_i_us_i;
                  var $1572 = $1564 * $1564 + $1565 * $1565;
                  var $1575 = $1566 * $1564 + $1567 * $1565;
                  var $1578 = $1568 * $1564 + $1569 * $1565;
                  var $1581 = $1566 * $1566 + $1567 * $1567;
                  var $1584 = $1568 * $1566 + $1569 * $1567;
                  var $1588 = 1 / ($1581 * $1572 - $1575 * $1575);
                  var $1592 = $1588 * ($1581 * $1578 - $1584 * $1575);
                  var $1596 = $1588 * ($1584 * $1572 - $1575 * $1578);
                  if ($1592 < -9999999747378752e-20 | $1596 < -9999999747378752e-20 | $1592 + $1596 > 1.000100016593933) {
                   var $_0_i_i_us_i = 3.4028234663852886e+38;
                  } else {
                   var $_0_i_i_us_i = Math.abs($1596 * (HEAPF32[$verts + ($1557 + 1 << 2) >> 2] - $_idx_val_i_us_i) + ($_idx_val_i_us_i + $1592 * (HEAPF32[$verts + ($1562 + 1 << 2) >> 2] - $_idx_val_i_us_i)) - $1535);
                  }
                  var $_0_i_i_us_i;
                  var $dmin_1_i_us_i = $_0_i_i_us_i < $dmin_015_i_us_i ? $_0_i_i_us_i : $dmin_015_i_us_i;
                  var $1611 = $i_014_i_us_i + 1 | 0;
                  if (($1611 | 0) < ($1624 | 0)) {
                   var $i_014_i_us_i = $1611;
                   var $dmin_015_i_us_i = $dmin_1_i_us_i;
                  } else {
                   var $dmin_0_lcssa_i_us_i = $dmin_1_i_us_i;
                   break;
                  }
                 }
                } else {
                 var $dmin_0_lcssa_i_us_i = 3.4028234663852886e+38;
                }
                var $dmin_0_lcssa_i_us_i;
                var $_dmin_0_i_us_i = $dmin_0_lcssa_i_us_i == 3.4028234663852886e+38 ? -1 : $dmin_0_lcssa_i_us_i;
                var $or_cond_us_i = $_dmin_0_i_us_i >= 0 & $_dmin_0_i_us_i > $bestd_073_us_i;
                var $besti_1_us_i = $or_cond_us_i ? $i8_075_us_i : $besti_074_us_i;
                var $bestd_1_us_i = $or_cond_us_i ? $_dmin_0_i_us_i : $bestd_073_us_i;
                var $1619 = $or_cond_us_i ? $1530 : $1510;
                var $1618 = $or_cond_us_i ? $1535 : $1511;
                var $1617 = $or_cond_us_i ? $1548 : $1512;
               } else {
                var $besti_1_us_i = $besti_074_us_i;
                var $bestd_1_us_i = $bestd_073_us_i;
                var $1619 = $1510;
                var $1618 = $1511;
                var $1617 = $1512;
               }
               var $1617;
               var $1618;
               var $1619;
               var $bestd_1_us_i;
               var $besti_1_us_i;
               var $1620 = $i8_075_us_i + 1 | 0;
               if (($1620 | 0) < ($1455 | 0)) {
                var $1512 = $1617;
                var $1511 = $1618;
                var $1510 = $1619;
                var $bestd_073_us_i = $bestd_1_us_i;
                var $besti_074_us_i = $besti_1_us_i;
                var $i8_075_us_i = $1620;
               } else {
                break;
               }
              }
              if ($bestd_1_us_i <= $sampleMaxError | ($besti_1_us_i | 0) == -1) {
               var $1626 = $1457;
               var $samples_sroa_2_14665 = $samples_sroa_2_13;
               var $samples_sroa_0_13667 = $samples_sroa_0_12;
               break L3389;
              }
              HEAP32[$samples_sroa_0_12 + (($besti_1_us_i << 2 | 3) << 2) >> 2] = 1;
              var $1466 = $1457 * 3 & -1;
              HEAPF32[$verts + ($1466 << 2) >> 2] = $1619;
              HEAPF32[$verts + ($1466 + 1 << 2) >> 2] = $1618;
              HEAPF32[$verts + ($1466 + 2 << 2) >> 2] = $1617;
              var $1470 = $1457 + 1 | 0;
              var $1471 = HEAP32[$29 >> 2];
              if (($1471 | 0) < 0) {
               var $1473 = $1471;
               while (1) {
                var $1473;
                var $1474 = $1473 << 1;
                if (($1474 | 0) < 0) {
                 var $1473 = $1474;
                } else {
                 break;
                }
               }
               HEAP32[$29 >> 2] = $1474;
               var $1478 = _malloc($1473 << 3);
               var $1480 = HEAP32[$28 >> 2];
               var $_pre661 = HEAP32[$27 >> 2];
               if (!(($1480 | 0) == 0 | ($1478 | 0) == 0)) {
                var $1484 = $_pre661;
                var $1485 = $1480 << 2;
                _memcpy($1478, $1484, $1485) | 0;
               }
               if (($_pre661 | 0) != 0) {
                _free($_pre661);
               }
               HEAP32[$27 >> 2] = $1478;
              }
              HEAP32[$28 >> 2] = 0;
              var $1489 = HEAP32[$34 >> 2];
              if (($1489 | 0) < 0) {
               var $1491 = $1489;
               while (1) {
                var $1491;
                var $1492 = $1491 << 1;
                if (($1492 | 0) < 0) {
                 var $1491 = $1492;
                } else {
                 break;
                }
               }
               HEAP32[$34 >> 2] = $1492;
               var $1496 = _malloc($1491 << 3);
               var $1498 = HEAP32[$33 >> 2];
               var $_pre662 = HEAP32[$32 >> 2];
               if (!(($1498 | 0) == 0 | ($1496 | 0) == 0)) {
                var $1502 = $_pre662;
                var $1503 = $1498 << 2;
                _memcpy($1496, $1502, $1503) | 0;
               }
               if (($_pre662 | 0) != 0) {
                _free($_pre662);
               }
               HEAP32[$32 >> 2] = $1496;
              }
              HEAP32[$33 >> 2] = 0;
              __ZL12delaunayHullP9rcContextiPKfiPKiR10rcIntArrayS6_($ctx, $1470, $206, $nhull_4_i, $210, $tris, $edges);
              var $1507 = $iter_083_us_i + 1 | 0;
              if (($1507 | 0) < ($1455 | 0)) {
               var $iter_083_us_i = $1507;
               var $1457 = $1470;
              } else {
               var $1626 = $1470;
               var $samples_sroa_2_14665 = $samples_sroa_2_13;
               var $samples_sroa_0_13667 = $samples_sroa_0_12;
               break;
              }
             }
            } else {
             var $1626 = $1058;
             var $samples_sroa_2_14665 = $samples_sroa_2_1;
             var $samples_sroa_0_13667 = $samples_sroa_0_4;
            }
           } while (0);
           var $samples_sroa_0_13667;
           var $samples_sroa_2_14665;
           var $1626;
           var $1629 = HEAP32[$33 >> 2];
           var $1628 = $1626;
           var $samples_sroa_0_14 = $samples_sroa_0_13667;
           var $samples_sroa_2_15 = $samples_sroa_2_14665;
          } else {
           var $1629 = $1095;
           var $1628 = $1058;
           var $samples_sroa_0_14 = $samples_sroa_0_3;
           var $samples_sroa_2_15 = $samples_sroa_2_0;
          }
          var $samples_sroa_2_15;
          var $samples_sroa_0_14;
          var $1628;
          var $1629;
          if (($1629 | 0) <= 1023) {
           var $1650 = $1628;
           var $samples_sroa_0_15 = $samples_sroa_0_14;
           var $samples_sroa_2_16 = $samples_sroa_2_15;
           break;
          }
          var $1632 = HEAP32[$34 >> 2];
          if (($1632 | 0) < 1020) {
           if (($1632 | 0) == 0) {
            var $_lcssa_i415 = 4080;
            var $storemerge = 1020;
           } else {
            var $1636 = $1632;
            while (1) {
             var $1636;
             var $1637 = $1636 << 1;
             if (($1637 | 0) < 1020) {
              var $1636 = $1637;
             } else {
              break;
             }
            }
            var $_lcssa_i415 = $1636 << 3;
            var $storemerge = $1637;
           }
           var $storemerge;
           var $_lcssa_i415;
           HEAP32[$34 >> 2] = $storemerge;
           var $1639 = _malloc($_lcssa_i415);
           var $_pre663 = HEAP32[$32 >> 2];
           if (!(($1629 | 0) == 0 | ($1639 | 0) == 0)) {
            var $1644 = $_pre663;
            var $1645 = $1629 << 2;
            _memcpy($1639, $1644, $1645) | 0;
           }
           if (($_pre663 | 0) != 0) {
            _free($_pre663);
           }
           HEAP32[$32 >> 2] = $1639;
          }
          HEAP32[$33 >> 2] = 1020;
          __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 8832, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = ($1629 | 0) / 4 & -1, HEAP32[tempVarArgs + 8 >> 2] = 255, tempVarArgs));
          STACKTOP = tempVarArgs;
          var $1650 = $1628;
          var $samples_sroa_0_15 = $samples_sroa_0_14;
          var $samples_sroa_2_16 = $samples_sroa_2_15;
         }
        } while (0);
        var $samples_sroa_2_16;
        var $samples_sroa_0_15;
        var $1650;
        var $1651 = ($1650 | 0) > 0;
        if ($1651) {
         var $1652 = HEAPF32[$24 >> 2];
         var $1655 = HEAPF32[$211 >> 2] + HEAPF32[$213 >> 2];
         var $1656 = HEAPF32[$212 >> 2];
         var $j5_0427 = 0;
         while (1) {
          var $j5_0427;
          var $1658 = $j5_0427 * 3 & -1;
          var $1659 = $verts + ($1658 << 2) | 0;
          HEAPF32[$1659 >> 2] = $1652 + HEAPF32[$1659 >> 2];
          var $1663 = $verts + ($1658 + 1 << 2) | 0;
          HEAPF32[$1663 >> 2] = HEAPF32[$1663 >> 2] + $1655;
          var $1667 = $verts + ($1658 + 2 << 2) | 0;
          HEAPF32[$1667 >> 2] = $1656 + HEAPF32[$1667 >> 2];
          var $1670 = $j5_0427 + 1 | 0;
          if (($1670 | 0) < ($1650 | 0)) {
           var $j5_0427 = $1670;
          } else {
           break;
          }
         }
        }
        if ($291) {
         var $j6_0429 = 0;
         while (1) {
          var $j6_0429;
          var $1673 = $j6_0429 * 3 & -1;
          var $1674 = $69 + ($1673 << 2) | 0;
          HEAPF32[$1674 >> 2] = HEAPF32[$24 >> 2] + HEAPF32[$1674 >> 2];
          var $1679 = $69 + ($1673 + 1 << 2) | 0;
          HEAPF32[$1679 >> 2] = HEAPF32[$211 >> 2] + HEAPF32[$1679 >> 2];
          var $1684 = $69 + ($1673 + 2 << 2) | 0;
          HEAPF32[$1684 >> 2] = HEAPF32[$212 >> 2] + HEAPF32[$1684 >> 2];
          var $1687 = $j6_0429 + 1 | 0;
          if (($1687 | 0) < ($npoly_0_lcssa | 0)) {
           var $j6_0429 = $1687;
          } else {
           break;
          }
         }
        }
        var $1689 = HEAP32[$33 >> 2];
        var $1690 = ($1689 | 0) / 4 & -1;
        HEAP32[HEAP32[$176 >> 2] + ($258 << 2) >> 2] = HEAP32[$171 >> 2];
        HEAP32[HEAP32[$176 >> 2] + ($264 << 2) >> 2] = $1650;
        HEAP32[HEAP32[$176 >> 2] + ($261 << 2) >> 2] = HEAP32[$172 >> 2];
        HEAP32[HEAP32[$176 >> 2] + ($268 << 2) >> 2] = $1690;
        var $1702 = HEAP32[$171 >> 2] + $1650 | 0;
        if (($1702 | 0) > ($vcap_0445 | 0)) {
         var $vcap_1 = $vcap_0445;
         while (1) {
          var $vcap_1;
          if (($1702 | 0) > ($vcap_1 | 0)) {
           var $vcap_1 = $vcap_1 + 256 | 0;
          } else {
           break;
          }
         }
         var $1708 = _malloc($vcap_1 * 12 & -1);
         if (($1708 | 0) == 0) {
          label = 2519;
          break;
         }
         var $1714 = HEAP32[$171 >> 2];
         if (($1714 | 0) != 0) {
          var $1718 = HEAP32[$188 >> 2];
          var $1719 = $1714 * 12 & -1;
          _memcpy($1708, $1718, $1719) | 0;
         }
         var $1721 = HEAP32[$188 >> 2];
         if (($1721 | 0) != 0) {
          _free($1721);
         }
         HEAP32[$188 >> 2] = $1708;
         var $vcap_2 = $vcap_1;
        } else {
         var $vcap_2 = $vcap_0445;
        }
        var $vcap_2;
        if ($1651) {
         var $j7_0432 = 0;
         var $1726 = HEAP32[$171 >> 2];
         while (1) {
          var $1726;
          var $j7_0432;
          var $1727 = $j7_0432 * 3 & -1;
          HEAPF32[HEAP32[$188 >> 2] + (($1726 * 3 & -1) << 2) >> 2] = HEAPF32[$verts + ($1727 << 2) >> 2];
          HEAPF32[HEAP32[$188 >> 2] + ((HEAP32[$171 >> 2] * 3 & -1) + 1 << 2) >> 2] = HEAPF32[$verts + ($1727 + 1 << 2) >> 2];
          HEAPF32[HEAP32[$188 >> 2] + ((HEAP32[$171 >> 2] * 3 & -1) + 2 << 2) >> 2] = HEAPF32[$verts + ($1727 + 2 << 2) >> 2];
          var $1750 = HEAP32[$171 >> 2] + 1 | 0;
          HEAP32[$171 >> 2] = $1750;
          var $1751 = $j7_0432 + 1 | 0;
          if (($1751 | 0) < ($1650 | 0)) {
           var $j7_0432 = $1751;
           var $1726 = $1750;
          } else {
           break;
          }
         }
        }
        var $1754 = HEAP32[$172 >> 2] + $1690 | 0;
        if (($1754 | 0) > ($tcap_0446 | 0)) {
         var $tcap_1 = $tcap_0446;
         while (1) {
          var $tcap_1;
          if (($1754 | 0) > ($tcap_1 | 0)) {
           var $tcap_1 = $tcap_1 + 256 | 0;
          } else {
           break;
          }
         }
         var $1759 = $tcap_1 << 2;
         var $1760 = _malloc($1759);
         if (($1760 | 0) == 0) {
          label = 2531;
          break;
         }
         var $1764 = HEAP32[$172 >> 2];
         if (($1764 | 0) != 0) {
          var $1767 = HEAP32[$195 >> 2];
          var $1768 = $1764 << 2;
          _memcpy($1760, $1767, $1768) | 0;
         }
         var $1770 = HEAP32[$195 >> 2];
         if (($1770 | 0) != 0) {
          _free($1770);
         }
         HEAP32[$195 >> 2] = $1760;
         var $tcap_2 = $tcap_1;
        } else {
         var $tcap_2 = $tcap_0446;
        }
        var $tcap_2;
        if (($1689 | 0) > 3) {
         var $_pre655 = HEAP32[$32 >> 2];
         var $j8_0437 = 0;
         var $1775 = HEAP32[$172 >> 2];
         while (1) {
          var $1775;
          var $j8_0437;
          var $1776 = $j8_0437 << 2;
          var $1777 = $_pre655 + ($1776 << 2) | 0;
          HEAP8[HEAP32[$195 >> 2] + ($1775 << 2) | 0] = HEAP32[$1777 >> 2] & 255;
          var $1783 = $_pre655 + (($1776 | 1) << 2) | 0;
          HEAP8[HEAP32[$195 >> 2] + (HEAP32[$172 >> 2] << 2 | 1) | 0] = HEAP32[$1783 >> 2] & 255;
          var $1791 = $_pre655 + (($1776 | 2) << 2) | 0;
          HEAP8[HEAP32[$195 >> 2] + (HEAP32[$172 >> 2] << 2 | 2) | 0] = HEAP32[$1791 >> 2] & 255;
          var $1801 = $verts + ((HEAP32[$1777 >> 2] * 3 & -1) << 2) | 0;
          var $1804 = $verts + ((HEAP32[$1783 >> 2] * 3 & -1) << 2) | 0;
          var $1807 = $verts + ((HEAP32[$1791 >> 2] * 3 & -1) << 2) | 0;
          var $1808 = __ZL12getEdgeFlagsPKfS0_S0_i($1801, $1804, $69, $npoly_0_lcssa);
          var $1811 = __ZL12getEdgeFlagsPKfS0_S0_i($1804, $1807, $69, $npoly_0_lcssa) << 2 | $1808;
          var $1814 = $1811 | __ZL12getEdgeFlagsPKfS0_S0_i($1807, $1801, $69, $npoly_0_lcssa) << 4;
          HEAP8[HEAP32[$195 >> 2] + (HEAP32[$172 >> 2] << 2 | 3) | 0] = $1814;
          var $1821 = HEAP32[$172 >> 2] + 1 | 0;
          HEAP32[$172 >> 2] = $1821;
          var $1822 = $j8_0437 + 1 | 0;
          if (($1822 | 0) < ($1690 | 0)) {
           var $j8_0437 = $1822;
           var $1775 = $1821;
          } else {
           break;
          }
         }
        }
        var $1824 = $i1_0447 + 1 | 0;
        if (($1824 | 0) < (HEAP32[$14 >> 2] | 0)) {
         var $vcap_0445 = $vcap_2;
         var $tcap_0446 = $tcap_2;
         var $i1_0447 = $1824;
         var $samples_sroa_0_3 = $samples_sroa_0_15;
         var $samples_sroa_2_0 = $samples_sroa_2_16;
         var $stack_sroa_0_2 = $stack_sroa_0_29;
         var $stack_sroa_2_0 = $stack_sroa_2_40;
        } else {
         var $samples_sroa_0_16 = $samples_sroa_0_15;
         var $stack_sroa_0_30 = $stack_sroa_0_29;
         break L2982;
        }
       }
       if (label == 2519) {
        __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 2808, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $vcap_1 * 3 & -1, tempVarArgs));
        STACKTOP = tempVarArgs;
        var $_0 = 0;
        var $samples_sroa_0_17 = $samples_sroa_0_15;
        var $stack_sroa_0_31 = $stack_sroa_0_29;
        break L2970;
       } else if (label == 2531) {
        __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 1752, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1759, tempVarArgs));
        STACKTOP = tempVarArgs;
        var $_0 = 0;
        var $samples_sroa_0_17 = $samples_sroa_0_15;
        var $stack_sroa_0_31 = $stack_sroa_0_29;
        break L2970;
       }
      } else {
       var $samples_sroa_0_16 = $49;
       var $stack_sroa_0_30 = $43;
      }
     } while (0);
     var $stack_sroa_0_30;
     var $samples_sroa_0_16;
     if ((HEAP8[$1] & 1) == 0) {
      var $_0 = 1;
      var $samples_sroa_0_17 = $samples_sroa_0_16;
      var $stack_sroa_0_31 = $stack_sroa_0_30;
      break;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 26);
     var $_0 = 1;
     var $samples_sroa_0_17 = $samples_sroa_0_16;
     var $stack_sroa_0_31 = $stack_sroa_0_30;
    }
   } while (0);
   var $stack_sroa_0_31;
   var $samples_sroa_0_17;
   var $_0;
   _free($68);
   _free($56);
   if (($164 | 0) == 0) {
    var $_1441442 = $_0;
    var $samples_sroa_0_19 = $samples_sroa_0_17;
    var $stack_sroa_0_33 = $stack_sroa_0_31;
    break;
   }
   _free($164);
   var $_1441442 = $_0;
   var $samples_sroa_0_19 = $samples_sroa_0_17;
   var $stack_sroa_0_33 = $stack_sroa_0_31;
  }
 } while (0);
 var $stack_sroa_0_33;
 var $samples_sroa_0_19;
 var $_1441442;
 if (($samples_sroa_0_19 | 0) != 0) {
  _free($samples_sroa_0_19);
 }
 if (($stack_sroa_0_33 | 0) != 0) {
  _free($stack_sroa_0_33);
 }
 var $1844 = HEAP32[$32 >> 2];
 if (($1844 | 0) != 0) {
  _free($1844);
 }
 var $1848 = HEAP32[$27 >> 2];
 if (($1848 | 0) == 0) {
  var $_2 = $_1441442;
  var $_2;
  STACKTOP = sp;
  return $_2;
 }
 _free($1848);
 var $_2 = $_1441442;
 var $_2;
 STACKTOP = sp;
 return $_2;
}
function __ZL12getEdgeFlagsPKfS0_S0_i($va, $vb, $vpoly, $npoly) {
 var label = 0;
 do {
  if ((HEAP8[22256] | 0) == 0) {
   if ((___cxa_guard_acquire(22256) | 0) == 0) {
    break;
   }
   HEAPF32[9664 >> 2] = 10000001111620804e-22;
  }
 } while (0);
 if (($npoly | 0) <= 0) {
  var $_0 = 0;
  var $_0;
  return $_0;
 }
 var $va_val = HEAPF32[$va >> 2];
 var $va_idx_val = HEAPF32[$va + 8 >> 2];
 var $10 = HEAPF32[9664 >> 2];
 var $vb_idx = $vb + 8 | 0;
 var $i_023 = 0;
 var $j_024 = $npoly - 1 | 0;
 while (1) {
  var $j_024;
  var $i_023;
  var $12 = $j_024 * 3 & -1;
  var $14 = $i_023 * 3 & -1;
  var $_val15 = HEAPF32[$vpoly + ($12 << 2) >> 2];
  var $_idx16_val = HEAPF32[$vpoly + ($12 + 2 << 2) >> 2];
  var $16 = HEAPF32[$vpoly + ($14 << 2) >> 2] - $_val15;
  var $17 = HEAPF32[$vpoly + ($14 + 2 << 2) >> 2] - $_idx16_val;
  var $22 = $16 * $16 + $17 * $17;
  var $25 = ($va_val - $_val15) * $16 + ($va_idx_val - $_idx16_val) * $17;
  var $26 = $22 > 0;
  if ($26) {
   var $t_0_i19 = $25 / $22;
  } else {
   var $t_0_i19 = $25;
  }
  var $t_0_i19;
  do {
   if ($t_0_i19 < 0) {
    var $t_1_i20 = 0;
   } else {
    if ($t_0_i19 <= 1) {
     var $t_1_i20 = $t_0_i19;
     break;
    }
    var $t_1_i20 = 1;
   }
  } while (0);
  var $t_1_i20;
  var $36 = $_val15 + $16 * $t_1_i20 - $va_val;
  var $39 = $_idx16_val + $17 * $t_1_i20 - $va_idx_val;
  if ($36 * $36 + $39 * $39 < $10) {
   var $vb_val = HEAPF32[$vb >> 2];
   var $vb_idx_val = HEAPF32[$vb_idx >> 2];
   var $49 = ($vb_val - $_val15) * $16 + ($vb_idx_val - $_idx16_val) * $17;
   if ($26) {
    var $t_0_i = $49 / $22;
   } else {
    var $t_0_i = $49;
   }
   var $t_0_i;
   do {
    if ($t_0_i < 0) {
     var $t_1_i = 0;
    } else {
     if ($t_0_i <= 1) {
      var $t_1_i = $t_0_i;
      break;
     }
     var $t_1_i = 1;
    }
   } while (0);
   var $t_1_i;
   var $59 = $_val15 + $16 * $t_1_i - $vb_val;
   var $62 = $_idx16_val + $17 * $t_1_i - $vb_idx_val;
   if ($59 * $59 + $62 * $62 < $10) {
    var $_0 = 1;
    label = 2590;
    break;
   }
  }
  var $68 = $i_023 + 1 | 0;
  if (($68 | 0) < ($npoly | 0)) {
   var $j_024 = $i_023;
   var $i_023 = $68;
  } else {
   var $_0 = 0;
   label = 2591;
   break;
  }
 }
 if (label == 2591) {
  var $_0;
  return $_0;
 } else if (label == 2590) {
  var $_0;
  return $_0;
 }
}
function __ZL12delaunayHullP9rcContextiPKfiPKiR10rcIntArrayS6_($ctx, $npts, $pts, $nhull, $hull, $tris, $edges) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $nfaces = sp;
 var $nedges = sp + 8;
 HEAP32[$nfaces >> 2] = 0;
 HEAP32[$nedges >> 2] = 0;
 var $1 = $npts * 10 & -1;
 var $2 = $npts * 40 & -1;
 var $3 = $edges + 8 | 0;
 var $4 = HEAP32[$3 >> 2];
 if (($4 | 0) < ($2 | 0)) {
  if (($4 | 0) == 0) {
   HEAP32[$3 >> 2] = $2;
   var $_lcssa_i = $2;
  } else {
   var $8 = $4;
   while (1) {
    var $8;
    var $9 = $8 << 1;
    if (($9 | 0) < ($2 | 0)) {
     var $8 = $9;
    } else {
     break;
    }
   }
   HEAP32[$3 >> 2] = $9;
   var $_lcssa_i = $9;
  }
  var $_lcssa_i;
  var $13 = _malloc($_lcssa_i << 2);
  var $15 = $edges + 4 | 0;
  var $16 = HEAP32[$15 >> 2];
  var $_pre_i = $edges | 0;
  if (!(($16 | 0) == 0 | ($13 | 0) == 0)) {
   var $21 = HEAP32[$_pre_i >> 2];
   var $22 = $16 << 2;
   _memcpy($13, $21, $22) | 0;
  }
  var $23 = HEAP32[$_pre_i >> 2];
  if (($23 | 0) != 0) {
   _free($23);
  }
  HEAP32[$_pre_i >> 2] = $13;
  var $_pre_phi12_i = $15;
 } else {
  var $_pre_phi12_i = $edges + 4 | 0;
 }
 var $_pre_phi12_i;
 HEAP32[$_pre_phi12_i >> 2] = $2;
 do {
  if (($nhull | 0) > 0) {
   var $29 = $edges | 0;
   var $j_0122 = $nhull - 1 | 0;
   var $i_0123 = 0;
   var $31 = 0;
   while (1) {
    var $31;
    var $i_0123;
    var $j_0122;
    var $32 = HEAP32[$29 >> 2];
    var $34 = HEAP32[$hull + ($j_0122 << 2) >> 2];
    var $36 = HEAP32[$hull + ($i_0123 << 2) >> 2];
    L3652 : do {
     if (($31 | 0) < ($1 | 0)) {
      L3655 : do {
       if (($31 | 0) > 0) {
        var $i_015_i_i = 0;
        while (1) {
         var $i_015_i_i;
         var $41 = $i_015_i_i << 2;
         var $43 = HEAP32[$32 + ($41 << 2) >> 2];
         if (($43 | 0) == ($34 | 0)) {
          if ((HEAP32[$32 + (($41 | 1) << 2) >> 2] | 0) == ($36 | 0)) {
           break;
          }
         }
         if (($43 | 0) == ($36 | 0)) {
          if ((HEAP32[$32 + (($41 | 1) << 2) >> 2] | 0) == ($34 | 0)) {
           break;
          }
         }
         var $56 = $i_015_i_i + 1 | 0;
         if (($56 | 0) < ($31 | 0)) {
          var $i_015_i_i = $56;
         } else {
          break L3655;
         }
        }
        if (($i_015_i_i | 0) != -1) {
         var $65 = $31;
         break L3652;
        }
       }
      } while (0);
      var $59 = $31 << 2;
      HEAP32[$32 + ($59 << 2) >> 2] = $34;
      HEAP32[$32 + (($59 | 1) << 2) >> 2] = $36;
      HEAP32[$32 + (($59 | 2) << 2) >> 2] = -2;
      HEAP32[$32 + (($59 | 3) << 2) >> 2] = -1;
      var $64 = $31 + 1 | 0;
      HEAP32[$nedges >> 2] = $64;
      var $65 = $64;
     } else {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7640, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $31, HEAP32[tempVarArgs + 8 >> 2] = $1, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $65 = $31;
     }
    } while (0);
    var $65;
    var $66 = $i_0123 + 1 | 0;
    if (($66 | 0) < ($nhull | 0)) {
     var $j_0122 = $i_0123;
     var $i_0123 = $66;
     var $31 = $65;
    } else {
     break;
    }
   }
   if (($65 | 0) > 0) {
    var $currentEdge_0118 = 0;
   } else {
    var $_ph = $65;
    label = 2623;
    break;
   }
   while (1) {
    var $currentEdge_0118;
    var $68 = $currentEdge_0118 << 2;
    var $70 = HEAP32[$29 >> 2];
    if ((HEAP32[$70 + (($68 | 2) << 2) >> 2] | 0) == -1) {
     __ZL13completeFacetP9rcContextPKfiPiRiiS4_i($ctx, $pts, $npts, $70, $nedges, $1, $nfaces, $currentEdge_0118);
     var $76 = HEAP32[$29 >> 2];
    } else {
     var $76 = $70;
    }
    var $76;
    if ((HEAP32[$76 + (($68 | 3) << 2) >> 2] | 0) == -1) {
     __ZL13completeFacetP9rcContextPKfiPiRiiS4_i($ctx, $pts, $npts, $76, $nedges, $1, $nfaces, $currentEdge_0118);
    }
    var $82 = $currentEdge_0118 + 1 | 0;
    var $83 = HEAP32[$nedges >> 2];
    if (($82 | 0) < ($83 | 0)) {
     var $currentEdge_0118 = $82;
    } else {
     break;
    }
   }
   var $phitmp = HEAP32[$nfaces >> 2] << 2;
   var $108 = $tris + 8 | 0;
   var $109 = HEAP32[$108 >> 2];
   if (($109 | 0) < ($phitmp | 0)) {
    if (($109 | 0) == 0) {
     HEAP32[$108 >> 2] = $phitmp;
     var $_lcssa_i20 = $phitmp;
    } else {
     var $113 = $109;
     while (1) {
      var $113;
      var $114 = $113 << 1;
      if (($114 | 0) < ($phitmp | 0)) {
       var $113 = $114;
      } else {
       break;
      }
     }
     HEAP32[$108 >> 2] = $114;
     var $_lcssa_i20 = $114;
    }
    var $_lcssa_i20;
    var $118 = _malloc($_lcssa_i20 << 2);
    var $120 = $tris + 4 | 0;
    var $121 = HEAP32[$120 >> 2];
    var $_pre_i22 = $tris | 0;
    if (!(($121 | 0) == 0 | ($118 | 0) == 0)) {
     var $126 = HEAP32[$_pre_i22 >> 2];
     var $127 = $121 << 2;
     _memcpy($118, $126, $127) | 0;
    }
    var $128 = HEAP32[$_pre_i22 >> 2];
    if (($128 | 0) != 0) {
     _free($128);
    }
    HEAP32[$_pre_i22 >> 2] = $118;
    var $_pre_phi12_i25 = $120;
   } else {
    var $_pre_phi12_i25 = $tris + 4 | 0;
   }
   var $_pre_phi12_i25;
   HEAP32[$_pre_phi12_i25 >> 2] = $phitmp;
   if (($phitmp | 0) <= 0) {
    var $134 = $83;
    break;
   }
   var $133 = $tris | 0;
   var $i1_0114 = 0;
   while (1) {
    var $i1_0114;
    HEAP32[HEAP32[$133 >> 2] + ($i1_0114 << 2) >> 2] = -1;
    var $140 = $i1_0114 + 1 | 0;
    if (($140 | 0) < ($phitmp | 0)) {
     var $i1_0114 = $140;
    } else {
     var $134 = $83;
     break;
    }
   }
  } else {
   var $_ph = 0;
   label = 2623;
  }
 } while (0);
 if (label == 2623) {
  var $_ph;
  var $85 = $tris + 8 | 0;
  var $86 = HEAP32[$85 >> 2];
  if (($86 | 0) < 0) {
   var $88 = $86;
   while (1) {
    var $88;
    var $89 = $88 << 1;
    if (($89 | 0) < 0) {
     var $88 = $89;
    } else {
     break;
    }
   }
   HEAP32[$85 >> 2] = $89;
   var $93 = _malloc($88 << 3);
   var $95 = $tris + 4 | 0;
   var $96 = HEAP32[$95 >> 2];
   var $_pre_i9 = $tris | 0;
   if (!(($96 | 0) == 0 | ($93 | 0) == 0)) {
    var $101 = HEAP32[$_pre_i9 >> 2];
    var $102 = $96 << 2;
    _memcpy($93, $101, $102) | 0;
   }
   var $103 = HEAP32[$_pre_i9 >> 2];
   if (($103 | 0) != 0) {
    _free($103);
   }
   HEAP32[$_pre_i9 >> 2] = $93;
   var $_pre_phi12_i12 = $95;
  } else {
   var $_pre_phi12_i12 = $tris + 4 | 0;
  }
  var $_pre_phi12_i12;
  HEAP32[$_pre_phi12_i12 >> 2] = 0;
  var $134 = $_ph;
 }
 var $134;
 if (($134 | 0) > 0) {
  var $136 = $edges | 0;
  var $137 = $tris | 0;
  var $i2_0112 = 0;
  while (1) {
   var $i2_0112;
   var $147 = $i2_0112 << 2;
   var $148 = HEAP32[$136 >> 2];
   var $149 = $148 + ($147 << 2) | 0;
   var $151 = HEAP32[$148 + (($147 | 3) << 2) >> 2];
   do {
    if (($151 | 0) > -1) {
     var $154 = $151 << 2;
     var $155 = HEAP32[$137 >> 2];
     var $156 = $155 + ($154 << 2) | 0;
     var $157 = HEAP32[$156 >> 2];
     if (($157 | 0) == -1) {
      HEAP32[$156 >> 2] = HEAP32[$149 >> 2];
      HEAP32[$155 + (($154 | 1) << 2) >> 2] = HEAP32[$148 + (($147 | 1) << 2) >> 2];
      break;
     }
     var $166 = HEAP32[$148 + (($147 | 1) << 2) >> 2];
     if (($157 | 0) == ($166 | 0)) {
      HEAP32[$155 + (($154 | 2) << 2) >> 2] = HEAP32[$149 >> 2];
      break;
     }
     if ((HEAP32[$155 + (($154 | 1) << 2) >> 2] | 0) != (HEAP32[$149 >> 2] | 0)) {
      break;
     }
     HEAP32[$155 + (($154 | 2) << 2) >> 2] = $166;
    }
   } while (0);
   var $180 = HEAP32[$148 + (($147 | 2) << 2) >> 2];
   do {
    if (($180 | 0) > -1) {
     var $183 = $180 << 2;
     var $184 = HEAP32[$137 >> 2];
     var $185 = $184 + ($183 << 2) | 0;
     var $186 = HEAP32[$185 >> 2];
     if (($186 | 0) == -1) {
      HEAP32[$185 >> 2] = HEAP32[$148 + (($147 | 1) << 2) >> 2];
      HEAP32[$184 + (($183 | 1) << 2) >> 2] = HEAP32[$149 >> 2];
      break;
     }
     var $194 = HEAP32[$149 >> 2];
     if (($186 | 0) == ($194 | 0)) {
      HEAP32[$184 + (($183 | 2) << 2) >> 2] = HEAP32[$148 + (($147 | 1) << 2) >> 2];
      break;
     }
     if ((HEAP32[$184 + (($183 | 1) << 2) >> 2] | 0) != (HEAP32[$148 + (($147 | 1) << 2) >> 2] | 0)) {
      break;
     }
     HEAP32[$184 + (($183 | 2) << 2) >> 2] = $194;
    }
   } while (0);
   var $209 = $i2_0112 + 1 | 0;
   if (($209 | 0) < ($134 | 0)) {
    var $i2_0112 = $209;
   } else {
    break;
   }
  }
 }
 var $142 = $tris + 4 | 0;
 var $143 = HEAP32[$142 >> 2];
 if (($143 | 0) <= 3) {
  STACKTOP = sp;
  return;
 }
 var $145 = $tris | 0;
 var $146 = $tris + 8 | 0;
 var $i4_0110 = 0;
 var $211 = $143;
 while (1) {
  var $211;
  var $i4_0110;
  var $212 = $i4_0110 << 2;
  var $213 = HEAP32[$145 >> 2];
  var $214 = $213 + ($212 << 2) | 0;
  var $215 = HEAP32[$214 >> 2];
  var $_pre134 = $213 + (($212 | 1) << 2) | 0;
  var $_pre41 = HEAP32[$_pre134 >> 2];
  do {
   if (($215 | 0) == -1) {
    var $223 = $_pre41;
    label = 2668;
   } else {
    if (($_pre41 | 0) == -1) {
     var $223 = -1;
     label = 2668;
     break;
    }
    if ((HEAP32[$213 + (($212 | 2) << 2) >> 2] | 0) == -1) {
     var $223 = $_pre41;
     label = 2668;
    } else {
     var $i4_1 = $i4_0110;
     var $273 = $211;
    }
   }
  } while (0);
  if (label == 2668) {
   label = 0;
   var $223;
   var $224 = $213 + (($212 | 2) << 2) | 0;
   var $225 = HEAP32[$224 >> 2];
   __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 2, 8096, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = $i4_0110, HEAP32[tempVarArgs + 8 >> 2] = $215, HEAP32[tempVarArgs + 16 >> 2] = $223, HEAP32[tempVarArgs + 24 >> 2] = $225, tempVarArgs));
   STACKTOP = tempVarArgs;
   HEAP32[$214 >> 2] = HEAP32[HEAP32[$145 >> 2] + (HEAP32[$142 >> 2] - 4 << 2) >> 2];
   HEAP32[$_pre134 >> 2] = HEAP32[HEAP32[$145 >> 2] + (HEAP32[$142 >> 2] - 3 << 2) >> 2];
   HEAP32[$224 >> 2] = HEAP32[HEAP32[$145 >> 2] + (HEAP32[$142 >> 2] - 2 << 2) >> 2];
   HEAP32[$213 + (($212 | 3) << 2) >> 2] = HEAP32[HEAP32[$145 >> 2] + (HEAP32[$142 >> 2] - 1 << 2) >> 2];
   var $248 = HEAP32[$142 >> 2] - 4 | 0;
   var $249 = HEAP32[$146 >> 2];
   if (($249 | 0) < ($248 | 0)) {
    if (($249 | 0) == 0) {
     HEAP32[$146 >> 2] = $248;
     var $_lcssa_i33 = $248;
    } else {
     var $253 = $249;
     while (1) {
      var $253;
      var $254 = $253 << 1;
      if (($254 | 0) < ($248 | 0)) {
       var $253 = $254;
      } else {
       break;
      }
     }
     HEAP32[$146 >> 2] = $254;
     var $_lcssa_i33 = $254;
    }
    var $_lcssa_i33;
    var $258 = _malloc($_lcssa_i33 << 2);
    var $260 = HEAP32[$142 >> 2];
    if (!(($260 | 0) == 0 | ($258 | 0) == 0)) {
     var $265 = HEAP32[$145 >> 2];
     var $266 = $260 << 2;
     _memcpy($258, $265, $266) | 0;
    }
    var $267 = HEAP32[$145 >> 2];
    if (($267 | 0) != 0) {
     _free($267);
    }
    HEAP32[$145 >> 2] = $258;
   }
   HEAP32[$142 >> 2] = $248;
   var $i4_1 = $i4_0110 - 1 | 0;
   var $273 = $248;
  }
  var $273;
  var $i4_1;
  var $274 = $i4_1 + 1 | 0;
  if (($274 | 0) < (($273 | 0) / 4 & -1 | 0)) {
   var $i4_0110 = $274;
   var $211 = $273;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function __ZL12overlapEdgesPKfPKiiii($pts, $edges, $nedges, $s1, $t1) {
 var label = 0;
 if (($nedges | 0) <= 0) {
  var $_0 = 0;
  var $_0;
  return $_0;
 }
 var $2 = $s1 * 3 & -1;
 var $3 = $pts + ($2 << 2) | 0;
 var $4 = $t1 * 3 & -1;
 var $5 = $pts + ($4 << 2) | 0;
 var $_idx26 = $pts + ($2 + 2 << 2) | 0;
 var $_idx28 = $pts + ($4 + 2 << 2) | 0;
 var $i_033 = 0;
 L3767 : while (1) {
  var $i_033;
  var $7 = $i_033 << 2;
  var $9 = HEAP32[$edges + ($7 << 2) >> 2];
  var $12 = HEAP32[$edges + (($7 | 1) << 2) >> 2];
  do {
   if (!(($9 | 0) == ($s1 | 0) | ($9 | 0) == ($t1 | 0) | ($12 | 0) == ($s1 | 0) | ($12 | 0) == ($t1 | 0))) {
    var $18 = $9 * 3 & -1;
    var $20 = $12 * 3 & -1;
    var $_val = HEAPF32[$pts + ($18 << 2) >> 2];
    var $_idx_val = HEAPF32[$pts + ($18 + 2 << 2) >> 2];
    var $_val25 = HEAPF32[$3 >> 2];
    var $_idx26_val = HEAPF32[$_idx26 >> 2];
    var $_val27 = HEAPF32[$5 >> 2];
    var $_idx28_val = HEAPF32[$_idx28 >> 2];
    var $22 = HEAPF32[$pts + ($20 << 2) >> 2] - $_val;
    var $23 = HEAPF32[$pts + ($20 + 2 << 2) >> 2] - $_idx_val;
    var $28 = $22 * ($_idx28_val - $_idx_val) - $23 * ($_val27 - $_val);
    var $33 = $22 * ($_idx26_val - $_idx_val) - $23 * ($_val25 - $_val);
    if ($33 * $28 >= 0) {
     break;
    }
    var $43 = ($_idx_val - $_idx26_val) * ($_val27 - $_val25) - ($_val - $_val25) * ($_idx28_val - $_idx26_val);
    if ($43 * ($33 + $43 - $28) < 0) {
     var $_0 = 1;
     label = 2692;
     break L3767;
    }
   }
  } while (0);
  var $48 = $i_033 + 1 | 0;
  if (($48 | 0) < ($nedges | 0)) {
   var $i_033 = $48;
  } else {
   var $_0 = 0;
   label = 2691;
   break;
  }
 }
 if (label == 2692) {
  var $_0;
  return $_0;
 } else if (label == 2691) {
  var $_0;
  return $_0;
 }
}
function __ZL13completeFacetP9rcContextPKfiPiRiiS4_i($ctx, $pts, $npts, $edges, $nedges, $maxEdges, $nfaces, $e) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 24 | 0;
 var $c = sp;
 var $r = sp + 16;
 var $1 = $e << 2;
 var $2 = $edges + ($1 << 2) | 0;
 var $3 = $edges + (($1 | 2) << 2) | 0;
 do {
  if ((HEAP32[$3 >> 2] | 0) == -1) {
   var $s_0_in = $2;
   var $t_0_in = $edges + (($1 | 1) << 2) | 0;
  } else {
   if ((HEAP32[$edges + (($1 | 3) << 2) >> 2] | 0) == -1) {
    var $s_0_in = $edges + (($1 | 1) << 2) | 0;
    var $t_0_in = $2;
    break;
   } else {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 var $t_0_in;
 var $s_0_in;
 var $s_0 = HEAP32[$s_0_in >> 2];
 var $t_0 = HEAP32[$t_0_in >> 2];
 var $15 = $c;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 0;
 HEAPF32[$r >> 2] = -1;
 do {
  if (($npts | 0) > 0) {
   var $17 = $s_0 * 3 & -1;
   var $18 = $pts + ($17 << 2) | 0;
   var $19 = $t_0 * 3 & -1;
   var $20 = $pts + ($19 << 2) | 0;
   var $21 = $pts + ($19 + 2 << 2) | 0;
   var $22 = $pts + ($17 + 2 << 2) | 0;
   var $23 = $c | 0;
   var $24 = $c + 8 | 0;
   var $pt_0154 = $npts;
   var $u_0155 = 0;
   while (1) {
    var $u_0155;
    var $pt_0154;
    do {
     if (($u_0155 | 0) == ($s_0 | 0) | ($u_0155 | 0) == ($t_0 | 0)) {
      var $pt_1 = $pt_0154;
     } else {
      var $29 = $u_0155 * 3 & -1;
      var $30 = $pts + ($29 << 2) | 0;
      var $32 = HEAPF32[$18 >> 2];
      var $35 = HEAPF32[$22 >> 2];
      var $37 = HEAPF32[$30 >> 2];
      var $40 = HEAPF32[$pts + ($29 + 2 << 2) >> 2];
      if ((HEAPF32[$20 >> 2] - $32) * ($40 - $35) - (HEAPF32[$21 >> 2] - $35) * ($37 - $32) <= 9999999747378752e-21) {
       var $pt_1 = $pt_0154;
       break;
      }
      var $47 = HEAPF32[$r >> 2];
      if ($47 < 0) {
       __ZL12circumCirclePKfS0_S0_PfRf($18, $20, $30, $23, $r);
       var $pt_1 = $u_0155;
       break;
      }
      var $52 = $37 - HEAPF32[$23 >> 2];
      var $54 = $40 - HEAPF32[$24 >> 2];
      var $58 = Math.sqrt($52 * $52 + $54 * $54);
      if ($58 > $47 * 1.0010000467300415) {
       var $pt_1 = $pt_0154;
       break;
      }
      if ($58 < $47 * .9990000128746033) {
       __ZL12circumCirclePKfS0_S0_PfRf($18, $20, $30, $23, $r);
       var $pt_1 = $u_0155;
       break;
      }
      var $66 = HEAP32[$nedges >> 2];
      if (__ZL12overlapEdgesPKfPKiiii($pts, $edges, $66, $s_0, $u_0155)) {
       var $pt_1 = $pt_0154;
       break;
      }
      if (__ZL12overlapEdgesPKfPKiiii($pts, $edges, $66, $t_0, $u_0155)) {
       var $pt_1 = $pt_0154;
       break;
      }
      __ZL12circumCirclePKfS0_S0_PfRf($18, $20, $30, $23, $r);
      var $pt_1 = $u_0155;
     }
    } while (0);
    var $pt_1;
    var $72 = $u_0155 + 1 | 0;
    if (($72 | 0) < ($npts | 0)) {
     var $pt_0154 = $pt_1;
     var $u_0155 = $72;
    } else {
     break;
    }
   }
   if (($pt_1 | 0) >= ($npts | 0)) {
    break;
   }
   var $76 = HEAP32[$nfaces >> 2];
   var $77 = HEAP32[$2 >> 2];
   var $80 = HEAP32[$edges + (($1 | 1) << 2) >> 2];
   do {
    if (($77 | 0) == ($s_0 | 0) & ($80 | 0) == ($t_0 | 0)) {
     if ((HEAP32[$3 >> 2] | 0) != -1) {
      var $86 = $t_0;
      label = 2714;
      break;
     }
     HEAP32[$3 >> 2] = $76;
    } else {
     var $86 = $80;
     label = 2714;
    }
   } while (0);
   do {
    if (label == 2714) {
     var $86;
     if (!(($86 | 0) == ($s_0 | 0) & ($77 | 0) == ($t_0 | 0))) {
      break;
     }
     var $90 = $edges + (($1 | 3) << 2) | 0;
     if ((HEAP32[$90 >> 2] | 0) != -1) {
      break;
     }
     HEAP32[$90 >> 2] = $76;
    }
   } while (0);
   var $94 = HEAP32[$nedges >> 2];
   var $95 = ($94 | 0) > 0;
   L3811 : do {
    if ($95) {
     var $i_015_i118 = 0;
     while (1) {
      var $i_015_i118;
      var $96 = $i_015_i118 << 2;
      var $98 = HEAP32[$edges + ($96 << 2) >> 2];
      var $99 = ($98 | 0) == ($pt_1 | 0);
      if ($99) {
       if ((HEAP32[$edges + (($96 | 1) << 2) >> 2] | 0) == ($s_0 | 0)) {
        break;
       }
      }
      if (($98 | 0) == ($s_0 | 0)) {
       if ((HEAP32[$edges + (($96 | 1) << 2) >> 2] | 0) == ($pt_1 | 0)) {
        break;
       }
      }
      var $111 = $i_015_i118 + 1 | 0;
      if (($111 | 0) < ($94 | 0)) {
       var $i_015_i118 = $111;
      } else {
       label = 2724;
       break L3811;
      }
     }
     if (($i_015_i118 | 0) == -1) {
      label = 2724;
      break;
     }
     var $144 = HEAP32[$nfaces >> 2];
     var $146 = HEAP32[$edges + (($96 | 1) << 2) >> 2];
     do {
      if ($99 & ($146 | 0) == ($s_0 | 0)) {
       var $149 = $edges + (($96 | 2) << 2) | 0;
       if ((HEAP32[$149 >> 2] | 0) != -1) {
        var $153 = $s_0;
        break;
       }
       HEAP32[$149 >> 2] = $144;
       label = 2740;
       break L3811;
      } else {
       var $153 = $146;
      }
     } while (0);
     var $153;
     if (!(($153 | 0) == ($pt_1 | 0) & ($98 | 0) == ($s_0 | 0))) {
      label = 2740;
      break;
     }
     var $157 = $edges + (($96 | 3) << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) != -1) {
      label = 2740;
      break;
     }
     HEAP32[$157 >> 2] = $144;
     label = 2740;
    } else {
     label = 2724;
    }
   } while (0);
   L3828 : do {
    if (label == 2724) {
     var $114 = HEAP32[$nfaces >> 2];
     if (($94 | 0) >= ($maxEdges | 0)) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7640, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $94, HEAP32[tempVarArgs + 8 >> 2] = $maxEdges, tempVarArgs));
      STACKTOP = tempVarArgs;
      label = 2740;
      break;
     }
     L3833 : do {
      if ($95) {
       var $i_015_i_i108 = 0;
       while (1) {
        var $i_015_i_i108;
        var $118 = $i_015_i_i108 << 2;
        var $120 = HEAP32[$edges + ($118 << 2) >> 2];
        if (($120 | 0) == ($pt_1 | 0)) {
         if ((HEAP32[$edges + (($118 | 1) << 2) >> 2] | 0) == ($s_0 | 0)) {
          break;
         }
        }
        if (($120 | 0) == ($s_0 | 0)) {
         if ((HEAP32[$edges + (($118 | 1) << 2) >> 2] | 0) == ($pt_1 | 0)) {
          break;
         }
        }
        var $133 = $i_015_i_i108 + 1 | 0;
        if (($133 | 0) < ($94 | 0)) {
         var $i_015_i_i108 = $133;
        } else {
         break L3833;
        }
       }
       if (($i_015_i_i108 | 0) != -1) {
        label = 2740;
        break L3828;
       }
      }
     } while (0);
     var $136 = $94 << 2;
     HEAP32[$edges + ($136 << 2) >> 2] = $pt_1;
     HEAP32[$edges + (($136 | 1) << 2) >> 2] = $s_0;
     HEAP32[$edges + (($136 | 2) << 2) >> 2] = $114;
     HEAP32[$edges + (($136 | 3) << 2) >> 2] = -1;
     var $142 = HEAP32[$nedges >> 2] + 1 | 0;
     HEAP32[$nedges >> 2] = $142;
     var $161 = $142;
    }
   } while (0);
   if (label == 2740) {
    var $161 = HEAP32[$nedges >> 2];
   }
   var $161;
   var $162 = ($161 | 0) > 0;
   L3847 : do {
    if ($162) {
     var $i_015_i = 0;
     while (1) {
      var $i_015_i;
      var $163 = $i_015_i << 2;
      var $165 = HEAP32[$edges + ($163 << 2) >> 2];
      var $166 = ($165 | 0) == ($t_0 | 0);
      if ($166) {
       if ((HEAP32[$edges + (($163 | 1) << 2) >> 2] | 0) == ($pt_1 | 0)) {
        break;
       }
      }
      if (($165 | 0) == ($pt_1 | 0)) {
       if ((HEAP32[$edges + (($163 | 1) << 2) >> 2] | 0) == ($t_0 | 0)) {
        break;
       }
      }
      var $178 = $i_015_i + 1 | 0;
      if (($178 | 0) < ($161 | 0)) {
       var $i_015_i = $178;
      } else {
       label = 2748;
       break L3847;
      }
     }
     if (($i_015_i | 0) == -1) {
      label = 2748;
      break;
     }
     var $211 = HEAP32[$nfaces >> 2];
     var $213 = HEAP32[$edges + (($163 | 1) << 2) >> 2];
     do {
      if ($166 & ($213 | 0) == ($pt_1 | 0)) {
       var $216 = $edges + (($163 | 2) << 2) | 0;
       if ((HEAP32[$216 >> 2] | 0) != -1) {
        var $220 = $pt_1;
        break;
       }
       HEAP32[$216 >> 2] = $211;
       break L3847;
      } else {
       var $220 = $213;
      }
     } while (0);
     var $220;
     if (!(($220 | 0) == ($t_0 | 0) & ($165 | 0) == ($pt_1 | 0))) {
      break;
     }
     var $224 = $edges + (($163 | 3) << 2) | 0;
     if ((HEAP32[$224 >> 2] | 0) != -1) {
      break;
     }
     HEAP32[$224 >> 2] = $211;
    } else {
     label = 2748;
    }
   } while (0);
   L3864 : do {
    if (label == 2748) {
     var $181 = HEAP32[$nfaces >> 2];
     if (($161 | 0) >= ($maxEdges | 0)) {
      __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7640, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $161, HEAP32[tempVarArgs + 8 >> 2] = $maxEdges, tempVarArgs));
      STACKTOP = tempVarArgs;
      break;
     }
     L3869 : do {
      if ($162) {
       var $i_015_i_i = 0;
       while (1) {
        var $i_015_i_i;
        var $185 = $i_015_i_i << 2;
        var $187 = HEAP32[$edges + ($185 << 2) >> 2];
        if (($187 | 0) == ($t_0 | 0)) {
         if ((HEAP32[$edges + (($185 | 1) << 2) >> 2] | 0) == ($pt_1 | 0)) {
          break;
         }
        }
        if (($187 | 0) == ($pt_1 | 0)) {
         if ((HEAP32[$edges + (($185 | 1) << 2) >> 2] | 0) == ($t_0 | 0)) {
          break;
         }
        }
        var $200 = $i_015_i_i + 1 | 0;
        if (($200 | 0) < ($161 | 0)) {
         var $i_015_i_i = $200;
        } else {
         break L3869;
        }
       }
       if (($i_015_i_i | 0) != -1) {
        break L3864;
       }
      }
     } while (0);
     var $203 = $161 << 2;
     HEAP32[$edges + ($203 << 2) >> 2] = $t_0;
     HEAP32[$edges + (($203 | 1) << 2) >> 2] = $pt_1;
     HEAP32[$edges + (($203 | 2) << 2) >> 2] = $181;
     HEAP32[$edges + (($203 | 3) << 2) >> 2] = -1;
     HEAP32[$nedges >> 2] = HEAP32[$nedges >> 2] + 1;
    }
   } while (0);
   HEAP32[$nfaces >> 2] = HEAP32[$nfaces >> 2] + 1;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $230 = HEAP32[$2 >> 2];
 var $233 = HEAP32[$edges + (($1 | 1) << 2) >> 2];
 do {
  if (($230 | 0) == ($s_0 | 0) & ($233 | 0) == ($t_0 | 0)) {
   if ((HEAP32[$3 >> 2] | 0) != -1) {
    var $239 = $t_0;
    break;
   }
   HEAP32[$3 >> 2] = -2;
   STACKTOP = sp;
   return;
  } else {
   var $239 = $233;
  }
 } while (0);
 var $239;
 if (!(($239 | 0) == ($s_0 | 0) & ($230 | 0) == ($t_0 | 0))) {
  STACKTOP = sp;
  return;
 }
 var $243 = $edges + (($1 | 3) << 2) | 0;
 if ((HEAP32[$243 >> 2] | 0) != -1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$243 >> 2] = -2;
 STACKTOP = sp;
 return;
}
function __ZL12circumCirclePKfS0_S0_PfRf($p1, $p2, $p3, $c, $r) {
 var $1 = HEAPF32[$p2 >> 2];
 var $2 = HEAPF32[$p1 >> 2];
 var $5 = HEAPF32[$p2 + 8 >> 2];
 var $6 = $p1 + 8 | 0;
 var $7 = HEAPF32[$6 >> 2];
 var $9 = HEAPF32[$p3 >> 2];
 var $12 = HEAPF32[$p3 + 8 >> 2];
 var $13 = $12 - $7;
 var $16 = ($1 - $2) * $13 - ($5 - $7) * ($9 - $2);
 if (Math.abs($16) > 9.999999974752427e-7) {
  var $22 = $2 * $2 + $7 * $7;
  var $25 = $1 * $1 + $5 * $5;
  var $28 = $9 * $9 + $12 * $12;
  var $36 = $16 * 2;
  var $37 = ($22 * ($5 - $12) + $25 * $13 + ($7 - $5) * $28) / $36;
  HEAPF32[$c >> 2] = $37;
  var $38 = HEAPF32[$p3 >> 2];
  var $39 = HEAPF32[$p2 >> 2];
  var $42 = HEAPF32[$p1 >> 2];
  var $49 = ($28 * ($39 - $42) + ($22 * ($38 - $39) + $25 * ($42 - $38))) / $36;
  HEAPF32[$c + 8 >> 2] = $49;
  var $52 = HEAPF32[$p1 >> 2] - $37;
  var $54 = HEAPF32[$6 >> 2] - $49;
  var $storemerge = Math.sqrt($52 * $52 + $54 * $54);
  var $storemerge;
  HEAPF32[$r >> 2] = $storemerge;
  return;
 } else {
  HEAPF32[$c >> 2] = $2;
  HEAPF32[$c + 8 >> 2] = HEAPF32[$6 >> 2];
  var $storemerge = 0;
  var $storemerge;
  HEAPF32[$r >> 2] = $storemerge;
  return;
 }
}
function __ZL8clipPolyPKfiPffff($in, $n, $out, $pnx, $pnz, $pd) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $d = sp;
 if (($n | 0) > 0) {
  var $i_062 = 0;
 } else {
  var $m_0_lcssa = 0;
  var $m_0_lcssa;
  STACKTOP = sp;
  return $m_0_lcssa;
 }
 while (1) {
  var $i_062;
  var $2 = $i_062 * 3 & -1;
  HEAPF32[$d + ($i_062 << 2) >> 2] = HEAPF32[$in + ($2 << 2) >> 2] * $pnx + HEAPF32[$in + ($2 + 2 << 2) >> 2] * $pnz + $pd;
  var $13 = $i_062 + 1 | 0;
  if (($13 | 0) < ($n | 0)) {
   var $i_062 = $13;
  } else {
   break;
  }
 }
 var $15 = $n - 1 | 0;
 var $j_059 = $15;
 var $i1_060 = 0;
 var $m_061 = 0;
 var $17 = HEAPF32[$d + ($15 << 2) >> 2];
 while (1) {
  var $17;
  var $m_061;
  var $i1_060;
  var $j_059;
  var $20 = HEAPF32[$d + ($i1_060 << 2) >> 2];
  var $21 = $20 >= 0;
  if ($17 >= 0 ^ $21) {
   var $25 = $17 / ($17 - $20);
   var $26 = $j_059 * 3 & -1;
   var $28 = HEAPF32[$in + ($26 << 2) >> 2];
   var $29 = $i1_060 * 3 & -1;
   var $35 = $m_061 * 3 & -1;
   HEAPF32[$out + ($35 << 2) >> 2] = $28 + $25 * (HEAPF32[$in + ($29 << 2) >> 2] - $28);
   var $39 = HEAPF32[$in + ($26 + 1 << 2) >> 2];
   HEAPF32[$out + ($35 + 1 << 2) >> 2] = $39 + $25 * (HEAPF32[$in + ($29 + 1 << 2) >> 2] - $39);
   var $50 = HEAPF32[$in + ($26 + 2 << 2) >> 2];
   HEAPF32[$out + ($35 + 2 << 2) >> 2] = $50 + $25 * (HEAPF32[$in + ($29 + 2 << 2) >> 2] - $50);
   var $m_1 = $m_061 + 1 | 0;
  } else {
   var $m_1 = $m_061;
  }
  var $m_1;
  if ($21) {
   var $62 = $i1_060 * 3 & -1;
   var $65 = $m_1 * 3 & -1;
   HEAPF32[$out + ($65 << 2) >> 2] = HEAPF32[$in + ($62 << 2) >> 2];
   HEAPF32[$out + ($65 + 1 << 2) >> 2] = HEAPF32[$in + ($62 + 1 << 2) >> 2];
   HEAPF32[$out + ($65 + 2 << 2) >> 2] = HEAPF32[$in + ($62 + 2 << 2) >> 2];
   var $m_2 = $m_1 + 1 | 0;
  } else {
   var $m_2 = $m_1;
  }
  var $m_2;
  var $79 = $i1_060 + 1 | 0;
  if (($79 | 0) < ($n | 0)) {
   var $j_059 = $i1_060;
   var $i1_060 = $79;
   var $m_061 = $m_2;
   var $17 = $20;
  } else {
   var $m_0_lcssa = $m_2;
   break;
  }
 }
 var $m_0_lcssa;
 STACKTOP = sp;
 return $m_0_lcssa;
}
function __Z20rcRasterizeTrianglesP9rcContextPKfiPKiPKhiR13rcHeightfieldi($ctx, $verts, $tris, $areas, $nt, $solid, $flagMergeThr) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 264 | 0;
 var $in_i = sp;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 2);
 }
 var $10 = $solid + 32 | 0;
 var $11 = HEAPF32[$10 >> 2];
 var $12 = 1 / $11;
 var $15 = 1 / HEAPF32[$solid + 36 >> 2];
 L3920 : do {
  if (($nt | 0) > 0) {
   var $17 = $solid + 8 | 0;
   var $18 = $solid + 20 | 0;
   var $22 = $solid | 0;
   var $23 = $solid + 4 | 0;
   var $24 = $solid + 24 | 0;
   var $25 = $solid + 12 | 0;
   var $26 = $solid + 16 | 0;
   var $27 = $solid + 28 | 0;
   var $28 = $in_i | 0;
   var $29 = $in_i + 4 | 0;
   var $30 = $in_i + 8 | 0;
   var $31 = $in_i + 12 | 0;
   var $32 = $in_i + 16 | 0;
   var $33 = $in_i + 20 | 0;
   var $34 = $in_i + 24 | 0;
   var $35 = $in_i + 28 | 0;
   var $36 = $in_i + 32 | 0;
   var $37 = sp + 88 | 0;
   var $38 = sp + 176 | 0;
   var $39 = $solid + 48 | 0;
   var $40 = $solid + 44 | 0;
   var $41 = $solid + 40 | 0;
   var $i_022 = 0;
   var $43 = $11;
   while (1) {
    var $43;
    var $i_022;
    var $44 = $i_022 * 3 & -1;
    var $47 = HEAP32[$tris + ($44 << 2) >> 2] * 3 & -1;
    var $48 = $verts + ($47 << 2) | 0;
    var $52 = HEAP32[$tris + ($44 + 1 << 2) >> 2] * 3 & -1;
    var $53 = $verts + ($52 << 2) | 0;
    var $57 = HEAP32[$tris + ($44 + 2 << 2) >> 2] * 3 & -1;
    var $58 = $verts + ($57 << 2) | 0;
    var $60 = HEAP8[$areas + $i_022 | 0];
    var $61 = HEAP32[$22 >> 2];
    var $62 = HEAP32[$23 >> 2];
    var $63 = HEAPF32[$24 >> 2];
    var $64 = HEAPF32[$25 >> 2];
    var $65 = $63 - $64;
    var $66 = HEAPF32[$48 >> 2];
    var $67 = $verts + ($47 + 1 << 2) | 0;
    var $68 = HEAPF32[$67 >> 2];
    var $69 = $verts + ($47 + 2 << 2) | 0;
    var $70 = HEAPF32[$69 >> 2];
    var $71 = HEAPF32[$53 >> 2];
    var $73 = $66 < $71 ? $66 : $71;
    var $74 = $verts + ($52 + 1 << 2) | 0;
    var $75 = HEAPF32[$74 >> 2];
    var $77 = $68 < $75 ? $68 : $75;
    var $78 = $verts + ($52 + 2 << 2) | 0;
    var $79 = HEAPF32[$78 >> 2];
    var $81 = $70 < $79 ? $70 : $79;
    var $82 = HEAPF32[$58 >> 2];
    var $84 = $73 < $82 ? $73 : $82;
    var $85 = $verts + ($57 + 1 << 2) | 0;
    var $86 = HEAPF32[$85 >> 2];
    var $88 = $77 < $86 ? $77 : $86;
    var $89 = $verts + ($57 + 2 << 2) | 0;
    var $90 = HEAPF32[$89 >> 2];
    var $92 = $81 < $90 ? $81 : $90;
    var $94 = $66 > $71 ? $66 : $71;
    var $96 = $68 > $75 ? $68 : $75;
    var $98 = $70 > $79 ? $70 : $79;
    var $100 = $94 > $82 ? $94 : $82;
    var $102 = $96 > $86 ? $96 : $86;
    var $104 = $98 > $90 ? $98 : $90;
    var $105 = HEAPF32[$17 >> 2];
    do {
     if ($105 > $100) {
      var $111 = 0;
     } else {
      if (HEAPF32[$18 >> 2] < $84) {
       var $111 = 0;
       break;
      }
      var $111 = 1;
     }
    } while (0);
    var $111;
    var $112 = HEAPF32[$26 >> 2];
    L3928 : do {
     if ($112 <= $104) {
      if (HEAPF32[$27 >> 2] < $92 | $111 & ($63 >= $88 & $64 <= $102) ^ 1) {
       break;
      }
      var $120 = ($84 - $105) * $12 & -1;
      var $123 = ($92 - $112) * $12 & -1;
      var $126 = ($100 - $105) * $12 & -1;
      var $129 = ($104 - $112) * $12 & -1;
      var $130 = $61 - 1 | 0;
      if (($120 | 0) < 0) {
       var $135 = 0;
      } else {
       var $135 = ($120 | 0) > ($130 | 0) ? $130 : $120;
      }
      var $135;
      var $136 = $62 - 1 | 0;
      if (($123 | 0) < 0) {
       var $141 = 0;
      } else {
       var $141 = ($123 | 0) > ($136 | 0) ? $136 : $123;
      }
      var $141;
      if (($126 | 0) < 0) {
       var $146 = 0;
      } else {
       var $146 = ($126 | 0) > ($130 | 0) ? $130 : $126;
      }
      var $146;
      if (($129 | 0) < 0) {
       var $151 = 0;
      } else {
       var $151 = ($129 | 0) > ($136 | 0) ? $136 : $129;
      }
      var $151;
      if (($141 | 0) > ($151 | 0)) {
       break;
      }
      var $153 = ($135 | 0) > ($146 | 0);
      var $155 = ($60 & 255) << 26;
      var $y_0101_i = $141;
      var $166 = $66;
      var $165 = $68;
      var $164 = $70;
      var $163 = $71;
      var $162 = $75;
      var $161 = $79;
      var $160 = $82;
      var $159 = $86;
      var $158 = $90;
      var $157 = $112;
      while (1) {
       var $157;
       var $158;
       var $159;
       var $160;
       var $161;
       var $162;
       var $163;
       var $164;
       var $165;
       var $166;
       var $y_0101_i;
       HEAPF32[$28 >> 2] = $166;
       HEAPF32[$29 >> 2] = $165;
       HEAPF32[$30 >> 2] = $164;
       HEAPF32[$31 >> 2] = $163;
       HEAPF32[$32 >> 2] = $162;
       HEAPF32[$33 >> 2] = $161;
       HEAPF32[$34 >> 2] = $160;
       HEAPF32[$35 >> 2] = $159;
       HEAPF32[$36 >> 2] = $158;
       var $169 = ($y_0101_i | 0) * $43 + $157;
       var $171 = __ZL8clipPolyPKfiPffff($28, 3, $37, 0, 1, -$169);
       do {
        if (($171 | 0) >= 3) {
         var $175 = __ZL8clipPolyPKfiPffff($37, $171, $38, 0, -1, $169 + $43);
         if (($175 | 0) < 3 | $153) {
          break;
         } else {
          var $x_098_i = $135;
         }
         while (1) {
          var $x_098_i;
          var $180 = ($x_098_i | 0) * $43 + HEAPF32[$17 >> 2];
          var $182 = __ZL8clipPolyPKfiPffff($38, $175, $37, 1, 0, -$180);
          L3950 : do {
           if (($182 | 0) >= 3) {
            var $186 = __ZL8clipPolyPKfiPffff($37, $182, $28, -1, 0, $180 + $43);
            if (($186 | 0) < 3) {
             break;
            }
            var $188 = HEAPF32[$29 >> 2];
            var $smin_094_i = $188;
            var $smax_095_i = $188;
            var $i_096_i = 1;
            while (1) {
             var $i_096_i;
             var $smax_095_i;
             var $smin_094_i;
             var $193 = HEAPF32[$in_i + (($i_096_i * 3 & -1) + 1 << 2) >> 2];
             var $195 = $smin_094_i < $193 ? $smin_094_i : $193;
             var $197 = $smax_095_i > $193 ? $smax_095_i : $193;
             var $198 = $i_096_i + 1 | 0;
             if (($198 | 0) < ($186 | 0)) {
              var $smin_094_i = $195;
              var $smax_095_i = $197;
              var $i_096_i = $198;
             } else {
              break;
             }
            }
            var $200 = HEAPF32[$25 >> 2];
            var $201 = $195 - $200;
            var $202 = $197 - $200;
            if ($202 < 0 | $201 > $65) {
             break;
            }
            var $210 = Math.floor(($201 < 0 ? 0 : $201) * $15) & -1;
            if (($210 | 0) < 0) {
             var $214 = 0;
            } else {
             var $214 = ($210 | 0) > 8191 ? 8191 : $210 & 65535;
            }
            var $214;
            var $217 = Math.ceil(($202 > $65 ? $65 : $202) * $15) & -1;
            var $218 = $214 + 1 | 0;
            if (($217 | 0) < ($218 | 0)) {
             var $_off0_i = $218 & 65535;
            } else {
             var $_off0_i = ($217 | 0) > 8191 ? 8191 : $217 & 65535;
            }
            var $_off0_i;
            var $225 = Math.imul(HEAP32[$22 >> 2], $y_0101_i) + $x_098_i | 0;
            var $226 = HEAP32[$39 >> 2];
            if (($226 | 0) == 0) {
             label = 2827;
            } else {
             var $230 = HEAP32[$226 + 4 >> 2];
             if (($230 | 0) == 0) {
              label = 2827;
             } else {
              var $252 = $226;
              var $251 = $230;
              label = 2831;
             }
            }
            do {
             if (label == 2827) {
              label = 0;
              var $233 = _malloc(16388);
              if (($233 | 0) == 0) {
               var $_0_i_i_i = 0;
               break;
              }
              var $237 = $233;
              HEAP32[$237 >> 2] = 0;
              HEAP32[$237 >> 2] = HEAP32[$40 >> 2];
              HEAP32[$40 >> 2] = $233;
              var $241 = $233 + 4 | 0;
              var $it_0_i_i_i = $233 + 16388 | 0;
              var $freelist_0_i_i_i = HEAP32[$39 >> 2];
              while (1) {
               var $freelist_0_i_i_i;
               var $it_0_i_i_i;
               var $245 = $it_0_i_i_i - 8 | 0;
               HEAP32[$it_0_i_i_i - 8 + 4 >> 2] = $freelist_0_i_i_i;
               if (($245 | 0) == ($241 | 0)) {
                break;
               } else {
                var $it_0_i_i_i = $245;
                var $freelist_0_i_i_i = $245;
               }
              }
              HEAP32[$39 >> 2] = $241;
              var $252 = $241;
              var $251 = HEAP32[$233 + 8 >> 2];
              label = 2831;
             }
            } while (0);
            if (label == 2831) {
             label = 0;
             var $251;
             var $252;
             HEAP32[$39 >> 2] = $251;
             var $_0_i_i_i = $252;
            }
            var $_0_i_i_i;
            var $253 = $_0_i_i_i;
            HEAP32[$253 >> 2] = ($_off0_i & 65535) << 13 & 67100672 | $214 & 8191 | $155;
            var $259 = $_0_i_i_i + 4 | 0;
            HEAP32[$259 >> 2] = 0;
            var $261 = HEAP32[$41 >> 2] + ($225 << 2) | 0;
            var $262 = HEAP32[$261 >> 2];
            if (($262 | 0) == 0) {
             HEAP32[$261 >> 2] = $_0_i_i_i;
             break;
            } else {
             var $cur_0_ph64_i_i = $262;
             var $prev_0_ph65_i_i = 0;
            }
            L3976 : while (1) {
             var $prev_0_ph65_i_i;
             var $cur_0_ph64_i_i;
             var $281 = $prev_0_ph65_i_i + 4 | 0;
             L3978 : do {
              if (($prev_0_ph65_i_i | 0) == 0) {
               var $282 = $cur_0_ph64_i_i;
               var $283 = HEAP32[$282 >> 2];
               var $284 = $283 & 8191;
               var $285 = HEAP32[$253 >> 2];
               if ($284 >>> 0 > ($285 >>> 13 & 8191) >>> 0) {
                break L3976;
               }
               var $292 = $285 & 8191;
               if (($283 >>> 13 & 8191) >>> 0 < $292 >>> 0) {
                var $cur_0_lcssa53_i_i = $cur_0_ph64_i_i;
                label = 2836;
                break;
               }
               if ($284 >>> 0 < $292 >>> 0) {
                var $298 = $285 & -8192 | $284;
                HEAP32[$253 >> 2] = $298;
                var $301 = HEAP32[$282 >> 2];
                var $300 = $298;
               } else {
                var $301 = $283;
                var $300 = $285;
               }
               var $300;
               var $301;
               var $303 = $301 >>> 13 & 8191;
               if ($303 >>> 0 > ($300 >>> 13 & 8191) >>> 0) {
                var $310 = $303 << 13 | $300 & -67100673;
                HEAP32[$253 >> 2] = $310;
                var $313 = $310;
                var $312 = HEAP32[$282 >> 2];
               } else {
                var $313 = $300;
                var $312 = $301;
               }
               var $312;
               var $313;
               var $318 = ($313 >>> 13 & 8191) - ($312 >>> 13 & 8191) | 0;
               if (((($318 | 0) < 0 ? -$318 | 0 : $318) | 0) <= ($flagMergeThr | 0)) {
                var $324 = $313 >>> 26;
                var $325 = $312 >>> 26;
                HEAP32[$253 >> 2] = ($324 >>> 0 > $325 >>> 0 ? $324 : $325) << 26 | $313 & 67108863;
               }
               var $374 = $cur_0_ph64_i_i + 4 | 0;
               var $375 = HEAP32[$374 >> 2];
               HEAP32[$374 >> 2] = HEAP32[$39 >> 2];
               HEAP32[$39 >> 2] = $cur_0_ph64_i_i;
               HEAP32[HEAP32[$41 >> 2] + ($225 << 2) >> 2] = $375;
               var $prev_0_ph_be_i_i = 0;
               var $cur_0_ph_be_i_i = $375;
              } else {
               var $cur_055_i_i = $cur_0_ph64_i_i;
               while (1) {
                var $cur_055_i_i;
                var $265 = $cur_055_i_i;
                var $266 = HEAP32[$265 >> 2];
                var $267 = $266 & 8191;
                var $268 = HEAP32[$253 >> 2];
                if ($267 >>> 0 > ($268 >>> 13 & 8191) >>> 0) {
                 var $prev_0_ph61_i_i = $prev_0_ph65_i_i;
                 label = 2855;
                 break L3976;
                }
                var $275 = $268 & 8191;
                if (($266 >>> 13 & 8191) >>> 0 < $275 >>> 0) {
                 var $cur_0_lcssa53_i_i = $cur_055_i_i;
                 label = 2836;
                 break L3978;
                }
                if ($267 >>> 0 < $275 >>> 0) {
                 var $335 = $268 & -8192 | $267;
                 HEAP32[$253 >> 2] = $335;
                 var $338 = HEAP32[$265 >> 2];
                 var $337 = $335;
                } else {
                 var $338 = $266;
                 var $337 = $268;
                }
                var $337;
                var $338;
                var $340 = $338 >>> 13 & 8191;
                if ($340 >>> 0 > ($337 >>> 13 & 8191) >>> 0) {
                 var $347 = $340 << 13 | $337 & -67100673;
                 HEAP32[$253 >> 2] = $347;
                 var $350 = $347;
                 var $349 = HEAP32[$265 >> 2];
                } else {
                 var $350 = $337;
                 var $349 = $338;
                }
                var $349;
                var $350;
                var $355 = ($350 >>> 13 & 8191) - ($349 >>> 13 & 8191) | 0;
                if (((($355 | 0) < 0 ? -$355 | 0 : $355) | 0) <= ($flagMergeThr | 0)) {
                 var $361 = $350 >>> 26;
                 var $362 = $349 >>> 26;
                 HEAP32[$253 >> 2] = ($361 >>> 0 > $362 >>> 0 ? $361 : $362) << 26 | $350 & 67108863;
                }
                var $369 = $cur_055_i_i + 4 | 0;
                var $370 = HEAP32[$369 >> 2];
                HEAP32[$369 >> 2] = HEAP32[$39 >> 2];
                HEAP32[$39 >> 2] = $cur_055_i_i;
                HEAP32[$281 >> 2] = $370;
                if (($370 | 0) == 0) {
                 var $prev_0_ph61_i_i = $prev_0_ph65_i_i;
                 label = 2855;
                 break L3976;
                } else {
                 var $cur_055_i_i = $370;
                }
               }
              }
             } while (0);
             if (label == 2836) {
              label = 0;
              var $cur_0_lcssa53_i_i;
              var $prev_0_ph_be_i_i = $cur_0_lcssa53_i_i;
              var $cur_0_ph_be_i_i = HEAP32[$cur_0_lcssa53_i_i + 4 >> 2];
             }
             var $cur_0_ph_be_i_i;
             var $prev_0_ph_be_i_i;
             if (($cur_0_ph_be_i_i | 0) == 0) {
              var $prev_0_ph61_i_i = $prev_0_ph_be_i_i;
              label = 2855;
              break;
             } else {
              var $cur_0_ph64_i_i = $cur_0_ph_be_i_i;
              var $prev_0_ph65_i_i = $prev_0_ph_be_i_i;
             }
            }
            do {
             if (label == 2855) {
              label = 0;
              var $prev_0_ph61_i_i;
              if (($prev_0_ph61_i_i | 0) == 0) {
               break;
              }
              var $381 = $prev_0_ph61_i_i + 4 | 0;
              HEAP32[$259 >> 2] = HEAP32[$381 >> 2];
              HEAP32[$381 >> 2] = $_0_i_i_i;
              break L3950;
             }
            } while (0);
            HEAP32[$259 >> 2] = HEAP32[HEAP32[$41 >> 2] + ($225 << 2) >> 2];
            HEAP32[HEAP32[$41 >> 2] + ($225 << 2) >> 2] = $_0_i_i_i;
           }
          } while (0);
          var $388 = $x_098_i + 1 | 0;
          if (($388 | 0) > ($146 | 0)) {
           break;
          } else {
           var $x_098_i = $388;
          }
         }
        }
       } while (0);
       var $390 = $y_0101_i + 1 | 0;
       if (($390 | 0) > ($151 | 0)) {
        break L3928;
       }
       var $y_0101_i = $390;
       var $166 = HEAPF32[$48 >> 2];
       var $165 = HEAPF32[$67 >> 2];
       var $164 = HEAPF32[$69 >> 2];
       var $163 = HEAPF32[$53 >> 2];
       var $162 = HEAPF32[$74 >> 2];
       var $161 = HEAPF32[$78 >> 2];
       var $160 = HEAPF32[$58 >> 2];
       var $159 = HEAPF32[$85 >> 2];
       var $158 = HEAPF32[$89 >> 2];
       var $157 = HEAPF32[$26 >> 2];
      }
     }
    } while (0);
    var $392 = $i_022 + 1 | 0;
    if (($392 | 0) >= ($nt | 0)) {
     break L3920;
    }
    var $i_022 = $392;
    var $43 = HEAPF32[$10 >> 2];
   }
  }
 } while (0);
 if ((HEAP8[$1] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 2);
 STACKTOP = sp;
 return;
}
function __Z20rcBuildDistanceFieldP9rcContextR20rcCompactHeightfield($ctx, $chf) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 17);
 }
 var $10 = $chf + 68 | 0;
 var $11 = HEAP32[$10 >> 2];
 if (($11 | 0) != 0) {
  _free($11);
  HEAP32[$10 >> 2] = 0;
 }
 var $15 = $chf + 8 | 0;
 var $18 = _malloc(HEAP32[$15 >> 2] << 1);
 var $19 = $18;
 var $21 = HEAP32[$15 >> 2];
 if (($18 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 6048, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $21, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $25 = _malloc($21 << 1);
 var $26 = $25;
 if (($25 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 7480, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$15 >> 2], tempVarArgs));
  STACKTOP = tempVarArgs;
  _free($18);
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 18);
 }
 var $38 = $chf | 0;
 var $39 = HEAP32[$38 >> 2];
 var $40 = $chf + 4 | 0;
 var $41 = HEAP32[$40 >> 2];
 var $42 = HEAP32[$15 >> 2];
 if (($42 | 0) > 0) {
  var $i_0210_i = 0;
  while (1) {
   var $i_0210_i;
   HEAP16[$19 + ($i_0210_i << 1) >> 1] = -1;
   var $104 = $i_0210_i + 1 | 0;
   var $105 = HEAP32[$15 >> 2];
   if (($104 | 0) < ($105 | 0)) {
    var $i_0210_i = $104;
   } else {
    var $44 = $105;
    break;
   }
  }
 } else {
  var $44 = $42;
 }
 var $44;
 if (($41 | 0) > 0) {
  var $46 = ($39 | 0) > 0;
  var $47 = $chf + 60 | 0;
  var $48 = $chf + 64 | 0;
  var $49 = $chf + 72 | 0;
  if ($46) {
   var $y_0208_us_i = 0;
   while (1) {
    var $y_0208_us_i;
    var $96 = Math.imul($y_0208_us_i, $39) | 0;
    var $98 = Math.imul($y_0208_us_i - 1 | 0, $39) | 0;
    var $99 = $96 + 1 | 0;
    var $100 = $y_0208_us_i + 1 | 0;
    var $101 = Math.imul($100, $39) | 0;
    var $102 = $96 - 1 | 0;
    var $x_0203_us_i = 0;
    while (1) {
     var $x_0203_us_i;
     var $56 = HEAP32[HEAP32[$47 >> 2] + ($x_0203_us_i + $96 << 2) >> 2];
     var $57 = $56 & 16777215;
     var $58 = $56 >>> 24;
     var $59 = $57 + $58 | 0;
     if (($58 | 0) != 0) {
      var $61 = $x_0203_us_i + $98 | 0;
      var $62 = $99 + $x_0203_us_i | 0;
      var $63 = $x_0203_us_i + $101 | 0;
      var $64 = $102 + $x_0203_us_i | 0;
      var $i1_0198_us_i = $57;
      while (1) {
       var $i1_0198_us_i;
       var $68 = HEAP32[$49 >> 2];
       var $70 = HEAP8[$68 + $i1_0198_us_i | 0];
       var $73 = HEAP32[HEAP32[$48 >> 2] + ($i1_0198_us_i << 3) + 4 >> 2];
       var $74 = $73 & 63;
       if (($74 | 0) == 63) {
        var $nc_1_us_i = 0;
       } else {
        var $nc_1_us_i = $70 << 24 >> 24 == (HEAP8[$68 + ((HEAP32[HEAP32[$47 >> 2] + ($64 << 2) >> 2] & 16777215) + $74) | 0] | 0) | 0;
       }
       var $nc_1_us_i;
       var $94 = $73 >>> 6 & 63;
       if (($94 | 0) == 63) {
        var $nc_1_us_1_i = $nc_1_us_i;
       } else {
        var $nc_1_us_1_i = ($70 << 24 >> 24 == (HEAP8[$68 + ((HEAP32[HEAP32[$47 >> 2] + ($63 << 2) >> 2] & 16777215) + $94) | 0] | 0)) + $nc_1_us_i | 0;
       }
       var $nc_1_us_1_i;
       var $357 = $73 >>> 12 & 63;
       if (($357 | 0) == 63) {
        var $nc_1_us_2_i = $nc_1_us_1_i;
       } else {
        var $nc_1_us_2_i = ($70 << 24 >> 24 == (HEAP8[$68 + ((HEAP32[HEAP32[$47 >> 2] + ($62 << 2) >> 2] & 16777215) + $357) | 0] | 0)) + $nc_1_us_1_i | 0;
       }
       var $nc_1_us_2_i;
       var $372 = $73 >>> 18 & 63;
       if (($372 | 0) == 63) {
        var $nc_1_us_3_i = $nc_1_us_2_i;
       } else {
        var $nc_1_us_3_i = ($70 << 24 >> 24 == (HEAP8[$68 + ((HEAP32[HEAP32[$47 >> 2] + ($61 << 2) >> 2] & 16777215) + $372) | 0] | 0)) + $nc_1_us_2_i | 0;
       }
       var $nc_1_us_3_i;
       if (($nc_1_us_3_i | 0) != 4) {
        HEAP16[$19 + ($i1_0198_us_i << 1) >> 1] = 0;
       }
       var $79 = $i1_0198_us_i + 1 | 0;
       if (($79 | 0) < ($59 | 0)) {
        var $i1_0198_us_i = $79;
       } else {
        break;
       }
      }
     }
     var $65 = $x_0203_us_i + 1 | 0;
     if (($65 | 0) < ($39 | 0)) {
      var $x_0203_us_i = $65;
     } else {
      break;
     }
    }
    if (($100 | 0) < ($41 | 0)) {
     var $y_0208_us_i = $100;
    } else {
     var $y2_0195_i = 0;
     break;
    }
   }
  } else {
   var $y2_0195_i = 0;
  }
  while (1) {
   var $y2_0195_i;
   if ($46) {
    var $107 = Math.imul($y2_0195_i, $39) | 0;
    var $109 = Math.imul($y2_0195_i - 1 | 0, $39) | 0;
    var $110 = $109 + 1 | 0;
    var $x3_0191_i = 0;
    while (1) {
     var $x3_0191_i;
     var $115 = HEAP32[HEAP32[$47 >> 2] + ($x3_0191_i + $107 << 2) >> 2];
     var $116 = $115 & 16777215;
     var $117 = $115 >>> 24;
     var $118 = $116 + $117 | 0;
     if (($117 | 0) != 0) {
      var $120 = $x3_0191_i + $109 | 0;
      var $121 = $110 + $x3_0191_i | 0;
      var $122 = $x3_0191_i - 1 | 0;
      var $123 = $122 + $107 | 0;
      var $124 = $122 + $109 | 0;
      var $i5_0186_i = $116;
      while (1) {
       var $i5_0186_i;
       var $125 = HEAP32[$48 >> 2];
       var $127 = $125 + ($i5_0186_i << 3) + 4 | 0;
       var $129 = HEAP32[$127 >> 2] & 63;
       do {
        if (($129 | 0) != 63) {
         var $137 = (HEAP32[HEAP32[$47 >> 2] + ($123 << 2) >> 2] & 16777215) + $129 | 0;
         var $141 = HEAPU16[$19 + ($137 << 1) >> 1] + 2 | 0;
         var $142 = $19 + ($i5_0186_i << 1) | 0;
         var $143 = HEAP16[$142 >> 1];
         if ($141 >>> 0 < ($143 & 65535) >>> 0) {
          var $147 = $141 & 65535;
          HEAP16[$142 >> 1] = $147;
          var $149 = $147;
         } else {
          var $149 = $143;
         }
         var $149;
         var $154 = HEAP32[$125 + ($137 << 3) + 4 >> 2] >>> 18 & 63;
         if (($154 | 0) == 63) {
          break;
         }
         var $166 = HEAPU16[$19 + ((HEAP32[HEAP32[$47 >> 2] + ($124 << 2) >> 2] & 16777215) + $154 << 1) >> 1] + 3 | 0;
         if ($166 >>> 0 >= ($149 & 65535) >>> 0) {
          break;
         }
         HEAP16[$142 >> 1] = $166 & 65535;
        }
       } while (0);
       var $173 = HEAP32[$127 >> 2] >>> 18 & 63;
       do {
        if (($173 | 0) != 63) {
         var $181 = (HEAP32[HEAP32[$47 >> 2] + ($120 << 2) >> 2] & 16777215) + $173 | 0;
         var $182 = HEAP32[$48 >> 2];
         var $186 = HEAPU16[$19 + ($181 << 1) >> 1] + 2 | 0;
         var $187 = $19 + ($i5_0186_i << 1) | 0;
         var $188 = HEAP16[$187 >> 1];
         if ($186 >>> 0 < ($188 & 65535) >>> 0) {
          var $192 = $186 & 65535;
          HEAP16[$187 >> 1] = $192;
          var $194 = $192;
         } else {
          var $194 = $188;
         }
         var $194;
         var $199 = HEAP32[$182 + ($181 << 3) + 4 >> 2] >>> 12 & 63;
         if (($199 | 0) == 63) {
          break;
         }
         var $211 = HEAPU16[$19 + ((HEAP32[HEAP32[$47 >> 2] + ($121 << 2) >> 2] & 16777215) + $199 << 1) >> 1] + 3 | 0;
         if ($211 >>> 0 >= ($194 & 65535) >>> 0) {
          break;
         }
         HEAP16[$187 >> 1] = $211 & 65535;
        }
       } while (0);
       var $217 = $i5_0186_i + 1 | 0;
       if (($217 | 0) < ($118 | 0)) {
        var $i5_0186_i = $217;
       } else {
        break;
       }
      }
     }
     var $219 = $x3_0191_i + 1 | 0;
     if (($219 | 0) < ($39 | 0)) {
      var $x3_0191_i = $219;
     } else {
      break;
     }
    }
   }
   var $221 = $y2_0195_i + 1 | 0;
   if (($221 | 0) < ($41 | 0)) {
    var $y2_0195_i = $221;
   } else {
    var $y18_0184_in_i = $41;
    break;
   }
  }
  while (1) {
   var $y18_0184_in_i;
   var $y18_0184_i = $y18_0184_in_i - 1 | 0;
   if ($46) {
    var $224 = Math.imul($y18_0184_i, $39) | 0;
    var $225 = Math.imul($y18_0184_in_i, $39) | 0;
    var $226 = $225 - 2 | 0;
    var $x19_0179_in_i = $39;
    while (1) {
     var $x19_0179_in_i;
     var $x19_0179_i = $x19_0179_in_i - 1 | 0;
     var $232 = HEAP32[HEAP32[$47 >> 2] + ($x19_0179_i + $224 << 2) >> 2];
     var $233 = $232 & 16777215;
     var $234 = $232 >>> 24;
     var $235 = $233 + $234 | 0;
     if (($234 | 0) != 0) {
      var $237 = $x19_0179_i + $225 | 0;
      var $238 = $226 + $x19_0179_in_i | 0;
      var $239 = $x19_0179_in_i + $224 | 0;
      var $240 = $x19_0179_in_i + $225 | 0;
      var $i21_0173_i = $233;
      while (1) {
       var $i21_0173_i;
       var $241 = HEAP32[$48 >> 2];
       var $243 = $241 + ($i21_0173_i << 3) + 4 | 0;
       var $246 = HEAP32[$243 >> 2] >>> 12 & 63;
       do {
        if (($246 | 0) != 63) {
         var $254 = (HEAP32[HEAP32[$47 >> 2] + ($239 << 2) >> 2] & 16777215) + $246 | 0;
         var $258 = HEAPU16[$19 + ($254 << 1) >> 1] + 2 | 0;
         var $259 = $19 + ($i21_0173_i << 1) | 0;
         var $260 = HEAP16[$259 >> 1];
         if ($258 >>> 0 < ($260 & 65535) >>> 0) {
          var $264 = $258 & 65535;
          HEAP16[$259 >> 1] = $264;
          var $266 = $264;
         } else {
          var $266 = $260;
         }
         var $266;
         var $271 = HEAP32[$241 + ($254 << 3) + 4 >> 2] >>> 6 & 63;
         if (($271 | 0) == 63) {
          break;
         }
         var $283 = HEAPU16[$19 + ((HEAP32[HEAP32[$47 >> 2] + ($240 << 2) >> 2] & 16777215) + $271 << 1) >> 1] + 3 | 0;
         if ($283 >>> 0 >= ($266 & 65535) >>> 0) {
          break;
         }
         HEAP16[$259 >> 1] = $283 & 65535;
        }
       } while (0);
       var $290 = HEAP32[$243 >> 2] >>> 6 & 63;
       do {
        if (($290 | 0) != 63) {
         var $298 = (HEAP32[HEAP32[$47 >> 2] + ($237 << 2) >> 2] & 16777215) + $290 | 0;
         var $299 = HEAP32[$48 >> 2];
         var $303 = HEAPU16[$19 + ($298 << 1) >> 1] + 2 | 0;
         var $304 = $19 + ($i21_0173_i << 1) | 0;
         var $305 = HEAP16[$304 >> 1];
         if ($303 >>> 0 < ($305 & 65535) >>> 0) {
          var $309 = $303 & 65535;
          HEAP16[$304 >> 1] = $309;
          var $311 = $309;
         } else {
          var $311 = $305;
         }
         var $311;
         var $315 = HEAP32[$299 + ($298 << 3) + 4 >> 2] & 63;
         if (($315 | 0) == 63) {
          break;
         }
         var $327 = HEAPU16[$19 + ((HEAP32[HEAP32[$47 >> 2] + ($238 << 2) >> 2] & 16777215) + $315 << 1) >> 1] + 3 | 0;
         if ($327 >>> 0 >= ($311 & 65535) >>> 0) {
          break;
         }
         HEAP16[$304 >> 1] = $327 & 65535;
        }
       } while (0);
       var $333 = $i21_0173_i + 1 | 0;
       if (($333 | 0) < ($235 | 0)) {
        var $i21_0173_i = $333;
       } else {
        break;
       }
      }
     }
     if (($x19_0179_i | 0) > 0) {
      var $x19_0179_in_i = $x19_0179_i;
     } else {
      break;
     }
    }
   }
   if (($y18_0184_i | 0) > 0) {
    var $y18_0184_in_i = $y18_0184_i;
   } else {
    break;
   }
  }
  var $335 = HEAP32[$15 >> 2];
 } else {
  var $335 = $44;
 }
 var $335;
 if (($335 | 0) > 0) {
  var $i38_0172_i = 0;
  var $337 = 0;
  while (1) {
   var $337;
   var $i38_0172_i;
   var $339 = HEAP16[$19 + ($i38_0172_i << 1) >> 1];
   var $341 = ($339 & 65535) > ($337 & 65535) ? $339 : $337;
   var $342 = $i38_0172_i + 1 | 0;
   if (($342 | 0) < ($335 | 0)) {
    var $i38_0172_i = $342;
    var $337 = $341;
   } else {
    var $387 = $341;
    break;
   }
  }
 } else {
  var $387 = 0;
 }
 var $387;
 HEAP16[$chf + 24 >> 1] = $387;
 var $389 = HEAP8[$1];
 if (($389 & 1) == 0) {
  var $397 = $389;
 } else {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 18);
  var $397 = HEAP8[$1];
 }
 var $397;
 if (($397 & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 19);
 }
 var $405 = HEAP32[$38 >> 2];
 var $406 = HEAP32[$40 >> 2];
 if (($406 | 0) > 0) {
  var $408 = ($405 | 0) > 0;
  var $409 = $chf + 60 | 0;
  var $410 = $chf + 64 | 0;
  var $y_010_i = 0;
  while (1) {
   var $y_010_i;
   if ($408) {
    var $411 = Math.imul($y_010_i, $405) | 0;
    var $x_06_i = 0;
    while (1) {
     var $x_06_i;
     var $416 = HEAP32[HEAP32[$409 >> 2] + ($x_06_i + $411 << 2) >> 2];
     var $417 = $416 & 16777215;
     var $418 = $416 >>> 24;
     var $419 = $417 + $418 | 0;
     if (($418 | 0) != 0) {
      var $i_03_i = $417;
      while (1) {
       var $i_03_i;
       var $422 = HEAP16[$19 + ($i_03_i << 1) >> 1];
       var $423 = $422 & 65535;
       if (($422 & 65535) < 3) {
        HEAP16[$26 + ($i_03_i << 1) >> 1] = $422;
       } else {
        var $425 = HEAP32[$410 >> 2];
        var $429 = HEAP32[$425 + ($i_03_i << 3) + 4 >> 2] & 16777215;
        var $430 = $423 << 1;
        var $dir_01_i = 0;
        var $d_02_i = $423;
        while (1) {
         var $d_02_i;
         var $dir_01_i;
         var $436 = $429 >>> (($dir_01_i * 6 & -1) >>> 0) & 63;
         do {
          if (($436 | 0) == 63) {
           var $d_1_i = $d_02_i + $430 | 0;
           var $_pre_phi_i = $dir_01_i + 1 | 0;
          } else {
           var $441 = HEAP32[9712 + ($dir_01_i << 2) >> 2] + $x_06_i | 0;
           var $444 = HEAP32[9696 + ($dir_01_i << 2) >> 2] + $y_010_i | 0;
           var $446 = Math.imul($444, $405) + $441 | 0;
           var $447 = HEAP32[$409 >> 2];
           var $452 = (HEAP32[$447 + ($446 << 2) >> 2] & 16777215) + $436 | 0;
           var $456 = HEAPU16[$19 + ($452 << 1) >> 1] + $d_02_i | 0;
           var $457 = $dir_01_i + 1 | 0;
           var $458 = $457 & 3;
           var $465 = (HEAP32[$425 + ($452 << 3) + 4 >> 2] & 16777215) >>> (($458 * 6 & -1) >>> 0) & 63;
           if (($465 | 0) == 63) {
            var $d_1_i = $456 + $423 | 0;
            var $_pre_phi_i = $457;
            break;
           } else {
            var $470 = HEAP32[9712 + ($458 << 2) >> 2] + $441 | 0;
            var $d_1_i = HEAPU16[$19 + ((HEAP32[$447 + ($470 + Math.imul(HEAP32[9696 + ($458 << 2) >> 2] + $444 | 0, $405) << 2) >> 2] & 16777215) + $465 << 1) >> 1] + $456 | 0;
            var $_pre_phi_i = $457;
            break;
           }
          }
         } while (0);
         var $_pre_phi_i;
         var $d_1_i;
         if (($_pre_phi_i | 0) < 4) {
          var $dir_01_i = $_pre_phi_i;
          var $d_02_i = $d_1_i;
         } else {
          break;
         }
        }
        HEAP16[$26 + ($i_03_i << 1) >> 1] = ($d_1_i + 5 | 0) / 9 & -1 & 65535;
       }
       var $497 = $i_03_i + 1 | 0;
       if (($497 | 0) < ($419 | 0)) {
        var $i_03_i = $497;
       } else {
        break;
       }
      }
     }
     var $499 = $x_06_i + 1 | 0;
     if (($499 | 0) < ($405 | 0)) {
      var $x_06_i = $499;
     } else {
      break;
     }
    }
   }
   var $501 = $y_010_i + 1 | 0;
   if (($501 | 0) < ($406 | 0)) {
    var $y_010_i = $501;
   } else {
    break;
   }
  }
 }
 var $503 = ($25 | 0) == ($18 | 0);
 var $_33 = $503 ? $26 : $19;
 HEAP32[$10 >> 2] = $503 ? $19 : $26;
 var $504 = HEAP8[$1];
 if (($504 & 1) == 0) {
  var $512 = $504;
 } else {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 19);
  var $512 = HEAP8[$1];
 }
 var $512;
 if (($512 & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 17);
 }
 if (($_33 | 0) == 0) {
  var $_0 = 1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _free($_33);
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZL18filterSmallRegionsP9rcContextiiRtR20rcCompactHeightfieldPt($ctx, $minRegionArea, $mergeRegionSize, $maxRegionId, $chf, $srcReg) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 var $stack_sroa_1;
 var $trace_sroa_1;
 var $1 = $chf | 0;
 var $2 = HEAP32[$1 >> 2];
 var $4 = HEAP32[$chf + 4 >> 2];
 var $7 = HEAPU16[$maxRegionId >> 1] + 1 | 0;
 var $9 = _malloc($7 * 36 & -1);
 var $10 = $9;
 if (($9 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 3448, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $7, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else {
  var $i_0329 = 0;
 }
 while (1) {
  var $i_0329;
  var $18 = $10 + ($i_0329 * 36 & -1) | 0;
  if (($18 | 0) != 0) {
   HEAP32[$18 >> 2] = 0;
   HEAP16[$10 + ($i_0329 * 36 & -1) + 4 >> 1] = $i_0329 & 65535;
   HEAP8[$10 + ($i_0329 * 36 & -1) + 6 | 0] = 0;
   HEAP8[$10 + ($i_0329 * 36 & -1) + 7 | 0] = 0;
   HEAP8[$10 + ($i_0329 * 36 & -1) + 8 | 0] = 0;
   var $28 = $10 + ($i_0329 * 36 & -1) + 12 | 0;
   HEAP32[$28 >> 2] = 0;
   HEAP32[$28 + 4 >> 2] = 0;
   HEAP32[$28 + 8 >> 2] = 0;
   HEAP32[$28 + 12 >> 2] = 0;
   HEAP32[$28 + 16 >> 2] = 0;
   HEAP32[$28 + 20 >> 2] = 0;
  }
  var $30 = $i_0329 + 1 | 0;
  if (($30 | 0) < ($7 | 0)) {
   var $i_0329 = $30;
  } else {
   break;
  }
 }
 if (($4 | 0) > 0) {
  var $14 = ($2 | 0) > 0;
  var $15 = $chf + 60 | 0;
  var $16 = $chf + 72 | 0;
  var $17 = $chf + 64 | 0;
  var $y_0325 = 0;
  while (1) {
   var $y_0325;
   if ($14) {
    var $32 = Math.imul($y_0325, $2) | 0;
    var $x_0320 = 0;
    while (1) {
     var $x_0320;
     var $36 = HEAP32[$15 >> 2] + ($x_0320 + $32 << 2) | 0;
     var $37 = HEAP32[$36 >> 2];
     var $38 = $37 & 16777215;
     var $39 = $37 >>> 24;
     var $40 = $38 + $39 | 0;
     if (($39 | 0) != 0) {
      var $i1_0313 = $38;
      while (1) {
       var $i1_0313;
       var $42 = $srcReg + ($i1_0313 << 1) | 0;
       var $43 = HEAP16[$42 >> 1];
       var $44 = $43 & 65535;
       L21 : do {
        if ($43 << 16 >> 16 != 0 & $44 >>> 0 < $7 >>> 0) {
         var $48 = $10 + ($44 * 36 & -1) | 0;
         HEAP32[$48 >> 2] = HEAP32[$48 >> 2] + 1;
         var $52 = HEAP32[$36 >> 2] & 16777215;
         if (($52 | 0) < ($40 | 0)) {
          var $54 = $10 + ($44 * 36 & -1) + 28 | 0;
          var $55 = $10 + ($44 * 36 & -1) + 24 | 0;
          var $56 = $10 + ($44 * 36 & -1) + 32 | 0;
          var $j_0299 = $52;
          while (1) {
           var $j_0299;
           L27 : do {
            if (($i1_0313 | 0) != ($j_0299 | 0)) {
             var $61 = HEAP16[$srcReg + ($j_0299 << 1) >> 1];
             var $62 = $61 & 65535;
             if (!($61 << 16 >> 16 != 0 & $62 >>> 0 < $7 >>> 0)) {
              break;
             }
             var $66 = HEAP32[$54 >> 2];
             var $i_0_i = 0;
             while (1) {
              var $i_0_i;
              if (($i_0_i | 0) >= ($66 | 0)) {
               break;
              }
              if ((HEAP32[HEAP32[$55 >> 2] + ($i_0_i << 2) >> 2] | 0) == ($62 | 0)) {
               break L27;
              } else {
               var $i_0_i = $i_0_i + 1 | 0;
              }
             }
             var $76 = $66 + 1 | 0;
             var $77 = HEAP32[$56 >> 2];
             if (($77 | 0) < ($76 | 0)) {
              if (($77 | 0) == 0) {
               HEAP32[$56 >> 2] = $76;
               var $_lcssa_i = $76;
              } else {
               var $81 = $77;
               while (1) {
                var $81;
                var $82 = $81 << 1;
                if (($82 | 0) < ($76 | 0)) {
                 var $81 = $82;
                } else {
                 break;
                }
               }
               HEAP32[$56 >> 2] = $82;
               var $_lcssa_i = $82;
              }
              var $_lcssa_i;
              var $86 = _malloc($_lcssa_i << 2);
              var $87 = $86;
              var $88 = HEAP32[$54 >> 2];
              if (!(($88 | 0) == 0 | ($86 | 0) == 0)) {
               var $93 = HEAP32[$55 >> 2];
               var $94 = $88 << 2;
               _memcpy($86, $93, $94) | 0;
              }
              var $95 = HEAP32[$55 >> 2];
              if (($95 | 0) != 0) {
               _free($95);
              }
              HEAP32[$55 >> 2] = $87;
              var $99 = $87;
             } else {
              var $99 = HEAP32[$55 >> 2];
             }
             var $99;
             HEAP32[$54 >> 2] = $76;
             HEAP32[$99 + ($66 << 2) >> 2] = $62;
            }
           } while (0);
           var $101 = $j_0299 + 1 | 0;
           if (($101 | 0) < ($40 | 0)) {
            var $j_0299 = $101;
           } else {
            break;
           }
          }
         }
         var $103 = $10 + ($44 * 36 & -1) + 12 | 0;
         var $104 = $10 + ($44 * 36 & -1) + 16 | 0;
         var $105 = HEAP32[$104 >> 2];
         if (($105 | 0) > 0) {
          break;
         }
         HEAP8[$10 + ($44 * 36 & -1) + 6 | 0] = HEAP8[HEAP32[$16 >> 2] + $i1_0313 | 0];
         var $dir_0 = 0;
         while (1) {
          var $dir_0;
          if (($dir_0 | 0) >= 4) {
           break L21;
          }
          var $122 = (HEAP32[HEAP32[$17 >> 2] + ($i1_0313 << 3) + 4 >> 2] & 16777215) >>> (($dir_0 * 6 & -1) >>> 0) & 63;
          var $123 = ($122 | 0) == 63;
          if ($123) {
           var $r_0_i = 0;
          } else {
           var $125 = $dir_0 & 3;
           var $128 = HEAP32[9712 + ($125 << 2) >> 2] + $x_0320 | 0;
           var $134 = $128 + Math.imul(HEAP32[9696 + ($125 << 2) >> 2] + $y_0325 | 0, HEAP32[$1 >> 2]) | 0;
           var $r_0_i = HEAPU16[$srcReg + ((HEAP32[HEAP32[$15 >> 2] + ($134 << 2) >> 2] & 16777215) + $122 << 1) >> 1];
          }
          var $r_0_i;
          if (($r_0_i | 0) == (HEAPU16[$42 >> 1] | 0)) {
           var $dir_0 = $dir_0 + 1 | 0;
          } else {
           break;
          }
         }
         if (($dir_0 | 0) == -1) {
          break;
         }
         if ($123) {
          var $curReg_0_i = 0;
         } else {
          var $150 = $dir_0 & 3;
          var $153 = HEAP32[9712 + ($150 << 2) >> 2] + $x_0320 | 0;
          var $159 = $153 + Math.imul(HEAP32[9696 + ($150 << 2) >> 2] + $y_0325 | 0, HEAP32[$1 >> 2]) | 0;
          var $curReg_0_i = HEAP16[$srcReg + ((HEAP32[HEAP32[$15 >> 2] + ($159 << 2) >> 2] & 16777215) + $122 << 1) >> 1];
         }
         var $curReg_0_i;
         var $168 = $curReg_0_i & 65535;
         var $169 = $105 + 1 | 0;
         var $170 = $10 + ($44 * 36 & -1) + 20 | 0;
         var $171 = HEAP32[$170 >> 2];
         if (($171 | 0) < ($169 | 0)) {
          if (($171 | 0) == 0) {
           HEAP32[$170 >> 2] = $169;
           var $_lcssa_i11 = $169;
          } else {
           var $175 = $171;
           while (1) {
            var $175;
            var $176 = $175 << 1;
            if (($176 | 0) < ($169 | 0)) {
             var $175 = $176;
            } else {
             break;
            }
           }
           HEAP32[$170 >> 2] = $176;
           var $_lcssa_i11 = $176;
          }
          var $_lcssa_i11;
          var $180 = _malloc($_lcssa_i11 << 2);
          var $182 = HEAP32[$104 >> 2];
          var $_pre_i13 = $103 | 0;
          if (!(($182 | 0) == 0 | ($180 | 0) == 0)) {
           var $187 = HEAP32[$_pre_i13 >> 2];
           var $188 = $182 << 2;
           _memcpy($180, $187, $188) | 0;
          }
          var $189 = HEAP32[$_pre_i13 >> 2];
          if (($189 | 0) != 0) {
           _free($189);
          }
          HEAP32[$_pre_i13 >> 2] = $180;
          var $_pre_phi = $_pre_i13;
         } else {
          var $_pre_phi = $103 | 0;
         }
         var $_pre_phi;
         HEAP32[$104 >> 2] = $169;
         HEAP32[HEAP32[$_pre_phi >> 2] + ($105 << 2) >> 2] = $168;
         var $_0_i = $x_0320;
         var $_068_i = $y_0325;
         var $_070_i = $i1_0313;
         var $_072_i = $dir_0;
         var $curReg_1_i = $curReg_0_i;
         var $iter_0_i = 0;
         while (1) {
          var $iter_0_i;
          var $curReg_1_i;
          var $_072_i;
          var $_070_i;
          var $_068_i;
          var $_0_i;
          var $196 = $iter_0_i + 1 | 0;
          if (($196 | 0) >= 4e4) {
           break;
          }
          var $206 = (HEAP32[HEAP32[$17 >> 2] + ($_070_i << 3) + 4 >> 2] & 16777215) >>> (($_072_i * 6 & -1) >>> 0) & 63;
          var $207 = ($206 | 0) == 63;
          if ($207) {
           var $r_0_i_i = 0;
          } else {
           var $209 = $_072_i & 3;
           var $212 = HEAP32[9712 + ($209 << 2) >> 2] + $_0_i | 0;
           var $218 = $212 + Math.imul(HEAP32[9696 + ($209 << 2) >> 2] + $_068_i | 0, HEAP32[$1 >> 2]) | 0;
           var $r_0_i_i = HEAPU16[$srcReg + ((HEAP32[HEAP32[$15 >> 2] + ($218 << 2) >> 2] & 16777215) + $206 << 1) >> 1];
          }
          var $r_0_i_i;
          if (($r_0_i_i | 0) == (HEAPU16[$srcReg + ($_070_i << 1) >> 1] | 0)) {
           var $283 = $_072_i & 3;
           var $286 = HEAP32[9712 + ($283 << 2) >> 2] + $_0_i | 0;
           var $289 = HEAP32[9696 + ($283 << 2) >> 2] + $_068_i | 0;
           if ($207) {
            break L21;
           }
           var $293 = Math.imul(HEAP32[$1 >> 2], $289) + $286 | 0;
           var $299 = (HEAP32[HEAP32[$15 >> 2] + ($293 << 2) >> 2] & 16777215) + $206 | 0;
           if (($299 | 0) == -1) {
            break L21;
           }
           var $_1_i = $286;
           var $_169_i = $289;
           var $_171_i = $299;
           var $_173_in_i = $_072_i + 3 | 0;
           var $curReg_3_i = $curReg_1_i;
          } else {
           if ($207) {
            var $r_0_i188 = 0;
           } else {
            var $232 = $_072_i & 3;
            var $235 = HEAP32[9712 + ($232 << 2) >> 2] + $_0_i | 0;
            var $241 = $235 + Math.imul(HEAP32[9696 + ($232 << 2) >> 2] + $_068_i | 0, HEAP32[$1 >> 2]) | 0;
            var $r_0_i188 = HEAP16[$srcReg + ((HEAP32[HEAP32[$15 >> 2] + ($241 << 2) >> 2] & 16777215) + $206 << 1) >> 1];
           }
           var $r_0_i188;
           if ($r_0_i188 << 16 >> 16 == $curReg_1_i << 16 >> 16) {
            var $curReg_2_i = $curReg_1_i;
           } else {
            var $253 = $r_0_i188 & 65535;
            var $254 = HEAP32[$104 >> 2];
            var $255 = $254 + 1 | 0;
            var $256 = HEAP32[$170 >> 2];
            if (($256 | 0) < ($255 | 0)) {
             if (($256 | 0) == 0) {
              HEAP32[$170 >> 2] = $255;
              var $_lcssa_i24 = $255;
             } else {
              var $260 = $256;
              while (1) {
               var $260;
               var $261 = $260 << 1;
               if (($261 | 0) < ($255 | 0)) {
                var $260 = $261;
               } else {
                break;
               }
              }
              HEAP32[$170 >> 2] = $261;
              var $_lcssa_i24 = $261;
             }
             var $_lcssa_i24;
             var $265 = _malloc($_lcssa_i24 << 2);
             var $266 = $265;
             var $267 = HEAP32[$104 >> 2];
             if (!(($267 | 0) == 0 | ($265 | 0) == 0)) {
              var $272 = HEAP32[$_pre_phi >> 2];
              var $273 = $267 << 2;
              _memcpy($265, $272, $273) | 0;
             }
             var $274 = HEAP32[$_pre_phi >> 2];
             if (($274 | 0) != 0) {
              _free($274);
             }
             HEAP32[$_pre_phi >> 2] = $266;
             var $278 = $266;
            } else {
             var $278 = HEAP32[$_pre_phi >> 2];
            }
            var $278;
            HEAP32[$104 >> 2] = $255;
            HEAP32[$278 + ($254 << 2) >> 2] = $253;
            var $curReg_2_i = $r_0_i188;
           }
           var $curReg_2_i;
           var $_1_i = $_0_i;
           var $_169_i = $_068_i;
           var $_171_i = $_070_i;
           var $_173_in_i = $_072_i + 1 | 0;
           var $curReg_3_i = $curReg_2_i;
          }
          var $curReg_3_i;
          var $_173_in_i;
          var $_171_i;
          var $_169_i;
          var $_1_i;
          var $_173_i = $_173_in_i & 3;
          if (($_171_i | 0) == ($i1_0313 | 0) & ($_173_i | 0) == ($dir_0 | 0)) {
           break;
          } else {
           var $_0_i = $_1_i;
           var $_068_i = $_169_i;
           var $_070_i = $_171_i;
           var $_072_i = $_173_i;
           var $curReg_1_i = $curReg_3_i;
           var $iter_0_i = $196;
          }
         }
         var $307 = HEAP32[$104 >> 2];
         if (($307 | 0) > 1) {
          var $j_0_ph80_i = 0;
          var $310 = $307;
         } else {
          break;
         }
         while (1) {
          var $310;
          var $j_0_ph80_i;
          var $311 = $j_0_ph80_i + 1 | 0;
          var $312 = $310;
          while (1) {
           var $312;
           var $314 = HEAP32[$_pre_phi >> 2];
           var $315 = $314 + ($j_0_ph80_i << 2) | 0;
           if ((HEAP32[$315 >> 2] | 0) != (HEAP32[$314 + ((($311 | 0) % ($312 | 0) & -1) << 2) >> 2] | 0)) {
            break;
           }
           var $320 = $312 - 1 | 0;
           do {
            if (($j_0_ph80_i | 0) < ($320 | 0)) {
             HEAP32[$315 >> 2] = HEAP32[$314 + ($311 << 2) >> 2];
             var $324 = HEAP32[$104 >> 2];
             var $325 = $324 - 1 | 0;
             if (($311 | 0) < ($325 | 0)) {
              var $327 = $311;
             } else {
              var $_lcssa74_i = $325;
              var $335 = $324;
              break;
             }
             while (1) {
              var $327;
              var $_pre_i = HEAP32[$_pre_phi >> 2];
              var $328 = $327 + 1 | 0;
              HEAP32[$_pre_i + ($327 << 2) >> 2] = HEAP32[$_pre_i + ($328 << 2) >> 2];
              var $332 = HEAP32[$104 >> 2];
              var $333 = $332 - 1 | 0;
              if (($328 | 0) < ($333 | 0)) {
               var $327 = $328;
              } else {
               var $_lcssa74_i = $333;
               var $335 = $332;
               break;
              }
             }
            } else {
             var $_lcssa74_i = $320;
             var $335 = $312;
            }
           } while (0);
           var $335;
           var $_lcssa74_i;
           if (($335 | 0) > 0) {
            HEAP32[$104 >> 2] = $_lcssa74_i;
            var $337 = $_lcssa74_i;
           } else {
            var $337 = $335;
           }
           var $337;
           if (($j_0_ph80_i | 0) < ($337 | 0)) {
            var $312 = $337;
           } else {
            break L21;
           }
          }
          if (($311 | 0) < ($312 | 0)) {
           var $j_0_ph80_i = $311;
           var $310 = $312;
          } else {
           break;
          }
         }
        }
       } while (0);
       var $340 = $i1_0313 + 1 | 0;
       if (($340 | 0) < ($40 | 0)) {
        var $i1_0313 = $340;
       } else {
        break;
       }
      }
     }
     var $342 = $x_0320 + 1 | 0;
     if (($342 | 0) < ($2 | 0)) {
      var $x_0320 = $342;
     } else {
      break;
     }
    }
   }
   var $344 = $y_0325 + 1 | 0;
   if (($344 | 0) < ($4 | 0)) {
    var $y_0325 = $344;
   } else {
    break;
   }
  }
 }
 $stack_sroa_1 = 0;
 var $347 = _malloc(128);
 $stack_sroa_1 = 32;
 $trace_sroa_1 = 0;
 $trace_sroa_1 = 32;
 var $i2_0298 = 0;
 var $trace_sroa_0_0 = _malloc(128);
 var $trace_sroa_2_0 = 32;
 var $stack_sroa_0_0 = $347;
 var $stack_sroa_2_0 = 32;
 var $stack_sroa_1_0_load259 = 32;
 while (1) {
  var $stack_sroa_1_0_load259;
  var $stack_sroa_2_0;
  var $stack_sroa_0_0;
  var $trace_sroa_2_0;
  var $trace_sroa_0_0;
  var $i2_0298;
  do {
   if ((HEAP16[$10 + ($i2_0298 * 36 & -1) + 4 >> 1] | 0) < 1) {
    var $trace_sroa_0_5 = $trace_sroa_0_0;
    var $trace_sroa_2_6 = $trace_sroa_2_0;
    var $stack_sroa_0_9 = $stack_sroa_0_0;
    var $stack_sroa_2_11 = $stack_sroa_2_0;
    var $stack_sroa_1_0_load259291 = $stack_sroa_1_0_load259;
   } else {
    if ((HEAP32[$10 + ($i2_0298 * 36 & -1) >> 2] | 0) == 0) {
     var $trace_sroa_0_5 = $trace_sroa_0_0;
     var $trace_sroa_2_6 = $trace_sroa_2_0;
     var $stack_sroa_0_9 = $stack_sroa_0_0;
     var $stack_sroa_2_11 = $stack_sroa_2_0;
     var $stack_sroa_1_0_load259291 = $stack_sroa_1_0_load259;
     break;
    }
    var $358 = $10 + ($i2_0298 * 36 & -1) + 8 | 0;
    if ((HEAP8[$358] & 1) != 0) {
     var $trace_sroa_0_5 = $trace_sroa_0_0;
     var $trace_sroa_2_6 = $trace_sroa_2_0;
     var $stack_sroa_0_9 = $stack_sroa_0_0;
     var $stack_sroa_2_11 = $stack_sroa_2_0;
     var $stack_sroa_1_0_load259291 = $stack_sroa_1_0_load259;
     break;
    }
    do {
     if (($stack_sroa_2_0 | 0) < 0) {
      var $364 = $stack_sroa_2_0;
      while (1) {
       var $364;
       var $365 = $364 << 1;
       if (($365 | 0) < 0) {
        var $364 = $365;
       } else {
        break;
       }
      }
      var $369 = _malloc($364 << 3);
      var $370 = $369;
      if (!(($stack_sroa_1_0_load259 | 0) == 0 | ($369 | 0) == 0)) {
       var $374 = $stack_sroa_0_0;
       var $375 = $stack_sroa_1_0_load259 << 2;
       _memcpy($369, $374, $375) | 0;
      }
      if (($stack_sroa_0_0 | 0) == 0) {
       var $stack_sroa_0_1 = $370;
       var $stack_sroa_2_1 = $365;
       break;
      }
      _free($stack_sroa_0_0);
      var $stack_sroa_0_1 = $370;
      var $stack_sroa_2_1 = $365;
     } else {
      var $stack_sroa_0_1 = $stack_sroa_0_0;
      var $stack_sroa_2_1 = $stack_sroa_2_0;
     }
    } while (0);
    var $stack_sroa_2_1;
    var $stack_sroa_0_1;
    $stack_sroa_1 = 0;
    do {
     if (($trace_sroa_2_0 | 0) < 0) {
      var $380 = $trace_sroa_2_0;
      while (1) {
       var $380;
       var $381 = $380 << 1;
       if (($381 | 0) < 0) {
        var $380 = $381;
       } else {
        break;
       }
      }
      var $385 = _malloc($380 << 3);
      var $386 = $385;
      var $trace_sroa_1_0_load229 = $trace_sroa_1;
      if (!(($trace_sroa_1_0_load229 | 0) == 0 | ($385 | 0) == 0)) {
       var $390 = $trace_sroa_0_0;
       var $391 = $trace_sroa_1_0_load229 << 2;
       _memcpy($385, $390, $391) | 0;
      }
      if (($trace_sroa_0_0 | 0) == 0) {
       var $trace_sroa_0_1 = $386;
       var $trace_sroa_2_1 = $381;
       break;
      }
      _free($trace_sroa_0_0);
      var $trace_sroa_0_1 = $386;
      var $trace_sroa_2_1 = $381;
     } else {
      var $trace_sroa_0_1 = $trace_sroa_0_0;
      var $trace_sroa_2_1 = $trace_sroa_2_0;
     }
    } while (0);
    var $trace_sroa_2_1;
    var $trace_sroa_0_1;
    $trace_sroa_1 = 0;
    HEAP8[$358] = 1;
    do {
     if (($stack_sroa_2_1 | 0) < 1) {
      if (($stack_sroa_2_1 | 0) == 0) {
       var $stack_sroa_2_2 = 1;
      } else {
       var $398 = $stack_sroa_2_1;
       while (1) {
        var $398;
        var $399 = $398 << 1;
        if (($399 | 0) < 1) {
         var $398 = $399;
        } else {
         var $stack_sroa_2_2 = $399;
         break;
        }
       }
      }
      var $stack_sroa_2_2;
      var $403 = _malloc($stack_sroa_2_2 << 2);
      if (($stack_sroa_0_1 | 0) == 0) {
       var $stack_sroa_0_2 = $403;
       var $stack_sroa_2_3 = $stack_sroa_2_2;
       break;
      }
      _free($stack_sroa_0_1);
      var $stack_sroa_0_2 = $403;
      var $stack_sroa_2_3 = $stack_sroa_2_2;
     } else {
      var $stack_sroa_0_2 = $stack_sroa_0_1;
      var $stack_sroa_2_3 = $stack_sroa_2_1;
     }
    } while (0);
    var $stack_sroa_2_3;
    var $stack_sroa_0_2;
    $stack_sroa_1 = 1;
    HEAP32[$stack_sroa_0_2 >> 2] = $i2_0298;
    var $stack_sroa_1_0_load254 = $stack_sroa_1;
    if (($stack_sroa_1_0_load254 | 0) == 0) {
     var $connectsToBorder_0_off0_lcssa = 0;
     var $spanCount_0_lcssa = 0;
     var $trace_sroa_0_4 = $trace_sroa_0_1;
     var $trace_sroa_2_5 = $trace_sroa_2_1;
     var $stack_sroa_0_8 = $stack_sroa_0_2;
     var $stack_sroa_2_10 = $stack_sroa_2_3;
    } else {
     var $connectsToBorder_0_off0286 = 0;
     var $spanCount_0287 = 0;
     var $409 = $stack_sroa_1_0_load254;
     var $trace_sroa_0_2 = $trace_sroa_0_1;
     var $trace_sroa_2_2 = $trace_sroa_2_1;
     var $stack_sroa_0_4 = $stack_sroa_0_2;
     var $stack_sroa_2_5 = $stack_sroa_2_3;
     while (1) {
      var $stack_sroa_2_5;
      var $stack_sroa_0_4;
      var $trace_sroa_2_2;
      var $trace_sroa_0_2;
      var $409;
      var $spanCount_0287;
      var $connectsToBorder_0_off0286;
      if (($409 | 0) > 0) {
       var $412 = $409 - 1 | 0;
       $stack_sroa_1 = $412;
       var $413 = $412;
      } else {
       var $413 = $409;
      }
      var $413;
      var $415 = HEAP32[$stack_sroa_0_4 + ($413 << 2) >> 2];
      var $418 = HEAP32[$10 + ($415 * 36 & -1) >> 2] + $spanCount_0287 | 0;
      var $trace_sroa_1_0_load = $trace_sroa_1;
      var $419 = $trace_sroa_1_0_load + 1 | 0;
      do {
       if (($trace_sroa_2_2 | 0) < ($419 | 0)) {
        if (($trace_sroa_2_2 | 0) == 0) {
         var $trace_sroa_2_3 = $419;
        } else {
         var $423 = $trace_sroa_2_2;
         while (1) {
          var $423;
          var $424 = $423 << 1;
          if (($424 | 0) < ($419 | 0)) {
           var $423 = $424;
          } else {
           var $trace_sroa_2_3 = $424;
           break;
          }
         }
        }
        var $trace_sroa_2_3;
        var $427 = _malloc($trace_sroa_2_3 << 2);
        var $428 = $427;
        if (!(($trace_sroa_1_0_load | 0) == 0 | ($427 | 0) == 0)) {
         var $432 = $trace_sroa_0_2;
         var $433 = $trace_sroa_1_0_load << 2;
         _memcpy($427, $432, $433) | 0;
        }
        if (($trace_sroa_0_2 | 0) == 0) {
         var $trace_sroa_0_3 = $428;
         var $trace_sroa_2_4 = $trace_sroa_2_3;
         break;
        }
        _free($trace_sroa_0_2);
        var $trace_sroa_0_3 = $428;
        var $trace_sroa_2_4 = $trace_sroa_2_3;
       } else {
        var $trace_sroa_0_3 = $trace_sroa_0_2;
        var $trace_sroa_2_4 = $trace_sroa_2_2;
       }
      } while (0);
      var $trace_sroa_2_4;
      var $trace_sroa_0_3;
      $trace_sroa_1 = $419;
      HEAP32[$trace_sroa_0_3 + ($trace_sroa_1_0_load << 2) >> 2] = $415;
      var $438 = $10 + ($415 * 36 & -1) + 16 | 0;
      var $439 = HEAP32[$438 >> 2];
      if (($439 | 0) > 0) {
       var $441 = $10 + ($415 * 36 & -1) + 12 | 0;
       var $connectsToBorder_1_off0275 = $connectsToBorder_0_off0286;
       var $j4_0276 = 0;
       var $442 = $439;
       var $stack_sroa_0_5 = $stack_sroa_0_4;
       var $stack_sroa_2_6 = $stack_sroa_2_5;
       while (1) {
        var $stack_sroa_2_6;
        var $stack_sroa_0_5;
        var $442;
        var $j4_0276;
        var $connectsToBorder_1_off0275;
        var $445 = HEAP32[HEAP32[$441 >> 2] + ($j4_0276 << 2) >> 2];
        do {
         if (($445 & 32768 | 0) == 0) {
          var $449 = $10 + ($445 * 36 & -1) + 8 | 0;
          if ((HEAP8[$449] & 1) != 0) {
           var $connectsToBorder_2_off0 = $connectsToBorder_1_off0275;
           var $482 = $442;
           var $stack_sroa_0_7 = $stack_sroa_0_5;
           var $stack_sroa_2_9 = $stack_sroa_2_6;
           break;
          }
          var $455 = HEAP16[$10 + ($445 * 36 & -1) + 4 >> 1];
          var $456 = $455 & 65535;
          if ($455 << 16 >> 16 == 0) {
           var $connectsToBorder_2_off0 = $connectsToBorder_1_off0275;
           var $482 = $442;
           var $stack_sroa_0_7 = $stack_sroa_0_5;
           var $stack_sroa_2_9 = $stack_sroa_2_6;
           break;
          }
          if (($456 & 32768 | 0) != 0) {
           var $connectsToBorder_2_off0 = $connectsToBorder_1_off0275;
           var $482 = $442;
           var $stack_sroa_0_7 = $stack_sroa_0_5;
           var $stack_sroa_2_9 = $stack_sroa_2_6;
           break;
          }
          var $stack_sroa_1_0_load256 = $stack_sroa_1;
          var $462 = $stack_sroa_1_0_load256 + 1 | 0;
          do {
           if (($stack_sroa_2_6 | 0) < ($462 | 0)) {
            if (($stack_sroa_2_6 | 0) == 0) {
             var $stack_sroa_2_7 = $462;
            } else {
             var $466 = $stack_sroa_2_6;
             while (1) {
              var $466;
              var $467 = $466 << 1;
              if (($467 | 0) < ($462 | 0)) {
               var $466 = $467;
              } else {
               var $stack_sroa_2_7 = $467;
               break;
              }
             }
            }
            var $stack_sroa_2_7;
            var $470 = _malloc($stack_sroa_2_7 << 2);
            var $471 = $470;
            if (!(($stack_sroa_1_0_load256 | 0) == 0 | ($470 | 0) == 0)) {
             var $475 = $stack_sroa_0_5;
             var $476 = $stack_sroa_1_0_load256 << 2;
             _memcpy($470, $475, $476) | 0;
            }
            if (($stack_sroa_0_5 | 0) == 0) {
             var $stack_sroa_0_6 = $471;
             var $stack_sroa_2_8 = $stack_sroa_2_7;
             break;
            }
            _free($stack_sroa_0_5);
            var $stack_sroa_0_6 = $471;
            var $stack_sroa_2_8 = $stack_sroa_2_7;
           } else {
            var $stack_sroa_0_6 = $stack_sroa_0_5;
            var $stack_sroa_2_8 = $stack_sroa_2_6;
           }
          } while (0);
          var $stack_sroa_2_8;
          var $stack_sroa_0_6;
          $stack_sroa_1 = $462;
          HEAP32[$stack_sroa_0_6 + ($stack_sroa_1_0_load256 << 2) >> 2] = $456;
          HEAP8[$449] = 1;
          var $connectsToBorder_2_off0 = $connectsToBorder_1_off0275;
          var $482 = HEAP32[$438 >> 2];
          var $stack_sroa_0_7 = $stack_sroa_0_6;
          var $stack_sroa_2_9 = $stack_sroa_2_8;
         } else {
          var $connectsToBorder_2_off0 = 1;
          var $482 = $442;
          var $stack_sroa_0_7 = $stack_sroa_0_5;
          var $stack_sroa_2_9 = $stack_sroa_2_6;
         }
        } while (0);
        var $stack_sroa_2_9;
        var $stack_sroa_0_7;
        var $482;
        var $connectsToBorder_2_off0;
        var $483 = $j4_0276 + 1 | 0;
        if (($483 | 0) < ($482 | 0)) {
         var $connectsToBorder_1_off0275 = $connectsToBorder_2_off0;
         var $j4_0276 = $483;
         var $442 = $482;
         var $stack_sroa_0_5 = $stack_sroa_0_7;
         var $stack_sroa_2_6 = $stack_sroa_2_9;
        } else {
         var $connectsToBorder_1_off0_lcssa = $connectsToBorder_2_off0;
         var $stack_sroa_0_3 = $stack_sroa_0_7;
         var $stack_sroa_2_4 = $stack_sroa_2_9;
         break;
        }
       }
      } else {
       var $connectsToBorder_1_off0_lcssa = $connectsToBorder_0_off0286;
       var $stack_sroa_0_3 = $stack_sroa_0_4;
       var $stack_sroa_2_4 = $stack_sroa_2_5;
      }
      var $stack_sroa_2_4;
      var $stack_sroa_0_3;
      var $connectsToBorder_1_off0_lcssa;
      var $stack_sroa_1_0_load255 = $stack_sroa_1;
      if (($stack_sroa_1_0_load255 | 0) == 0) {
       var $connectsToBorder_0_off0_lcssa = $connectsToBorder_1_off0_lcssa;
       var $spanCount_0_lcssa = $418;
       var $trace_sroa_0_4 = $trace_sroa_0_3;
       var $trace_sroa_2_5 = $trace_sroa_2_4;
       var $stack_sroa_0_8 = $stack_sroa_0_3;
       var $stack_sroa_2_10 = $stack_sroa_2_4;
       break;
      } else {
       var $connectsToBorder_0_off0286 = $connectsToBorder_1_off0_lcssa;
       var $spanCount_0287 = $418;
       var $409 = $stack_sroa_1_0_load255;
       var $trace_sroa_0_2 = $trace_sroa_0_3;
       var $trace_sroa_2_2 = $trace_sroa_2_4;
       var $stack_sroa_0_4 = $stack_sroa_0_3;
       var $stack_sroa_2_5 = $stack_sroa_2_4;
      }
     }
    }
    var $stack_sroa_2_10;
    var $stack_sroa_0_8;
    var $trace_sroa_2_5;
    var $trace_sroa_0_4;
    var $spanCount_0_lcssa;
    var $connectsToBorder_0_off0_lcssa;
    if (($spanCount_0_lcssa | 0) >= ($minRegionArea | 0) | $connectsToBorder_0_off0_lcssa) {
     var $trace_sroa_0_5 = $trace_sroa_0_4;
     var $trace_sroa_2_6 = $trace_sroa_2_5;
     var $stack_sroa_0_9 = $stack_sroa_0_8;
     var $stack_sroa_2_11 = $stack_sroa_2_10;
     var $stack_sroa_1_0_load259291 = 0;
     break;
    }
    var $trace_sroa_1_0_load226 = $trace_sroa_1;
    if (($trace_sroa_1_0_load226 | 0) > 0) {
     var $j5_0294 = 0;
    } else {
     var $trace_sroa_0_5 = $trace_sroa_0_4;
     var $trace_sroa_2_6 = $trace_sroa_2_5;
     var $stack_sroa_0_9 = $stack_sroa_0_8;
     var $stack_sroa_2_11 = $stack_sroa_2_10;
     var $stack_sroa_1_0_load259291 = 0;
     break;
    }
    while (1) {
     var $j5_0294;
     var $486 = $trace_sroa_0_4 + ($j5_0294 << 2) | 0;
     HEAP32[$10 + (HEAP32[$486 >> 2] * 36 & -1) >> 2] = 0;
     HEAP16[$10 + (HEAP32[$486 >> 2] * 36 & -1) + 4 >> 1] = 0;
     var $491 = $j5_0294 + 1 | 0;
     if (($491 | 0) < ($trace_sroa_1_0_load226 | 0)) {
      var $j5_0294 = $491;
     } else {
      var $trace_sroa_0_5 = $trace_sroa_0_4;
      var $trace_sroa_2_6 = $trace_sroa_2_5;
      var $stack_sroa_0_9 = $stack_sroa_0_8;
      var $stack_sroa_2_11 = $stack_sroa_2_10;
      var $stack_sroa_1_0_load259291 = 0;
      break;
     }
    }
   }
  } while (0);
  var $stack_sroa_1_0_load259291;
  var $stack_sroa_2_11;
  var $stack_sroa_0_9;
  var $trace_sroa_2_6;
  var $trace_sroa_0_5;
  var $493 = $i2_0298 + 1 | 0;
  if (($493 | 0) < ($7 | 0)) {
   var $i2_0298 = $493;
   var $trace_sroa_0_0 = $trace_sroa_0_5;
   var $trace_sroa_2_0 = $trace_sroa_2_6;
   var $stack_sroa_0_0 = $stack_sroa_0_9;
   var $stack_sroa_2_0 = $stack_sroa_2_11;
   var $stack_sroa_1_0_load259 = $stack_sroa_1_0_load259291;
  } else {
   var $i6_0 = 0;
   var $mergeCount_0 = 0;
   break;
  }
 }
 while (1) {
  var $mergeCount_0;
  var $i6_0;
  if (($i6_0 | 0) >= ($7 | 0)) {
   if (($mergeCount_0 | 0) > 0) {
    var $i6_0 = 0;
    var $mergeCount_0 = 0;
    continue;
   } else {
    var $i10_0243 = 0;
    break;
   }
  }
  var $498 = HEAP16[$10 + ($i6_0 * 36 & -1) + 4 >> 1];
  L214 : do {
   if ($498 << 16 >> 16 < 1) {
    var $mergeCount_1 = $mergeCount_0;
   } else {
    var $501 = $10 + ($i6_0 * 36 & -1) | 0;
    var $502 = HEAP32[$501 >> 2];
    if (($502 | 0) == 0) {
     var $mergeCount_1 = $mergeCount_0;
     break;
    }
    L217 : do {
     if (($502 | 0) > ($mergeRegionSize | 0)) {
      var $507 = $10 + ($i6_0 * 36 & -1) + 12 | 0;
      var $509 = HEAP32[$10 + ($i6_0 * 36 & -1) + 16 >> 2];
      var $i_0_i193 = 0;
      while (1) {
       var $i_0_i193;
       if (($i_0_i193 | 0) >= ($509 | 0)) {
        var $518 = $509;
        break L217;
       }
       if ((HEAP32[HEAP32[$507 >> 2] + ($i_0_i193 << 2) >> 2] | 0) == 0) {
        var $mergeCount_1 = $mergeCount_0;
        break L214;
       } else {
        var $i_0_i193 = $i_0_i193 + 1 | 0;
       }
      }
     } else {
      var $518 = HEAP32[$10 + ($i6_0 * 36 & -1) + 16 >> 2];
     }
    } while (0);
    var $518;
    var $519 = $10 + ($i6_0 * 36 & -1) + 16 | 0;
    if (($518 | 0) <= 0) {
     var $mergeCount_1 = $mergeCount_0;
     break;
    }
    var $522 = HEAP32[$10 + ($i6_0 * 36 & -1) + 12 >> 2];
    var $523 = $10 + ($i6_0 * 36 & -1) + 6 | 0;
    var $524 = $10 + ($i6_0 * 36 & -1) + 24 | 0;
    var $525 = $10 + ($i6_0 * 36 & -1) + 28 | 0;
    var $526 = $498 & 65535;
    var $smallest_0245 = 268435455;
    var $mergeId_0246 = $498;
    var $j8_0247 = 0;
    while (1) {
     var $j8_0247;
     var $mergeId_0246;
     var $smallest_0245;
     var $529 = HEAP32[$522 + ($j8_0247 << 2) >> 2];
     L227 : do {
      if (($529 & 32768 | 0) == 0) {
       var $534 = HEAP16[$10 + ($529 * 36 & -1) + 4 >> 1];
       if ($534 << 16 >> 16 < 1) {
        var $mergeId_1 = $mergeId_0246;
        var $smallest_1 = $smallest_0245;
        break;
       }
       var $538 = HEAP32[$10 + ($529 * 36 & -1) >> 2];
       if (($538 | 0) >= ($smallest_0245 | 0)) {
        var $mergeId_1 = $mergeId_0246;
        var $smallest_1 = $smallest_0245;
        break;
       }
       if ((HEAP8[$523] | 0) != (HEAP8[$10 + ($529 * 36 & -1) + 6 | 0] | 0)) {
        var $mergeId_1 = $mergeId_0246;
        var $smallest_1 = $smallest_0245;
        break;
       }
       var $545 = $534 & 65535;
       var $n_015_i = 0;
       var $i_016_i = 0;
       while (1) {
        var $i_016_i;
        var $n_015_i;
        var $_n_0_i = ((HEAP32[$522 + ($i_016_i << 2) >> 2] | 0) == ($545 | 0)) + $n_015_i | 0;
        var $551 = $i_016_i + 1 | 0;
        if (($551 | 0) < ($518 | 0)) {
         var $n_015_i = $_n_0_i;
         var $i_016_i = $551;
        } else {
         break;
        }
       }
       if (($_n_0_i | 0) > 1) {
        var $mergeId_1 = $mergeId_0246;
        var $smallest_1 = $smallest_0245;
        break;
       }
       var $554 = HEAP32[$525 >> 2];
       var $i1_0_i221 = 0;
       while (1) {
        var $i1_0_i221;
        if (($i1_0_i221 | 0) >= ($554 | 0)) {
         break;
        }
        if ((HEAP32[HEAP32[$524 >> 2] + ($i1_0_i221 << 2) >> 2] | 0) == ($545 | 0)) {
         var $mergeId_1 = $mergeId_0246;
         var $smallest_1 = $smallest_0245;
         break L227;
        } else {
         var $i1_0_i221 = $i1_0_i221 + 1 | 0;
        }
       }
       var $564 = HEAP32[$10 + ($529 * 36 & -1) + 16 >> 2];
       if (($564 | 0) > 0) {
        var $567 = HEAP32[$10 + ($529 * 36 & -1) + 12 >> 2];
        var $n_015_i227 = 0;
        var $i_016_i226 = 0;
        while (1) {
         var $i_016_i226;
         var $n_015_i227;
         var $_n_0_i228 = ((HEAP32[$567 + ($i_016_i226 << 2) >> 2] | 0) == ($526 | 0)) + $n_015_i227 | 0;
         var $573 = $i_016_i226 + 1 | 0;
         if (($573 | 0) < ($564 | 0)) {
          var $n_015_i227 = $_n_0_i228;
          var $i_016_i226 = $573;
         } else {
          break;
         }
        }
        if (($_n_0_i228 | 0) > 1) {
         var $mergeId_1 = $mergeId_0246;
         var $smallest_1 = $smallest_0245;
         break;
        }
       }
       var $576 = $10 + ($529 * 36 & -1) + 24 | 0;
       var $578 = HEAP32[$10 + ($529 * 36 & -1) + 28 >> 2];
       var $i1_0_i231 = 0;
       while (1) {
        var $i1_0_i231;
        if (($i1_0_i231 | 0) >= ($578 | 0)) {
         var $mergeId_1 = $534;
         var $smallest_1 = $538;
         break L227;
        }
        if ((HEAP32[HEAP32[$576 >> 2] + ($i1_0_i231 << 2) >> 2] | 0) == ($526 | 0)) {
         var $mergeId_1 = $mergeId_0246;
         var $smallest_1 = $smallest_0245;
         break;
        } else {
         var $i1_0_i231 = $i1_0_i231 + 1 | 0;
        }
       }
      } else {
       var $mergeId_1 = $mergeId_0246;
       var $smallest_1 = $smallest_0245;
      }
     } while (0);
     var $smallest_1;
     var $mergeId_1;
     var $587 = $j8_0247 + 1 | 0;
     if (($587 | 0) < ($518 | 0)) {
      var $smallest_0245 = $smallest_1;
      var $mergeId_0246 = $mergeId_1;
      var $j8_0247 = $587;
     } else {
      break;
     }
    }
    if ($mergeId_1 << 16 >> 16 == $498 << 16 >> 16) {
     var $mergeCount_1 = $mergeCount_0;
     break;
    }
    var $591 = $mergeId_1 & 65535;
    var $593 = HEAP16[$10 + ($591 * 36 & -1) + 4 >> 1];
    var $594 = $10 + ($591 * 36 & -1) + 12 | 0;
    var $595 = $10 + ($591 * 36 & -1) + 16 | 0;
    var $596 = HEAP32[$595 >> 2];
    do {
     if (($596 | 0) > 0) {
      var $599 = _malloc($596 << 2);
      if ((HEAP32[$595 >> 2] | 0) <= 0) {
       var $acon_i_sroa_0_0298 = $599;
       break;
      }
      var $601 = $594 | 0;
      var $i_068_i = 0;
      while (1) {
       var $i_068_i;
       HEAP32[$599 + ($i_068_i << 2) >> 2] = HEAP32[HEAP32[$601 >> 2] + ($i_068_i << 2) >> 2];
       var $607 = $i_068_i + 1 | 0;
       if (($607 | 0) < (HEAP32[$595 >> 2] | 0)) {
        var $i_068_i = $607;
       } else {
        var $acon_i_sroa_0_0298 = $599;
        break;
       }
      }
     } else {
      var $acon_i_sroa_0_0298 = 0;
     }
    } while (0);
    var $acon_i_sroa_0_0298;
    var $i1_0_i = 0;
    while (1) {
     var $i1_0_i;
     if (($i1_0_i | 0) >= ($596 | 0)) {
      var $_0_i217 = 0;
      var $acon_i_sroa_0_0299 = $acon_i_sroa_0_0298;
      break;
     }
     var $616 = $i1_0_i + 1 | 0;
     if ((HEAP32[$acon_i_sroa_0_0298 + ($i1_0_i << 2) >> 2] | 0) == ($526 | 0)) {
      label = 177;
      break;
     } else {
      var $i1_0_i = $616;
     }
    }
    L261 : do {
     if (label == 177) {
      label = 0;
      if (($i1_0_i | 0) == -1) {
       var $_0_i217 = 0;
       var $acon_i_sroa_0_0299 = $acon_i_sroa_0_0298;
       break;
      }
      var $619 = HEAP32[$519 >> 2];
      var $620 = $10 + ($i6_0 * 36 & -1) + 12 | 0;
      var $621 = $593 & 65535;
      var $i2_0_i = 0;
      while (1) {
       var $i2_0_i;
       if (($i2_0_i | 0) >= ($619 | 0)) {
        var $_0_i217 = 0;
        var $acon_i_sroa_0_0299 = $acon_i_sroa_0_0298;
        break L261;
       }
       var $629 = $i2_0_i + 1 | 0;
       if ((HEAP32[HEAP32[$620 >> 2] + ($i2_0_i << 2) >> 2] | 0) == ($621 | 0)) {
        break;
       } else {
        var $i2_0_i = $629;
       }
      }
      if (($i2_0_i | 0) == -1) {
       var $_0_i217 = 0;
       var $acon_i_sroa_0_0299 = $acon_i_sroa_0_0298;
       break;
      }
      var $633 = $10 + ($591 * 36 & -1) + 20 | 0;
      var $634 = HEAP32[$633 >> 2];
      if (($634 | 0) < 0) {
       var $636 = $634;
       while (1) {
        var $636;
        var $637 = $636 << 1;
        if (($637 | 0) < 0) {
         var $636 = $637;
        } else {
         break;
        }
       }
       HEAP32[$633 >> 2] = $637;
       var $641 = _malloc($636 << 3);
       var $643 = HEAP32[$595 >> 2];
       var $_pre_i144 = $594 | 0;
       if (!(($643 | 0) == 0 | ($641 | 0) == 0)) {
        var $648 = HEAP32[$_pre_i144 >> 2];
        var $649 = $643 << 2;
        _memcpy($641, $648, $649) | 0;
       }
       var $650 = HEAP32[$_pre_i144 >> 2];
       if (($650 | 0) != 0) {
        _free($650);
       }
       HEAP32[$_pre_i144 >> 2] = $641;
      }
      HEAP32[$595 >> 2] = 0;
      var $654 = $596 - 1 | 0;
      L280 : do {
       if (($654 | 0) > 0) {
        var $656 = $594 | 0;
        var $i3_058_i = 0;
        var $658 = 0;
        while (1) {
         var $658;
         var $i3_058_i;
         var $662 = HEAP32[$acon_i_sroa_0_0298 + ((($i3_058_i + $616 | 0) % ($596 | 0) & -1) << 2) >> 2];
         var $663 = $658 + 1 | 0;
         var $664 = HEAP32[$633 >> 2];
         if (($664 | 0) < ($663 | 0)) {
          if (($664 | 0) == 0) {
           HEAP32[$633 >> 2] = $663;
           var $_lcssa_i155 = $663;
          } else {
           var $668 = $664;
           while (1) {
            var $668;
            var $669 = $668 << 1;
            if (($669 | 0) < ($663 | 0)) {
             var $668 = $669;
            } else {
             break;
            }
           }
           HEAP32[$633 >> 2] = $669;
           var $_lcssa_i155 = $669;
          }
          var $_lcssa_i155;
          var $673 = _malloc($_lcssa_i155 << 2);
          var $674 = $673;
          var $675 = HEAP32[$595 >> 2];
          if (!(($675 | 0) == 0 | ($673 | 0) == 0)) {
           var $680 = HEAP32[$656 >> 2];
           var $681 = $675 << 2;
           _memcpy($673, $680, $681) | 0;
          }
          var $682 = HEAP32[$656 >> 2];
          if (($682 | 0) != 0) {
           _free($682);
          }
          HEAP32[$656 >> 2] = $674;
          var $687 = $674;
         } else {
          var $687 = HEAP32[$656 >> 2];
         }
         var $687;
         HEAP32[$595 >> 2] = $663;
         HEAP32[$687 + ($658 << 2) >> 2] = $662;
         var $689 = $i3_058_i + 1 | 0;
         if (($689 | 0) >= ($654 | 0)) {
          var $acon_i_sroa_0_0300 = $acon_i_sroa_0_0298;
          break L280;
         }
         var $i3_058_i = $689;
         var $658 = HEAP32[$595 >> 2];
        }
       } else {
        var $acon_i_sroa_0_0300 = $acon_i_sroa_0_0298;
       }
      } while (0);
      var $acon_i_sroa_0_0300;
      var $691 = HEAP32[$519 >> 2];
      var $692 = $691 - 1 | 0;
      if (($692 | 0) > 0) {
       var $694 = $594 | 0;
       var $i4_054_i = 0;
       while (1) {
        var $i4_054_i;
        var $699 = HEAP32[HEAP32[$620 >> 2] + ((($i4_054_i + $629 | 0) % ($691 | 0) & -1) << 2) >> 2];
        var $700 = HEAP32[$595 >> 2];
        var $701 = $700 + 1 | 0;
        var $702 = HEAP32[$633 >> 2];
        if (($702 | 0) < ($701 | 0)) {
         if (($702 | 0) == 0) {
          HEAP32[$633 >> 2] = $701;
          var $_lcssa_i168 = $701;
         } else {
          var $706 = $702;
          while (1) {
           var $706;
           var $707 = $706 << 1;
           if (($707 | 0) < ($701 | 0)) {
            var $706 = $707;
           } else {
            break;
           }
          }
          HEAP32[$633 >> 2] = $707;
          var $_lcssa_i168 = $707;
         }
         var $_lcssa_i168;
         var $711 = _malloc($_lcssa_i168 << 2);
         var $712 = $711;
         var $713 = HEAP32[$595 >> 2];
         if (!(($713 | 0) == 0 | ($711 | 0) == 0)) {
          var $718 = HEAP32[$694 >> 2];
          var $719 = $713 << 2;
          _memcpy($711, $718, $719) | 0;
         }
         var $720 = HEAP32[$694 >> 2];
         if (($720 | 0) != 0) {
          _free($720);
         }
         HEAP32[$694 >> 2] = $712;
         var $725 = $712;
        } else {
         var $725 = HEAP32[$694 >> 2];
        }
        var $725;
        HEAP32[$595 >> 2] = $701;
        HEAP32[$725 + ($700 << 2) >> 2] = $699;
        var $727 = $i4_054_i + 1 | 0;
        if (($727 | 0) < ($692 | 0)) {
         var $i4_054_i = $727;
        } else {
         break;
        }
       }
      }
      var $729 = HEAP32[$595 >> 2];
      L323 : do {
       if (($729 | 0) > 1) {
        var $731 = $10 + ($591 * 36 & -1) + 12 | 0;
        var $i_0_ph21_i_i204 = 0;
        var $734 = $729;
        while (1) {
         var $734;
         var $i_0_ph21_i_i204;
         var $735 = $i_0_ph21_i_i204 + 1 | 0;
         var $736 = $734;
         while (1) {
          var $736;
          var $738 = HEAP32[$731 >> 2];
          var $739 = $738 + ($i_0_ph21_i_i204 << 2) | 0;
          if ((HEAP32[$739 >> 2] | 0) != (HEAP32[$738 + ((($735 | 0) % ($736 | 0) & -1) << 2) >> 2] | 0)) {
           break;
          }
          var $744 = $736 - 1 | 0;
          do {
           if (($i_0_ph21_i_i204 | 0) < ($744 | 0)) {
            HEAP32[$739 >> 2] = HEAP32[$738 + ($735 << 2) >> 2];
            var $748 = HEAP32[$595 >> 2];
            var $749 = $748 - 1 | 0;
            if (($735 | 0) < ($749 | 0)) {
             var $751 = $735;
            } else {
             var $_lcssa14_i_i211 = $749;
             var $759 = $748;
             break;
            }
            while (1) {
             var $751;
             var $_pre_i_i209 = HEAP32[$731 >> 2];
             var $752 = $751 + 1 | 0;
             HEAP32[$_pre_i_i209 + ($751 << 2) >> 2] = HEAP32[$_pre_i_i209 + ($752 << 2) >> 2];
             var $756 = HEAP32[$595 >> 2];
             var $757 = $756 - 1 | 0;
             if (($752 | 0) < ($757 | 0)) {
              var $751 = $752;
             } else {
              var $_lcssa14_i_i211 = $757;
              var $759 = $756;
              break;
             }
            }
           } else {
            var $_lcssa14_i_i211 = $744;
            var $759 = $736;
           }
          } while (0);
          var $759;
          var $_lcssa14_i_i211;
          if (($759 | 0) <= 0) {
           break L323;
          }
          HEAP32[$595 >> 2] = $_lcssa14_i_i211;
          if (($i_0_ph21_i_i204 | 0) < ($_lcssa14_i_i211 | 0) & ($_lcssa14_i_i211 | 0) > 1) {
           var $736 = $_lcssa14_i_i211;
          } else {
           break L323;
          }
         }
         if (($735 | 0) < ($736 | 0) & ($736 | 0) > 1) {
          var $i_0_ph21_i_i204 = $735;
          var $734 = $736;
         } else {
          break;
         }
        }
       }
      } while (0);
      var $763 = HEAP32[$525 >> 2];
      if (($763 | 0) > 0) {
       var $765 = $10 + ($591 * 36 & -1) + 28 | 0;
       var $766 = $10 + ($591 * 36 & -1) + 24 | 0;
       var $767 = $10 + ($591 * 36 & -1) + 32 | 0;
       var $j_045_i = 0;
       var $768 = $763;
       while (1) {
        var $768;
        var $j_045_i;
        var $771 = HEAP32[HEAP32[$524 >> 2] + ($j_045_i << 2) >> 2];
        var $772 = HEAP32[$765 >> 2];
        var $i_0_i_i = 0;
        while (1) {
         var $i_0_i_i;
         if (($i_0_i_i | 0) >= ($772 | 0)) {
          label = 233;
          break;
         }
         if ((HEAP32[HEAP32[$766 >> 2] + ($i_0_i_i << 2) >> 2] | 0) == ($771 | 0)) {
          var $807 = $768;
          break;
         } else {
          var $i_0_i_i = $i_0_i_i + 1 | 0;
         }
        }
        if (label == 233) {
         label = 0;
         var $782 = $772 + 1 | 0;
         var $783 = HEAP32[$767 >> 2];
         if (($783 | 0) < ($782 | 0)) {
          if (($783 | 0) == 0) {
           HEAP32[$767 >> 2] = $782;
           var $_lcssa_i181 = $782;
          } else {
           var $787 = $783;
           while (1) {
            var $787;
            var $788 = $787 << 1;
            if (($788 | 0) < ($782 | 0)) {
             var $787 = $788;
            } else {
             break;
            }
           }
           HEAP32[$767 >> 2] = $788;
           var $_lcssa_i181 = $788;
          }
          var $_lcssa_i181;
          var $792 = _malloc($_lcssa_i181 << 2);
          var $793 = $792;
          var $794 = HEAP32[$765 >> 2];
          if (!(($794 | 0) == 0 | ($792 | 0) == 0)) {
           var $799 = HEAP32[$766 >> 2];
           var $800 = $794 << 2;
           _memcpy($792, $799, $800) | 0;
          }
          var $801 = HEAP32[$766 >> 2];
          if (($801 | 0) != 0) {
           _free($801);
          }
          HEAP32[$766 >> 2] = $793;
          var $805 = $793;
         } else {
          var $805 = HEAP32[$766 >> 2];
         }
         var $805;
         HEAP32[$765 >> 2] = $782;
         HEAP32[$805 + ($772 << 2) >> 2] = $771;
         var $807 = HEAP32[$525 >> 2];
        }
        var $807;
        var $808 = $j_045_i + 1 | 0;
        if (($808 | 0) < ($807 | 0)) {
         var $j_045_i = $808;
         var $768 = $807;
        } else {
         break;
        }
       }
      }
      var $811 = $10 + ($591 * 36 & -1) | 0;
      HEAP32[$811 >> 2] = HEAP32[$811 >> 2] + HEAP32[$501 >> 2];
      HEAP32[$501 >> 2] = 0;
      var $814 = $10 + ($i6_0 * 36 & -1) + 20 | 0;
      var $815 = HEAP32[$814 >> 2];
      if (($815 | 0) < 0) {
       var $817 = $815;
       while (1) {
        var $817;
        var $818 = $817 << 1;
        if (($818 | 0) < 0) {
         var $817 = $818;
        } else {
         break;
        }
       }
       HEAP32[$814 >> 2] = $818;
       var $822 = _malloc($817 << 3);
       var $824 = HEAP32[$519 >> 2];
       if (!(($824 | 0) == 0 | ($822 | 0) == 0)) {
        var $829 = HEAP32[$620 >> 2];
        var $830 = $824 << 2;
        _memcpy($822, $829, $830) | 0;
       }
       var $831 = HEAP32[$620 >> 2];
       if (($831 | 0) != 0) {
        _free($831);
       }
       HEAP32[$620 >> 2] = $822;
      }
      HEAP32[$519 >> 2] = 0;
      var $_0_i217 = 1;
      var $acon_i_sroa_0_0299 = $acon_i_sroa_0_0300;
     }
    } while (0);
    var $acon_i_sroa_0_0299;
    var $_0_i217;
    if (($acon_i_sroa_0_0299 | 0) != 0) {
     _free($acon_i_sroa_0_0299);
    }
    if ($_0_i217) {
     var $j9_0264 = 0;
    } else {
     var $mergeCount_1 = $mergeCount_0;
     break;
    }
    while (1) {
     var $j9_0264;
     var $838 = $10 + ($j9_0264 * 36 & -1) + 4 | 0;
     var $839 = HEAP16[$838 >> 1];
     L382 : do {
      if ($839 << 16 >> 16 > 0) {
       if ($839 << 16 >> 16 == $498 << 16 >> 16) {
        HEAP16[$838 >> 1] = $mergeId_1;
       }
       var $845 = $10 + ($j9_0264 * 36 & -1) + 16 | 0;
       var $846 = HEAP32[$845 >> 2];
       if (($846 | 0) > 0) {
        var $848 = $10 + ($j9_0264 * 36 & -1) + 12 | 0;
        var $neiChanged_0_off025_i = 0;
        var $i_026_i = 0;
        var $853 = $846;
        while (1) {
         var $853;
         var $i_026_i;
         var $neiChanged_0_off025_i;
         var $855 = HEAP32[$848 >> 2] + ($i_026_i << 2) | 0;
         if ((HEAP32[$855 >> 2] | 0) == ($526 | 0)) {
          HEAP32[$855 >> 2] = $591;
          var $neiChanged_1_off0_i = 1;
          var $860 = HEAP32[$845 >> 2];
         } else {
          var $neiChanged_1_off0_i = $neiChanged_0_off025_i;
          var $860 = $853;
         }
         var $860;
         var $neiChanged_1_off0_i;
         var $861 = $i_026_i + 1 | 0;
         if (($861 | 0) < ($860 | 0)) {
          var $neiChanged_0_off025_i = $neiChanged_1_off0_i;
          var $i_026_i = $861;
          var $853 = $860;
         } else {
          var $neiChanged_0_off0_lcssa_i = $neiChanged_1_off0_i;
          break;
         }
        }
       } else {
        var $neiChanged_0_off0_lcssa_i = 0;
       }
       var $neiChanged_0_off0_lcssa_i;
       var $849 = $10 + ($j9_0264 * 36 & -1) + 28 | 0;
       var $850 = HEAP32[$849 >> 2];
       if (($850 | 0) > 0) {
        var $852 = $10 + ($j9_0264 * 36 & -1) + 24 | 0;
        var $i1_024_i = 0;
        var $863 = $850;
        while (1) {
         var $863;
         var $i1_024_i;
         var $865 = HEAP32[$852 >> 2] + ($i1_024_i << 2) | 0;
         if ((HEAP32[$865 >> 2] | 0) == ($526 | 0)) {
          HEAP32[$865 >> 2] = $591;
          var $870 = HEAP32[$849 >> 2];
         } else {
          var $870 = $863;
         }
         var $870;
         var $871 = $i1_024_i + 1 | 0;
         if (($871 | 0) < ($870 | 0)) {
          var $i1_024_i = $871;
          var $863 = $870;
         } else {
          break;
         }
        }
       }
       if (!$neiChanged_0_off0_lcssa_i) {
        break;
       }
       var $874 = HEAP32[$845 >> 2];
       if (($874 | 0) <= 1) {
        break;
       }
       var $876 = $10 + ($j9_0264 * 36 & -1) + 12 | 0;
       var $i_0_ph21_i_i = 0;
       var $879 = $874;
       while (1) {
        var $879;
        var $i_0_ph21_i_i;
        var $880 = $i_0_ph21_i_i + 1 | 0;
        var $881 = $879;
        while (1) {
         var $881;
         var $883 = HEAP32[$876 >> 2];
         var $884 = $883 + ($i_0_ph21_i_i << 2) | 0;
         if ((HEAP32[$884 >> 2] | 0) != (HEAP32[$883 + ((($880 | 0) % ($881 | 0) & -1) << 2) >> 2] | 0)) {
          break;
         }
         var $889 = $881 - 1 | 0;
         do {
          if (($i_0_ph21_i_i | 0) < ($889 | 0)) {
           HEAP32[$884 >> 2] = HEAP32[$883 + ($880 << 2) >> 2];
           var $893 = HEAP32[$845 >> 2];
           var $894 = $893 - 1 | 0;
           if (($880 | 0) < ($894 | 0)) {
            var $896 = $880;
           } else {
            var $_lcssa14_i_i = $894;
            var $904 = $893;
            break;
           }
           while (1) {
            var $896;
            var $_pre_i_i = HEAP32[$876 >> 2];
            var $897 = $896 + 1 | 0;
            HEAP32[$_pre_i_i + ($896 << 2) >> 2] = HEAP32[$_pre_i_i + ($897 << 2) >> 2];
            var $901 = HEAP32[$845 >> 2];
            var $902 = $901 - 1 | 0;
            if (($897 | 0) < ($902 | 0)) {
             var $896 = $897;
            } else {
             var $_lcssa14_i_i = $902;
             var $904 = $901;
             break;
            }
           }
          } else {
           var $_lcssa14_i_i = $889;
           var $904 = $881;
          }
         } while (0);
         var $904;
         var $_lcssa14_i_i;
         if (($904 | 0) <= 0) {
          break L382;
         }
         HEAP32[$845 >> 2] = $_lcssa14_i_i;
         if (($i_0_ph21_i_i | 0) < ($_lcssa14_i_i | 0) & ($_lcssa14_i_i | 0) > 1) {
          var $881 = $_lcssa14_i_i;
         } else {
          break L382;
         }
        }
        if (($880 | 0) < ($881 | 0) & ($881 | 0) > 1) {
         var $i_0_ph21_i_i = $880;
         var $879 = $881;
        } else {
         break;
        }
       }
      }
     } while (0);
     var $908 = $j9_0264 + 1 | 0;
     if (($908 | 0) < ($7 | 0)) {
      var $j9_0264 = $908;
     } else {
      break;
     }
    }
    var $mergeCount_1 = $mergeCount_0 + 1 | 0;
   }
  } while (0);
  var $mergeCount_1;
  var $i6_0 = $i6_0 + 1 | 0;
  var $mergeCount_0 = $mergeCount_1;
 }
 while (1) {
  var $i10_0243;
  var $915 = $10 + ($i10_0243 * 36 & -1) + 7 | 0;
  HEAP8[$915] = 0;
  if ((HEAP16[$10 + ($i10_0243 * 36 & -1) + 4 >> 1] | 0) >= 1) {
   HEAP8[$915] = 1;
  }
  var $921 = $i10_0243 + 1 | 0;
  if (($921 | 0) < ($7 | 0)) {
   var $i10_0243 = $921;
  } else {
   var $regIdGen_0240 = 0;
   var $i11_0241 = 0;
   break;
  }
 }
 while (1) {
  var $i11_0241;
  var $regIdGen_0240;
  L427 : do {
   if ((HEAP8[$10 + ($i11_0241 * 36 & -1) + 7 | 0] & 1) == 0) {
    var $regIdGen_1 = $regIdGen_0240;
   } else {
    var $929 = HEAP16[$10 + ($i11_0241 * 36 & -1) + 4 >> 1];
    var $930 = $regIdGen_0240 + 1 & 65535;
    if (($i11_0241 | 0) < ($7 | 0)) {
     var $j13_0237 = $i11_0241;
     var $932 = $929;
    } else {
     var $regIdGen_1 = $930;
     break;
    }
    while (1) {
     var $932;
     var $j13_0237;
     if ($932 << 16 >> 16 == $929 << 16 >> 16) {
      HEAP16[$10 + ($j13_0237 * 36 & -1) + 4 >> 1] = $930;
      HEAP8[$10 + ($j13_0237 * 36 & -1) + 7 | 0] = 0;
     }
     var $938 = $j13_0237 + 1 | 0;
     if (($938 | 0) >= ($7 | 0)) {
      var $regIdGen_1 = $930;
      break L427;
     }
     var $j13_0237 = $938;
     var $932 = HEAP16[$10 + ($938 * 36 & -1) + 4 >> 1];
    }
   }
  } while (0);
  var $regIdGen_1;
  var $940 = $i11_0241 + 1 | 0;
  if (($940 | 0) < ($7 | 0)) {
   var $regIdGen_0240 = $regIdGen_1;
   var $i11_0241 = $940;
  } else {
   break;
  }
 }
 HEAP16[$maxRegionId >> 1] = $regIdGen_1;
 var $943 = $chf + 8 | 0;
 var $944 = HEAP32[$943 >> 2];
 if (($944 | 0) > 0) {
  var $i14_0236 = 0;
  var $946 = $944;
  while (1) {
   var $946;
   var $i14_0236;
   var $947 = $srcReg + ($i14_0236 << 1) | 0;
   var $949 = HEAPU16[$947 >> 1];
   if (($949 & 32768 | 0) == 0) {
    HEAP16[$947 >> 1] = HEAP16[$10 + ($949 * 36 & -1) + 4 >> 1];
    var $956 = HEAP32[$943 >> 2];
   } else {
    var $956 = $946;
   }
   var $956;
   var $957 = $i14_0236 + 1 | 0;
   if (($957 | 0) < ($956 | 0)) {
    var $i14_0236 = $957;
    var $946 = $956;
   } else {
    var $i15_0235 = 0;
    break;
   }
  }
 } else {
  var $i15_0235 = 0;
 }
 while (1) {
  var $i15_0235;
  var $960 = HEAP32[$10 + ($i15_0235 * 36 & -1) + 24 >> 2];
  if (($960 | 0) != 0) {
   _free($960);
  }
  var $965 = HEAP32[$10 + ($i15_0235 * 36 & -1) + 12 >> 2];
  if (($965 | 0) != 0) {
   _free($965);
  }
  var $969 = $i15_0235 + 1 | 0;
  if (($969 | 0) < ($7 | 0)) {
   var $i15_0235 = $969;
  } else {
   break;
  }
 }
 _free($9);
 if (($trace_sroa_0_5 | 0) != 0) {
  _free($trace_sroa_0_5);
 }
 if (($stack_sroa_0_9 | 0) == 0) {
  var $_0 = 1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _free($stack_sroa_0_9);
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __Z14rcBuildRegionsP9rcContextR20rcCompactHeightfieldiii($ctx, $chf, $borderSize, $minRegionArea, $mergeRegionArea) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $stack = sp;
 var $1 = $ctx + 5 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 20);
 }
 var $10 = $chf | 0;
 var $11 = HEAP32[$10 >> 2];
 var $13 = HEAP32[$chf + 4 >> 2];
 var $14 = $chf + 8 | 0;
 var $17 = _malloc(HEAP32[$14 >> 2] << 3);
 var $18 = $17;
 if (($17 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz($ctx, 3, 4200, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$14 >> 2] << 2, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $_1114 = 0;
  var $_1114;
  STACKTOP = sp;
  return $_1114;
 }
 if ((HEAP8[$1] & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 21);
 }
 var $37 = $stack | 0;
 HEAP32[$37 >> 2] = 0;
 var $38 = $stack + 4 | 0;
 HEAP32[$38 >> 2] = 0;
 var $39 = $stack + 8 | 0;
 HEAP32[$39 >> 2] = 1024;
 var $40 = _malloc(4096);
 var $42 = HEAP32[$38 >> 2];
 if (!(($42 | 0) == 0 | ($40 | 0) == 0)) {
  var $46 = $42 << 2;
  _memcpy($40, 0, $46) | 0;
 }
 HEAP32[$37 >> 2] = $40;
 HEAP32[$38 >> 2] = 1024;
 var $47 = _malloc(4096);
 var $48 = HEAP32[$14 >> 2];
 var $49 = $18 + ($48 << 1) | 0;
 var $50 = $48 << 1;
 var $51 = $18 + ($50 << 1) | 0;
 var $53 = $18 + (($48 * 3 & -1) << 1) | 0;
 _memset($17, 0, $50);
 _memset($49, 0, HEAP32[$14 >> 2] << 1);
 var $60 = HEAP16[$chf + 24 >> 1] + 1 & 65535 & -2;
 if (($borderSize | 0) > 0) {
  var $72 = ($11 | 0) < ($borderSize | 0) ? $11 : $borderSize;
  var $74 = ($13 | 0) < ($borderSize | 0) ? $13 : $borderSize;
  var $75 = HEAP32[$10 >> 2];
  do {
   if (($13 | 0) > 0) {
    var $78 = $chf + 60 | 0;
    var $79 = $chf + 72 | 0;
    if (($72 | 0) > 0) {
     var $y_022_us_i = 0;
    } else {
     var $129 = $75;
     break;
    }
    while (1) {
     var $y_022_us_i;
     var $103 = Math.imul($y_022_us_i, $75) | 0;
     var $x_019_us_i = 0;
     while (1) {
      var $x_019_us_i;
      var $87 = HEAP32[HEAP32[$78 >> 2] + ($x_019_us_i + $103 << 2) >> 2];
      var $88 = $87 & 16777215;
      var $89 = $87 >>> 24;
      var $90 = $88 + $89 | 0;
      if (($89 | 0) != 0) {
       var $i_018_us_i = $88;
       while (1) {
        var $i_018_us_i;
        if ((HEAP8[HEAP32[$79 >> 2] + $i_018_us_i | 0] | 0) != 0) {
         HEAP16[$18 + ($i_018_us_i << 1) >> 1] = -32767;
        }
        var $101 = $i_018_us_i + 1 | 0;
        if (($101 | 0) < ($90 | 0)) {
         var $i_018_us_i = $101;
        } else {
         break;
        }
       }
      }
      var $92 = $x_019_us_i + 1 | 0;
      if (($92 | 0) < ($72 | 0)) {
       var $x_019_us_i = $92;
      } else {
       break;
      }
     }
     var $81 = $y_022_us_i + 1 | 0;
     if (($81 | 0) < ($13 | 0)) {
      var $y_022_us_i = $81;
     } else {
      break;
     }
    }
    var $_pre274 = HEAP32[$10 >> 2];
    var $104 = $11 - $72 | 0;
    var $y_022_us_i107 = 0;
    while (1) {
     var $y_022_us_i107;
     var $128 = Math.imul($y_022_us_i107, $_pre274) | 0;
     var $x_019_us_i102 = $104;
     while (1) {
      var $x_019_us_i102;
      var $112 = HEAP32[HEAP32[$78 >> 2] + ($x_019_us_i102 + $128 << 2) >> 2];
      var $113 = $112 & 16777215;
      var $114 = $112 >>> 24;
      var $115 = $113 + $114 | 0;
      if (($114 | 0) != 0) {
       var $i_018_us_i105 = $113;
       while (1) {
        var $i_018_us_i105;
        if ((HEAP8[HEAP32[$79 >> 2] + $i_018_us_i105 | 0] | 0) != 0) {
         HEAP16[$18 + ($i_018_us_i105 << 1) >> 1] = -32766;
        }
        var $126 = $i_018_us_i105 + 1 | 0;
        if (($126 | 0) < ($115 | 0)) {
         var $i_018_us_i105 = $126;
        } else {
         break;
        }
       }
      }
      var $117 = $x_019_us_i102 + 1 | 0;
      if (($117 | 0) < ($11 | 0)) {
       var $x_019_us_i102 = $117;
      } else {
       break;
      }
     }
     var $106 = $y_022_us_i107 + 1 | 0;
     if (($106 | 0) < ($13 | 0)) {
      var $y_022_us_i107 = $106;
     } else {
      break;
     }
    }
    var $129 = HEAP32[$10 >> 2];
   } else {
    var $129 = $75;
   }
  } while (0);
  var $129;
  do {
   if (($74 | 0) > 0) {
    var $132 = $chf + 60 | 0;
    var $133 = $chf + 72 | 0;
    if (($11 | 0) > 0) {
     var $y_022_us_i116 = 0;
    } else {
     break;
    }
    while (1) {
     var $y_022_us_i116;
     var $157 = Math.imul($y_022_us_i116, $129) | 0;
     var $x_019_us_i111 = 0;
     while (1) {
      var $x_019_us_i111;
      var $141 = HEAP32[HEAP32[$132 >> 2] + ($x_019_us_i111 + $157 << 2) >> 2];
      var $142 = $141 & 16777215;
      var $143 = $141 >>> 24;
      var $144 = $142 + $143 | 0;
      if (($143 | 0) != 0) {
       var $i_018_us_i114 = $142;
       while (1) {
        var $i_018_us_i114;
        if ((HEAP8[HEAP32[$133 >> 2] + $i_018_us_i114 | 0] | 0) != 0) {
         HEAP16[$18 + ($i_018_us_i114 << 1) >> 1] = -32765;
        }
        var $155 = $i_018_us_i114 + 1 | 0;
        if (($155 | 0) < ($144 | 0)) {
         var $i_018_us_i114 = $155;
        } else {
         break;
        }
       }
      }
      var $146 = $x_019_us_i111 + 1 | 0;
      if (($146 | 0) < ($11 | 0)) {
       var $x_019_us_i111 = $146;
      } else {
       break;
      }
     }
     var $135 = $y_022_us_i116 + 1 | 0;
     if (($135 | 0) < ($74 | 0)) {
      var $y_022_us_i116 = $135;
     } else {
      break;
     }
    }
    var $_pre = HEAP32[$10 >> 2];
    var $y_022_us_i126 = $13 - $74 | 0;
    while (1) {
     var $y_022_us_i126;
     var $182 = Math.imul($y_022_us_i126, $_pre) | 0;
     var $x_019_us_i121 = 0;
     while (1) {
      var $x_019_us_i121;
      var $166 = HEAP32[HEAP32[$132 >> 2] + ($x_019_us_i121 + $182 << 2) >> 2];
      var $167 = $166 & 16777215;
      var $168 = $166 >>> 24;
      var $169 = $167 + $168 | 0;
      if (($168 | 0) != 0) {
       var $i_018_us_i124 = $167;
       while (1) {
        var $i_018_us_i124;
        if ((HEAP8[HEAP32[$133 >> 2] + $i_018_us_i124 | 0] | 0) != 0) {
         HEAP16[$18 + ($i_018_us_i124 << 1) >> 1] = -32764;
        }
        var $180 = $i_018_us_i124 + 1 | 0;
        if (($180 | 0) < ($169 | 0)) {
         var $i_018_us_i124 = $180;
        } else {
         break;
        }
       }
      }
      var $171 = $x_019_us_i121 + 1 | 0;
      if (($171 | 0) < ($11 | 0)) {
       var $x_019_us_i121 = $171;
      } else {
       break;
      }
     }
     var $160 = $y_022_us_i126 + 1 | 0;
     if (($160 | 0) < ($13 | 0)) {
      var $y_022_us_i126 = $160;
     } else {
      break;
     }
    }
   }
  } while (0);
  HEAP32[$chf + 20 >> 2] = $borderSize;
  var $regionId_0_ph = 5;
 } else {
  var $regionId_0_ph = 1;
 }
 var $regionId_0_ph;
 if ($60 << 16 >> 16 == 0) {
  var $buf_sroa_0_0_load179183_lcssa = $18;
  var $_lcssa230 = $49;
  var $_lcssa234 = $51;
  var $_lcssa238 = $53;
  var $regionId_0_lcssa = $regionId_0_ph;
 } else {
  var $63 = $ctx;
  var $64 = ($13 | 0) > 0;
  var $65 = ($11 | 0) > 0;
  var $66 = $chf + 60 | 0;
  var $67 = $chf + 68 | 0;
  var $68 = $chf + 72 | 0;
  var $69 = $chf + 64 | 0;
  var $buf_sroa_0_0_load179183245 = $18;
  var $190 = $49;
  var $189 = $51;
  var $188 = $53;
  var $level_0246 = $60;
  var $regionId_0247 = $regionId_0_ph;
  while (1) {
   var $regionId_0247;
   var $level_0246;
   var $188;
   var $189;
   var $190;
   var $buf_sroa_0_0_load179183245;
   var $_ = ($level_0246 & 65535) > 1 ? $level_0246 - 2 & 65535 : 0;
   if ((HEAP8[$1] & 1) != 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$63 >> 2] + 20 >> 2]]($ctx, 22);
   }
   var $202 = (__ZL13expandRegionsitR20rcCompactHeightfieldPtS1_S1_S1_R10rcIntArray(8, $_, $chf, $buf_sroa_0_0_load179183245, $190, $189, $188, $stack) | 0) == ($buf_sroa_0_0_load179183245 | 0);
   var $buf_sroa_0_0_load179183_ = $202 ? $buf_sroa_0_0_load179183245 : $189;
   var $_186 = $202 ? $190 : $188;
   var $_buf_sroa_0_0_load179183 = $202 ? $189 : $buf_sroa_0_0_load179183245;
   var $_187 = $202 ? $188 : $190;
   var $203 = HEAP8[$1];
   if (($203 & 1) == 0) {
    var $210 = $203;
   } else {
    FUNCTION_TABLE[HEAP32[HEAP32[$63 >> 2] + 24 >> 2]]($ctx, 22);
    var $210 = HEAP8[$1];
   }
   var $210;
   if (($210 & 1) != 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$63 >> 2] + 20 >> 2]]($ctx, 23);
   }
   if ($64) {
    var $phitmp_i_ = ($_ & 65535) > 1 ? $_ - 2 & 65535 : 0;
    var $regionId_1221 = $regionId_0247;
    var $y_0222 = 0;
    while (1) {
     var $y_0222;
     var $regionId_1221;
     if ($65) {
      var $219 = Math.imul($y_0222, $11) | 0;
      var $regionId_2213 = $regionId_1221;
      var $x_0214 = 0;
      while (1) {
       var $x_0214;
       var $regionId_2213;
       var $224 = HEAP32[HEAP32[$66 >> 2] + ($x_0214 + $219 << 2) >> 2];
       var $225 = $224 & 16777215;
       var $226 = $224 >>> 24;
       var $227 = $225 + $226 | 0;
       if (($226 | 0) == 0) {
        var $regionId_3_lcssa = $regionId_2213;
       } else {
        var $regionId_3208 = $regionId_2213;
        var $i_0209 = $225;
        while (1) {
         var $i_0209;
         var $regionId_3208;
         do {
          if (HEAPU16[HEAP32[$67 >> 2] + ($i_0209 << 1) >> 1] < ($_ & 65535)) {
           var $regionId_4 = $regionId_3208;
          } else {
           var $234 = $buf_sroa_0_0_load179183_ + ($i_0209 << 1) | 0;
           if ((HEAP16[$234 >> 1] | 0) != 0) {
            var $regionId_4 = $regionId_3208;
            break;
           }
           var $240 = HEAP8[HEAP32[$68 >> 2] + $i_0209 | 0];
           if ($240 << 24 >> 24 == 0) {
            var $regionId_4 = $regionId_3208;
            break;
           }
           var $243 = HEAP32[$10 >> 2];
           var $244 = HEAP32[$39 >> 2];
           if (($244 | 0) < 0) {
            var $246 = $244;
            while (1) {
             var $246;
             var $247 = $246 << 1;
             if (($247 | 0) < 0) {
              var $246 = $247;
             } else {
              break;
             }
            }
            HEAP32[$39 >> 2] = $247;
            var $251 = _malloc($246 << 3);
            var $253 = HEAP32[$38 >> 2];
            var $_pre125 = HEAP32[$37 >> 2];
            if (!(($253 | 0) == 0 | ($251 | 0) == 0)) {
             var $257 = $_pre125;
             var $258 = $253 << 2;
             _memcpy($251, $257, $258) | 0;
            }
            if (($_pre125 | 0) != 0) {
             _free($_pre125);
            }
            HEAP32[$37 >> 2] = $251;
            var $262 = $247;
           } else {
            var $262 = $244;
           }
           var $262;
           HEAP32[$38 >> 2] = 0;
           if (($262 | 0) < 1) {
            if (($262 | 0) == 0) {
             HEAP32[$39 >> 2] = 1;
             var $_lcssa_i36 = 1;
            } else {
             var $266 = $262;
             while (1) {
              var $266;
              var $267 = $266 << 1;
              if (($267 | 0) < 1) {
               var $266 = $267;
              } else {
               break;
              }
             }
             HEAP32[$39 >> 2] = $267;
             var $_lcssa_i36 = $267;
            }
            var $_lcssa_i36;
            var $271 = _malloc($_lcssa_i36 << 2);
            var $_pre126 = HEAP32[$37 >> 2];
            if (($_pre126 | 0) != 0) {
             _free($_pre126);
            }
            HEAP32[$37 >> 2] = $271;
            var $276 = $271;
            var $275 = $_lcssa_i36;
           } else {
            var $276 = HEAP32[$37 >> 2];
            var $275 = $262;
           }
           var $275;
           var $276;
           HEAP32[$38 >> 2] = 1;
           HEAP32[$276 >> 2] = $x_0214;
           if (($275 | 0) < 2) {
            if (($275 | 0) == 0) {
             HEAP32[$39 >> 2] = 2;
             var $_lcssa_i49 = 2;
            } else {
             var $280 = $275;
             while (1) {
              var $280;
              var $281 = $280 << 1;
              if (($281 | 0) < 2) {
               var $280 = $281;
              } else {
               break;
              }
             }
             HEAP32[$39 >> 2] = $281;
             var $_lcssa_i49 = $281;
            }
            var $_lcssa_i49;
            var $285 = _malloc($_lcssa_i49 << 2);
            var $286 = $285;
            if (($285 | 0) != 0) {
             HEAP32[$285 >> 2] = HEAP32[$276 >> 2];
            }
            if (($276 | 0) != 0) {
             _free($276);
            }
            HEAP32[$37 >> 2] = $286;
            var $294 = $286;
           } else {
            var $294 = $276;
           }
           var $294;
           HEAP32[$38 >> 2] = 2;
           HEAP32[$294 + 4 >> 2] = $y_0222;
           var $296 = HEAP32[$38 >> 2];
           var $297 = $296 + 1 | 0;
           var $298 = HEAP32[$39 >> 2];
           if (($298 | 0) < ($297 | 0)) {
            if (($298 | 0) == 0) {
             HEAP32[$39 >> 2] = $297;
             var $_lcssa_i62 = $297;
            } else {
             var $302 = $298;
             while (1) {
              var $302;
              var $303 = $302 << 1;
              if (($303 | 0) < ($297 | 0)) {
               var $302 = $303;
              } else {
               break;
              }
             }
             HEAP32[$39 >> 2] = $303;
             var $_lcssa_i62 = $303;
            }
            var $_lcssa_i62;
            var $307 = _malloc($_lcssa_i62 << 2);
            var $308 = $307;
            var $_pre127 = HEAP32[$37 >> 2];
            if (!(($296 | 0) == 0 | ($307 | 0) == 0)) {
             var $312 = $_pre127;
             var $313 = $296 << 2;
             _memcpy($307, $312, $313) | 0;
            }
            if (($_pre127 | 0) != 0) {
             _free($_pre127);
            }
            HEAP32[$37 >> 2] = $308;
            var $317 = $308;
           } else {
            var $317 = HEAP32[$37 >> 2];
           }
           var $317;
           HEAP32[$38 >> 2] = $297;
           HEAP32[$317 + ($296 << 2) >> 2] = $i_0209;
           HEAP16[$234 >> 1] = $regionId_3208;
           HEAP16[$_186 + ($i_0209 << 1) >> 1] = 0;
           var $320 = HEAP32[$38 >> 2];
           L617 : do {
            if (($320 | 0) > 0) {
             var $count_0_ph97_i = 0;
             var $324 = $320;
             while (1) {
              var $324;
              var $count_0_ph97_i;
              var $325 = $324;
              while (1) {
               var $325;
               var $326 = $325 - 1 | 0;
               HEAP32[$38 >> 2] = $326;
               var $327 = HEAP32[$37 >> 2];
               var $329 = HEAP32[$327 + ($326 << 2) >> 2];
               do {
                if (($326 | 0) > 0) {
                 var $331 = $325 - 2 | 0;
                 HEAP32[$38 >> 2] = $331;
                 var $333 = HEAP32[$327 + ($331 << 2) >> 2];
                 if (($331 | 0) <= 0) {
                  var $339 = $333;
                  var $338 = $333;
                  var $337 = $331;
                  break;
                 }
                 var $336 = $325 - 3 | 0;
                 HEAP32[$38 >> 2] = $336;
                 var $339 = $333;
                 var $338 = HEAP32[$327 + ($336 << 2) >> 2];
                 var $337 = $336;
                } else {
                 var $339 = $329;
                 var $338 = $329;
                 var $337 = $326;
                }
               } while (0);
               var $337;
               var $338;
               var $339;
               var $340 = HEAP32[$69 >> 2];
               var $342 = $340 + ($329 << 3) + 4 | 0;
               var $343 = HEAP32[$342 >> 2];
               var $344 = $343 & 16777215;
               var $dir_088_i = 0;
               var $ar_089_i = 0;
               while (1) {
                var $ar_089_i;
                var $dir_088_i;
                var $348 = $344 >>> (($dir_088_i * 6 & -1) >>> 0) & 63;
                do {
                 if (($348 | 0) == 63) {
                  var $ar_2_i = $ar_089_i;
                 } else {
                  var $353 = HEAP32[9712 + ($dir_088_i << 2) >> 2] + $338 | 0;
                  var $356 = HEAP32[9696 + ($dir_088_i << 2) >> 2] + $339 | 0;
                  var $358 = Math.imul($356, $243) + $353 | 0;
                  var $359 = HEAP32[$66 >> 2];
                  var $364 = (HEAP32[$359 + ($358 << 2) >> 2] & 16777215) + $348 | 0;
                  var $365 = HEAP32[$68 >> 2];
                  if ((HEAP8[$365 + $364 | 0] | 0) != $240 << 24 >> 24) {
                   var $ar_2_i = $ar_089_i;
                   break;
                  }
                  var $371 = HEAP16[$buf_sroa_0_0_load179183_ + ($364 << 1) >> 1];
                  if ($371 << 16 >> 16 <= -1) {
                   var $ar_2_i = $ar_089_i;
                   break;
                  }
                  var $ar_1_i = $371 << 16 >> 16 == 0 | $371 << 16 >> 16 == $regionId_3208 << 16 >> 16 ? $ar_089_i : $371;
                  var $377 = $dir_088_i + 1 & 3;
                  var $384 = (HEAP32[$340 + ($364 << 3) + 4 >> 2] & 16777215) >>> (($377 * 6 & -1) >>> 0) & 63;
                  if (($384 | 0) == 63) {
                   var $ar_2_i = $ar_1_i;
                   break;
                  }
                  var $389 = HEAP32[9712 + ($377 << 2) >> 2] + $353 | 0;
                  var $399 = (HEAP32[$359 + ($389 + Math.imul(HEAP32[9696 + ($377 << 2) >> 2] + $356 | 0, $243) << 2) >> 2] & 16777215) + $384 | 0;
                  if ((HEAP8[$365 + $399 | 0] | 0) != $240 << 24 >> 24) {
                   var $ar_2_i = $ar_1_i;
                   break;
                  }
                  var $405 = HEAP16[$buf_sroa_0_0_load179183_ + ($399 << 1) >> 1];
                  var $ar_2_i = $405 << 16 >> 16 == 0 | $405 << 16 >> 16 == $regionId_3208 << 16 >> 16 ? $ar_1_i : $405;
                 }
                } while (0);
                var $ar_2_i;
                var $409 = $dir_088_i + 1 | 0;
                if (($409 | 0) < 4) {
                 var $dir_088_i = $409;
                 var $ar_089_i = $ar_2_i;
                } else {
                 break;
                }
               }
               if ($ar_2_i << 16 >> 16 == 0) {
                var $dir1_090_i = 0;
                var $418 = $343;
                var $417 = $337;
                break;
               }
               HEAP16[$buf_sroa_0_0_load179183_ + ($329 << 1) >> 1] = 0;
               var $415 = HEAP32[$38 >> 2];
               if (($415 | 0) > 0) {
                var $325 = $415;
               } else {
                var $count_0_ph96_i = $count_0_ph97_i;
                break L617;
               }
              }
              while (1) {
               var $417;
               var $418;
               var $dir1_090_i;
               var $422 = ($418 & 16777215) >>> (($dir1_090_i * 6 & -1) >>> 0) & 63;
               do {
                if (($422 | 0) == 63) {
                 var $524 = $417;
                } else {
                 var $427 = HEAP32[9712 + ($dir1_090_i << 2) >> 2] + $338 | 0;
                 var $430 = HEAP32[9696 + ($dir1_090_i << 2) >> 2] + $339 | 0;
                 var $432 = Math.imul($430, $243) + $427 | 0;
                 var $438 = (HEAP32[HEAP32[$66 >> 2] + ($432 << 2) >> 2] & 16777215) + $422 | 0;
                 if ((HEAP8[HEAP32[$68 >> 2] + $438 | 0] | 0) != $240 << 24 >> 24) {
                  var $524 = $417;
                  break;
                 }
                 if (HEAPU16[HEAP32[$67 >> 2] + ($438 << 1) >> 1] >>> 0 < $phitmp_i_ >>> 0) {
                  var $524 = $417;
                  break;
                 }
                 var $450 = $buf_sroa_0_0_load179183_ + ($438 << 1) | 0;
                 if ((HEAP16[$450 >> 1] | 0) != 0) {
                  var $524 = $417;
                  break;
                 }
                 HEAP16[$450 >> 1] = $regionId_3208;
                 HEAP16[$_186 + ($438 << 1) >> 1] = 0;
                 var $455 = HEAP32[$38 >> 2];
                 var $456 = $455 + 1 | 0;
                 var $457 = HEAP32[$39 >> 2];
                 if (($457 | 0) < ($456 | 0)) {
                  if (($457 | 0) == 0) {
                   HEAP32[$39 >> 2] = $456;
                   var $_lcssa_i75 = $456;
                  } else {
                   var $461 = $457;
                   while (1) {
                    var $461;
                    var $462 = $461 << 1;
                    if (($462 | 0) < ($456 | 0)) {
                     var $461 = $462;
                    } else {
                     break;
                    }
                   }
                   HEAP32[$39 >> 2] = $462;
                   var $_lcssa_i75 = $462;
                  }
                  var $_lcssa_i75;
                  var $466 = _malloc($_lcssa_i75 << 2);
                  var $467 = $466;
                  var $_pre128 = HEAP32[$37 >> 2];
                  if (!(($455 | 0) == 0 | ($466 | 0) == 0)) {
                   var $471 = $_pre128;
                   var $472 = $455 << 2;
                   _memcpy($466, $471, $472) | 0;
                  }
                  if (($_pre128 | 0) != 0) {
                   _free($_pre128);
                  }
                  HEAP32[$37 >> 2] = $467;
                  var $477 = $467;
                  var $476 = $_lcssa_i75;
                 } else {
                  var $477 = HEAP32[$37 >> 2];
                  var $476 = $457;
                 }
                 var $476;
                 var $477;
                 HEAP32[$38 >> 2] = $456;
                 HEAP32[$477 + ($455 << 2) >> 2] = $427;
                 var $479 = $455 + 2 | 0;
                 if (($476 | 0) < ($479 | 0)) {
                  if (($476 | 0) == 0) {
                   HEAP32[$39 >> 2] = $479;
                   var $_lcssa_i88 = $479;
                  } else {
                   var $483 = $476;
                   while (1) {
                    var $483;
                    var $484 = $483 << 1;
                    if (($484 | 0) < ($479 | 0)) {
                     var $483 = $484;
                    } else {
                     break;
                    }
                   }
                   HEAP32[$39 >> 2] = $484;
                   var $_lcssa_i88 = $484;
                  }
                  var $_lcssa_i88;
                  var $488 = _malloc($_lcssa_i88 << 2);
                  var $489 = $488;
                  if (!(($456 | 0) == 0 | ($488 | 0) == 0)) {
                   var $493 = $477;
                   var $494 = $456 << 2;
                   _memcpy($488, $493, $494) | 0;
                  }
                  if (($477 | 0) != 0) {
                   _free($477);
                  }
                  HEAP32[$37 >> 2] = $489;
                  var $498 = $489;
                 } else {
                  var $498 = $477;
                 }
                 var $498;
                 HEAP32[$38 >> 2] = $479;
                 HEAP32[$498 + ($456 << 2) >> 2] = $430;
                 var $500 = HEAP32[$38 >> 2];
                 var $501 = $500 + 1 | 0;
                 var $502 = HEAP32[$39 >> 2];
                 if (($502 | 0) < ($501 | 0)) {
                  if (($502 | 0) == 0) {
                   HEAP32[$39 >> 2] = $501;
                   var $_lcssa_i101 = $501;
                  } else {
                   var $506 = $502;
                   while (1) {
                    var $506;
                    var $507 = $506 << 1;
                    if (($507 | 0) < ($501 | 0)) {
                     var $506 = $507;
                    } else {
                     break;
                    }
                   }
                   HEAP32[$39 >> 2] = $507;
                   var $_lcssa_i101 = $507;
                  }
                  var $_lcssa_i101;
                  var $511 = _malloc($_lcssa_i101 << 2);
                  var $512 = $511;
                  var $_pre129 = HEAP32[$37 >> 2];
                  if (!(($500 | 0) == 0 | ($511 | 0) == 0)) {
                   var $516 = $_pre129;
                   var $517 = $500 << 2;
                   _memcpy($511, $516, $517) | 0;
                  }
                  if (($_pre129 | 0) != 0) {
                   _free($_pre129);
                  }
                  HEAP32[$37 >> 2] = $512;
                  var $521 = $512;
                 } else {
                  var $521 = HEAP32[$37 >> 2];
                 }
                 var $521;
                 HEAP32[$38 >> 2] = $501;
                 HEAP32[$521 + ($500 << 2) >> 2] = $438;
                 var $524 = $501;
                }
               } while (0);
               var $524;
               var $525 = $dir1_090_i + 1 | 0;
               if (($525 | 0) >= 4) {
                break;
               }
               var $dir1_090_i = $525;
               var $418 = HEAP32[$342 >> 2];
               var $417 = $524;
              }
              var $322 = $count_0_ph97_i + 1 | 0;
              if (($524 | 0) > 0) {
               var $count_0_ph97_i = $322;
               var $324 = $524;
              } else {
               var $count_0_ph96_i = $322;
               break;
              }
             }
            } else {
             var $count_0_ph96_i = 0;
            }
           } while (0);
           var $count_0_ph96_i;
           var $regionId_4 = (($count_0_ph96_i | 0) > 0) + $regionId_3208 & 65535;
          }
         } while (0);
         var $regionId_4;
         var $530 = $i_0209 + 1 | 0;
         if (($530 | 0) < ($227 | 0)) {
          var $regionId_3208 = $regionId_4;
          var $i_0209 = $530;
         } else {
          var $regionId_3_lcssa = $regionId_4;
          break;
         }
        }
       }
       var $regionId_3_lcssa;
       var $532 = $x_0214 + 1 | 0;
       if (($532 | 0) < ($11 | 0)) {
        var $regionId_2213 = $regionId_3_lcssa;
        var $x_0214 = $532;
       } else {
        var $regionId_2_lcssa = $regionId_3_lcssa;
        break;
       }
      }
     } else {
      var $regionId_2_lcssa = $regionId_1221;
     }
     var $regionId_2_lcssa;
     var $534 = $y_0222 + 1 | 0;
     if (($534 | 0) < ($13 | 0)) {
      var $regionId_1221 = $regionId_2_lcssa;
      var $y_0222 = $534;
     } else {
      var $regionId_1_lcssa = $regionId_2_lcssa;
      break;
     }
    }
   } else {
    var $regionId_1_lcssa = $regionId_0247;
   }
   var $regionId_1_lcssa;
   if ((HEAP8[$1] & 1) != 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$63 >> 2] + 24 >> 2]]($ctx, 23);
   }
   if ($_ << 16 >> 16 == 0) {
    var $buf_sroa_0_0_load179183_lcssa = $buf_sroa_0_0_load179183_;
    var $_lcssa230 = $_186;
    var $_lcssa234 = $_buf_sroa_0_0_load179183;
    var $_lcssa238 = $_187;
    var $regionId_0_lcssa = $regionId_1_lcssa;
    break;
   } else {
    var $buf_sroa_0_0_load179183245 = $buf_sroa_0_0_load179183_;
    var $190 = $_186;
    var $189 = $_buf_sroa_0_0_load179183;
    var $188 = $_187;
    var $level_0246 = $_;
    var $regionId_0247 = $regionId_1_lcssa;
   }
  }
 }
 var $regionId_0_lcssa;
 var $_lcssa238;
 var $_lcssa234;
 var $_lcssa230;
 var $buf_sroa_0_0_load179183_lcssa;
 var $buf_sroa_0_0_load179183_188 = (__ZL13expandRegionsitR20rcCompactHeightfieldPtS1_S1_S1_R10rcIntArray(64, 0, $chf, $buf_sroa_0_0_load179183_lcssa, $_lcssa230, $_lcssa234, $_lcssa238, $stack) | 0) == ($buf_sroa_0_0_load179183_lcssa | 0) ? $buf_sroa_0_0_load179183_lcssa : $_lcssa234;
 var $546 = HEAP8[$1];
 if (($546 & 1) == 0) {
  var $554 = $546;
 } else {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 21);
  var $554 = HEAP8[$1];
 }
 var $554;
 if (($554 & 1) != 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 20 >> 2]]($ctx, 24);
 }
 var $562 = $chf + 26 | 0;
 HEAP16[$562 >> 1] = $regionId_0_lcssa;
 do {
  if (__ZL18filterSmallRegionsP9rcContextiiRtR20rcCompactHeightfieldPt($ctx, $minRegionArea, $mergeRegionArea, $562, $chf, $buf_sroa_0_0_load179183_188)) {
   if ((HEAP8[$1] & 1) != 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 24);
   }
   if ((HEAP32[$14 >> 2] | 0) > 0) {
    var $576 = $chf + 64 | 0;
    var $i1_0189 = 0;
    while (1) {
     var $i1_0189;
     HEAP16[HEAP32[$576 >> 2] + ($i1_0189 << 3) + 2 >> 1] = HEAP16[$buf_sroa_0_0_load179183_188 + ($i1_0189 << 1) >> 1];
     var $581 = $i1_0189 + 1 | 0;
     if (($581 | 0) < (HEAP32[$14 >> 2] | 0)) {
      var $i1_0189 = $581;
     } else {
      break;
     }
    }
   }
   if ((HEAP8[$1] & 1) == 0) {
    var $_0 = 1;
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$ctx >> 2] + 24 >> 2]]($ctx, 20);
   var $_0 = 1;
  } else {
   var $_0 = 0;
  }
 } while (0);
 var $_0;
 if (($47 | 0) != 0) {
  _free($47);
 }
 var $594 = HEAP32[$37 >> 2];
 if (($594 | 0) != 0) {
  _free($594);
 }
 _free($17);
 var $_1114 = $_0;
 var $_1114;
 STACKTOP = sp;
 return $_1114;
}
function __ZL13expandRegionsitR20rcCompactHeightfieldPtS1_S1_S1_R10rcIntArray($maxIter, $level, $chf, $srcReg, $srcDist, $dstReg, $dstDist, $stack) {
 var label = 0;
 var $2 = HEAP32[$chf >> 2];
 var $4 = HEAP32[$chf + 4 >> 2];
 var $5 = $stack + 8 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 | 0) < 0) {
  var $8 = $6;
  while (1) {
   var $8;
   var $9 = $8 << 1;
   if (($9 | 0) < 0) {
    var $8 = $9;
   } else {
    break;
   }
  }
  HEAP32[$5 >> 2] = $9;
  var $13 = _malloc($8 << 3);
  var $15 = $stack + 4 | 0;
  var $16 = HEAP32[$15 >> 2];
  var $_pre_i = $stack | 0;
  if (!(($16 | 0) == 0 | ($13 | 0) == 0)) {
   var $21 = HEAP32[$_pre_i >> 2];
   var $22 = $16 << 2;
   _memcpy($13, $21, $22) | 0;
  }
  var $23 = HEAP32[$_pre_i >> 2];
  if (($23 | 0) != 0) {
   _free($23);
  }
  HEAP32[$_pre_i >> 2] = $13;
  var $_pre_phi12_i = $15;
 } else {
  var $_pre_phi12_i = $stack + 4 | 0;
 }
 var $_pre_phi12_i;
 HEAP32[$_pre_phi12_i >> 2] = 0;
 if (($4 | 0) > 0) {
  var $28 = ($2 | 0) > 0;
  var $29 = $chf + 60 | 0;
  var $30 = $chf + 68 | 0;
  var $31 = $chf + 72 | 0;
  var $32 = $stack + 4 | 0;
  var $33 = $stack | 0;
  var $y_0104 = 0;
  while (1) {
   var $y_0104;
   if ($28) {
    var $34 = Math.imul($y_0104, $2) | 0;
    var $x_0100 = 0;
    while (1) {
     var $x_0100;
     var $42 = HEAP32[HEAP32[$29 >> 2] + ($x_0100 + $34 << 2) >> 2];
     var $43 = $42 & 16777215;
     var $44 = $42 >>> 24;
     var $45 = $43 + $44 | 0;
     if (($44 | 0) != 0) {
      var $i_095 = $43;
      while (1) {
       var $i_095;
       do {
        if (HEAPU16[HEAP32[$30 >> 2] + ($i_095 << 1) >> 1] >= ($level & 65535)) {
         if ((HEAP16[$srcReg + ($i_095 << 1) >> 1] | 0) != 0) {
          break;
         }
         if ((HEAP8[HEAP32[$31 >> 2] + $i_095 | 0] | 0) == 0) {
          break;
         }
         var $61 = HEAP32[$32 >> 2];
         var $62 = $61 + 1 | 0;
         var $63 = HEAP32[$5 >> 2];
         if (($63 | 0) < ($62 | 0)) {
          if (($63 | 0) == 0) {
           HEAP32[$5 >> 2] = $62;
           var $_lcssa_i7 = $62;
          } else {
           var $67 = $63;
           while (1) {
            var $67;
            var $68 = $67 << 1;
            if (($68 | 0) < ($62 | 0)) {
             var $67 = $68;
            } else {
             break;
            }
           }
           HEAP32[$5 >> 2] = $68;
           var $_lcssa_i7 = $68;
          }
          var $_lcssa_i7;
          var $72 = _malloc($_lcssa_i7 << 2);
          var $73 = $72;
          var $74 = HEAP32[$32 >> 2];
          if (!(($74 | 0) == 0 | ($72 | 0) == 0)) {
           var $79 = HEAP32[$33 >> 2];
           var $80 = $74 << 2;
           _memcpy($72, $79, $80) | 0;
          }
          var $81 = HEAP32[$33 >> 2];
          if (($81 | 0) != 0) {
           _free($81);
          }
          HEAP32[$33 >> 2] = $73;
          var $85 = $73;
         } else {
          var $85 = HEAP32[$33 >> 2];
         }
         var $85;
         HEAP32[$32 >> 2] = $62;
         HEAP32[$85 + ($61 << 2) >> 2] = $x_0100;
         var $87 = HEAP32[$32 >> 2];
         var $88 = $87 + 1 | 0;
         var $89 = HEAP32[$5 >> 2];
         if (($89 | 0) < ($88 | 0)) {
          if (($89 | 0) == 0) {
           HEAP32[$5 >> 2] = $88;
           var $_lcssa_i20 = $88;
          } else {
           var $93 = $89;
           while (1) {
            var $93;
            var $94 = $93 << 1;
            if (($94 | 0) < ($88 | 0)) {
             var $93 = $94;
            } else {
             break;
            }
           }
           HEAP32[$5 >> 2] = $94;
           var $_lcssa_i20 = $94;
          }
          var $_lcssa_i20;
          var $98 = _malloc($_lcssa_i20 << 2);
          var $99 = $98;
          var $100 = HEAP32[$32 >> 2];
          if (!(($100 | 0) == 0 | ($98 | 0) == 0)) {
           var $105 = HEAP32[$33 >> 2];
           var $106 = $100 << 2;
           _memcpy($98, $105, $106) | 0;
          }
          var $107 = HEAP32[$33 >> 2];
          if (($107 | 0) != 0) {
           _free($107);
          }
          HEAP32[$33 >> 2] = $99;
          var $111 = $99;
         } else {
          var $111 = HEAP32[$33 >> 2];
         }
         var $111;
         HEAP32[$32 >> 2] = $88;
         HEAP32[$111 + ($87 << 2) >> 2] = $y_0104;
         var $113 = HEAP32[$32 >> 2];
         var $114 = $113 + 1 | 0;
         var $115 = HEAP32[$5 >> 2];
         if (($115 | 0) < ($114 | 0)) {
          if (($115 | 0) == 0) {
           HEAP32[$5 >> 2] = $114;
           var $_lcssa_i33 = $114;
          } else {
           var $119 = $115;
           while (1) {
            var $119;
            var $120 = $119 << 1;
            if (($120 | 0) < ($114 | 0)) {
             var $119 = $120;
            } else {
             break;
            }
           }
           HEAP32[$5 >> 2] = $120;
           var $_lcssa_i33 = $120;
          }
          var $_lcssa_i33;
          var $124 = _malloc($_lcssa_i33 << 2);
          var $125 = $124;
          var $126 = HEAP32[$32 >> 2];
          if (!(($126 | 0) == 0 | ($124 | 0) == 0)) {
           var $131 = HEAP32[$33 >> 2];
           var $132 = $126 << 2;
           _memcpy($124, $131, $132) | 0;
          }
          var $133 = HEAP32[$33 >> 2];
          if (($133 | 0) != 0) {
           _free($133);
          }
          HEAP32[$33 >> 2] = $125;
          var $137 = $125;
         } else {
          var $137 = HEAP32[$33 >> 2];
         }
         var $137;
         HEAP32[$32 >> 2] = $114;
         HEAP32[$137 + ($113 << 2) >> 2] = $i_095;
        }
       } while (0);
       var $140 = $i_095 + 1 | 0;
       if (($140 | 0) < ($45 | 0)) {
        var $i_095 = $140;
       } else {
        break;
       }
      }
     }
     var $142 = $x_0100 + 1 | 0;
     if (($142 | 0) < ($2 | 0)) {
      var $x_0100 = $142;
     } else {
      break;
     }
    }
   }
   var $144 = $y_0104 + 1 | 0;
   if (($144 | 0) < ($4 | 0)) {
    var $y_0104 = $144;
   } else {
    var $_pre_phi = $32;
    var $_pre_phi120 = $33;
    var $_pre_phi122 = $31;
    var $_pre_phi124 = $29;
    break;
   }
  }
 } else {
  var $_pre_phi = $stack + 4 | 0;
  var $_pre_phi120 = $stack | 0;
  var $_pre_phi122 = $chf + 72 | 0;
  var $_pre_phi124 = $chf + 60 | 0;
 }
 var $_pre_phi124;
 var $_pre_phi122;
 var $_pre_phi120;
 var $_pre_phi;
 var $35 = $chf + 8 | 0;
 var $36 = $level << 16 >> 16 == 0;
 var $37 = $chf + 64 | 0;
 var $iter_0_ph = 0;
 var $dstDist80_ph = $dstDist;
 var $dstReg81_ph = $dstReg;
 var $srcDist82_ph = $srcDist;
 var $srcReg83_ph = $srcReg;
 var $_pre = HEAP32[$_pre_phi >> 2];
 L811 : while (1) {
  var $_pre;
  var $srcReg83_ph;
  var $srcDist82_ph;
  var $dstReg81_ph;
  var $dstDist80_ph;
  var $iter_0_ph;
  var $dstDist80 = $dstDist80_ph;
  var $dstReg81 = $dstReg81_ph;
  var $srcDist82 = $srcDist82_ph;
  var $srcReg83 = $srcReg83_ph;
  var $147 = $_pre;
  while (1) {
   var $147;
   var $srcReg83;
   var $srcDist82;
   var $dstReg81;
   var $dstDist80;
   if (($147 | 0) <= 0) {
    var $srcReg84 = $srcReg83;
    label = 580;
    break L811;
   }
   var $150 = $dstReg81;
   var $151 = $srcReg83;
   var $153 = HEAP32[$35 >> 2] << 1;
   _memcpy($150, $151, $153) | 0;
   var $154 = $dstDist80;
   var $155 = $srcDist82;
   var $157 = HEAP32[$35 >> 2] << 1;
   _memcpy($154, $155, $157) | 0;
   var $158 = HEAP32[$_pre_phi >> 2];
   if (($158 | 0) > 0) {
    var $j_088 = 0;
    var $failed_089 = 0;
    var $160 = $158;
    while (1) {
     var $160;
     var $failed_089;
     var $j_088;
     var $161 = HEAP32[$_pre_phi120 >> 2];
     var $163 = HEAP32[$161 + ($j_088 << 2) >> 2];
     var $166 = HEAP32[$161 + ($j_088 + 1 << 2) >> 2];
     var $168 = $161 + ($j_088 + 2 << 2) | 0;
     var $169 = HEAP32[$168 >> 2];
     do {
      if (($169 | 0) < 0) {
       var $failed_1 = $failed_089 + 1 | 0;
       var $231 = $160;
      } else {
       var $176 = HEAP32[$_pre_phi122 >> 2];
       var $178 = HEAP8[$176 + $169 | 0];
       var $183 = HEAP32[HEAP32[$37 >> 2] + ($169 << 3) + 4 >> 2] & 16777215;
       var $r_085 = HEAP16[$srcReg83 + ($169 << 1) >> 1];
       var $d2_086 = -1;
       var $dir_087 = 0;
       while (1) {
        var $dir_087;
        var $d2_086;
        var $r_085;
        var $187 = $183 >>> (($dir_087 * 6 & -1) >>> 0) & 63;
        do {
         if (($187 | 0) == 63) {
          var $d2_1 = $d2_086;
          var $r_1 = $r_085;
         } else {
          var $192 = HEAP32[9712 + ($dir_087 << 2) >> 2] + $163 | 0;
          var $197 = $192 + Math.imul(HEAP32[9696 + ($dir_087 << 2) >> 2] + $166 | 0, $2) | 0;
          var $203 = (HEAP32[HEAP32[$_pre_phi124 >> 2] + ($197 << 2) >> 2] & 16777215) + $187 | 0;
          if ((HEAP8[$176 + $203 | 0] | 0) != $178 << 24 >> 24) {
           var $d2_1 = $d2_086;
           var $r_1 = $r_085;
           break;
          }
          var $209 = HEAP16[$srcReg83 + ($203 << 1) >> 1];
          if ($209 << 16 >> 16 <= 0) {
           var $d2_1 = $d2_086;
           var $r_1 = $r_085;
           break;
          }
          var $215 = HEAPU16[$srcDist82 + ($203 << 1) >> 1] + 2 | 0;
          if ($215 >>> 0 >= ($d2_086 & 65535) >>> 0) {
           var $d2_1 = $d2_086;
           var $r_1 = $r_085;
           break;
          }
          var $d2_1 = $215 & 65535;
          var $r_1 = $209;
         }
        } while (0);
        var $r_1;
        var $d2_1;
        var $221 = $dir_087 + 1 | 0;
        if (($221 | 0) < 4) {
         var $r_085 = $r_1;
         var $d2_086 = $d2_1;
         var $dir_087 = $221;
        } else {
         break;
        }
       }
       if ($r_1 << 16 >> 16 == 0) {
        var $failed_1 = $failed_089 + 1 | 0;
        var $231 = $160;
        break;
       } else {
        HEAP32[$168 >> 2] = -1;
        HEAP16[$dstReg81 + ($169 << 1) >> 1] = $r_1;
        HEAP16[$dstDist80 + ($169 << 1) >> 1] = $d2_1;
        var $failed_1 = $failed_089;
        var $231 = HEAP32[$_pre_phi >> 2];
        break;
       }
      }
     } while (0);
     var $231;
     var $failed_1;
     var $232 = $j_088 + 3 | 0;
     if (($232 | 0) < ($231 | 0)) {
      var $j_088 = $232;
      var $failed_089 = $failed_1;
      var $160 = $231;
     } else {
      var $failed_0_lcssa = $failed_1;
      var $234 = $231;
      break;
     }
    }
   } else {
    var $failed_0_lcssa = 0;
    var $234 = $158;
   }
   var $234;
   var $failed_0_lcssa;
   if (($failed_0_lcssa * 3 & -1 | 0) == ($234 | 0)) {
    var $srcReg84 = $dstReg81;
    label = 581;
    break L811;
   }
   if ($36) {
    var $srcReg83$phi = $dstReg81;
    var $srcDist82$phi = $dstDist80;
    var $dstDist80 = $srcDist82;
    var $dstReg81 = $srcReg83;
    var $147 = $234;
    var $srcReg83 = $srcReg83$phi;
    var $srcDist82 = $srcDist82$phi;
   } else {
    break;
   }
  }
  var $239 = $iter_0_ph + 1 | 0;
  if (($239 | 0) < ($maxIter | 0)) {
   var $iter_0_ph = $239;
   var $dstDist80_ph = $srcDist82;
   var $dstReg81_ph = $srcReg83;
   var $srcDist82_ph = $dstDist80;
   var $srcReg83_ph = $dstReg81;
   var $_pre = $234;
  } else {
   var $srcReg84 = $dstReg81;
   label = 582;
   break;
  }
 }
 if (label == 580) {
  var $srcReg84;
  return $srcReg84;
 } else if (label == 581) {
  var $srcReg84;
  return $srcReg84;
 } else if (label == 582) {
  var $srcReg84;
  return $srcReg84;
 }
}
function __Z21rcCreateChunkyTriMeshPKfPKiiiP15rcChunkyTriMesh($verts, $tris, $ntris, $cm) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $curTri = sp;
 var $curNode = sp + 8;
 var $3 = (($ntris + 255 | 0) / 256 & -1) << 2;
 var $4$0 = _llvm_umul_with_overflow_i32($3, 24);
 var $7 = tempRet0 ? -1 : $4$0;
 var $_size_i = ($7 | 0) == 0 ? 1 : $7;
 while (1) {
  var $10 = _malloc($_size_i);
  if (($10 | 0) != 0) {
   break;
  }
  var $13 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($13 | 0) == 0) {
   label = 592;
   break;
  }
  FUNCTION_TABLE[$13]();
 }
 if (label == 592) {
  var $23 = ___cxa_allocate_exception(4);
  HEAP32[$23 >> 2] = 9744;
  ___cxa_throw($23, 15960, 74);
 }
 var $34 = $10;
 var $35 = $cm | 0;
 HEAP32[$35 >> 2] = $34;
 var $37$0 = _llvm_umul_with_overflow_i32($ntris * 3 & -1, 4);
 var $40 = tempRet0 ? -1 : $37$0;
 var $_size_i3 = ($40 | 0) == 0 ? 1 : $40;
 while (1) {
  var $43 = _malloc($_size_i3);
  if (($43 | 0) != 0) {
   break;
  }
  var $46 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($46 | 0) == 0) {
   label = 607;
   break;
  }
  FUNCTION_TABLE[$46]();
 }
 if (label == 607) {
  var $56 = ___cxa_allocate_exception(4);
  HEAP32[$56 >> 2] = 9744;
  ___cxa_throw($56, 15960, 74);
 }
 var $67 = $43;
 HEAP32[$cm + 8 >> 2] = $67;
 HEAP32[$cm + 12 >> 2] = $ntris;
 var $70$0 = _llvm_umul_with_overflow_i32($ntris, 20);
 var $73 = tempRet0 ? -1 : $70$0;
 var $_size_i13 = ($73 | 0) == 0 ? 1 : $73;
 while (1) {
  var $76 = _malloc($_size_i13);
  if (($76 | 0) != 0) {
   break;
  }
  var $79 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($79 | 0) == 0) {
   label = 622;
   break;
  }
  FUNCTION_TABLE[$79]();
 }
 if (label == 622) {
  var $89 = ___cxa_allocate_exception(4);
  HEAP32[$89 >> 2] = 9744;
  ___cxa_throw($89, 15960, 74);
 }
 var $99 = $76;
 if (($ntris | 0) > 0) {
  var $i_067 = 0;
  while (1) {
   var $i_067;
   var $101 = $i_067 * 3 & -1;
   HEAP32[$99 + ($i_067 * 20 & -1) + 16 >> 2] = $i_067;
   var $105 = HEAP32[$tris + ($101 << 2) >> 2] * 3 & -1;
   var $107 = HEAPF32[$verts + ($105 << 2) >> 2];
   var $108 = $99 + ($i_067 * 20 & -1) + 8 | 0;
   HEAPF32[$108 >> 2] = $107;
   var $109 = $99 + ($i_067 * 20 & -1) | 0;
   HEAPF32[$109 >> 2] = $107;
   var $112 = HEAPF32[$verts + ($105 + 2 << 2) >> 2];
   var $113 = $99 + ($i_067 * 20 & -1) + 12 | 0;
   HEAPF32[$113 >> 2] = $112;
   var $114 = $99 + ($i_067 * 20 & -1) + 4 | 0;
   HEAPF32[$114 >> 2] = $112;
   var $117 = HEAP32[$tris + ($101 + 1 << 2) >> 2] * 3 & -1;
   var $119 = HEAPF32[$verts + ($117 << 2) >> 2];
   if ($119 < $107) {
    HEAPF32[$109 >> 2] = $119;
    var $123 = $119;
   } else {
    var $123 = $107;
   }
   var $123;
   var $125 = HEAPF32[$verts + ($117 + 2 << 2) >> 2];
   if ($125 < $112) {
    HEAPF32[$114 >> 2] = $125;
    var $129 = $125;
   } else {
    var $129 = $112;
   }
   var $129;
   if ($119 > $107) {
    HEAPF32[$108 >> 2] = $119;
    var $133 = $119;
   } else {
    var $133 = $107;
   }
   var $133;
   if ($125 > $112) {
    HEAPF32[$113 >> 2] = $125;
    var $137 = $125;
   } else {
    var $137 = $112;
   }
   var $137;
   var $140 = HEAP32[$tris + ($101 + 2 << 2) >> 2] * 3 & -1;
   var $142 = HEAPF32[$verts + ($140 << 2) >> 2];
   if ($142 < $123) {
    HEAPF32[$109 >> 2] = $142;
   }
   var $165 = HEAPF32[$verts + ($140 + 2 << 2) >> 2];
   if ($165 < $129) {
    HEAPF32[$114 >> 2] = $165;
   }
   if ($142 > $133) {
    HEAPF32[$108 >> 2] = $142;
   }
   if ($165 > $137) {
    HEAPF32[$113 >> 2] = $165;
   }
   var $175 = $i_067 + 1 | 0;
   if (($175 | 0) < ($ntris | 0)) {
    var $i_067 = $175;
   } else {
    break;
   }
  }
 }
 HEAP32[$curTri >> 2] = 0;
 HEAP32[$curNode >> 2] = 0;
 __ZL9subdivideP10BoundsItemiiiiRiP19rcChunkyTriMeshNodeiS1_PiPKi($99, 0, $ntris, $curNode, $34, $3, $curTri, $67, $tris);
 _free($76);
 var $144 = HEAP32[$curNode >> 2];
 HEAP32[$cm + 4 >> 2] = $144;
 var $146 = $cm + 16 | 0;
 HEAP32[$146 >> 2] = 0;
 if (($144 | 0) <= 0) {
  STACKTOP = sp;
  return 1;
 }
 var $_pre = HEAP32[$35 >> 2];
 var $i1_065 = 0;
 var $149 = 0;
 while (1) {
  var $149;
  var $i1_065;
  do {
   if ((HEAP32[$_pre + ($i1_065 * 24 & -1) + 16 >> 2] | 0) > -1) {
    var $155 = HEAP32[$_pre + ($i1_065 * 24 & -1) + 20 >> 2];
    if (($155 | 0) <= ($149 | 0)) {
     var $159 = $149;
     break;
    }
    HEAP32[$146 >> 2] = $155;
    var $159 = $155;
   } else {
    var $159 = $149;
   }
  } while (0);
  var $159;
  var $160 = $i1_065 + 1 | 0;
  if (($160 | 0) < ($144 | 0)) {
   var $i1_065 = $160;
   var $149 = $159;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return 1;
}
function __ZN11DebugDrawGL9depthMaskEb($this, $state) {
 return;
}
function __ZN11DebugDrawGL7textureEb($this, $state) {
 return;
}
function __ZL12compareItemXPKvS0_275($va, $vb) {
 var $2 = HEAPF32[$va >> 2];
 var $4 = HEAPF32[$vb >> 2];
 if ($2 < $4) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $_0 = $2 > $4 | 0;
 var $_0;
 return $_0;
}
function __ZL12compareItemYPKvS0_276($va, $vb) {
 var $3 = HEAPF32[$va + 4 >> 2];
 var $6 = HEAPF32[$vb + 4 >> 2];
 if ($3 < $6) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $_0 = $3 > $6 | 0;
 var $_0;
 return $_0;
}
function __ZL9subdivideP10BoundsItemiiiiRiP19rcChunkyTriMeshNodeiS1_PiPKi($items, $imin, $imax, $curNode, $nodes, $maxNodes, $curTri, $outTris, $inTris) {
 var $1 = $imax - $imin | 0;
 var $2 = HEAP32[$curNode >> 2];
 if (($2 | 0) > ($maxNodes | 0)) {
  return;
 }
 HEAP32[$curNode >> 2] = $2 + 1;
 var $6 = ($1 | 0) > 256;
 var $7 = $nodes + ($2 * 24 & -1) | 0;
 var $8 = $nodes + ($2 * 24 & -1) + 8 | 0;
 var $10 = HEAPF32[$items + ($imin * 20 & -1) >> 2];
 HEAPF32[$7 >> 2] = $10;
 var $12 = HEAPF32[$items + ($imin * 20 & -1) + 4 >> 2];
 var $13 = $nodes + ($2 * 24 & -1) + 4 | 0;
 HEAPF32[$13 >> 2] = $12;
 var $15 = HEAPF32[$items + ($imin * 20 & -1) + 8 >> 2];
 HEAPF32[$8 >> 2] = $15;
 var $17 = HEAPF32[$items + ($imin * 20 & -1) + 12 >> 2];
 var $18 = $nodes + ($2 * 24 & -1) + 12 | 0;
 HEAPF32[$18 >> 2] = $17;
 var $i_01_i = $imin + 1 | 0;
 if (($i_01_i | 0) < ($imax | 0)) {
  var $i_02_i = $i_01_i;
  var $23 = $10;
  var $22 = $12;
  var $21 = $15;
  var $20 = $17;
  while (1) {
   var $20;
   var $21;
   var $22;
   var $23;
   var $i_02_i;
   var $25 = HEAPF32[$items + ($i_02_i * 20 & -1) >> 2];
   if ($25 < $23) {
    HEAPF32[$7 >> 2] = $25;
    var $28 = $25;
   } else {
    var $28 = $23;
   }
   var $28;
   var $30 = HEAPF32[$items + ($i_02_i * 20 & -1) + 4 >> 2];
   if ($30 < $22) {
    HEAPF32[$13 >> 2] = $30;
    var $33 = $30;
   } else {
    var $33 = $22;
   }
   var $33;
   var $35 = HEAPF32[$items + ($i_02_i * 20 & -1) + 8 >> 2];
   if ($35 > $21) {
    HEAPF32[$8 >> 2] = $35;
    var $38 = $35;
   } else {
    var $38 = $21;
   }
   var $38;
   var $40 = HEAPF32[$items + ($i_02_i * 20 & -1) + 12 >> 2];
   if ($40 > $20) {
    HEAPF32[$18 >> 2] = $40;
    var $42 = $40;
   } else {
    var $42 = $20;
   }
   var $42;
   var $i_0_i = $i_02_i + 1 | 0;
   if (($i_0_i | 0) < ($imax | 0)) {
    var $i_02_i = $i_0_i;
    var $23 = $28;
    var $22 = $33;
    var $21 = $38;
    var $20 = $42;
   } else {
    var $48 = $38;
    var $47 = $28;
    var $46 = $42;
    var $45 = $33;
    break;
   }
  }
 } else {
  var $48 = $15;
  var $47 = $10;
  var $46 = $17;
  var $45 = $12;
 }
 var $45;
 var $46;
 var $47;
 var $48;
 if ($6) {
  var $75 = $46 - $45 > $48 - $47 | 0;
  if (($75 | 0) == 0) {
   _qsort($items + ($imin * 20 & -1) | 0, $1, 20, 324);
  } else if (($75 | 0) == 1) {
   _qsort($items + ($imin * 20 & -1) | 0, $1, 20, 554);
  }
  var $84 = (($1 | 0) / 2 & -1) + $imin | 0;
  __ZL9subdivideP10BoundsItemiiiiRiP19rcChunkyTriMeshNodeiS1_PiPKi($items, $imin, $84, $curNode, $nodes, $maxNodes, $curTri, $outTris, $inTris);
  __ZL9subdivideP10BoundsItemiiiiRiP19rcChunkyTriMeshNodeiS1_PiPKi($items, $84, $imax, $curNode, $nodes, $maxNodes, $curTri, $outTris, $inTris);
  HEAP32[$nodes + ($2 * 24 & -1) + 16 >> 2] = $2 - HEAP32[$curNode >> 2];
  return;
 } else {
  HEAP32[$nodes + ($2 * 24 & -1) + 16 >> 2] = HEAP32[$curTri >> 2];
  HEAP32[$nodes + ($2 * 24 & -1) + 20 >> 2] = $1;
  if (($imin | 0) < ($imax | 0)) {
   var $i_04 = $imin;
  } else {
   return;
  }
  while (1) {
   var $i_04;
   var $56 = HEAP32[$items + ($i_04 * 20 & -1) + 16 >> 2] * 3 & -1;
   var $58 = HEAP32[$curTri >> 2];
   var $59 = $58 * 3 & -1;
   HEAP32[$curTri >> 2] = $58 + 1;
   HEAP32[$outTris + ($59 << 2) >> 2] = HEAP32[$inTris + ($56 << 2) >> 2];
   HEAP32[$outTris + ($59 + 1 << 2) >> 2] = HEAP32[$inTris + ($56 + 1 << 2) >> 2];
   HEAP32[$outTris + ($59 + 2 << 2) >> 2] = HEAP32[$inTris + ($56 + 2 << 2) >> 2];
   var $69 = $i_04 + 1 | 0;
   if (($69 | 0) < ($imax | 0)) {
    var $i_04 = $69;
   } else {
    break;
   }
  }
  return;
 }
}
function __ZN11DebugDrawGL5beginE21duDebugDrawPrimitivesf($this, $prim, $size) {
 if (($prim | 0) == 0) {
  _emscripten_run_script(7056);
 } else if (($prim | 0) == 1) {
  _emscripten_run_script(6184);
 } else if (($prim | 0) == 2) {
  _emscripten_run_script(5256);
 } else if (($prim | 0) == 3) {
  _emscripten_run_script(4016);
 }
 return;
}
function __ZN11DebugDrawGL6vertexEPKfj($this, $pos, $color) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 var $1 = sp | 0;
 var $6 = HEAPF32[$pos + 4 >> 2];
 var $9 = HEAPF32[$pos + 8 >> 2];
 _sprintf($1, 3392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$pos >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $6, HEAPF64[tempVarArgs + 16 >> 3] = $9, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($1);
 STACKTOP = sp;
 return;
}
function __ZN11DebugDrawGL6vertexEfffj($this, $x, $y, $z, $color) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 var $1 = sp | 0;
 _sprintf($1, 3392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $x, HEAPF64[tempVarArgs + 8 >> 3] = $y, HEAPF64[tempVarArgs + 16 >> 3] = $z, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($1);
 STACKTOP = sp;
 return;
}
function __ZN11DebugDrawGL6vertexEPKfjS1_($this, $pos, $color, $uv) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 var $1 = sp | 0;
 var $6 = HEAPF32[$pos + 4 >> 2];
 var $9 = HEAPF32[$pos + 8 >> 2];
 _sprintf($1, 3392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$pos >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $6, HEAPF64[tempVarArgs + 16 >> 3] = $9, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($1);
 STACKTOP = sp;
 return;
}
function __ZN11DebugDrawGL6vertexEfffjff($this, $x, $y, $z, $color, $u, $v) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 var $1 = sp | 0;
 _sprintf($1, 3392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $x, HEAPF64[tempVarArgs + 8 >> 3] = $y, HEAPF64[tempVarArgs + 16 >> 3] = $z, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($1);
 STACKTOP = sp;
 return;
}
function __ZN11DebugDrawGL3endEv($this) {
 _emscripten_run_script(2496);
 return;
}
function __Z16debugDrawNavMeshh($flags) {
 var $1 = HEAP32[17904 >> 2];
 var $2 = $1 | 0;
 var $3 = HEAP32[17768 >> 2];
 if (($1 | 0) == 0) {
  return;
 }
 var $5 = $3 + 48 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 | 0) <= 0) {
  return;
 }
 var $8 = $3 + 68 | 0;
 var $i_09_i = 0;
 var $9 = $6;
 while (1) {
  var $9;
  var $i_09_i;
  var $10 = HEAP32[$8 >> 2];
  if ((HEAP32[$10 + ($i_09_i * 60 & -1) + 8 >> 2] | 0) == 0) {
   var $17 = $9;
  } else {
   __ZL12drawMeshTileP11duDebugDrawRK9dtNavMeshPK14dtNavMeshQueryPK10dtMeshTileh($2, $3, 0, $10 + ($i_09_i * 60 & -1) | 0, $flags);
   var $17 = HEAP32[$5 >> 2];
  }
  var $17;
  var $18 = $i_09_i + 1 | 0;
  if (($18 | 0) < ($17 | 0)) {
   var $i_09_i = $18;
   var $9 = $17;
  } else {
   break;
  }
 }
 return;
}
function __Z23debugDrawNavMeshPortalsv() {
 __Z25duDebugDrawNavMeshPortalsP11duDebugDrawRK9dtNavMesh(HEAP32[17904 >> 2] | 0, HEAP32[17768 >> 2]);
 return;
}
function __Z26debugDrawRegionConnectionsv() {
 __Z28duDebugDrawRegionConnectionsP11duDebugDrawRK12rcContourSetf(HEAP32[17904 >> 2] | 0, HEAP32[17792 >> 2], .5);
 return;
}
function __Z20debugDrawRawContoursv() {
 __Z22duDebugDrawRawContoursP11duDebugDrawRK12rcContourSetf(HEAP32[17904 >> 2] | 0, HEAP32[17792 >> 2], .5);
 return;
}
function __Z17debugDrawContoursv() {
 __Z19duDebugDrawContoursP11duDebugDrawRK12rcContourSetf(HEAP32[17904 >> 2] | 0, HEAP32[17792 >> 2], .5);
 return;
}
function __Z12bareGeomInitv() {
 var label = 0;
 while (1) {
  var $2 = _malloc(50216);
  if (($2 | 0) != 0) {
   break;
  }
  var $5 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($5 | 0) == 0) {
   label = 722;
   break;
  }
  FUNCTION_TABLE[$5]();
 }
 if (label == 722) {
  var $15 = ___cxa_allocate_exception(4);
  HEAP32[$15 >> 2] = 9744;
  ___cxa_throw($15, 15960, 74);
 }
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 9248 >> 2] = 0;
 HEAP32[$2 + 50212 >> 2] = 0;
 HEAP32[17776 >> 2] = $2;
 while (1) {
  var $29 = _malloc(284);
  if (($29 | 0) != 0) {
   label = 736;
   break;
  }
  var $32 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($32 | 0) == 0) {
   break;
  }
  FUNCTION_TABLE[$32]();
 }
 if (label == 736) {
  HEAPF32[$29 + 260 >> 2] = 1;
  var $49 = $29 + 264 | 0;
  HEAP32[$49 >> 2] = 0;
  HEAP32[$49 + 4 >> 2] = 0;
  HEAP32[$49 + 8 >> 2] = 0;
  HEAP32[$49 + 12 >> 2] = 0;
  HEAP32[$49 + 16 >> 2] = 0;
  HEAP32[17712 >> 2] = $29;
  return;
 }
 var $42 = ___cxa_allocate_exception(4);
 HEAP32[$42 >> 2] = 9744;
 ___cxa_throw($42, 15960, 74);
}
function __Z17bareGeomAddVertexfffi($x, $y, $z, $cap) {
 var label = 0;
 var $1 = HEAP32[17712 >> 2];
 var $2 = $1 + 276 | 0;
 var $3 = HEAP32[$2 >> 2];
 if (($3 + 1 | 0) > ($cap | 0)) {
  var $9$0 = _llvm_umul_with_overflow_i32(($cap | 0) == 0 ? 24 : $cap * 6 & -1, 4);
  var $12 = tempRet0 ? -1 : $9$0;
  var $_size_i_i = ($12 | 0) == 0 ? 1 : $12;
  while (1) {
   var $15 = _malloc($_size_i_i);
   if (($15 | 0) != 0) {
    break;
   }
   var $18 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
   if (($18 | 0) == 0) {
    label = 748;
    break;
   }
   FUNCTION_TABLE[$18]();
  }
  if (label == 748) {
   var $28 = ___cxa_allocate_exception(4);
   HEAP32[$28 >> 2] = 9744;
   ___cxa_throw($28, 15960, 74);
  }
  var $31 = $15;
  var $32 = HEAP32[$2 >> 2];
  var $_pre14_i = $1 + 264 | 0;
  if (($32 | 0) != 0) {
   var $43 = HEAP32[$_pre14_i >> 2];
   var $44 = $32 * 12 & -1;
   _memcpy($15, $43, $44) | 0;
  }
  HEAP32[$_pre14_i >> 2] = $31;
  var $46 = $32;
  var $45 = $31;
 } else {
  var $46 = $3;
  var $45 = HEAP32[$1 + 264 >> 2];
 }
 var $45;
 var $46;
 var $47 = $46 * 3 & -1;
 var $49 = $1 + 260 | 0;
 HEAPF32[$45 + ($47 << 2) >> 2] = HEAPF32[$49 >> 2] * $x;
 HEAPF32[$45 + ($47 + 1 << 2) >> 2] = HEAPF32[$49 >> 2] * $y;
 HEAPF32[$45 + ($47 + 2 << 2) >> 2] = HEAPF32[$49 >> 2] * $z;
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
 return;
}
function __Z19bareGeomAddTriangleiiii($a, $b, $c, $cap) {
 var label = 0;
 var $1 = HEAP32[17712 >> 2];
 var $2 = $1 + 280 | 0;
 var $3 = HEAP32[$2 >> 2];
 if (($3 + 1 | 0) > ($cap | 0)) {
  var $9$0 = _llvm_umul_with_overflow_i32(($cap | 0) == 0 ? 24 : $cap * 6 & -1, 4);
  var $12 = tempRet0 ? -1 : $9$0;
  var $_size_i_i = ($12 | 0) == 0 ? 1 : $12;
  while (1) {
   var $15 = _malloc($_size_i_i);
   if (($15 | 0) != 0) {
    break;
   }
   var $18 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
   if (($18 | 0) == 0) {
    label = 769;
    break;
   }
   FUNCTION_TABLE[$18]();
  }
  if (label == 769) {
   var $28 = ___cxa_allocate_exception(4);
   HEAP32[$28 >> 2] = 9744;
   ___cxa_throw($28, 15960, 74);
  }
  var $31 = $15;
  var $32 = HEAP32[$2 >> 2];
  var $_pre14_i = $1 + 268 | 0;
  if (($32 | 0) != 0) {
   var $43 = HEAP32[$_pre14_i >> 2];
   var $44 = $32 * 12 & -1;
   _memcpy($15, $43, $44) | 0;
  }
  HEAP32[$_pre14_i >> 2] = $31;
  var $46 = $32;
  var $45 = $31;
 } else {
  var $46 = $3;
  var $45 = HEAP32[$1 + 268 >> 2];
 }
 var $45;
 var $46;
 var $47 = $46 * 3 & -1;
 HEAP32[$45 + ($47 << 2) >> 2] = $a;
 HEAP32[$45 + ($47 + 1 << 2) >> 2] = $b;
 HEAP32[$45 + ($47 + 2 << 2) >> 2] = $c;
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
 return;
}
function __Z16bareGeomValidatev() {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 var $1 = HEAP32[17776 >> 2];
 var $2 = HEAP32[17712 >> 2];
 var $3 = $1 + 4 | 0;
 var $4 = HEAP32[$3 >> 2];
 if (($4 | 0) != 0) {
  var $7 = $1 | 0;
  var $8 = HEAP32[$7 >> 2];
  if (($8 | 0) == 0) {
   HEAP32[$7 >> 2] = 0;
   var $23 = $4;
   label = 787;
  } else {
   var $12 = HEAP32[$8 >> 2];
   if (($12 | 0) != 0) {
    _free($12);
   }
   var $17 = HEAP32[$8 + 8 >> 2];
   if (($17 | 0) != 0) {
    _free($17);
   }
   _free($8);
   var $_pre_i = HEAP32[$3 >> 2];
   HEAP32[$7 >> 2] = 0;
   if (($_pre_i | 0) != 0) {
    var $23 = $_pre_i;
    label = 787;
   }
  }
  do {
   if (label == 787) {
    var $23;
    var $25 = HEAP32[$23 + 264 >> 2];
    if (($25 | 0) != 0) {
     _free($25);
    }
    var $30 = HEAP32[$23 + 272 >> 2];
    if (($30 | 0) != 0) {
     _free($30);
    }
    var $35 = HEAP32[$23 + 268 >> 2];
    if (($35 | 0) != 0) {
     _free($35);
    }
    if (($23 | 0) == 0) {
     break;
    }
    _free($23 | 0);
   }
  } while (0);
  HEAP32[$3 >> 2] = 0;
 }
 HEAP32[$1 + 9248 >> 2] = 0;
 HEAP32[$1 + 50212 >> 2] = 0;
 HEAP32[$3 >> 2] = $2;
 if (($2 | 0) == 0) {
  __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 7240, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
  STACKTOP = tempVarArgs;
  STACKTOP = sp;
  return;
 }
 var $50 = HEAP32[$2 + 280 >> 2];
 _printf(7120, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$2 + 276 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $50, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $52 = HEAP32[$3 >> 2];
 __Z12rcCalcBoundsPKfiPfS1_(HEAP32[$52 + 264 >> 2], HEAP32[$52 + 276 >> 2], $1 + 8 | 0, $1 + 20 | 0);
 while (1) {
  var $60 = _malloc(20);
  if (($60 | 0) != 0) {
   break;
  }
  var $63 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($63 | 0) == 0) {
   label = 806;
   break;
  }
  FUNCTION_TABLE[$63]();
 }
 if (label == 806) {
  var $73 = ___cxa_allocate_exception(4);
  HEAP32[$73 >> 2] = 9744;
  ___cxa_throw($73, 15960, 74);
 }
 var $78 = $60;
 HEAP32[$60 >> 2] = 0;
 HEAP32[$60 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = $78;
 var $83 = HEAP32[$3 >> 2];
 if (__Z21rcCreateChunkyTriMeshPKfPKiiiP15rcChunkyTriMesh(HEAP32[$83 + 264 >> 2], HEAP32[$83 + 268 >> 2], HEAP32[$83 + 280 >> 2], $78)) {
  STACKTOP = sp;
  return;
 }
 __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 5456, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return;
}
function __Z18getNavMeshVerticesNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($callback) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1536 | 0;
 var $1 = HEAP32[17752 >> 2];
 var $3 = HEAP32[$1 + 32 >> 2];
 var $5 = HEAPF32[$1 + 60 >> 2];
 var $7 = HEAPF32[$1 + 64 >> 2];
 var $8 = $1 + 36 | 0;
 var $9 = sp + 1024 | 0;
 var $13 = HEAPF32[$8 >> 2];
 var $14 = $1 + 40 | 0;
 var $16 = HEAPF32[$14 >> 2];
 var $17 = $1 + 44 | 0;
 var $19 = HEAPF32[$17 >> 2];
 _sprintf($9, 6e3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 48 | 0, HEAP32[tempVarArgs >> 2] = $3, HEAPF64[tempVarArgs + 8 >> 3] = $5, HEAPF64[tempVarArgs + 16 >> 3] = $7, HEAPF64[tempVarArgs + 24 >> 3] = $13, HEAPF64[tempVarArgs + 32 >> 3] = $16, HEAPF64[tempVarArgs + 40 >> 3] = $19, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $21 = sp | 0;
 _sprintf($21, 4080, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $9, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($21);
 _emscripten_run_script(5968);
 var $23 = HEAP32[17752 >> 2];
 var $25 = HEAP32[$23 + 24 >> 2];
 L1070 : do {
  if (($25 | 0) > 0) {
   var $27 = $3 << 1;
   if (($3 | 0) > 2) {
    var $i_044_us = 0;
    var $29 = $23;
   } else {
    var $i_044 = 0;
    while (1) {
     var $i_044;
     var $149 = $i_044 + 1 | 0;
     if (($149 | 0) < ($25 | 0)) {
      var $i_044 = $149;
     } else {
      break L1070;
     }
    }
   }
   while (1) {
    var $29;
    var $i_044_us;
    if ((HEAP8[HEAP32[$29 + 16 >> 2] + $i_044_us | 0] | 0) == 0) {
     var $144 = Math.imul($27, $i_044_us) | 0;
     var $146 = HEAP32[$29 + 4 >> 2];
     var $147 = $146 + ($144 << 1) | 0;
     var $148 = $144 - 1 | 0;
     var $j_043_us = 2;
     while (1) {
      var $j_043_us;
      var $37 = HEAP16[$146 + ($j_043_us + $144 << 1) >> 1];
      if ($37 << 16 >> 16 == -1) {
       break;
      }
      var $42 = HEAP16[$146 + ($148 + $j_043_us << 1) >> 1];
      var $44 = HEAPU16[$147 >> 1] * 3 & -1;
      var $47 = HEAP32[HEAP32[17752 >> 2] >> 2];
      var $71 = HEAPF32[$14 >> 2] + $7 * (HEAPU16[$47 + ($44 + 1 << 1) >> 1] + 1 | 0);
      var $72 = HEAPF32[$17 >> 2] + $5 * (HEAPU16[$47 + ($44 + 2 << 1) >> 1] | 0);
      _sprintf($9, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$8 >> 2] + $5 * (HEAPU16[$47 + ($44 << 1) >> 1] | 0), HEAPF64[tempVarArgs + 8 >> 3] = $71, HEAPF64[tempVarArgs + 16 >> 3] = $72, tempVarArgs));
      STACKTOP = tempVarArgs;
      _emscripten_run_script($9);
      var $75 = ($42 & 65535) * 3 & -1;
      var $78 = HEAP32[HEAP32[17752 >> 2] >> 2];
      var $102 = HEAPF32[$14 >> 2] + $7 * (HEAPU16[$78 + ($75 + 1 << 1) >> 1] + 1 | 0);
      var $103 = HEAPF32[$17 >> 2] + $5 * (HEAPU16[$78 + ($75 + 2 << 1) >> 1] | 0);
      _sprintf($9, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$8 >> 2] + $5 * (HEAPU16[$78 + ($75 << 1) >> 1] | 0), HEAPF64[tempVarArgs + 8 >> 3] = $102, HEAPF64[tempVarArgs + 16 >> 3] = $103, tempVarArgs));
      STACKTOP = tempVarArgs;
      _emscripten_run_script($9);
      var $106 = ($37 & 65535) * 3 & -1;
      var $109 = HEAP32[HEAP32[17752 >> 2] >> 2];
      var $133 = HEAPF32[$14 >> 2] + $7 * (HEAPU16[$109 + ($106 + 1 << 1) >> 1] + 1 | 0);
      var $134 = HEAPF32[$17 >> 2] + $5 * (HEAPU16[$109 + ($106 + 2 << 1) >> 1] | 0);
      _sprintf($9, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$8 >> 2] + $5 * (HEAPU16[$109 + ($106 << 1) >> 1] | 0), HEAPF64[tempVarArgs + 8 >> 3] = $133, HEAPF64[tempVarArgs + 16 >> 3] = $134, tempVarArgs));
      STACKTOP = tempVarArgs;
      _emscripten_run_script($9);
      var $136 = $j_043_us + 1 | 0;
      if (($136 | 0) < ($3 | 0)) {
       var $j_043_us = $136;
      } else {
       break;
      }
     }
     var $139 = HEAP32[17752 >> 2];
    } else {
     var $139 = $29;
    }
    var $139;
    var $140 = $i_044_us + 1 | 0;
    if (($140 | 0) < (HEAP32[$139 + 24 >> 2] | 0)) {
     var $i_044_us = $140;
     var $29 = $139;
    } else {
     break;
    }
   }
  }
 } while (0);
 if ((HEAP8[$callback] & 1) == 0) {
  var $161 = $callback + 1 | 0;
  var $161;
  var $162 = _sprintf($9, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $161, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($9);
  STACKTOP = sp;
  return;
 } else {
  var $161 = HEAP32[$callback + 8 >> 2];
  var $161;
  var $162 = _sprintf($9, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $161, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($9);
  STACKTOP = sp;
  return;
 }
}
function __Z24getNavHeightfieldRegionsNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($callback) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1536 | 0;
 var $1 = HEAP32[17800 >> 2];
 var $3 = HEAPF32[$1 + 52 >> 2];
 var $5 = HEAPF32[$1 + 56 >> 2];
 var $6 = sp + 1024 | 0;
 _sprintf($6, 5824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAPF64[tempVarArgs >> 3] = $3, HEAPF64[tempVarArgs + 8 >> 3] = $5, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $10 = sp | 0;
 _sprintf($10, 4080, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $6, tempVarArgs));
 STACKTOP = tempVarArgs;
 _emscripten_run_script($10);
 _emscripten_run_script(5968);
 var $12 = HEAP32[17800 >> 2];
 if ((HEAP32[$12 + 4 >> 2] | 0) > 0) {
  var $y_047 = 0;
  var $16 = $12;
  while (1) {
   var $16;
   var $y_047;
   var $18 = HEAP32[$16 >> 2];
   if (($18 | 0) > 0) {
    var $21 = $3 * ($y_047 | 0);
    var $x_044 = 0;
    var $24 = $16;
    var $23 = $18;
    while (1) {
     var $23;
     var $24;
     var $x_044;
     var $29 = $3 * ($x_044 | 0) + HEAPF32[$24 + 28 >> 2];
     var $32 = $21 + HEAPF32[$24 + 36 >> 2];
     var $34 = Math.imul($23, $y_047) + $x_044 | 0;
     var $39 = HEAP32[HEAP32[$24 + 60 >> 2] + ($34 << 2) >> 2];
     var $40 = $39 & 16777215;
     var $42 = $40 + ($39 >>> 24) | 0;
     if ($40 >>> 0 < $42 >>> 0) {
      var $44 = $29;
      var $45 = $32;
      var $47 = $3 + $32;
      var $49 = $3 + $29;
      var $i_043 = $40;
      var $50 = $24;
      while (1) {
       var $50;
       var $i_043;
       var $61 = HEAPF32[$50 + 32 >> 2] + $5 * (HEAPU16[HEAP32[$50 + 64 >> 2] + ($i_043 << 3) >> 1] | 0);
       _sprintf($6, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $44, HEAPF64[tempVarArgs + 8 >> 3] = $61, HEAPF64[tempVarArgs + 16 >> 3] = $45, tempVarArgs));
       STACKTOP = tempVarArgs;
       _emscripten_run_script($6);
       _sprintf($6, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $44, HEAPF64[tempVarArgs + 8 >> 3] = $61, HEAPF64[tempVarArgs + 16 >> 3] = $47, tempVarArgs));
       STACKTOP = tempVarArgs;
       _emscripten_run_script($6);
       _sprintf($6, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $49, HEAPF64[tempVarArgs + 8 >> 3] = $61, HEAPF64[tempVarArgs + 16 >> 3] = $47, tempVarArgs));
       STACKTOP = tempVarArgs;
       _emscripten_run_script($6);
       _sprintf($6, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $49, HEAPF64[tempVarArgs + 8 >> 3] = $61, HEAPF64[tempVarArgs + 16 >> 3] = $45, tempVarArgs));
       STACKTOP = tempVarArgs;
       _emscripten_run_script($6);
       var $66 = $i_043 + 1 | 0;
       var $_pre51 = HEAP32[17800 >> 2];
       if ($66 >>> 0 < $42 >>> 0) {
        var $i_043 = $66;
        var $50 = $_pre51;
       } else {
        var $68 = $_pre51;
        break;
       }
      }
     } else {
      var $68 = $24;
     }
     var $68;
     var $69 = $x_044 + 1 | 0;
     var $71 = HEAP32[$68 >> 2];
     if (($69 | 0) < ($71 | 0)) {
      var $x_044 = $69;
      var $24 = $68;
      var $23 = $71;
     } else {
      var $73 = $68;
      break;
     }
    }
   } else {
    var $73 = $16;
   }
   var $73;
   var $74 = $y_047 + 1 | 0;
   if (($74 | 0) < (HEAP32[$73 + 4 >> 2] | 0)) {
    var $y_047 = $74;
    var $16 = $73;
   } else {
    break;
   }
  }
 }
 if ((HEAP8[$callback] & 1) == 0) {
  var $88 = $callback + 1 | 0;
  var $88;
  var $89 = _sprintf($6, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $88, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($6);
  STACKTOP = sp;
  return;
 } else {
  var $88 = HEAP32[$callback + 8 >> 2];
  var $88;
  var $89 = _sprintf($6, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $88, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($6);
  STACKTOP = sp;
  return;
 }
}
function __Z15findNearestPolyffffffNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($cx, $cy, $cz, $ex, $ey, $ez, $callback) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 816 | 0;
 var $buff = sp;
 var $p = sp + 512;
 var $ext = sp + 528;
 var $filter = sp + 544;
 var $ref = sp + 808;
 _emscripten_run_script(5968);
 var $1 = $p | 0;
 HEAPF32[$1 >> 2] = $cx;
 HEAPF32[$p + 4 >> 2] = $cy;
 HEAPF32[$p + 8 >> 2] = $cz;
 var $4 = $ext | 0;
 HEAPF32[$4 >> 2] = $ex;
 HEAPF32[$ext + 4 >> 2] = $ey;
 HEAPF32[$ext + 8 >> 2] = $ez;
 var $7 = $filter + 256 | 0;
 HEAP16[$7 >> 1] = -1;
 var $8 = $filter + 258 | 0;
 HEAP16[$8 >> 1] = 0;
 var $i_03_i = 0;
 while (1) {
  var $i_03_i;
  HEAPF32[$filter + ($i_03_i << 2) >> 2] = 1;
  var $11 = $i_03_i + 1 | 0;
  if (($11 | 0) < 64) {
   var $i_03_i = $11;
  } else {
   break;
  }
 }
 HEAP16[$7 >> 1] = 3;
 HEAP16[$8 >> 1] = 0;
 HEAP32[$ref >> 2] = 0;
 var $14 = __ZNK14dtNavMeshQuery15findNearestPolyEPKfS1_PK13dtQueryFilterPjPf(HEAP32[17760 >> 2], $1, $4, $filter, $ref, 0);
 L1114 : do {
  if (($14 | 0) < 0) {
   _printf(5576, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $14, tempVarArgs));
   STACKTOP = tempVarArgs;
  } else {
   var $19 = HEAP32[17768 >> 2];
   var $20 = HEAP32[$ref >> 2];
   do {
    if (($20 | 0) == 0) {
     var $_0_i_ph = -2147483648;
    } else {
     var $24 = HEAP32[$19 + 76 >> 2];
     var $28 = HEAP32[$19 + 80 >> 2];
     var $32 = $20 >>> ($28 >>> 0) & (1 << $24) - 1;
     if ($32 >>> 0 >= HEAP32[$19 + 48 >> 2] >>> 0) {
      var $_0_i_ph = -2147483640;
      break;
     }
     var $46 = HEAP32[$19 + 68 >> 2];
     if ((HEAP32[$46 + ($32 * 60 & -1) >> 2] | 0) != ((1 << HEAP32[$19 + 72 >> 2]) - 1 & $20 >>> (($28 + $24 | 0) >>> 0) | 0)) {
      var $_0_i_ph = -2147483640;
      break;
     }
     var $52 = HEAP32[$46 + ($32 * 60 & -1) + 8 >> 2];
     if (($52 | 0) == 0) {
      var $_0_i_ph = -2147483640;
      break;
     }
     if (((1 << $28) - 1 & $20) >>> 0 >= HEAP32[$52 + 24 >> 2] >>> 0) {
      var $_0_i_ph = -2147483640;
      break;
     }
     var $58 = $46 + ($32 * 60 & -1) + 8 | 0;
     if ((HEAP32[$52 + 28 >> 2] | 0) <= 0) {
      break L1114;
     }
     var $62 = $buff | 0;
     var $63 = $46 + ($32 * 60 & -1) + 16 | 0;
     var $i_029 = 0;
     while (1) {
      var $i_029;
      var $67 = HEAP32[$63 >> 2];
      var $_sum = $i_029 + 1 | 0;
      var $73 = HEAPF32[$67 + ($_sum << 2) >> 2];
      var $76 = HEAPF32[$67 + ($i_029 + 2 << 2) >> 2];
      _sprintf($62, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = HEAPF32[$67 + ($i_029 << 2) >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $73, HEAPF64[tempVarArgs + 16 >> 3] = $76, tempVarArgs));
      STACKTOP = tempVarArgs;
      _emscripten_run_script($62);
      if (($_sum | 0) < (HEAP32[HEAP32[$58 >> 2] + 28 >> 2] | 0)) {
       var $i_029 = $_sum;
      } else {
       break L1114;
      }
     }
    }
   } while (0);
   var $_0_i_ph;
   _printf(5408, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $20, HEAP32[tempVarArgs + 8 >> 2] = $_0_i_ph, tempVarArgs));
   STACKTOP = tempVarArgs;
  }
 } while (0);
 var $82 = $buff | 0;
 if ((HEAP8[$callback] & 1) == 0) {
  var $93 = $callback + 1 | 0;
  var $93;
  var $94 = _sprintf($82, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $93, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($82);
  STACKTOP = sp;
  return;
 } else {
  var $93 = HEAP32[$callback + 8 >> 2];
  var $93;
  var $94 = _sprintf($82, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $93, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($82);
  STACKTOP = sp;
  return;
 }
}
function __Z8findPathffffffiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($startPosX, $startPosY, $startPosZ, $endPosX, $endPosY, $endPosZ, $maxPath, $callback) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 2032 | 0;
 var $closestStartPos_i = sp;
 var $closestEndPos_i = sp + 16;
 var $portalApex_i = sp + 32;
 var $left_i = sp + 48;
 var $right_i = sp + 64;
 var $buff_i = sp + 80;
 var $buff = sp + 1104;
 var $startPos = sp + 1616;
 var $endPos = sp + 1632;
 var $filter = sp + 1648;
 var $nearestStartPos = sp + 1912;
 var $startRef = sp + 1928;
 var $nearestEndPos = sp + 1936;
 var $endRef = sp + 1952;
 var $straightPath = sp + 1960;
 var $straightPathFlags = sp + 2e3;
 var $straightPathRefs = sp + 2008;
 var $straightPathCount = sp + 2024;
 _emscripten_run_script(5968);
 var $1 = $startPos | 0;
 HEAPF32[$1 >> 2] = $startPosX;
 HEAPF32[$startPos + 4 >> 2] = $startPosY;
 HEAPF32[$startPos + 8 >> 2] = $startPosZ;
 var $4 = $endPos | 0;
 HEAPF32[$4 >> 2] = $endPosX;
 HEAPF32[$endPos + 4 >> 2] = $endPosY;
 HEAPF32[$endPos + 8 >> 2] = $endPosZ;
 var $8 = STACKTOP;
 STACKTOP = STACKTOP + (($maxPath + 1) * 4 & -1) | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $9 = $filter + 256 | 0;
 HEAP16[$9 >> 1] = -1;
 var $10 = $filter + 258 | 0;
 HEAP16[$10 >> 1] = 0;
 var $i_03_i = 0;
 while (1) {
  var $i_03_i;
  HEAPF32[$filter + ($i_03_i << 2) >> 2] = 1;
  var $13 = $i_03_i + 1 | 0;
  if (($13 | 0) < 64) {
   var $i_03_i = $13;
  } else {
   break;
  }
 }
 HEAP16[$9 >> 1] = 3;
 HEAP16[$10 >> 1] = 0;
 HEAP32[$startRef >> 2] = 0;
 var $15 = HEAP32[17760 >> 2];
 var $16 = $nearestStartPos | 0;
 __ZNK14dtNavMeshQuery15findNearestPolyEPKfS1_PK13dtQueryFilterPjPf($15, $1, 9672, $filter, $startRef, $16);
 HEAP32[$endRef >> 2] = 0;
 var $18 = $nearestEndPos | 0;
 __ZNK14dtNavMeshQuery15findNearestPolyEPKfS1_PK13dtQueryFilterPjPf($15, $4, 9672, $filter, $endRef, $18);
 var $21 = HEAP32[$endRef >> 2];
 _printf(5216, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$startRef >> 2], HEAP32[tempVarArgs + 8 >> 2] = $21, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $23 = HEAP32[17760 >> 2];
 var $24 = HEAP32[$startRef >> 2];
 var $25 = HEAP32[$endRef >> 2];
 do {
  if (($24 | 0) == 0 | ($25 | 0) == 0 | ($maxPath | 0) == 0) {
   var $_0_i550 = -2147483640;
   label = 942;
  } else {
   var $30 = $23 | 0;
   var $31 = HEAP32[$30 >> 2];
   var $33 = HEAP32[$31 + 76 >> 2];
   var $35 = (1 << $33) - 1 | 0;
   var $37 = HEAP32[$31 + 80 >> 2];
   var $39 = (1 << $37) - 1 | 0;
   var $41 = $24 >>> ($37 >>> 0) & $35;
   var $44 = HEAP32[$31 + 48 >> 2];
   if ($41 >>> 0 >= $44 >>> 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   var $49 = $37 + $33 | 0;
   var $52 = (1 << HEAP32[$31 + 72 >> 2]) - 1 | 0;
   var $55 = HEAP32[$31 + 68 >> 2];
   if ((HEAP32[$55 + ($41 * 60 & -1) >> 2] | 0) != ($52 & $24 >>> ($49 >>> 0) | 0)) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   var $61 = HEAP32[$55 + ($41 * 60 & -1) + 8 >> 2];
   if (($61 | 0) == 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   if (($39 & $24) >>> 0 >= HEAP32[$61 + 24 >> 2] >>> 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   var $68 = $25 >>> ($37 >>> 0) & $35;
   if ($68 >>> 0 >= $44 >>> 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   if ((HEAP32[$55 + ($68 * 60 & -1) >> 2] | 0) != ($52 & $25 >>> ($49 >>> 0) | 0)) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   var $79 = HEAP32[$55 + ($68 * 60 & -1) + 8 >> 2];
   if (($79 | 0) == 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   if (($39 & $25) >>> 0 >= HEAP32[$79 + 24 >> 2] >>> 0) {
    var $_0_i550 = -2147483640;
    label = 942;
    break;
   }
   if (($24 | 0) == ($25 | 0)) {
    HEAP32[$8 >> 2] = $24;
    var $pathCount_052 = 1;
   } else {
    var $87 = $23 + 56 | 0;
    var $88 = HEAP32[$87 >> 2];
    _memset(HEAP32[$88 + 4 >> 2], -1, HEAP32[$88 + 16 >> 2] << 1);
    HEAP32[$88 + 20 >> 2] = 0;
    var $96 = $23 + 60 | 0;
    HEAP32[HEAP32[$96 >> 2] + 8 >> 2] = 0;
    var $100 = __ZN10dtNodePool7getNodeEj(HEAP32[$87 >> 2], $24);
    HEAPF32[$100 >> 2] = HEAPF32[$16 >> 2];
    var $103 = $nearestStartPos + 4 | 0;
    HEAPF32[$100 + 4 >> 2] = HEAPF32[$103 >> 2];
    var $106 = $nearestStartPos + 8 | 0;
    HEAPF32[$100 + 8 >> 2] = HEAPF32[$106 >> 2];
    var $110 = $100 + 20 | 0;
    HEAP32[$110 >> 2] = HEAP32[$110 >> 2] & -1073741824;
    HEAPF32[$100 + 12 >> 2] = 0;
    var $116 = HEAPF32[$18 >> 2] - HEAPF32[$16 >> 2];
    var $117 = $nearestEndPos + 4 | 0;
    var $120 = HEAPF32[$117 >> 2] - HEAPF32[$103 >> 2];
    var $121 = $nearestEndPos + 8 | 0;
    var $124 = HEAPF32[$121 >> 2] - HEAPF32[$106 >> 2];
    var $132 = $100 + 16 | 0;
    HEAPF32[$132 >> 2] = Math.sqrt($116 * $116 + $120 * $120 + $124 * $124) * .9990000128746033;
    HEAP32[$100 + 24 >> 2] = $24;
    HEAP32[$110 >> 2] = 1073741824;
    var $134 = HEAP32[$96 >> 2];
    var $135 = $134 + 8 | 0;
    var $136 = HEAP32[$135 >> 2];
    HEAP32[$135 >> 2] = $136 + 1;
    var $138 = $134 | 0;
    L1150 : do {
     if (($136 | 0) > 0) {
      var $parent_013_in_in_i10_i = $136;
      while (1) {
       var $parent_013_in_in_i10_i;
       var $parent_013_in_i11_i = $parent_013_in_in_i10_i - 1 | 0;
       var $parent_013_i12_i = ($parent_013_in_i11_i | 0) / 2 & -1;
       var $140 = HEAP32[$138 >> 2];
       var $142 = HEAP32[$140 + ($parent_013_i12_i << 2) >> 2];
       if (HEAPF32[$142 + 16 >> 2] <= HEAPF32[$132 >> 2]) {
        var $_0_lcssa_i13_i = $parent_013_in_in_i10_i;
        break L1150;
       }
       HEAP32[$140 + ($parent_013_in_in_i10_i << 2) >> 2] = $142;
       if (($parent_013_in_i11_i | 0) > 1) {
        var $parent_013_in_in_i10_i = $parent_013_i12_i;
       } else {
        var $_0_lcssa_i13_i = $parent_013_i12_i;
        break;
       }
      }
     } else {
      var $_0_lcssa_i13_i = $136;
     }
    } while (0);
    var $_0_lcssa_i13_i;
    HEAP32[HEAP32[$138 >> 2] + ($_0_lcssa_i13_i << 2) >> 2] = $100;
    var $152 = HEAP32[$96 >> 2];
    var $153 = $152 + 8 | 0;
    var $154 = HEAP32[$153 >> 2];
    L1155 : do {
     if (($154 | 0) == 0) {
      var $lastBestNode_3_i = $100;
      var $status_0_lcssa_i = 1073741824;
     } else {
      var $159 = $closestStartPos_i | 0;
      var $160 = $closestEndPos_i | 0;
      var $161 = $closestStartPos_i + 4 | 0;
      var $162 = $closestEndPos_i + 4 | 0;
      var $163 = $closestStartPos_i + 8 | 0;
      var $164 = $closestEndPos_i + 8 | 0;
      var $165 = HEAP16[$9 >> 1];
      var $166 = HEAP16[$10 >> 1];
      var $status_0122_i = 1073741824;
      var $lastBestNodeCost_0123_i = HEAPF32[$132 >> 2];
      var $lastBestNode_0124_i = $100;
      var $174 = $152;
      var $173 = $153;
      var $172 = $154;
      while (1) {
       var $172;
       var $173;
       var $174;
       var $lastBestNode_0124_i;
       var $lastBestNodeCost_0123_i;
       var $status_0122_i;
       var $175 = $174 | 0;
       var $176 = HEAP32[$175 >> 2];
       var $177 = HEAP32[$176 >> 2];
       var $178 = $172 - 1 | 0;
       HEAP32[$173 >> 2] = $178;
       var $180 = HEAP32[$176 + ($178 << 2) >> 2];
       var $181 = $174 + 8 | 0;
       var $182 = HEAP32[$181 >> 2];
       L1159 : do {
        if (($182 | 0) > 1) {
         var $_014_i_i = 0;
         var $child_015_i_i = 1;
         var $185 = $182;
         var $184 = $176;
         while (1) {
          var $184;
          var $185;
          var $child_015_i_i;
          var $_014_i_i;
          var $186 = $child_015_i_i + 1 | 0;
          do {
           if (($186 | 0) < ($185 | 0)) {
            if (HEAPF32[HEAP32[$184 + ($child_015_i_i << 2) >> 2] + 16 >> 2] <= HEAPF32[HEAP32[$184 + ($186 << 2) >> 2] + 16 >> 2]) {
             var $child_1_i_i = $child_015_i_i;
             break;
            }
            var $child_1_i_i = $186;
           } else {
            var $child_1_i_i = $child_015_i_i;
           }
          } while (0);
          var $child_1_i_i;
          HEAP32[$184 + ($_014_i_i << 2) >> 2] = HEAP32[$184 + ($child_1_i_i << 2) >> 2];
          var $child_0_i_i = $child_1_i_i << 1 | 1;
          var $202 = HEAP32[$181 >> 2];
          if (($child_0_i_i | 0) >= ($202 | 0)) {
           break;
          }
          var $_014_i_i = $child_1_i_i;
          var $child_015_i_i = $child_0_i_i;
          var $185 = $202;
          var $184 = HEAP32[$175 >> 2];
         }
         if (($child_1_i_i | 0) <= 0) {
          var $_0_lcssa_i_i_i = $child_1_i_i;
          break;
         }
         var $205 = $180 + 16 | 0;
         var $parent_013_in_in_i_i_i = $child_1_i_i;
         while (1) {
          var $parent_013_in_in_i_i_i;
          var $parent_013_in_i_i_i = $parent_013_in_in_i_i_i - 1 | 0;
          var $parent_013_i_i_i = ($parent_013_in_i_i_i | 0) / 2 & -1;
          var $207 = HEAP32[$175 >> 2];
          var $209 = HEAP32[$207 + ($parent_013_i_i_i << 2) >> 2];
          if (HEAPF32[$209 + 16 >> 2] <= HEAPF32[$205 >> 2]) {
           var $_0_lcssa_i_i_i = $parent_013_in_in_i_i_i;
           break L1159;
          }
          HEAP32[$207 + ($parent_013_in_in_i_i_i << 2) >> 2] = $209;
          if (($parent_013_in_i_i_i | 0) > 1) {
           var $parent_013_in_in_i_i_i = $parent_013_i_i_i;
          } else {
           var $_0_lcssa_i_i_i = $parent_013_i_i_i;
           break;
          }
         }
        } else {
         var $_0_lcssa_i_i_i = 0;
        }
       } while (0);
       var $_0_lcssa_i_i_i;
       HEAP32[HEAP32[$175 >> 2] + ($_0_lcssa_i_i_i << 2) >> 2] = $180;
       var $220 = $177 + 20 | 0;
       var $222 = HEAP32[$220 >> 2] & 1073741823;
       HEAP32[$220 >> 2] = $222 | -2147483648;
       var $225 = HEAP32[$177 + 24 >> 2];
       if (($225 | 0) == ($25 | 0)) {
        var $lastBestNode_3_i = $177;
        var $status_0_lcssa_i = $status_0122_i;
        break L1155;
       }
       var $228 = HEAP32[$30 >> 2];
       var $234 = HEAP32[$228 + 80 >> 2];
       var $238 = $225 >>> ($234 >>> 0) & (1 << HEAP32[$228 + 76 >> 2]) - 1;
       var $239 = (1 << $234) - 1 & $225;
       var $241 = HEAP32[$228 + 68 >> 2];
       var $242 = $241 + ($238 * 60 & -1) | 0;
       var $244 = HEAP32[$241 + ($238 * 60 & -1) + 12 >> 2];
       var $245 = $244 + ($239 << 5) | 0;
       if (($222 | 0) == 0) {
        var $parentRef_0111_i = 0;
       } else {
        var $253 = HEAP32[HEAP32[HEAP32[$87 >> 2] >> 2] + (($222 - 1) * 28 & -1) + 24 >> 2];
        var $parentRef_0111_i = ($253 | 0) == 0 ? 0 : $253;
       }
       var $parentRef_0111_i;
       var $i_0115_i = HEAP32[$245 >> 2];
       if (($i_0115_i | 0) == -1) {
        var $status_1_lcssa_i = $status_0122_i;
        var $lastBestNodeCost_1_lcssa_i = $lastBestNodeCost_0123_i;
        var $lastBestNode_1_lcssa_i = $lastBestNode_0124_i;
       } else {
        var $257 = $177 | 0;
        var $258 = $177 + 4 | 0;
        var $259 = $177 + 8 | 0;
        var $260 = $177 + 12 | 0;
        var $261 = ($177 | 0) == 0;
        var $262 = $177;
        var $_phi_trans_insert_i = $241 + ($238 * 60 & -1) + 20 | 0;
        var $263 = $244 + ($239 << 5) + 31 | 0;
        var $status_1116_i = $status_0122_i;
        var $lastBestNodeCost_1117_i = $lastBestNodeCost_0123_i;
        var $lastBestNode_1118_i = $lastBestNode_0124_i;
        var $i_0119_i = $i_0115_i;
        var $265 = HEAP32[$_phi_trans_insert_i >> 2];
        while (1) {
         var $265;
         var $i_0119_i;
         var $lastBestNode_1118_i;
         var $lastBestNodeCost_1117_i;
         var $status_1116_i;
         var $267 = HEAP32[$265 + ($i_0119_i * 12 & -1) >> 2];
         do {
          if (($267 | 0) == 0 | ($267 | 0) == ($parentRef_0111_i | 0)) {
           var $lastBestNode_2_i = $lastBestNode_1118_i;
           var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
           var $status_2_i = $status_1116_i;
          } else {
           var $271 = HEAP32[$30 >> 2];
           var $277 = HEAP32[$271 + 80 >> 2];
           var $281 = $267 >>> ($277 >>> 0) & (1 << HEAP32[$271 + 76 >> 2]) - 1;
           var $282 = (1 << $277) - 1 & $267;
           var $284 = HEAP32[$271 + 68 >> 2];
           var $287 = HEAP32[$284 + ($281 * 60 & -1) + 12 >> 2];
           var $290 = HEAP16[$287 + ($282 << 5) + 28 >> 1];
           if (($165 & $290) << 16 >> 16 == 0) {
            var $lastBestNode_2_i = $lastBestNode_1118_i;
            var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
            var $status_2_i = $status_1116_i;
            break;
           }
           if (($166 & $290) << 16 >> 16 != 0) {
            var $lastBestNode_2_i = $lastBestNode_1118_i;
            var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
            var $status_2_i = $status_1116_i;
            break;
           }
           var $297 = __ZN10dtNodePool7getNodeEj(HEAP32[$87 >> 2], $267);
           if (($297 | 0) == 0) {
            var $lastBestNode_2_i = $lastBestNode_1118_i;
            var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
            var $status_2_i = $status_1116_i | 32;
            break;
           }
           var $303 = $297 + 20 | 0;
           do {
            if (HEAP32[$303 >> 2] >>> 0 < 1073741824) {
             if ((__ZNK14dtNavMeshQuery15getPortalPointsEjPK6dtPolyPK10dtMeshTilejS2_S5_PfS6_($225, $245, $242, $267, $287 + ($282 << 5) | 0, $284 + ($281 * 60 & -1) | 0, $159, $160) | 0) < 0) {
              break;
             }
             HEAPF32[$297 >> 2] = (HEAPF32[$159 >> 2] + HEAPF32[$160 >> 2]) * .5;
             HEAPF32[$297 + 4 >> 2] = (HEAPF32[$161 >> 2] + HEAPF32[$162 >> 2]) * .5;
             HEAPF32[$297 + 8 >> 2] = (HEAPF32[$163 >> 2] + HEAPF32[$164 >> 2]) * .5;
            }
           } while (0);
           var $327 = HEAPF32[$297 >> 2];
           var $329 = $327 - HEAPF32[$257 >> 2];
           var $331 = HEAPF32[$297 + 4 >> 2];
           var $333 = $331 - HEAPF32[$258 >> 2];
           var $335 = HEAPF32[$297 + 8 >> 2];
           var $337 = $335 - HEAPF32[$259 >> 2];
           var $343 = Math.sqrt($329 * $329 + $333 * $333 + $337 * $337);
           var $349 = $343 * HEAPF32[$filter + ((HEAP8[$263] & 63) << 2) >> 2];
           if (($267 | 0) == ($25 | 0)) {
            var $352 = HEAPF32[$18 >> 2] - $327;
            var $354 = HEAPF32[$117 >> 2] - $331;
            var $356 = HEAPF32[$121 >> 2] - $335;
            var $362 = Math.sqrt($352 * $352 + $354 * $354 + $356 * $356);
            var $heuristic_0_i = 0;
            var $cost_0_i = $362 * HEAPF32[$filter + ((HEAP8[$287 + ($282 << 5) + 31 | 0] & 63) << 2) >> 2] + ($349 + HEAPF32[$260 >> 2]);
           } else {
            var $375 = $349 + HEAPF32[$260 >> 2];
            var $377 = HEAPF32[$18 >> 2] - $327;
            var $379 = HEAPF32[$117 >> 2] - $331;
            var $381 = HEAPF32[$121 >> 2] - $335;
            var $heuristic_0_i = Math.sqrt($377 * $377 + $379 * $379 + $381 * $381) * .9990000128746033;
            var $cost_0_i = $375;
           }
           var $cost_0_i;
           var $heuristic_0_i;
           var $390 = $cost_0_i + $heuristic_0_i;
           var $391 = HEAP32[$303 >> 2];
           var $392 = $391 & 1073741824;
           var $393 = ($392 | 0) == 0;
           if (!$393) {
            if ($390 >= HEAPF32[$297 + 16 >> 2]) {
             var $lastBestNode_2_i = $lastBestNode_1118_i;
             var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
             var $status_2_i = $status_1116_i;
             break;
            }
           }
           if (($391 | 0) < 0) {
            if ($390 >= HEAPF32[$297 + 16 >> 2]) {
             var $lastBestNode_2_i = $lastBestNode_1118_i;
             var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
             var $status_2_i = $status_1116_i;
             break;
            }
           }
           if ($261) {
            var $_0_i106_i = 0;
           } else {
            var $_0_i106_i = (($262 - HEAP32[HEAP32[$87 >> 2] >> 2] | 0) / 28 & -1) + 1 & 1073741823;
           }
           var $_0_i106_i;
           HEAP32[$297 + 24 >> 2] = $267;
           HEAP32[$303 >> 2] = $392 | $_0_i106_i;
           HEAPF32[$297 + 12 >> 2] = $cost_0_i;
           var $415 = $297 + 16 | 0;
           HEAPF32[$415 >> 2] = $390;
           L1205 : do {
            if ($393) {
             HEAP32[$303 >> 2] = $_0_i106_i | 1073741824;
             var $445 = HEAP32[$96 >> 2];
             var $446 = $445 + 8 | 0;
             var $447 = HEAP32[$446 >> 2];
             HEAP32[$446 >> 2] = $447 + 1;
             var $449 = $445 | 0;
             L1207 : do {
              if (($447 | 0) > 0) {
               var $parent_013_in_in_i_i = $447;
               while (1) {
                var $parent_013_in_in_i_i;
                var $parent_013_in_i_i = $parent_013_in_in_i_i - 1 | 0;
                var $parent_013_i_i = ($parent_013_in_i_i | 0) / 2 & -1;
                var $451 = HEAP32[$449 >> 2];
                var $453 = HEAP32[$451 + ($parent_013_i_i << 2) >> 2];
                if (HEAPF32[$453 + 16 >> 2] <= HEAPF32[$415 >> 2]) {
                 var $_0_lcssa_i_i = $parent_013_in_in_i_i;
                 break L1207;
                }
                HEAP32[$451 + ($parent_013_in_in_i_i << 2) >> 2] = $453;
                if (($parent_013_in_i_i | 0) > 1) {
                 var $parent_013_in_in_i_i = $parent_013_i_i;
                } else {
                 var $_0_lcssa_i_i = $parent_013_i_i;
                 break;
                }
               }
              } else {
               var $_0_lcssa_i_i = $447;
              }
             } while (0);
             var $_0_lcssa_i_i;
             HEAP32[HEAP32[$449 >> 2] + ($_0_lcssa_i_i << 2) >> 2] = $297;
            } else {
             var $417 = HEAP32[$96 >> 2];
             var $419 = HEAP32[$417 + 8 >> 2];
             var $420 = $417 | 0;
             var $i_0_i_i = 0;
             while (1) {
              var $i_0_i_i;
              if (($i_0_i_i | 0) >= ($419 | 0)) {
               break L1205;
              }
              var $424 = HEAP32[$420 >> 2];
              if ((HEAP32[$424 + ($i_0_i_i << 2) >> 2] | 0) == ($297 | 0)) {
               break;
              } else {
               var $i_0_i_i = $i_0_i_i + 1 | 0;
              }
             }
             L1217 : do {
              if (($i_0_i_i | 0) > 0) {
               var $parent_013_in_in_i2_i = $i_0_i_i;
               var $432 = $424;
               var $431 = $390;
               while (1) {
                var $431;
                var $432;
                var $parent_013_in_in_i2_i;
                var $parent_013_in_i3_i = $parent_013_in_in_i2_i - 1 | 0;
                var $parent_013_i4_i = ($parent_013_in_i3_i | 0) / 2 & -1;
                var $434 = HEAP32[$432 + ($parent_013_i4_i << 2) >> 2];
                if (HEAPF32[$434 + 16 >> 2] <= $431) {
                 var $_0_lcssa_i5_i = $parent_013_in_in_i2_i;
                 var $441 = $432;
                 break L1217;
                }
                HEAP32[$432 + ($parent_013_in_in_i2_i << 2) >> 2] = $434;
                var $_pre46 = HEAP32[$420 >> 2];
                if (($parent_013_in_i3_i | 0) <= 1) {
                 var $_0_lcssa_i5_i = $parent_013_i4_i;
                 var $441 = $_pre46;
                 break L1217;
                }
                var $parent_013_in_in_i2_i = $parent_013_i4_i;
                var $432 = $_pre46;
                var $431 = HEAPF32[$415 >> 2];
               }
              } else {
               var $_0_lcssa_i5_i = $i_0_i_i;
               var $441 = $424;
              }
             } while (0);
             var $441;
             var $_0_lcssa_i5_i;
             HEAP32[$441 + ($_0_lcssa_i5_i << 2) >> 2] = $297;
            }
           } while (0);
           if ($heuristic_0_i >= $lastBestNodeCost_1117_i) {
            var $lastBestNode_2_i = $lastBestNode_1118_i;
            var $lastBestNodeCost_2_i = $lastBestNodeCost_1117_i;
            var $status_2_i = $status_1116_i;
            break;
           }
           var $lastBestNode_2_i = $297;
           var $lastBestNodeCost_2_i = $heuristic_0_i;
           var $status_2_i = $status_1116_i;
          }
         } while (0);
         var $status_2_i;
         var $lastBestNodeCost_2_i;
         var $lastBestNode_2_i;
         var $465 = HEAP32[$_phi_trans_insert_i >> 2];
         var $i_0_i = HEAP32[$465 + ($i_0119_i * 12 & -1) + 4 >> 2];
         if (($i_0_i | 0) == -1) {
          var $status_1_lcssa_i = $status_2_i;
          var $lastBestNodeCost_1_lcssa_i = $lastBestNodeCost_2_i;
          var $lastBestNode_1_lcssa_i = $lastBestNode_2_i;
          break;
         } else {
          var $status_1116_i = $status_2_i;
          var $lastBestNodeCost_1117_i = $lastBestNodeCost_2_i;
          var $lastBestNode_1118_i = $lastBestNode_2_i;
          var $i_0119_i = $i_0_i;
          var $265 = $465;
         }
        }
       }
       var $lastBestNode_1_lcssa_i;
       var $lastBestNodeCost_1_lcssa_i;
       var $status_1_lcssa_i;
       var $167 = HEAP32[$96 >> 2];
       var $168 = $167 + 8 | 0;
       var $169 = HEAP32[$168 >> 2];
       if (($169 | 0) == 0) {
        var $lastBestNode_3_i = $lastBestNode_1_lcssa_i;
        var $status_0_lcssa_i = $status_1_lcssa_i;
        break;
       } else {
        var $status_0122_i = $status_1_lcssa_i;
        var $lastBestNodeCost_0123_i = $lastBestNodeCost_1_lcssa_i;
        var $lastBestNode_0124_i = $lastBestNode_1_lcssa_i;
        var $174 = $167;
        var $173 = $168;
        var $172 = $169;
       }
      }
     }
    } while (0);
    var $status_0_lcssa_i;
    var $lastBestNode_3_i;
    var $469 = HEAP32[$lastBestNode_3_i + 24 >> 2];
    var $470 = $status_0_lcssa_i | 64;
    var $node_0_i = $lastBestNode_3_i;
    var $prev_0_i = 0;
    while (1) {
     var $prev_0_i;
     var $node_0_i;
     var $473 = $node_0_i + 20 | 0;
     var $474 = HEAP32[$473 >> 2];
     var $475 = $474 & 1073741823;
     if (($475 | 0) == 0) {
      var $_0_i104_i = 0;
     } else {
      var $_0_i104_i = HEAP32[HEAP32[$87 >> 2] >> 2] + (($475 - 1) * 28 & -1) | 0;
     }
     var $_0_i104_i;
     if (($prev_0_i | 0) == 0) {
      var $_0_i103_i = 0;
     } else {
      var $_0_i103_i = (($prev_0_i - HEAP32[HEAP32[$87 >> 2] >> 2] | 0) / 28 & -1) + 1 & 1073741823;
     }
     var $_0_i103_i;
     HEAP32[$473 >> 2] = $474 & -1073741824 | $_0_i103_i;
     if (($_0_i104_i | 0) == 0) {
      break;
     } else {
      var $prev_0_i = $node_0_i;
      var $node_0_i = $_0_i104_i;
     }
    }
    var $status_0__i = ($469 | 0) == ($25 | 0) ? $status_0_lcssa_i : $470;
    var $n_0_i = 0;
    var $node_1_i = $node_0_i;
    while (1) {
     var $node_1_i;
     var $n_0_i;
     var $500 = $n_0_i + 1 | 0;
     HEAP32[$8 + ($n_0_i << 2) >> 2] = HEAP32[$node_1_i + 24 >> 2];
     if (($500 | 0) >= ($maxPath | 0)) {
      label = 938;
      break;
     }
     var $509 = HEAP32[$node_1_i + 20 >> 2] & 1073741823;
     if (($509 | 0) == 0) {
      var $_0_i5 = $status_0__i;
      var $pathCount_0 = $500;
      break;
     }
     var $515 = HEAP32[HEAP32[$87 >> 2] >> 2] + (($509 - 1) * 28 & -1) | 0;
     if (($515 | 0) == 0) {
      var $_0_i5 = $status_0__i;
      var $pathCount_0 = $500;
      break;
     } else {
      var $n_0_i = $500;
      var $node_1_i = $515;
     }
    }
    if (label == 938) {
     var $_0_i5 = $status_0__i | 16;
     var $pathCount_0 = $500;
    }
    var $pathCount_0;
    var $_0_i5;
    if (($_0_i5 | 0) < 0) {
     var $_0_i550 = $_0_i5;
     label = 942;
     break;
    } else {
     var $pathCount_052 = $pathCount_0;
    }
   }
   var $pathCount_052;
   _printf(4936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $pathCount_052, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $521 = $maxPath * 10 & -1;
   var $522 = HEAP32[17760 >> 2];
   var $523 = $straightPath | 0;
   var $524 = $straightPathFlags | 0;
   var $525 = $straightPathRefs | 0;
   HEAP32[$straightPathCount >> 2] = 0;
   L1245 : do {
    if (($521 | 0) == 0) {
     var $_0_i = -2147483640;
    } else {
     var $533 = HEAP32[$8 >> 2];
     if (($533 | 0) == 0) {
      var $_0_i = -2147483640;
      break;
     }
     var $536 = $closestStartPos_i | 0;
     var $_idx7 = $522 | 0;
     if ((__ZNK14dtNavMeshQuery26closestPointOnPolyBoundaryEjPKfPf(HEAP32[$_idx7 >> 2], $533, $16, $536) | 0) < 0) {
      var $_0_i = -2147483640;
      break;
     }
     var $543 = $closestEndPos_i | 0;
     if ((__ZNK14dtNavMeshQuery26closestPointOnPolyBoundaryEjPKfPf(HEAP32[$_idx7 >> 2], HEAP32[$8 + ($pathCount_052 - 1 << 2) >> 2], $18, $543) | 0) < 0) {
      var $_0_i = -2147483640;
      break;
     }
     var $547 = __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($536, 1, $533, $523, $524, $525, $straightPathCount, $521);
     if (($547 | 0) != 536870912) {
      var $_0_i = $547;
      break;
     }
     L1251 : do {
      if (($pathCount_052 | 0) > 1) {
       var $551 = $portalApex_i | 0;
       var $552 = HEAPF32[$536 >> 2];
       HEAPF32[$551 >> 2] = $552;
       var $554 = HEAPF32[$closestStartPos_i + 4 >> 2];
       var $555 = $portalApex_i + 4 | 0;
       HEAPF32[$555 >> 2] = $554;
       var $557 = HEAPF32[$closestStartPos_i + 8 >> 2];
       var $558 = $portalApex_i + 8 | 0;
       HEAPF32[$558 >> 2] = $557;
       var $559 = $left_i | 0;
       var $560 = $right_i | 0;
       var $561 = $right_i + 8 | 0;
       var $562 = $left_i + 8 | 0;
       var $563 = $left_i + 4 | 0;
       var $564 = $right_i + 4 | 0;
       var $565 = $closestEndPos_i + 4 | 0;
       var $566 = $closestEndPos_i + 8 | 0;
       var $570 = 0;
       var $leftIndex_0133_i = 0;
       var $rightIndex_0135_i = 0;
       var $leftPolyType_0137_i = 0;
       var $rightPolyType_0139_i = 0;
       var $leftPolyRef_0140_i = $533;
       var $rightPolyRef_0142_i = $533;
       var $i_0143_i = 0;
       var $portalRight_i_sroa_0_0 = $552;
       var $portalRight_i_sroa_1_0 = $554;
       var $portalRight_i_sroa_2_0 = $557;
       var $portalLeft_i_sroa_0_0 = $552;
       var $portalLeft_i_sroa_1_0 = $554;
       var $portalLeft_i_sroa_2_0 = $557;
       var $569 = $552;
       var $568 = $557;
       L1253 : while (1) {
        var $568;
        var $569;
        var $portalLeft_i_sroa_2_0;
        var $portalLeft_i_sroa_1_0;
        var $portalLeft_i_sroa_0_0;
        var $portalRight_i_sroa_2_0;
        var $portalRight_i_sroa_1_0;
        var $portalRight_i_sroa_0_0;
        var $i_0143_i;
        var $rightPolyRef_0142_i;
        var $leftPolyRef_0140_i;
        var $rightPolyType_0139_i;
        var $leftPolyType_0137_i;
        var $rightIndex_0135_i;
        var $leftIndex_0133_i;
        var $570;
        var $571 = $i_0143_i + 1 | 0;
        var $572 = ($571 | 0) < ($pathCount_052 | 0);
        do {
         if ($572) {
          var $575 = HEAP32[$8 + ($i_0143_i << 2) >> 2];
          var $577 = HEAP32[$8 + ($571 << 2) >> 2];
          var $578 = HEAP32[$_idx7 >> 2];
          if (($575 | 0) == 0) {
           break L1253;
          }
          var $582 = HEAP32[$578 + 76 >> 2];
          var $584 = (1 << $582) - 1 | 0;
          var $586 = HEAP32[$578 + 80 >> 2];
          var $588 = (1 << $586) - 1 | 0;
          var $590 = $575 >>> ($586 >>> 0) & $584;
          var $591 = $588 & $575;
          var $593 = HEAP32[$578 + 48 >> 2];
          if ($590 >>> 0 >= $593 >>> 0) {
           break L1253;
          }
          var $598 = $586 + $582 | 0;
          var $601 = (1 << HEAP32[$578 + 72 >> 2]) - 1 | 0;
          var $604 = HEAP32[$578 + 68 >> 2];
          var $605 = $604 + ($590 * 60 & -1) | 0;
          if ((HEAP32[$605 >> 2] | 0) != ($601 & $575 >>> ($598 >>> 0) | 0)) {
           break L1253;
          }
          var $611 = HEAP32[$604 + ($590 * 60 & -1) + 8 >> 2];
          if (($611 | 0) == 0) {
           break L1253;
          }
          if ($591 >>> 0 >= HEAP32[$611 + 24 >> 2] >>> 0) {
           break L1253;
          }
          if (($577 | 0) == 0) {
           break L1253;
          }
          var $624 = $577 >>> ($586 >>> 0) & $584;
          var $625 = $588 & $577;
          if ($624 >>> 0 >= $593 >>> 0) {
           break L1253;
          }
          var $630 = $604 + ($624 * 60 & -1) | 0;
          if ((HEAP32[$630 >> 2] | 0) != ($601 & $577 >>> ($598 >>> 0) | 0)) {
           break L1253;
          }
          var $636 = HEAP32[$604 + ($624 * 60 & -1) + 8 >> 2];
          if (($636 | 0) == 0) {
           break L1253;
          }
          if ($625 >>> 0 >= HEAP32[$636 + 24 >> 2] >>> 0) {
           break L1253;
          }
          var $643 = HEAP32[$604 + ($624 * 60 & -1) + 12 >> 2];
          var $647 = HEAPU8[$643 + ($625 << 5) + 31 | 0] >>> 6;
          if ((__ZNK14dtNavMeshQuery15getPortalPointsEjPK6dtPolyPK10dtMeshTilejS2_S5_PfS6_($575, HEAP32[$604 + ($590 * 60 & -1) + 12 >> 2] + ($591 << 5) | 0, $605, $577, $643 + ($625 << 5) | 0, $630, $559, $560) | 0) < 0) {
           break L1253;
          }
          var $658 = HEAPF32[$560 >> 2];
          if (($i_0143_i | 0) != 0) {
           var $698 = $647;
           var $697 = $658;
           var $696 = HEAPF32[$561 >> 2];
           label = 973;
           break;
          }
          var $660 = HEAPF32[$559 >> 2];
          var $661 = $658 - $660;
          var $662 = HEAPF32[$561 >> 2];
          var $663 = HEAPF32[$562 >> 2];
          var $664 = $662 - $663;
          var $669 = $661 * $661 + $664 * $664;
          var $672 = $661 * ($569 - $660) + $664 * ($568 - $663);
          if ($669 > 0) {
           var $storemerge_i_i = $672 / $669;
          } else {
           var $storemerge_i_i = $672;
          }
          var $storemerge_i_i;
          do {
           if ($storemerge_i_i < 0) {
            var $681 = 0;
           } else {
            if ($storemerge_i_i <= 1) {
             var $681 = $storemerge_i_i;
             break;
            }
            var $681 = 1;
           }
          } while (0);
          var $681;
          var $684 = $660 + $661 * $681 - $569;
          var $687 = $664 * $681 + $663 - $568;
          if ($684 * $684 + $687 * $687 < 10000001111620804e-22) {
           var $i_1_i = 0;
           var $rightPolyRef_2_i = $rightPolyRef_0142_i;
           var $leftPolyRef_1_i = $leftPolyRef_0140_i;
           var $rightPolyType_2_i = $rightPolyType_0139_i;
           var $leftPolyType_1_i = $leftPolyType_0137_i;
           var $rightIndex_2_i = $rightIndex_0135_i;
           var $leftIndex_1_i = $leftIndex_0133_i;
           var $820 = $647;
           var $portalRight_i_sroa_0_2 = $portalRight_i_sroa_0_0;
           var $portalRight_i_sroa_1_2 = $portalRight_i_sroa_1_0;
           var $portalRight_i_sroa_2_2 = $portalRight_i_sroa_2_0;
           var $portalLeft_i_sroa_0_1 = $portalLeft_i_sroa_0_0;
           var $portalLeft_i_sroa_1_1 = $portalLeft_i_sroa_1_0;
           var $portalLeft_i_sroa_2_1 = $portalLeft_i_sroa_2_0;
           var $819 = $569;
           var $818 = $568;
          } else {
           var $698 = $647;
           var $697 = $658;
           var $696 = $662;
           label = 973;
          }
         } else {
          var $693 = HEAPF32[$543 >> 2];
          HEAPF32[$559 >> 2] = $693;
          var $694 = HEAPF32[$565 >> 2];
          HEAPF32[$563 >> 2] = $694;
          var $695 = HEAPF32[$566 >> 2];
          HEAPF32[$562 >> 2] = $695;
          HEAPF32[$560 >> 2] = $693;
          HEAPF32[$564 >> 2] = $694;
          HEAPF32[$561 >> 2] = $695;
          var $698 = 0;
          var $697 = $693;
          var $696 = $695;
          label = 973;
         }
        } while (0);
        L1279 : do {
         if (label == 973) {
          label = 0;
          var $696;
          var $697;
          var $698;
          do {
           if (($portalRight_i_sroa_2_0 - $568) * ($697 - $569) - ($portalRight_i_sroa_0_0 - $569) * ($696 - $568) > 0) {
            var $rightPolyRef_1_i = $rightPolyRef_0142_i;
            var $rightPolyType_1_i = $rightPolyType_0139_i;
            var $rightIndex_1_i = $rightIndex_0135_i;
            var $757 = $569;
            var $756 = $568;
            var $portalRight_i_sroa_0_1 = $portalRight_i_sroa_0_0;
            var $portalRight_i_sroa_1_1 = $portalRight_i_sroa_1_0;
            var $portalRight_i_sroa_2_1 = $portalRight_i_sroa_2_0;
           } else {
            do {
             if ((HEAP8[22264] | 0) == 0) {
              if ((___cxa_guard_acquire(22264) | 0) == 0) {
               break;
              }
              HEAPF32[9688 >> 2] = 3.725290298461914e-9;
             }
            } while (0);
            var $714 = HEAPF32[$551 >> 2];
            var $715 = $portalRight_i_sroa_0_0 - $714;
            var $717 = $portalRight_i_sroa_1_0 - HEAPF32[$555 >> 2];
            var $718 = HEAPF32[$558 >> 2];
            var $719 = $portalRight_i_sroa_2_0 - $718;
            do {
             if ($715 * $715 + $717 * $717 + $719 * $719 < HEAPF32[9688 >> 2]) {
              var $740 = HEAPF32[$560 >> 2];
              var $739 = HEAPF32[$561 >> 2];
             } else {
              var $730 = HEAPF32[$560 >> 2];
              var $732 = HEAPF32[$561 >> 2];
              if (($portalLeft_i_sroa_2_0 - $718) * ($730 - $714) - ($portalLeft_i_sroa_0_0 - $714) * ($732 - $718) > 0) {
               var $740 = $730;
               var $739 = $732;
               break;
              }
              HEAPF32[$551 >> 2] = $portalLeft_i_sroa_0_0;
              HEAPF32[$555 >> 2] = $portalLeft_i_sroa_1_0;
              HEAPF32[$558 >> 2] = $portalLeft_i_sroa_2_0;
              if (($leftPolyRef_0140_i | 0) == 0) {
               var $flags_0_i = 2;
              } else {
               var $flags_0_i = $leftPolyType_0137_i << 24 >> 24 == 1 ? 4 : 0;
              }
              var $flags_0_i;
              var $750 = __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($551, $flags_0_i, $leftPolyRef_0140_i, $523, $524, $525, $straightPathCount, $521);
              if (($750 | 0) != 536870912) {
               var $_0_i = $750;
               break L1245;
              }
              var $753 = HEAPF32[$551 >> 2];
              var $754 = HEAPF32[$555 >> 2];
              var $755 = HEAPF32[$558 >> 2];
              var $i_1_i = $leftIndex_0133_i;
              var $rightPolyRef_2_i = $rightPolyRef_0142_i;
              var $leftPolyRef_1_i = $leftPolyRef_0140_i;
              var $rightPolyType_2_i = $rightPolyType_0139_i;
              var $leftPolyType_1_i = $leftPolyType_0137_i;
              var $rightIndex_2_i = $leftIndex_0133_i;
              var $leftIndex_1_i = $leftIndex_0133_i;
              var $820 = $698;
              var $portalRight_i_sroa_0_2 = $753;
              var $portalRight_i_sroa_1_2 = $754;
              var $portalRight_i_sroa_2_2 = $755;
              var $portalLeft_i_sroa_0_1 = $753;
              var $portalLeft_i_sroa_1_1 = $754;
              var $portalLeft_i_sroa_2_1 = $755;
              var $819 = $753;
              var $818 = $755;
              break L1279;
             }
            } while (0);
            var $739;
            var $740;
            var $741 = HEAPF32[$564 >> 2];
            if (!$572) {
             var $rightPolyRef_1_i = 0;
             var $rightPolyType_1_i = $698;
             var $rightIndex_1_i = $i_0143_i;
             var $757 = $714;
             var $756 = $718;
             var $portalRight_i_sroa_0_1 = $740;
             var $portalRight_i_sroa_1_1 = $741;
             var $portalRight_i_sroa_2_1 = $739;
             break;
            }
            var $rightPolyRef_1_i = HEAP32[$8 + ($571 << 2) >> 2];
            var $rightPolyType_1_i = $698;
            var $rightIndex_1_i = $i_0143_i;
            var $757 = $714;
            var $756 = $718;
            var $portalRight_i_sroa_0_1 = $740;
            var $portalRight_i_sroa_1_1 = $741;
            var $portalRight_i_sroa_2_1 = $739;
           }
          } while (0);
          var $portalRight_i_sroa_2_1;
          var $portalRight_i_sroa_1_1;
          var $portalRight_i_sroa_0_1;
          var $756;
          var $757;
          var $rightIndex_1_i;
          var $rightPolyType_1_i;
          var $rightPolyRef_1_i;
          if (($portalLeft_i_sroa_2_0 - $756) * (HEAPF32[$559 >> 2] - $757) - ($portalLeft_i_sroa_0_0 - $757) * (HEAPF32[$562 >> 2] - $756) < 0) {
           var $i_1_i = $i_0143_i;
           var $rightPolyRef_2_i = $rightPolyRef_1_i;
           var $leftPolyRef_1_i = $leftPolyRef_0140_i;
           var $rightPolyType_2_i = $rightPolyType_1_i;
           var $leftPolyType_1_i = $leftPolyType_0137_i;
           var $rightIndex_2_i = $rightIndex_1_i;
           var $leftIndex_1_i = $leftIndex_0133_i;
           var $820 = $698;
           var $portalRight_i_sroa_0_2 = $portalRight_i_sroa_0_1;
           var $portalRight_i_sroa_1_2 = $portalRight_i_sroa_1_1;
           var $portalRight_i_sroa_2_2 = $portalRight_i_sroa_2_1;
           var $portalLeft_i_sroa_0_1 = $portalLeft_i_sroa_0_0;
           var $portalLeft_i_sroa_1_1 = $portalLeft_i_sroa_1_0;
           var $portalLeft_i_sroa_2_1 = $portalLeft_i_sroa_2_0;
           var $819 = $757;
           var $818 = $756;
           break;
          }
          do {
           if ((HEAP8[22264] | 0) == 0) {
            if ((___cxa_guard_acquire(22264) | 0) == 0) {
             break;
            }
            HEAPF32[9688 >> 2] = 3.725290298461914e-9;
           }
          } while (0);
          var $775 = HEAPF32[$551 >> 2];
          var $776 = $portalLeft_i_sroa_0_0 - $775;
          var $778 = $portalLeft_i_sroa_1_0 - HEAPF32[$555 >> 2];
          var $779 = HEAPF32[$558 >> 2];
          var $780 = $portalLeft_i_sroa_2_0 - $779;
          do {
           if ($776 * $776 + $778 * $778 + $780 * $780 < HEAPF32[9688 >> 2]) {
            var $801 = HEAPF32[$559 >> 2];
            var $800 = HEAPF32[$562 >> 2];
           } else {
            var $791 = HEAPF32[$559 >> 2];
            var $793 = HEAPF32[$562 >> 2];
            if (($portalRight_i_sroa_2_1 - $779) * ($791 - $775) - ($portalRight_i_sroa_0_1 - $775) * ($793 - $779) < 0) {
             var $801 = $791;
             var $800 = $793;
             break;
            }
            HEAPF32[$551 >> 2] = $portalRight_i_sroa_0_1;
            HEAPF32[$555 >> 2] = $portalRight_i_sroa_1_1;
            HEAPF32[$558 >> 2] = $portalRight_i_sroa_2_1;
            if (($rightPolyRef_1_i | 0) == 0) {
             var $flags1_0_i = 2;
            } else {
             var $flags1_0_i = $rightPolyType_1_i << 24 >> 24 == 1 ? 4 : 0;
            }
            var $flags1_0_i;
            var $811 = __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($551, $flags1_0_i, $rightPolyRef_1_i, $523, $524, $525, $straightPathCount, $521);
            if (($811 | 0) != 536870912) {
             var $_0_i = $811;
             break L1245;
            }
            var $814 = HEAPF32[$551 >> 2];
            var $815 = HEAPF32[$555 >> 2];
            var $816 = HEAPF32[$558 >> 2];
            var $i_1_i = $rightIndex_1_i;
            var $rightPolyRef_2_i = $rightPolyRef_1_i;
            var $leftPolyRef_1_i = $leftPolyRef_0140_i;
            var $rightPolyType_2_i = $rightPolyType_1_i;
            var $leftPolyType_1_i = $leftPolyType_0137_i;
            var $rightIndex_2_i = $rightIndex_1_i;
            var $leftIndex_1_i = $rightIndex_1_i;
            var $820 = $698;
            var $portalRight_i_sroa_0_2 = $814;
            var $portalRight_i_sroa_1_2 = $815;
            var $portalRight_i_sroa_2_2 = $816;
            var $portalLeft_i_sroa_0_1 = $814;
            var $portalLeft_i_sroa_1_1 = $815;
            var $portalLeft_i_sroa_2_1 = $816;
            var $819 = $814;
            var $818 = $816;
            break L1279;
           }
          } while (0);
          var $800;
          var $801;
          var $802 = HEAPF32[$563 >> 2];
          if (!$572) {
           var $i_1_i = $i_0143_i;
           var $rightPolyRef_2_i = $rightPolyRef_1_i;
           var $leftPolyRef_1_i = 0;
           var $rightPolyType_2_i = $rightPolyType_1_i;
           var $leftPolyType_1_i = $698;
           var $rightIndex_2_i = $rightIndex_1_i;
           var $leftIndex_1_i = $i_0143_i;
           var $820 = $698;
           var $portalRight_i_sroa_0_2 = $portalRight_i_sroa_0_1;
           var $portalRight_i_sroa_1_2 = $portalRight_i_sroa_1_1;
           var $portalRight_i_sroa_2_2 = $portalRight_i_sroa_2_1;
           var $portalLeft_i_sroa_0_1 = $801;
           var $portalLeft_i_sroa_1_1 = $802;
           var $portalLeft_i_sroa_2_1 = $800;
           var $819 = $775;
           var $818 = $779;
           break;
          }
          var $i_1_i = $i_0143_i;
          var $rightPolyRef_2_i = $rightPolyRef_1_i;
          var $leftPolyRef_1_i = HEAP32[$8 + ($571 << 2) >> 2];
          var $rightPolyType_2_i = $rightPolyType_1_i;
          var $leftPolyType_1_i = $698;
          var $rightIndex_2_i = $rightIndex_1_i;
          var $leftIndex_1_i = $i_0143_i;
          var $820 = $698;
          var $portalRight_i_sroa_0_2 = $portalRight_i_sroa_0_1;
          var $portalRight_i_sroa_1_2 = $portalRight_i_sroa_1_1;
          var $portalRight_i_sroa_2_2 = $portalRight_i_sroa_2_1;
          var $portalLeft_i_sroa_0_1 = $801;
          var $portalLeft_i_sroa_1_1 = $802;
          var $portalLeft_i_sroa_2_1 = $800;
          var $819 = $775;
          var $818 = $779;
         }
        } while (0);
        var $818;
        var $819;
        var $portalLeft_i_sroa_2_1;
        var $portalLeft_i_sroa_1_1;
        var $portalLeft_i_sroa_0_1;
        var $portalRight_i_sroa_2_2;
        var $portalRight_i_sroa_1_2;
        var $portalRight_i_sroa_0_2;
        var $820;
        var $leftIndex_1_i;
        var $rightIndex_2_i;
        var $leftPolyType_1_i;
        var $rightPolyType_2_i;
        var $leftPolyRef_1_i;
        var $rightPolyRef_2_i;
        var $i_1_i;
        var $821 = $i_1_i + 1 | 0;
        if (($821 | 0) < ($pathCount_052 | 0)) {
         var $570 = $820;
         var $leftIndex_0133_i = $leftIndex_1_i;
         var $rightIndex_0135_i = $rightIndex_2_i;
         var $leftPolyType_0137_i = $leftPolyType_1_i;
         var $rightPolyType_0139_i = $rightPolyType_2_i;
         var $leftPolyRef_0140_i = $leftPolyRef_1_i;
         var $rightPolyRef_0142_i = $rightPolyRef_2_i;
         var $i_0143_i = $821;
         var $portalRight_i_sroa_0_0 = $portalRight_i_sroa_0_2;
         var $portalRight_i_sroa_1_0 = $portalRight_i_sroa_1_2;
         var $portalRight_i_sroa_2_0 = $portalRight_i_sroa_2_2;
         var $portalLeft_i_sroa_0_0 = $portalLeft_i_sroa_0_1;
         var $portalLeft_i_sroa_1_0 = $portalLeft_i_sroa_1_1;
         var $portalLeft_i_sroa_2_0 = $portalLeft_i_sroa_2_1;
         var $569 = $819;
         var $568 = $818;
        } else {
         break L1251;
        }
       }
       if ((__ZNK14dtNavMeshQuery26closestPointOnPolyBoundaryEjPKfPf(HEAP32[$_idx7 >> 2], $575, $18, $543) | 0) < 0) {
        var $_0_i = -2147483640;
        break L1245;
       }
       __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($543, 0, $575, $523, $524, $525, $straightPathCount, $521);
       var $_0_i = (HEAP32[$straightPathCount >> 2] | 0) >= ($521 | 0) ? 1073741904 : 1073741888;
       break L1245;
      }
     } while (0);
     __ZNK14dtNavMeshQuery12appendVertexEPKfhjPfPhPjPii($543, 2, 0, $523, $524, $525, $straightPathCount, $521);
     var $_0_i = (HEAP32[$straightPathCount >> 2] | 0) >= ($521 | 0) ? 1073741840 : 1073741824;
    }
   } while (0);
   var $_0_i;
   if (($_0_i | 0) < 0) {
    _printf(4784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_0_i, tempVarArgs));
    STACKTOP = tempVarArgs;
    break;
   }
   var $831 = HEAP32[$straightPathCount >> 2];
   _printf(4696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $831, tempVarArgs));
   STACKTOP = tempVarArgs;
   if (($831 | 0) <= 0) {
    break;
   }
   var $834 = $buff | 0;
   var $835 = $buff_i | 0;
   var $i_043 = 0;
   while (1) {
    var $i_043;
    var $837 = $i_043 * 3 & -1;
    var $839 = HEAPF32[$straightPath + ($837 << 2) >> 2];
    var $840 = $839;
    var $841 = Math.abs($839) < 9.999999974752427e-7;
    var $843 = HEAPF32[$straightPath + ($837 + 1 << 2) >> 2];
    do {
     if ($841) {
      if (Math.abs($843) >= 9.999999974752427e-7) {
       var $851 = $843;
       label = 1008;
       break;
      }
      var $849 = HEAPF32[$straightPath + ($837 + 2 << 2) >> 2];
      if (Math.abs($849) >= 9.999999974752427e-7) {
       var $851 = $843;
       label = 1008;
       break;
      }
      _sprintf($834, 4624, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $840, HEAPF64[tempVarArgs + 8 >> 3] = $843, HEAPF64[tempVarArgs + 16 >> 3] = $849, tempVarArgs));
      STACKTOP = tempVarArgs;
      _sprintf($835, 4080, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $834, tempVarArgs));
      STACKTOP = tempVarArgs;
      _emscripten_run_script($835);
     } else {
      var $851 = $843;
      label = 1008;
     }
    } while (0);
    if (label == 1008) {
     label = 0;
     var $851;
     var $855 = HEAPF32[$straightPath + ($837 + 2 << 2) >> 2];
     _sprintf($834, 5880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAPF64[tempVarArgs >> 3] = $840, HEAPF64[tempVarArgs + 8 >> 3] = $851, HEAPF64[tempVarArgs + 16 >> 3] = $855, tempVarArgs));
     STACKTOP = tempVarArgs;
     _emscripten_run_script($834);
    }
    var $862 = $i_043 + 1 | 0;
    if (($862 | 0) < ($831 | 0)) {
     var $i_043 = $862;
    } else {
     break;
    }
   }
  }
 } while (0);
 if (label == 942) {
  var $_0_i550;
  _printf(5104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_0_i550, tempVarArgs));
  STACKTOP = tempVarArgs;
 }
 var $864 = $buff | 0;
 if ((HEAP8[$callback] & 1) == 0) {
  var $875 = $callback + 1 | 0;
  var $875;
  var $876 = _sprintf($864, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $875, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($864);
  STACKTOP = sp;
  return;
 } else {
  var $875 = HEAP32[$callback + 8 >> 2];
  var $875;
  var $876 = _sprintf($864, 5848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $875, tempVarArgs));
  STACKTOP = tempVarArgs;
  _emscripten_run_script($864);
  STACKTOP = sp;
  return;
 }
}
function __Z12set_cellSizef($val) {
 HEAPF32[464 >> 2] = $val;
 return;
}
function __Z14set_cellHeightf($val) {
 HEAPF32[472 >> 2] = $val;
 return;
}
function __Z15set_agentHeightf($val) {
 HEAPF32[504 >> 2] = $val;
 return;
}
function __Z15set_agentRadiusf($val) {
 HEAPF32[480 >> 2] = $val;
 return;
}
function __Z17set_agentMaxClimbf($val) {
 HEAPF32[496 >> 2] = $val;
 return;
}
function __Z17set_agentMaxSlopef($val) {
 HEAPF32[488 >> 2] = $val;
 return;
}
function __Z17set_regionMinSizef($val) {
 HEAPF32[416 >> 2] = $val;
 return;
}
function __Z19set_regionMergeSizef($val) {
 HEAPF32[424 >> 2] = $val;
 return;
}
function __Z14set_edgeMaxLenf($val) {
 HEAPF32[432 >> 2] = $val;
 return;
}
function __Z16set_edgeMaxErrorf($val) {
 HEAPF32[440 >> 2] = $val;
 return;
}
function __Z16set_vertsPerPolyf($val) {
 HEAPF32[408 >> 2] = $val;
 return;
}
function __Z20set_detailSampleDistf($val) {
 HEAPF32[456 >> 2] = $val;
 return;
}
function __Z24set_detailSampleMaxErrorf($val) {
 HEAPF32[448 >> 2] = $val;
 return;
}
function __Z4initv() {
 return (_getThreeJSMeshes() | 0) != 0;
}
function __Z12initWithFilev() {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 664 | 0;
 var $row_i_i = sp;
 var $face_i_i = sp + 512;
 var $x_i_i = sp + 640;
 var $y_i_i = sp + 648;
 var $z_i_i = sp + 656;
 _printf(4576, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
 STACKTOP = tempVarArgs;
 while (1) {
  var $3 = _malloc(50216);
  if (($3 | 0) != 0) {
   break;
  }
  var $6 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($6 | 0) == 0) {
   label = 1039;
   break;
  }
  FUNCTION_TABLE[$6]();
 }
 if (label == 1039) {
  var $16 = ___cxa_allocate_exception(4);
  HEAP32[$16 >> 2] = 9744;
  ___cxa_throw($16, 15960, 74);
 }
 var $21 = $3;
 HEAP32[$21 >> 2] = 0;
 var $23 = $3 + 4 | 0;
 HEAP32[$23 >> 2] = 0;
 var $25 = $3 + 9248 | 0;
 HEAP32[$25 >> 2] = 0;
 var $27 = $3 + 50212 | 0;
 HEAP32[$27 >> 2] = 0;
 HEAP32[17776 >> 2] = $3;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$27 >> 2] = 0;
 while (1) {
  var $30 = _malloc(284);
  if (($30 | 0) != 0) {
   break;
  }
  var $33 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($33 | 0) == 0) {
   label = 1050;
   break;
  }
  FUNCTION_TABLE[$33]();
 }
 if (label == 1050) {
  var $43 = ___cxa_allocate_exception(4);
  HEAP32[$43 >> 2] = 9744;
  ___cxa_throw($43, 15960, 74);
 }
 var $50 = $30 + 260 | 0;
 HEAPF32[$50 >> 2] = 1;
 var $51 = $30 + 264 | 0;
 HEAP32[$51 >> 2] = 0;
 HEAP32[$51 + 4 >> 2] = 0;
 HEAP32[$51 + 8 >> 2] = 0;
 HEAP32[$51 + 12 >> 2] = 0;
 HEAP32[$51 + 16 >> 2] = 0;
 HEAP32[$23 >> 2] = $30;
 var $52 = $row_i_i | 0;
 var $57 = _fopen(4496, 7200);
 do {
  if (($57 | 0) == 0) {
   __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 7416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 4496, tempVarArgs));
   STACKTOP = tempVarArgs;
  } else {
   _fseek($57, 0, 2);
   var $61 = _ftell($57);
   _fseek($57, 0, 0);
   var $64 = ($61 | 0) > -1 ? $61 : -1;
   var $_size_i_i_i = ($64 | 0) == 0 ? 1 : $64;
   while (1) {
    var $67 = _malloc($_size_i_i_i);
    if (($67 | 0) != 0) {
     break;
    }
    var $70 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($70 | 0) == 0) {
     label = 1063;
     break;
    }
    FUNCTION_TABLE[$70]();
   }
   if (label == 1063) {
    var $80 = ___cxa_allocate_exception(4);
    HEAP32[$80 >> 2] = 9744;
    ___cxa_throw($80, 15960, 74);
   }
   _fread($67, $61, 1, $57);
   _fclose($57);
   var $93 = $67 + $61 | 0;
   var $94 = $row_i_i + 1 | 0;
   var $96 = $30 + 276 | 0;
   var $97 = $51;
   var $98 = $face_i_i | 0;
   var $100 = $30 + 280 | 0;
   var $101 = $30 + 268 | 0;
   var $_phi_trans_insert_i_i = $face_i_i + 4 | 0;
   var $src_0_ph_ph_i_i_ph = $67;
   var $_ph112_ph_i_i_ph = 0;
   var $_ph111_ph_i_i_ph = 0;
   L1380 : while (1) {
    var $_ph111_ph_i_i_ph;
    var $_ph112_ph_i_i_ph;
    var $src_0_ph_ph_i_i_ph;
    var $src_0_ph_i_i_ph = $src_0_ph_ph_i_i_ph;
    var $_ph111_i_i_ph = $_ph111_ph_i_i_ph;
    while (1) {
     var $_ph111_i_i_ph;
     var $src_0_ph_i_i_ph;
     var $src_0_i_i = $src_0_ph_i_i_ph;
     while (1) {
      var $src_0_i_i;
      if ($src_0_i_i >>> 0 >= $93 >>> 0) {
       label = 1145;
       break L1380;
      }
      HEAP8[$52] = 0;
      var $_0_ph_ph_i_i_i = $src_0_i_i;
      var $n_0_ph_ph_i_i_i = 0;
      var $done_0_off0_ph_ph_i_i_i = 0;
      var $start_0_off0_ph_ph_i_i_i = 1;
      L1387 : while (1) {
       var $start_0_off0_ph_ph_i_i_i;
       var $done_0_off0_ph_ph_i_i_i;
       var $n_0_ph_ph_i_i_i;
       var $_0_ph_ph_i_i_i;
       var $_0_ph_i_i_i = $_0_ph_ph_i_i_i;
       var $done_0_off0_ph_i_i_i = $done_0_off0_ph_ph_i_i_i;
       var $start_0_off0_ph_i_i_i = $start_0_off0_ph_ph_i_i_i;
       L1389 : while (1) {
        var $start_0_off0_ph_i_i_i;
        var $done_0_off0_ph_i_i_i;
        var $_0_ph_i_i_i;
        if (!($_0_ph_i_i_i >>> 0 < $93 >>> 0 & ($done_0_off0_ph_i_i_i ^ 1))) {
         var $_0_lcssa_i_i_i = $_0_ph_i_i_i;
         break L1387;
        }
        var $not_start_0_off0_i_i_i = $start_0_off0_ph_i_i_i ^ 1;
        L1392 : do {
         if ($start_0_off0_ph_i_i_i) {
          var $done_0_off0_ph233_i_us_i_i = $done_0_off0_ph_i_i_i;
          var $_0_ph435_i_us_i_i = $_0_ph_i_i_i;
          while (1) {
           var $_0_ph435_i_us_i_i;
           var $done_0_off0_ph233_i_us_i_i;
           var $_014_us_i_us_i_i = $_0_ph435_i_us_i_i;
           while (1) {
            var $_014_us_i_us_i_i;
            var $106 = HEAP8[$_014_us_i_us_i_i];
            var $107 = $_014_us_i_us_i_i + 1 | 0;
            var $108 = $106 << 24 >> 24;
            if (($108 | 0) == 10) {
             break;
            } else if (($108 | 0) == 9 | ($108 | 0) == 32) {
             var $_lcssa76_i_i = $106;
             var $_lcssa80_i_i = $107;
             var $done_0_off0_ph233_i_lcssa83_i_i = $done_0_off0_ph233_i_us_i_i;
             break L1392;
            } else if (!(($108 | 0) == 92 | ($108 | 0) == 13)) {
             var $116 = $106;
             var $115 = $107;
             var $done_0_off0_ph233_i86_i_i = $done_0_off0_ph233_i_us_i_i;
             break L1389;
            }
            if ($107 >>> 0 < $93 >>> 0) {
             var $_014_us_i_us_i_i = $107;
            } else {
             var $_0_lcssa_i_i_i = $107;
             break L1387;
            }
           }
           if ($107 >>> 0 < $93 >>> 0 & ($done_0_off0_ph233_i_us_i_i ^ 1)) {
            var $done_0_off0_ph233_i_us_i_i = $done_0_off0_ph233_i_us_i_i | $not_start_0_off0_i_i_i;
            var $_0_ph435_i_us_i_i = $107;
           } else {
            var $_0_lcssa_i_i_i = $107;
            break L1387;
           }
          }
         } else {
          var $_014_us_i_i_i = $_0_ph_i_i_i;
          while (1) {
           var $_014_us_i_i_i;
           var $111 = HEAP8[$_014_us_i_i_i];
           var $112 = $_014_us_i_i_i + 1 | 0;
           var $113 = $111 << 24 >> 24;
           if (($113 | 0) == 9 | ($113 | 0) == 32) {
            var $_lcssa76_i_i = $111;
            var $_lcssa80_i_i = $112;
            var $done_0_off0_ph233_i_lcssa83_i_i = $done_0_off0_ph_i_i_i;
            break L1392;
           } else if (($113 | 0) == 10) {
            var $_0_lcssa_i_i_i = $112;
            break L1387;
           } else if (!(($113 | 0) == 92 | ($113 | 0) == 13)) {
            var $116 = $111;
            var $115 = $112;
            var $done_0_off0_ph233_i86_i_i = $done_0_off0_ph_i_i_i;
            break L1389;
           }
           if ($112 >>> 0 < $93 >>> 0) {
            var $_014_us_i_i_i = $112;
           } else {
            var $_0_lcssa_i_i_i = $112;
            break L1387;
           }
          }
         }
        } while (0);
        var $done_0_off0_ph233_i_lcssa83_i_i;
        var $_lcssa80_i_i;
        var $_lcssa76_i_i;
        if ($start_0_off0_ph_i_i_i) {
         var $_0_ph_i_i_i = $_lcssa80_i_i;
         var $done_0_off0_ph_i_i_i = $done_0_off0_ph233_i_lcssa83_i_i;
         var $start_0_off0_ph_i_i_i = 1;
        } else {
         var $116 = $_lcssa76_i_i;
         var $115 = $_lcssa80_i_i;
         var $done_0_off0_ph233_i86_i_i = $done_0_off0_ph233_i_lcssa83_i_i;
         break;
        }
       }
       var $done_0_off0_ph233_i86_i_i;
       var $115;
       var $116;
       var $117 = $n_0_ph_ph_i_i_i + 1 | 0;
       HEAP8[$row_i_i + $n_0_ph_ph_i_i_i | 0] = $116;
       var $_0_ph_ph_i_i_i = $115;
       var $n_0_ph_ph_i_i_i = $117;
       var $done_0_off0_ph_ph_i_i_i = ($117 | 0) > 510 | $done_0_off0_ph233_i86_i_i;
       var $start_0_off0_ph_ph_i_i_i = 0;
      }
      var $_0_lcssa_i_i_i;
      HEAP8[$row_i_i + $n_0_ph_ph_i_i_i | 0] = 0;
      var $121 = HEAP8[$52];
      if ($121 << 24 >> 24 == 35) {
       var $src_0_i_i = $_0_lcssa_i_i_i;
       continue;
      } else if ($121 << 24 >> 24 != 118) {
       var $186 = $_ph111_i_i_ph;
       var $185 = $121;
       break;
      }
      var $123 = HEAP8[$94];
      if ($123 << 24 >> 24 == 110 | $123 << 24 >> 24 == 116) {
       var $src_0_i_i = $_0_lcssa_i_i_i;
      } else {
       label = 1087;
       break;
      }
     }
     if (label == 1087) {
      label = 0;
      _sscanf($94, 7384, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $x_i_i, HEAP32[tempVarArgs + 8 >> 2] = $y_i_i, HEAP32[tempVarArgs + 16 >> 2] = $z_i_i, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $126 = HEAPF32[$x_i_i >> 2];
      var $127 = HEAPF32[$y_i_i >> 2];
      var $128 = HEAPF32[$z_i_i >> 2];
      var $129 = HEAP32[$96 >> 2];
      if (($129 + 1 | 0) > ($_ph111_i_i_ph | 0)) {
       var $__i65_i_i = ($_ph111_i_i_ph | 0) == 0 ? 8 : $_ph111_i_i_ph << 1;
       var $136$0 = _llvm_umul_with_overflow_i32($__i65_i_i * 3 & -1, 4);
       var $139 = tempRet0 ? -1 : $136$0;
       var $_size_i5_i_i = ($139 | 0) == 0 ? 1 : $139;
       while (1) {
        var $142 = _malloc($_size_i5_i_i);
        if (($142 | 0) != 0) {
         break;
        }
        var $145 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
        if (($145 | 0) == 0) {
         label = 1098;
         break L1380;
        }
        FUNCTION_TABLE[$145]();
       }
       var $158 = $142;
       if (($129 | 0) != 0) {
        var $169 = HEAP32[$97 >> 2];
        var $170 = $129 * 12 & -1;
        _memcpy($142, $169, $170) | 0;
       }
       HEAP32[$97 >> 2] = $158;
       var $172 = $158;
       var $171 = $__i65_i_i;
      } else {
       var $172 = HEAP32[$97 >> 2];
       var $171 = $_ph111_i_i_ph;
      }
      var $171;
      var $172;
      var $173 = $129 * 3 & -1;
      HEAPF32[$172 + ($173 << 2) >> 2] = $126 * HEAPF32[$50 >> 2];
      HEAPF32[$172 + ($173 + 1 << 2) >> 2] = $127 * HEAPF32[$50 >> 2];
      HEAPF32[$172 + ($173 + 2 << 2) >> 2] = $128 * HEAPF32[$50 >> 2];
      HEAP32[$96 >> 2] = HEAP32[$96 >> 2] + 1;
      var $186 = $171;
      var $185 = HEAP8[$52];
     }
     var $185;
     var $186;
     if ($185 << 24 >> 24 != 102) {
      var $src_0_ph_i_i_ph = $_0_lcssa_i_i_i;
      var $_ph111_i_i_ph = $186;
      continue;
     }
     var $189 = HEAP32[$96 >> 2];
     var $_021_ph_i_i_i = $94;
     var $j_0_ph_i_i_i = 0;
     L1422 : while (1) {
      var $j_0_ph_i_i_i;
      var $_021_ph_i_i_i;
      var $_021_i_i_i = $_021_ph_i_i_i;
      var $191 = HEAP8[$_021_ph_i_i_i];
      while (1) {
       var $191;
       var $_021_i_i_i;
       if ($191 << 24 >> 24 == 0) {
        label = 1119;
        break L1422;
       } else {
        var $_1_i_i_i = $_021_i_i_i;
        var $193 = $191;
       }
       while (1) {
        var $193;
        var $_1_i_i_i;
        if (!($193 << 24 >> 24 == 9 | $193 << 24 >> 24 == 32)) {
         var $_2_i_i_i = $_1_i_i_i;
         var $196 = $193;
         break;
        }
        var $195 = $_1_i_i_i + 1 | 0;
        var $_1_i_i_i = $195;
        var $193 = HEAP8[$195];
       }
       while (1) {
        var $196;
        var $_2_i_i_i;
        if ($196 << 24 >> 24 == 47) {
         HEAP8[$_2_i_i_i] = 0;
        } else if ($196 << 24 >> 24 == 0 | $196 << 24 >> 24 == 32 | $196 << 24 >> 24 == 9) {
         break;
        }
        var $199 = $_2_i_i_i + 1 | 0;
        var $_2_i_i_i = $199;
        var $196 = HEAP8[$199];
       }
       if ((HEAP8[$_1_i_i_i] | 0) == 0) {
        var $_021_i_i_i = $_2_i_i_i;
        var $191 = $196;
       } else {
        break;
       }
      }
      var $203 = _atoi($_1_i_i_i);
      var $206 = $j_0_ph_i_i_i + 1 | 0;
      HEAP32[$face_i_i + ($j_0_ph_i_i_i << 2) >> 2] = (($203 | 0) < 0 ? $189 : -1) + $203;
      if (($206 | 0) > 31) {
       var $_0_i175_i_i = $206;
       break;
      } else {
       var $_021_ph_i_i_i = $_2_i_i_i;
       var $j_0_ph_i_i_i = $206;
      }
     }
     if (label == 1119) {
      label = 0;
      if (($j_0_ph_i_i_i | 0) > 2) {
       var $_0_i175_i_i = $j_0_ph_i_i_i;
      } else {
       var $src_0_ph_i_i_ph = $_0_lcssa_i_i_i;
       var $_ph111_i_i_ph = $186;
       continue;
      }
     }
     var $_0_i175_i_i;
     var $210 = HEAP32[$98 >> 2];
     if (($210 | 0) < 0) {
      var $src_0_ph_i_i_ph = $_0_lcssa_i_i_i;
      var $_ph111_i_i_ph = $186;
     } else {
      break;
     }
    }
    var $213 = $_ph112_ph_i_i_ph;
    var $i_0109_i_i = 2;
    var $212 = HEAP32[$_phi_trans_insert_i_i >> 2];
    while (1) {
     var $212;
     var $i_0109_i_i;
     var $213;
     var $215 = HEAP32[$face_i_i + ($i_0109_i_i << 2) >> 2];
     var $216 = HEAP32[$96 >> 2];
     if (($212 | 0) > -1 & ($210 | 0) < ($216 | 0) & ($212 | 0) < ($216 | 0) & ($215 | 0) > -1 & ($215 | 0) < ($216 | 0)) {
      var $220 = HEAP32[$100 >> 2];
      if (($220 + 1 | 0) > ($213 | 0)) {
       var $__i_i_i = ($213 | 0) == 0 ? 8 : $213 << 1;
       var $227$0 = _llvm_umul_with_overflow_i32($__i_i_i * 3 & -1, 4);
       var $230 = tempRet0 ? -1 : $227$0;
       var $_size_i15_i_i = ($230 | 0) == 0 ? 1 : $230;
       while (1) {
        var $233 = _malloc($_size_i15_i_i);
        if (($233 | 0) != 0) {
         break;
        }
        var $236 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
        if (($236 | 0) == 0) {
         label = 1134;
         break L1380;
        }
        FUNCTION_TABLE[$236]();
       }
       var $249 = $233;
       if (($220 | 0) != 0) {
        var $260 = HEAP32[$101 >> 2];
        var $261 = $220 * 12 & -1;
        _memcpy($233, $260, $261) | 0;
       }
       HEAP32[$101 >> 2] = $249;
       var $263 = $249;
       var $262 = $__i_i_i;
      } else {
       var $263 = HEAP32[$101 >> 2];
       var $262 = $213;
      }
      var $262;
      var $263;
      var $264 = $220 * 3 & -1;
      HEAP32[$263 + ($264 << 2) >> 2] = $210;
      HEAP32[$263 + ($264 + 1 << 2) >> 2] = $212;
      HEAP32[$263 + ($264 + 2 << 2) >> 2] = $215;
      HEAP32[$100 >> 2] = HEAP32[$100 >> 2] + 1;
      var $271 = $262;
     } else {
      var $271 = $213;
     }
     var $271;
     var $272 = $i_0109_i_i + 1 | 0;
     if (($272 | 0) < ($_0_i175_i_i | 0)) {
      var $213 = $271;
      var $i_0109_i_i = $272;
      var $212 = $215;
     } else {
      var $src_0_ph_ph_i_i_ph = $_0_lcssa_i_i_i;
      var $_ph112_ph_i_i_ph = $271;
      var $_ph111_ph_i_i_ph = $186;
      continue L1380;
     }
    }
   }
   if (label == 1098) {
    var $155 = ___cxa_allocate_exception(4);
    HEAP32[$155 >> 2] = 9744;
    ___cxa_throw($155, 15960, 74);
   } else if (label == 1134) {
    var $246 = ___cxa_allocate_exception(4);
    HEAP32[$246 >> 2] = 9744;
    ___cxa_throw($246, 15960, 74);
   } else if (label == 1145) {
    _free($67);
    var $275 = HEAP32[$100 >> 2] * 3 & -1;
    var $276$0 = _llvm_umul_with_overflow_i32($275, 4);
    var $279 = tempRet0 ? -1 : $276$0;
    var $_size_i25_i_i = ($279 | 0) == 0 ? 1 : $279;
    while (1) {
     var $282 = _malloc($_size_i25_i_i);
     if (($282 | 0) != 0) {
      break;
     }
     var $285 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($285 | 0) == 0) {
      label = 1154;
      break;
     }
     FUNCTION_TABLE[$285]();
    }
    if (label == 1154) {
     var $295 = ___cxa_allocate_exception(4);
     HEAP32[$295 >> 2] = 9744;
     ___cxa_throw($295, 15960, 74);
    }
    var $298 = $282;
    var $300 = $30 + 272 | 0;
    HEAP32[$300 >> 2] = $298;
    L1471 : do {
     if (($275 | 0) > 0) {
      var $i1_074_i_i = 0;
      var $309 = $298;
      while (1) {
       var $309;
       var $i1_074_i_i;
       var $310 = HEAP32[$101 >> 2];
       var $313 = HEAP32[$310 + ($i1_074_i_i << 2) >> 2] * 3 & -1;
       var $314 = HEAP32[$97 >> 2];
       var $315 = $i1_074_i_i + 1 | 0;
       var $318 = HEAP32[$310 + ($315 << 2) >> 2] * 3 & -1;
       var $319 = $i1_074_i_i + 2 | 0;
       var $322 = HEAP32[$310 + ($319 << 2) >> 2] * 3 & -1;
       var $326 = HEAPF32[$314 + ($313 << 2) >> 2];
       var $327 = HEAPF32[$314 + ($318 << 2) >> 2] - $326;
       var $330 = HEAPF32[$314 + ($322 << 2) >> 2] - $326;
       var $334 = HEAPF32[$314 + ($313 + 1 << 2) >> 2];
       var $335 = HEAPF32[$314 + ($318 + 1 << 2) >> 2] - $334;
       var $338 = HEAPF32[$314 + ($322 + 1 << 2) >> 2] - $334;
       var $342 = HEAPF32[$314 + ($313 + 2 << 2) >> 2];
       var $343 = HEAPF32[$314 + ($318 + 2 << 2) >> 2] - $342;
       var $346 = HEAPF32[$314 + ($322 + 2 << 2) >> 2] - $342;
       var $347 = $309 + ($i1_074_i_i << 2) | 0;
       var $350 = $335 * $346 - $343 * $338;
       HEAPF32[$347 >> 2] = $350;
       var $353 = $343 * $330 - $327 * $346;
       var $354 = $309 + ($315 << 2) | 0;
       HEAPF32[$354 >> 2] = $353;
       var $357 = $327 * $338 - $335 * $330;
       var $358 = $309 + ($319 << 2) | 0;
       HEAPF32[$358 >> 2] = $357;
       var $364 = Math.sqrt($357 * $357 + ($350 * $350 + $353 * $353));
       if ($364 > 0) {
        var $367 = 1 / $364;
        HEAPF32[$347 >> 2] = $350 * $367;
        HEAPF32[$354 >> 2] = $367 * $353;
        HEAPF32[$358 >> 2] = $367 * $357;
       }
       var $372 = $i1_074_i_i + 3 | 0;
       if (($372 | 0) >= (HEAP32[$100 >> 2] * 3 & -1 | 0)) {
        break L1471;
       }
       var $i1_074_i_i = $372;
       var $309 = HEAP32[$300 >> 2];
      }
     }
    } while (0);
    _strncpy($30, 4496, 260);
    HEAP8[$30 + 259 | 0] = 0;
    var $378 = HEAP32[$23 >> 2];
    __Z12rcCalcBoundsPKfiPfS1_(HEAP32[$378 + 264 >> 2], HEAP32[$378 + 276 >> 2], $3 + 8 | 0, $3 + 20 | 0);
    while (1) {
     var $388 = _malloc(20);
     if (($388 | 0) != 0) {
      break;
     }
     var $391 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($391 | 0) == 0) {
      label = 1174;
      break;
     }
     FUNCTION_TABLE[$391]();
    }
    if (label == 1174) {
     var $401 = ___cxa_allocate_exception(4);
     HEAP32[$401 >> 2] = 9744;
     ___cxa_throw($401, 15960, 74);
    }
    var $406 = $388;
    HEAP32[$388 >> 2] = 0;
    HEAP32[$388 + 8 >> 2] = 0;
    HEAP32[$21 >> 2] = $406;
    var $410 = HEAP32[$23 >> 2];
    if (__Z21rcCreateChunkyTriMeshPKfPKiiiP15rcChunkyTriMesh(HEAP32[$410 + 264 >> 2], HEAP32[$410 + 268 >> 2], HEAP32[$410 + 280 >> 2], $406)) {
     var $_0 = 1;
     var $_0;
     STACKTOP = sp;
     return $_0;
    } else {
     __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 5456, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
     STACKTOP = tempVarArgs;
     break;
    }
   }
  }
 } while (0);
 _puts(232);
 var $_0 = 0;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __Z5buildv() {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 848 | 0;
 var $params_i = sp;
 var $navData = sp + 32;
 var $navDataSize = sp + 40;
 var $buff = sp + 48;
 var $params = sp + 560;
 var $1 = sp + 704;
 while (1) {
  var $3 = _malloc(4);
  if (($3 | 0) != 0) {
   break;
  }
  var $6 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($6 | 0) == 0) {
   label = 1191;
   break;
  }
  FUNCTION_TABLE[$6]();
 }
 if (label == 1191) {
  var $16 = ___cxa_allocate_exception(4);
  HEAP32[$16 >> 2] = 9744;
  ___cxa_throw($16, 15960, 74);
 }
 HEAP32[$3 >> 2] = 12496;
 HEAP32[17904 >> 2] = $3;
 var $22 = HEAP32[17776 >> 2];
 do {
  if (($22 | 0) != 0) {
   if ((HEAP32[$22 + 4 >> 2] | 0) == 0) {
    break;
   }
   _puts(256);
   var $31 = HEAP32[17736 >> 2];
   if (($31 | 0) != 0) {
    _free($31);
   }
   HEAP32[17736 >> 2] = 0;
   var $34 = HEAP32[17744 >> 2];
   if (($34 | 0) != 0) {
    var $38 = HEAP32[$34 + 40 >> 2];
    if (($38 | 0) != 0) {
     _free($38);
    }
    var $42 = $34 + 44 | 0;
    var $43 = HEAP32[$42 >> 2];
    if (($43 | 0) != 0) {
     var $45 = $43;
     while (1) {
      var $45;
      var $47 = HEAP32[$45 >> 2];
      if (($45 | 0) != 0) {
       _free($45);
      }
      HEAP32[$42 >> 2] = $47;
      if (($47 | 0) == 0) {
       break;
      } else {
       var $45 = $47;
      }
     }
    }
    _free($34);
   }
   HEAP32[17744 >> 2] = 0;
   var $53 = HEAP32[17800 >> 2];
   if (($53 | 0) != 0) {
    var $57 = HEAP32[$53 + 60 >> 2];
    if (($57 | 0) != 0) {
     _free($57 | 0);
    }
    var $62 = HEAP32[$53 + 64 >> 2];
    if (($62 | 0) != 0) {
     _free($62);
    }
    var $67 = HEAP32[$53 + 68 >> 2];
    if (($67 | 0) != 0) {
     _free($67);
    }
    var $72 = HEAP32[$53 + 72 >> 2];
    if (($72 | 0) != 0) {
     _free($72);
    }
    _free($53);
   }
   HEAP32[17800 >> 2] = 0;
   var $76 = HEAP32[17792 >> 2];
   if (($76 | 0) != 0) {
    var $78 = $76 + 4 | 0;
    var $81 = $76 | 0;
    var $82 = HEAP32[$81 >> 2];
    if ((HEAP32[$78 >> 2] | 0) > 0) {
     var $i_09_i_i = 0;
     var $83 = $82;
     while (1) {
      var $83;
      var $i_09_i_i;
      var $85 = HEAP32[$83 + ($i_09_i_i * 20 & -1) >> 2];
      if (($85 | 0) == 0) {
       var $89 = $83;
      } else {
       _free($85);
       var $89 = HEAP32[$81 >> 2];
      }
      var $89;
      var $91 = HEAP32[$89 + ($i_09_i_i * 20 & -1) + 8 >> 2];
      if (($91 | 0) == 0) {
       var $95 = $89;
      } else {
       _free($91);
       var $95 = HEAP32[$81 >> 2];
      }
      var $95;
      var $96 = $i_09_i_i + 1 | 0;
      if (($96 | 0) < (HEAP32[$78 >> 2] | 0)) {
       var $i_09_i_i = $96;
       var $83 = $95;
      } else {
       var $_lcssa_i_i = $95;
       break;
      }
     }
    } else {
     var $_lcssa_i_i = $82;
    }
    var $_lcssa_i_i;
    if (($_lcssa_i_i | 0) != 0) {
     _free($_lcssa_i_i);
    }
    _free($76);
   }
   HEAP32[17792 >> 2] = 0;
   __Z14rcFreePolyMeshP10rcPolyMesh(HEAP32[17752 >> 2]);
   HEAP32[17752 >> 2] = 0;
   var $104 = HEAP32[17784 >> 2];
   if (($104 | 0) != 0) {
    var $108 = HEAP32[$104 >> 2];
    if (($108 | 0) != 0) {
     _free($108);
    }
    var $113 = HEAP32[$104 + 4 >> 2];
    if (($113 | 0) != 0) {
     _free($113);
    }
    var $118 = HEAP32[$104 + 8 >> 2];
    if (($118 | 0) != 0) {
     _free($118);
    }
    _free($104);
   }
   HEAP32[17784 >> 2] = 0;
   __Z13dtFreeNavMeshP9dtNavMesh(HEAP32[17768 >> 2]);
   HEAP32[17768 >> 2] = 0;
   HEAP32[17760 >> 2] = 0;
   var $123 = HEAP32[17776 >> 2];
   var $127 = HEAP32[$123 + 4 >> 2];
   var $129 = HEAP32[$127 + 264 >> 2];
   var $131 = HEAP32[$127 + 276 >> 2];
   var $133 = HEAP32[$127 + 268 >> 2];
   var $135 = HEAP32[$127 + 280 >> 2];
   _memset(17808, 0, 92);
   var $136 = HEAPF32[464 >> 2];
   HEAPF32[17824 >> 2] = $136;
   var $137 = HEAPF32[472 >> 2];
   HEAPF32[17828 >> 2] = $137;
   HEAPF32[17856 >> 2] = HEAPF32[488 >> 2];
   HEAP32[17860 >> 2] = Math.ceil(HEAPF32[504 >> 2] / $137) & -1;
   HEAP32[17864 >> 2] = Math.floor(HEAPF32[496 >> 2] / $137) & -1;
   HEAP32[17868 >> 2] = Math.ceil(HEAPF32[480 >> 2] / $136) & -1;
   HEAP32[17872 >> 2] = HEAPF32[432 >> 2] / $136 & -1;
   HEAPF32[17876 >> 2] = HEAPF32[440 >> 2];
   var $155 = HEAPF32[416 >> 2];
   HEAP32[17880 >> 2] = $155 * $155 & -1;
   var $158 = HEAPF32[424 >> 2];
   HEAP32[17884 >> 2] = $158 * $158 & -1;
   HEAP32[17888 >> 2] = HEAPF32[408 >> 2] & -1;
   var $163 = HEAPF32[456 >> 2];
   if ($163 < .8999999761581421) {
    var $168 = 0;
   } else {
    var $168 = $163 * $136;
   }
   var $168;
   HEAPF32[17892 >> 2] = $168;
   HEAPF32[17896 >> 2] = $137 * HEAPF32[448 >> 2];
   var $171 = HEAPF32[$123 + 8 >> 2];
   HEAPF32[17832 >> 2] = $171;
   HEAPF32[17836 >> 2] = HEAPF32[$123 + 12 >> 2];
   var $175 = HEAPF32[$123 + 16 >> 2];
   HEAPF32[17840 >> 2] = $175;
   var $176 = HEAPF32[$123 + 20 >> 2];
   HEAPF32[17844 >> 2] = $176;
   HEAPF32[17848 >> 2] = HEAPF32[$123 + 24 >> 2];
   var $180 = HEAPF32[$123 + 28 >> 2];
   HEAPF32[17852 >> 2] = $180;
   HEAP32[17808 >> 2] = ($176 - $171) / $136 + .5 & -1;
   HEAP32[17812 >> 2] = ($180 - $175) / $136 + .5 & -1;
   _puts(216);
   __ZN9rcContext3logE13rcLogCategoryPKcz(0, 1, 3928, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $190 = HEAP32[17812 >> 2];
   __ZN9rcContext3logE13rcLogCategoryPKcz(0, 1, 3856, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[17808 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $190, tempVarArgs));
   STACKTOP = tempVarArgs;
   __ZN9rcContext3logE13rcLogCategoryPKcz(0, 1, 3824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAPF64[tempVarArgs >> 3] = ($131 | 0) / 1e3, HEAPF64[tempVarArgs + 8 >> 3] = ($135 | 0) / 1e3, tempVarArgs));
   STACKTOP = tempVarArgs;
   _puts(192);
   var $197 = _malloc(52);
   _memset($197, 0, 52);
   HEAP32[17744 >> 2] = $197;
   if (($197 | 0) == 0) {
    _puts(144);
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $202 = HEAP32[17808 >> 2];
   var $203 = HEAP32[17812 >> 2];
   var $204 = HEAPF32[17824 >> 2];
   var $205 = HEAPF32[17828 >> 2];
   var $206 = $197;
   HEAP32[$206 >> 2] = $202;
   var $208 = $197 + 4 | 0;
   HEAP32[$208 >> 2] = $203;
   HEAPF32[$197 + 8 >> 2] = HEAPF32[17832 >> 2];
   HEAPF32[$197 + 12 >> 2] = HEAPF32[17836 >> 2];
   HEAPF32[$197 + 16 >> 2] = HEAPF32[17840 >> 2];
   HEAPF32[$197 + 20 >> 2] = HEAPF32[17844 >> 2];
   HEAPF32[$197 + 24 >> 2] = HEAPF32[17848 >> 2];
   HEAPF32[$197 + 28 >> 2] = HEAPF32[17852 >> 2];
   HEAPF32[$197 + 32 >> 2] = $204;
   HEAPF32[$197 + 36 >> 2] = $205;
   var $233 = _malloc(Math.imul($202 << 2, $203) | 0);
   HEAP32[$197 + 40 >> 2] = $233;
   if (($233 | 0) == 0) {
    _puts(88);
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3584, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   _memset($233, 0, Math.imul(HEAP32[$206 >> 2] << 2, HEAP32[$208 >> 2]) | 0);
   _puts(56);
   var $244 = ($135 | 0) > -1 ? $135 : -1;
   var $_size_i = ($244 | 0) == 0 ? 1 : $244;
   while (1) {
    var $247 = _malloc($_size_i);
    if (($247 | 0) != 0) {
     break;
    }
    var $250 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($250 | 0) == 0) {
     label = 1250;
     break;
    }
    FUNCTION_TABLE[$250]();
   }
   if (label == 1250) {
    var $260 = ___cxa_allocate_exception(4);
    HEAP32[$260 >> 2] = 9744;
    ___cxa_throw($260, 15960, 74);
   }
   HEAP32[17736 >> 2] = $247;
   _memset($247, 0, $135);
   __Z23rcMarkWalkableTrianglesP9rcContextfPKfiPKiiPh(HEAPF32[17856 >> 2], $129, $133, $135, $247);
   _printf(3352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 4, tempVarArgs));
   STACKTOP = tempVarArgs;
   __Z20rcRasterizeTrianglesP9rcContextPKfiPKiPKhiR13rcHeightfieldi(0, $129, $133, HEAP32[17736 >> 2], $135, HEAP32[17744 >> 2], HEAP32[17864 >> 2]);
   __Z35rcFilterLowHangingWalkableObstaclesP9rcContextiR13rcHeightfield(0, HEAP32[17864 >> 2], HEAP32[17744 >> 2]);
   __Z18rcFilterLedgeSpansP9rcContextiiR13rcHeightfield(0, HEAP32[17860 >> 2], HEAP32[17864 >> 2], HEAP32[17744 >> 2]);
   __Z30rcFilterWalkableLowHeightSpansP9rcContextiR13rcHeightfield(0, HEAP32[17860 >> 2], HEAP32[17744 >> 2]);
   _puts(40);
   var $283 = _malloc(76);
   var $284 = $283;
   _memset($283, 0, 76);
   HEAP32[17800 >> 2] = $284;
   if (($283 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z25rcBuildCompactHeightfieldP9rcContextiiR13rcHeightfieldR20rcCompactHeightfield(0, HEAP32[17860 >> 2], HEAP32[17864 >> 2], HEAP32[17744 >> 2], $284)) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z19rcErodeWalkableAreaP9rcContextiR20rcCompactHeightfield(0, HEAP32[17868 >> 2], HEAP32[17800 >> 2])) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3120, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $299 = HEAP32[17776 >> 2];
   if ((HEAP32[$299 + 50212 >> 2] | 0) > 0) {
    var $i_042 = 0;
    while (1) {
     var $i_042;
     __Z20rcMarkConvexPolyAreaP9rcContextPKfiffhR20rcCompactHeightfield(0, $299 + 9252 + ($i_042 * 160 & -1) | 0, HEAP32[$299 + 9252 + ($i_042 * 160 & -1) + 152 >> 2], HEAPF32[$299 + 9252 + ($i_042 * 160 & -1) + 144 >> 2], HEAPF32[$299 + 9252 + ($i_042 * 160 & -1) + 148 >> 2], HEAP32[$299 + 9252 + ($i_042 * 160 & -1) + 156 >> 2] & 255, HEAP32[17800 >> 2]);
     var $314 = $i_042 + 1 | 0;
     if (($314 | 0) < (HEAP32[HEAP32[17776 >> 2] + 50212 >> 2] | 0)) {
      var $i_042 = $314;
     } else {
      break;
     }
    }
   }
   if (!__Z20rcBuildDistanceFieldP9rcContextR20rcCompactHeightfield(0, HEAP32[17800 >> 2])) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2992, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z14rcBuildRegionsP9rcContextR20rcCompactHeightfieldiii(0, HEAP32[17800 >> 2], 0, HEAP32[17880 >> 2], HEAP32[17884 >> 2])) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 3072, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   _puts(8);
   var $329 = _malloc(52);
   var $330 = $329;
   _memset($329, 0, 52);
   HEAP32[17792 >> 2] = $330;
   if (($329 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2768, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z15rcBuildContoursP9rcContextR20rcCompactHeightfieldfiR12rcContourSeti(0, HEAP32[17800 >> 2], HEAPF32[17876 >> 2], HEAP32[17872 >> 2], $330)) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2448, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $344 = HEAPF32[17876 >> 2];
   var $345 = HEAP32[17872 >> 2];
   _printf(2304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[HEAP32[17792 >> 2] + 4 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $344, HEAP32[tempVarArgs + 16 >> 2] = $345, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $347 = _malloc(72);
   var $348 = $347;
   _memset($347, 0, 72);
   HEAP32[17752 >> 2] = $348;
   if (($347 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z15rcBuildPolyMeshP9rcContextR12rcContourSetiR10rcPolyMesh(0, HEAP32[17792 >> 2], HEAP32[17888 >> 2], $348)) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   _puts(296);
   var $357 = _malloc(24);
   var $358 = $357;
   HEAP32[$357 >> 2] = 0;
   HEAP32[$357 + 4 >> 2] = 0;
   HEAP32[$357 + 8 >> 2] = 0;
   HEAP32[$357 + 12 >> 2] = 0;
   HEAP32[$357 + 16 >> 2] = 0;
   HEAP32[$357 + 20 >> 2] = 0;
   HEAP32[17784 >> 2] = $358;
   if (($357 | 0) == 0) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 2016, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   if (!__Z21rcBuildPolyMeshDetailP9rcContextRK10rcPolyMeshRK20rcCompactHeightfieldffR16rcPolyMeshDetail(0, HEAP32[17752 >> 2], HEAP32[17800 >> 2], HEAPF32[17892 >> 2], HEAPF32[17896 >> 2], $358)) {
    __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 1944, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $_0 = 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   _puts(272);
   L1631 : do {
    if ((HEAP32[17888 >> 2] | 0) < 7) {
     HEAP32[$navData >> 2] = 0;
     HEAP32[$navDataSize >> 2] = 0;
     var $372 = $buff | 0;
     _sprintf($372, 1808, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[HEAP32[17752 >> 2] + 24 >> 2], tempVarArgs));
     STACKTOP = tempVarArgs;
     _emscripten_run_script($372);
     var $377 = HEAP32[17752 >> 2];
     var $378 = $377 + 24 | 0;
     var $_phi_trans_insert = $377 + 16 | 0;
     if ((HEAP32[$378 >> 2] | 0) > 0) {
      var $i1_041 = 0;
      while (1) {
       var $i1_041;
       var $382 = HEAP32[$_phi_trans_insert >> 2] + $i1_041 | 0;
       var $383 = HEAP8[$382];
       if ($383 << 24 >> 24 == 63) {
        HEAP8[$382] = 0;
        var $387 = HEAP8[HEAP32[$_phi_trans_insert >> 2] + $i1_041 | 0];
       } else {
        var $387 = $383;
       }
       var $387;
       if ($387 << 24 >> 24 == 0 | $387 << 24 >> 24 == 4 | $387 << 24 >> 24 == 2) {
        HEAP16[HEAP32[$377 + 12 >> 2] + ($i1_041 << 1) >> 1] = 1;
       } else if ($387 << 24 >> 24 == 1) {
        HEAP16[HEAP32[$377 + 12 >> 2] + ($i1_041 << 1) >> 1] = 2;
       } else if ($387 << 24 >> 24 == 3) {
        HEAP16[HEAP32[$377 + 12 >> 2] + ($i1_041 << 1) >> 1] = 5;
       }
       var $400 = $i1_041 + 1 | 0;
       if (($400 | 0) < (HEAP32[$378 >> 2] | 0)) {
        var $i1_041 = $400;
       } else {
        var $_pre_phi = $_phi_trans_insert;
        break;
       }
      }
     } else {
      var $_pre_phi = $_phi_trans_insert;
     }
     var $_pre_phi;
     var $403 = $params;
     _memset($403, 0, 140);
     HEAP32[$params >> 2] = HEAP32[$377 >> 2];
     HEAP32[$params + 4 >> 2] = HEAP32[$377 + 20 >> 2];
     HEAP32[$params + 8 >> 2] = HEAP32[$377 + 4 >> 2];
     HEAP32[$params + 16 >> 2] = HEAP32[$_pre_phi >> 2];
     HEAP32[$params + 12 >> 2] = HEAP32[$377 + 12 >> 2];
     HEAP32[$params + 20 >> 2] = HEAP32[$378 >> 2];
     HEAP32[$params + 24 >> 2] = HEAP32[$377 + 32 >> 2];
     var $423 = HEAP32[17784 >> 2];
     HEAP32[$params + 28 >> 2] = HEAP32[$423 >> 2];
     HEAP32[$params + 32 >> 2] = HEAP32[$423 + 4 >> 2];
     HEAP32[$params + 36 >> 2] = HEAP32[$423 + 16 >> 2];
     HEAP32[$params + 40 >> 2] = HEAP32[$423 + 8 >> 2];
     HEAP32[$params + 44 >> 2] = HEAP32[$423 + 20 >> 2];
     var $439 = HEAP32[17776 >> 2];
     HEAP32[$params + 48 >> 2] = $439 + 32;
     HEAP32[$params + 52 >> 2] = $439 + 6176;
     HEAP32[$params + 64 >> 2] = $439 + 7200;
     HEAP32[$params + 60 >> 2] = $439 + 7456;
     HEAP32[$params + 56 >> 2] = $439 + 7712;
     HEAP32[$params + 68 >> 2] = $439 + 8224;
     HEAP32[$params + 72 >> 2] = HEAP32[$439 + 9248 >> 2];
     HEAPF32[$params + 116 >> 2] = HEAPF32[504 >> 2];
     HEAPF32[$params + 120 >> 2] = HEAPF32[480 >> 2];
     HEAPF32[$params + 124 >> 2] = HEAPF32[496 >> 2];
     HEAPF32[$params + 92 >> 2] = HEAPF32[$377 + 36 >> 2];
     HEAPF32[$params + 96 >> 2] = HEAPF32[$377 + 40 >> 2];
     HEAPF32[$params + 100 >> 2] = HEAPF32[$377 + 44 >> 2];
     HEAPF32[$params + 104 >> 2] = HEAPF32[$377 + 48 >> 2];
     HEAPF32[$params + 108 >> 2] = HEAPF32[$377 + 52 >> 2];
     HEAPF32[$params + 112 >> 2] = HEAPF32[$377 + 56 >> 2];
     HEAPF32[$params + 128 >> 2] = HEAPF32[17824 >> 2];
     HEAPF32[$params + 132 >> 2] = HEAPF32[17828 >> 2];
     HEAP8[$params + 136 | 0] = 1;
     var $484 = $1;
     _memcpy($484, $403, 140) | 0;
     _printf(1704, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 144 | 0, _memcpy(tempVarArgs, $1, 140) | 0, tempVarArgs));
     STACKTOP = tempVarArgs;
     if (!__Z19dtCreateNavMeshDataP21dtNavMeshCreateParamsPPhPi($params, $navData, $navDataSize)) {
      __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 1656, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_0 = 0;
      var $_0;
      STACKTOP = sp;
      return $_0;
     }
     var $489 = HEAP32[$navData >> 2];
     _printf(1608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $489, tempVarArgs));
     STACKTOP = tempVarArgs;
     var $491 = _malloc(84);
     if (($491 | 0) == 0) {
      HEAP32[17768 >> 2] = 0;
      if (($489 | 0) != 0) {
       _free($489);
      }
      __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 1552, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
      STACKTOP = tempVarArgs;
      var $_0 = 0;
      var $_0;
      STACKTOP = sp;
      return $_0;
     }
     _memset($491, 0, 84);
     HEAP32[17768 >> 2] = $491;
     _printf(1504, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $491, tempVarArgs));
     STACKTOP = tempVarArgs;
     var $500 = HEAP32[17768 >> 2];
     var $501 = HEAP32[$navDataSize >> 2];
     do {
      if ((HEAP32[$489 >> 2] | 0) == 1145979222) {
       if ((HEAP32[$489 + 4 >> 2] | 0) != 7) {
        var $_0_i211 = -2147483646;
        break;
       }
       var $515 = HEAPF32[$489 + 72 >> 2];
       HEAPF32[$params_i >> 2] = $515;
       HEAPF32[$params_i + 4 >> 2] = HEAPF32[$489 + 76 >> 2];
       var $522 = HEAPF32[$489 + 80 >> 2];
       HEAPF32[$params_i + 8 >> 2] = $522;
       HEAPF32[$params_i + 12 >> 2] = HEAPF32[$489 + 84 >> 2] - $515;
       HEAPF32[$params_i + 16 >> 2] = HEAPF32[$489 + 92 >> 2] - $522;
       HEAP32[$params_i + 20 >> 2] = 1;
       HEAP32[$params_i + 24 >> 2] = HEAP32[$489 + 24 >> 2];
       var $539 = __ZN9dtNavMesh4initEPK15dtNavMeshParams($500, $params_i);
       if (($539 | 0) < 0) {
        var $_0_i211 = $539;
        break;
       }
       var $541 = __ZN9dtNavMesh7addTileEPhiijPj($500, $489, $501, 0);
       if (($541 | 0) < 0) {
        var $_0_i211 = $541;
        break;
       }
       _printf(1336, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $489, tempVarArgs));
       STACKTOP = tempVarArgs;
       var $548 = _malloc(64);
       if (($548 | 0) == 0) {
        var $_0_i4 = 0;
       } else {
        _memset($548, 0, 64);
        var $_0_i4 = $548;
       }
       var $_0_i4;
       HEAP32[17760 >> 2] = $_0_i4;
       var $553 = __ZN14dtNavMeshQuery4initEPK9dtNavMeshi($_0_i4, HEAP32[17768 >> 2]);
       if (($553 | 0) >= 0) {
        break L1631;
       }
       _printf(1272, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $553, tempVarArgs));
       STACKTOP = tempVarArgs;
       __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 1232, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
       STACKTOP = tempVarArgs;
       var $_0 = 0;
       var $_0;
       STACKTOP = sp;
       return $_0;
      } else {
       var $_0_i211 = -2147483647;
      }
     } while (0);
     var $_0_i211;
     if (($489 | 0) != 0) {
      _free($489);
     }
     _printf(1432, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_0_i211, tempVarArgs));
     STACKTOP = tempVarArgs;
     __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 1384, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
     STACKTOP = tempVarArgs;
     var $_0 = 0;
     var $_0;
     STACKTOP = sp;
     return $_0;
    }
   } while (0);
   _printf(1160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[17768 >> 2], tempVarArgs));
   STACKTOP = tempVarArgs;
   _printf(1128, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[17760 >> 2], tempVarArgs));
   STACKTOP = tempVarArgs;
   var $_0 = 1;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 _printf(4104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
 STACKTOP = tempVarArgs;
 __ZN9rcContext3logE13rcLogCategoryPKcz(0, 3, 4104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $_0 = 0;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZN11DebugDrawGLD1Ev($this) {
 return;
}
function __ZN11DebugDrawGLD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZN10emscripten8internal7InvokerIvJhEE6invokeEPFvhEh($fn, $args) {
 FUNCTION_TABLE[$fn]($args);
 return;
}
function __ZN10emscripten8internal7InvokerIvJfEE6invokeEPFvfEf($fn, $args) {
 FUNCTION_TABLE[$fn]($args);
 return;
}
function __ZN10emscripten8internal7InvokerIvJiiiiEE6invokeEPFviiiiEiiii($fn, $args, $args1, $args2, $args3) {
 FUNCTION_TABLE[$fn]($args, $args1, $args2, $args3);
 return;
}
function __ZN10emscripten8internal7InvokerIvJfffiEE6invokeEPFvfffiEfffi($fn, $args, $args1, $args2, $args3) {
 FUNCTION_TABLE[$fn]($args, $args1, $args2, $args3);
 return;
}
function __ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE($fn) {
 FUNCTION_TABLE[$fn]();
 return;
}
function __ZN10emscripten8internal7InvokerIbJEE6invokeEPFbvE($fn) {
 return FUNCTION_TABLE[$fn]();
}
function __GLOBAL__I_a() {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 456 | 0;
 var $args_i28_i = sp;
 var $args_i27_i = sp + 8;
 var $args_i26_i = sp + 16;
 var $args_i25_i = sp + 24;
 var $args_i24_i = sp + 32;
 var $args_i23_i = sp + 48;
 var $args_i22_i = sp + 64;
 var $args_i21_i = sp + 80;
 var $args_i20_i = sp + 96;
 var $args_i19_i = sp + 112;
 var $args_i18_i = sp + 128;
 var $args_i17_i = sp + 144;
 var $args_i16_i = sp + 160;
 var $args_i15_i = sp + 176;
 var $args_i14_i = sp + 192;
 var $args_i13_i = sp + 208;
 var $args_i12_i = sp + 224;
 var $args_i11_i = sp + 240;
 var $args_i10_i = sp + 256;
 var $args_i9_i = sp + 296;
 var $args_i8_i = sp + 336;
 var $args_i7_i = sp + 352;
 var $args_i6_i = sp + 368;
 var $args_i5_i = sp + 376;
 var $args_i4_i = sp + 400;
 var $args_i3_i = sp + 424;
 var $args_i2_i = sp + 432;
 var $args_i1_i = sp + 440;
 var $args_i_i = sp + 448;
 HEAP32[$args_i_i >> 2] = 1;
 var $3 = $args_i_i + 4 | 0;
 HEAP32[$3 >> 2] = 15936;
 __embind_register_function(1112, 1, $3, 378, 722);
 HEAP32[$args_i1_i >> 2] = 1;
 var $6 = $args_i1_i + 4 | 0;
 HEAP32[$6 >> 2] = 15936;
 __embind_register_function(1072, 1, $6, 378, 66);
 HEAP32[$args_i2_i >> 2] = 1;
 var $9 = $args_i2_i + 4 | 0;
 HEAP32[$9 >> 2] = 15936;
 __embind_register_function(1056, 1, $9, 378, 364);
 HEAP32[$args_i3_i >> 2] = 1;
 var $12 = $args_i3_i + 4 | 0;
 HEAP32[$12 >> 2] = 15928;
 __embind_register_function(1032, 1, $12, 282, 78);
 HEAP32[$args_i4_i >> 2] = 5;
 var $15 = $args_i4_i + 4 | 0;
 HEAP32[$15 >> 2] = 15928;
 HEAP32[$args_i4_i + 8 >> 2] = __ZTIf;
 HEAP32[$args_i4_i + 12 >> 2] = __ZTIf;
 HEAP32[$args_i4_i + 16 >> 2] = __ZTIf;
 HEAP32[$args_i4_i + 20 >> 2] = __ZTIi;
 __embind_register_function(1e3, 5, $15, 438, 22);
 HEAP32[$args_i5_i >> 2] = 5;
 var $22 = $args_i5_i + 4 | 0;
 HEAP32[$22 >> 2] = 15928;
 HEAP32[$args_i5_i + 8 >> 2] = __ZTIi;
 HEAP32[$args_i5_i + 12 >> 2] = __ZTIi;
 HEAP32[$args_i5_i + 16 >> 2] = __ZTIi;
 HEAP32[$args_i5_i + 20 >> 2] = __ZTIi;
 __embind_register_function(968, 5, $22, 822, 398);
 HEAP32[$args_i6_i >> 2] = 1;
 var $29 = $args_i6_i + 4 | 0;
 HEAP32[$29 >> 2] = 15928;
 __embind_register_function(928, 1, $29, 282, 244);
 HEAP32[$args_i7_i >> 2] = 2;
 var $32 = $args_i7_i + 4 | 0;
 HEAP32[$32 >> 2] = 15928;
 HEAP32[$args_i7_i + 8 >> 2] = 17224;
 __embind_register_function(896, 2, $32, 494, 528);
 HEAP32[$args_i8_i >> 2] = 2;
 var $36 = $args_i8_i + 4 | 0;
 HEAP32[$36 >> 2] = 15928;
 HEAP32[$args_i8_i + 8 >> 2] = 17224;
 __embind_register_function(728, 2, $36, 494, 56);
 HEAP32[$args_i9_i >> 2] = 8;
 var $40 = $args_i9_i + 4 | 0;
 HEAP32[$40 >> 2] = 15928;
 HEAP32[$args_i9_i + 8 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 12 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 16 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 20 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 24 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 28 >> 2] = __ZTIf;
 HEAP32[$args_i9_i + 32 >> 2] = 17224;
 __embind_register_function(696, 8, $40, 592, 654);
 HEAP32[$args_i10_i >> 2] = 9;
 var $50 = $args_i10_i + 4 | 0;
 HEAP32[$50 >> 2] = 15928;
 HEAP32[$args_i10_i + 8 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 12 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 16 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 20 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 24 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 28 >> 2] = __ZTIf;
 HEAP32[$args_i10_i + 32 >> 2] = __ZTIi;
 HEAP32[$args_i10_i + 36 >> 2] = 17224;
 __embind_register_function(672, 9, $50, 512, 222);
 HEAP32[$args_i11_i >> 2] = 2;
 var $61 = $args_i11_i + 4 | 0;
 HEAP32[$61 >> 2] = 15928;
 HEAP32[$args_i11_i + 8 >> 2] = __ZTIf;
 __embind_register_function(600, 2, $61, 564, 122);
 HEAP32[$args_i12_i >> 2] = 2;
 var $65 = $args_i12_i + 4 | 0;
 HEAP32[$65 >> 2] = 15928;
 HEAP32[$args_i12_i + 8 >> 2] = __ZTIf;
 __embind_register_function(576, 2, $65, 564, 474);
 HEAP32[$args_i13_i >> 2] = 2;
 var $69 = $args_i13_i + 4 | 0;
 HEAP32[$69 >> 2] = 15928;
 HEAP32[$args_i13_i + 8 >> 2] = __ZTIf;
 __embind_register_function(552, 2, $69, 564, 724);
 HEAP32[$args_i14_i >> 2] = 2;
 var $73 = $args_i14_i + 4 | 0;
 HEAP32[$73 >> 2] = 15928;
 HEAP32[$args_i14_i + 8 >> 2] = __ZTIf;
 __embind_register_function(528, 2, $73, 564, 562);
 HEAP32[$args_i15_i >> 2] = 2;
 var $77 = $args_i15_i + 4 | 0;
 HEAP32[$77 >> 2] = 15928;
 HEAP32[$args_i15_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8968, 2, $77, 564, 252);
 HEAP32[$args_i16_i >> 2] = 2;
 var $81 = $args_i16_i + 4 | 0;
 HEAP32[$81 >> 2] = 15928;
 HEAP32[$args_i16_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8936, 2, $81, 564, 318);
 HEAP32[$args_i17_i >> 2] = 2;
 var $85 = $args_i17_i + 4 | 0;
 HEAP32[$85 >> 2] = 15928;
 HEAP32[$args_i17_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8904, 2, $85, 564, 498);
 HEAP32[$args_i18_i >> 2] = 2;
 var $89 = $args_i18_i + 4 | 0;
 HEAP32[$89 >> 2] = 15928;
 HEAP32[$args_i18_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8800, 2, $89, 564, 76);
 HEAP32[$args_i19_i >> 2] = 2;
 var $93 = $args_i19_i + 4 | 0;
 HEAP32[$93 >> 2] = 15928;
 HEAP32[$args_i19_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8776, 2, $93, 564, 218);
 HEAP32[$args_i20_i >> 2] = 2;
 var $97 = $args_i20_i + 4 | 0;
 HEAP32[$97 >> 2] = 15928;
 HEAP32[$args_i20_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8744, 2, $97, 564, 756);
 HEAP32[$args_i21_i >> 2] = 2;
 var $101 = $args_i21_i + 4 | 0;
 HEAP32[$101 >> 2] = 15928;
 HEAP32[$args_i21_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8704, 2, $101, 564, 154);
 HEAP32[$args_i22_i >> 2] = 2;
 var $105 = $args_i22_i + 4 | 0;
 HEAP32[$105 >> 2] = 15928;
 HEAP32[$args_i22_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8648, 2, $105, 564, 832);
 HEAP32[$args_i23_i >> 2] = 2;
 var $109 = $args_i23_i + 4 | 0;
 HEAP32[$109 >> 2] = 15928;
 HEAP32[$args_i23_i + 8 >> 2] = __ZTIf;
 __embind_register_function(8584, 2, $109, 564, 132);
 HEAP32[$args_i24_i >> 2] = 2;
 var $113 = $args_i24_i + 4 | 0;
 HEAP32[$113 >> 2] = 15928;
 HEAP32[$args_i24_i + 8 >> 2] = __ZTIh;
 __embind_register_function(8528, 2, $113, 70, 560);
 HEAP32[$args_i25_i >> 2] = 1;
 var $117 = $args_i25_i + 4 | 0;
 HEAP32[$117 >> 2] = 15928;
 __embind_register_function(8424, 1, $117, 282, 92);
 HEAP32[$args_i26_i >> 2] = 1;
 var $120 = $args_i26_i + 4 | 0;
 HEAP32[$120 >> 2] = 15928;
 __embind_register_function(8352, 1, $120, 282, 466);
 HEAP32[$args_i27_i >> 2] = 1;
 var $123 = $args_i27_i + 4 | 0;
 HEAP32[$123 >> 2] = 15928;
 __embind_register_function(8152, 1, $123, 282, 590);
 HEAP32[$args_i28_i >> 2] = 1;
 var $126 = $args_i28_i + 4 | 0;
 HEAP32[$126 >> 2] = 15928;
 __embind_register_function(8072, 1, $126, 282, 356);
 STACKTOP = sp;
 return;
}
function ___getTypeName($ti) {
 return _strdup(HEAP32[$ti + 4 >> 2]);
}
function __GLOBAL__I_a545() {
 __embind_register_void(15928, 3504);
 __embind_register_bool(15936, 6968, 1, 0);
 __embind_register_integer(__ZTIc, 6120, -128, 127);
 __embind_register_integer(__ZTIa, 5128, -128, 127);
 __embind_register_integer(__ZTIh, 3952, 0, 255);
 __embind_register_integer(__ZTIs, 3376, -32768, 32767);
 __embind_register_integer(__ZTIt, 2400, 0, 65535);
 __embind_register_integer(__ZTIi, 1600, -2147483648, 2147483647);
 __embind_register_integer(__ZTIj, 1096, 0, -1);
 __embind_register_integer(__ZTIl, 664, -2147483648, 2147483647);
 __embind_register_integer(__ZTIm, 8728, 0, -1);
 __embind_register_float(__ZTIf, 7976);
 __embind_register_float(__ZTId, 7536);
 __embind_register_std_string(17224, 7208);
 __embind_register_std_wstring(17200, 4, 7040);
 __embind_register_emval(17512, 6952);
 __embind_register_memory_view(17520, 6824);
 return;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 24 >> 2]]($this);
 var $6 = __ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2], 21256);
 var $7 = $6;
 HEAP32[$this + 36 >> 2] = $7;
 HEAP8[$this + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($7) & 1;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__extbuf = sp;
 var $__extbe = sp + 8;
 var $1 = $this + 36 | 0;
 var $2 = $this + 40 | 0;
 var $3 = $__extbuf | 0;
 var $4 = $__extbuf + 8 | 0;
 var $5 = $__extbuf;
 var $6 = $this + 32 | 0;
 while (1) {
  var $8 = HEAP32[$1 >> 2];
  var $14 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 20 >> 2]]($8, HEAP32[$2 >> 2], $3, $4, $__extbe);
  var $17 = HEAP32[$__extbe >> 2] - $5 | 0;
  if ((_fwrite($3, 1, $17, HEAP32[$6 >> 2]) | 0) != ($17 | 0)) {
   var $_0 = -1;
   label = 1358;
   break;
  }
  if (($14 | 0) == 2) {
   var $_0 = -1;
   label = 1359;
   break;
  } else if (($14 | 0) != 1) {
   label = 1356;
   break;
  }
 }
 if (label == 1356) {
  var $_0 = ((_fflush(HEAP32[$6 >> 2]) | 0) != 0) << 31 >> 31;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else if (label == 1358) {
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else if (label == 1359) {
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function ___ZN10emscripten8internal7InvokerIvJffffffiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvffffffiS8_EffffffiPNS0_11BindingTypeIS8_E3$_0E_($fn, $args, $args1, $args2, $args3, $args4, $args5, $args6, $args7) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $1 = sp;
 var $2 = $args7 + 4 | 0;
 var $4 = HEAP32[$args7 >> 2];
 if (($4 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($4 >>> 0 < 11) {
   HEAP8[$1] = $4 << 1 & 255;
   var $__p_0_i = $1 + 1 | 0;
  } else {
   var $16 = $4 + 16 & -16;
   var $_size_i = ($16 | 0) == 0 ? 1 : $16;
   while (1) {
    var $19 = _malloc($_size_i);
    if (($19 | 0) != 0) {
     label = 1376;
     break;
    }
    var $22 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($22 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$22]();
   }
   if (label == 1376) {
    HEAP32[$1 + 8 >> 2] = $19;
    HEAP32[$1 >> 2] = $16 | 1;
    HEAP32[$1 + 4 >> 2] = $4;
    var $__p_0_i = $19;
    break;
   }
   var $32 = ___cxa_allocate_exception(4);
   HEAP32[$32 >> 2] = 9744;
   ___cxa_throw($32, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 _memcpy($__p_0_i, $2, $4) | 0;
 HEAP8[$__p_0_i + $4 | 0] = 0;
 FUNCTION_TABLE[$fn]($args, $args1, $args2, $args3, $args4, $args5, $args6, $1);
 if ((HEAP8[$1] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $48 = HEAP32[$1 + 8 >> 2];
 if (($48 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($48);
 STACKTOP = sp;
 return;
}
function ___ZN10emscripten8internal7InvokerIvJffffffNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvffffffS8_EffffffPNS0_11BindingTypeIS8_E3$_0E_($fn, $args, $args1, $args2, $args3, $args4, $args5, $args6) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $1 = sp;
 var $2 = $args6 + 4 | 0;
 var $4 = HEAP32[$args6 >> 2];
 if (($4 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($4 >>> 0 < 11) {
   HEAP8[$1] = $4 << 1 & 255;
   var $__p_0_i = $1 + 1 | 0;
  } else {
   var $16 = $4 + 16 & -16;
   var $_size_i = ($16 | 0) == 0 ? 1 : $16;
   while (1) {
    var $19 = _malloc($_size_i);
    if (($19 | 0) != 0) {
     label = 1404;
     break;
    }
    var $22 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($22 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$22]();
   }
   if (label == 1404) {
    HEAP32[$1 + 8 >> 2] = $19;
    HEAP32[$1 >> 2] = $16 | 1;
    HEAP32[$1 + 4 >> 2] = $4;
    var $__p_0_i = $19;
    break;
   }
   var $32 = ___cxa_allocate_exception(4);
   HEAP32[$32 >> 2] = 9744;
   ___cxa_throw($32, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 _memcpy($__p_0_i, $2, $4) | 0;
 HEAP8[$__p_0_i + $4 | 0] = 0;
 FUNCTION_TABLE[$fn]($args, $args1, $args2, $args3, $args4, $args5, $1);
 if ((HEAP8[$1] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $48 = HEAP32[$1 + 8 >> 2];
 if (($48 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($48);
 STACKTOP = sp;
 return;
}
function ___ZN10emscripten8internal7InvokerIvJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvS8_EPNS0_11BindingTypeIS8_E3$_0E_($fn, $args) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $1 = sp;
 var $2 = $args + 4 | 0;
 var $4 = HEAP32[$args >> 2];
 if (($4 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($4 >>> 0 < 11) {
   HEAP8[$1] = $4 << 1 & 255;
   var $__p_0_i = $1 + 1 | 0;
  } else {
   var $16 = $4 + 16 & -16;
   var $_size_i = ($16 | 0) == 0 ? 1 : $16;
   while (1) {
    var $19 = _malloc($_size_i);
    if (($19 | 0) != 0) {
     label = 1432;
     break;
    }
    var $22 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($22 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$22]();
   }
   if (label == 1432) {
    HEAP32[$1 + 8 >> 2] = $19;
    HEAP32[$1 >> 2] = $16 | 1;
    HEAP32[$1 + 4 >> 2] = $4;
    var $__p_0_i = $19;
    break;
   }
   var $32 = ___cxa_allocate_exception(4);
   HEAP32[$32 >> 2] = 9744;
   ___cxa_throw($32, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 _memcpy($__p_0_i, $2, $4) | 0;
 HEAP8[$__p_0_i + $4 | 0] = 0;
 FUNCTION_TABLE[$fn]($1);
 if ((HEAP8[$1] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $48 = HEAP32[$1 + 8 >> 2];
 if (($48 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($48);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(21664);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(21752);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(21296);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(21384);
 return;
}
function __ZNSt3__111__stdoutbufIwE8overflowEi($this, $__c) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__1buf = sp + 8;
 var $__extbe = sp + 16;
 var $__e = sp + 24;
 var $1 = ($__c | 0) == -1;
 L1788 : do {
  if (!$1) {
   HEAP32[$__1buf >> 2] = $__c;
   if ((HEAP8[$this + 44 | 0] & 1) != 0) {
    if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2]) | 0) == 1) {
     break;
    } else {
     var $_0 = -1;
    }
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $14 = $__extbuf | 0;
   HEAP32[$__extbe >> 2] = $14;
   var $15 = $__1buf + 4 | 0;
   var $16 = $this + 36 | 0;
   var $17 = $this + 40 | 0;
   var $18 = $__extbuf + 8 | 0;
   var $19 = $__extbuf;
   var $20 = $this + 32 | 0;
   var $pbase_0 = $__1buf;
   while (1) {
    var $pbase_0;
    var $22 = HEAP32[$16 >> 2];
    var $28 = FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 12 >> 2]]($22, HEAP32[$17 >> 2], $pbase_0, $15, $__e, $14, $18, $__extbe);
    if ((HEAP32[$__e >> 2] | 0) == ($pbase_0 | 0)) {
     var $_0 = -1;
     label = 1464;
     break;
    }
    if (($28 | 0) == 3) {
     label = 1457;
     break;
    }
    var $39 = ($28 | 0) == 1;
    if ($28 >>> 0 >= 2) {
     var $_0 = -1;
     label = 1466;
     break;
    }
    var $44 = HEAP32[$__extbe >> 2] - $19 | 0;
    if ((_fwrite($14, 1, $44, HEAP32[$20 >> 2]) | 0) != ($44 | 0)) {
     var $_0 = -1;
     label = 1467;
     break;
    }
    if ($39) {
     var $pbase_0 = $39 ? HEAP32[$__e >> 2] : $pbase_0;
    } else {
     break L1788;
    }
   }
   if (label == 1457) {
    if ((_fwrite($pbase_0, 1, 1, HEAP32[$20 >> 2]) | 0) == 1) {
     break;
    } else {
     var $_0 = -1;
    }
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1464) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1466) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1467) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
  }
 } while (0);
 var $_0 = $1 ? 0 : $__c;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEi($this, $__c) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__enxt = sp + 8;
 var $__ci = sp + 16;
 var $__inxt = sp + 24;
 var $2 = $this + 52 | 0;
 var $5 = (HEAP8[$2] & 1) != 0;
 if (($__c | 0) == -1) {
  if ($5) {
   var $_019 = -1;
   var $_019;
   STACKTOP = sp;
   return $_019;
  }
  var $9 = HEAP32[$this + 48 >> 2];
  HEAP8[$2] = ($9 | 0) != -1 | 0;
  var $_019 = $9;
  var $_019;
  STACKTOP = sp;
  return $_019;
 }
 var $13 = $this + 48 | 0;
 L1828 : do {
  if ($5) {
   HEAP32[$__ci >> 2] = HEAP32[$13 >> 2];
   var $17 = HEAP32[$this + 36 >> 2];
   var $21 = $__extbuf | 0;
   var $27 = FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 12 >> 2]]($17, HEAP32[$this + 40 >> 2], $__ci, $__ci + 4 | 0, $__inxt, $21, $__extbuf + 8 | 0, $__enxt);
   if (($27 | 0) == 3) {
    HEAP8[$21] = HEAP32[$13 >> 2] & 255;
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   } else if (($27 | 0) == 2 | ($27 | 0) == 1) {
    var $_019 = -1;
    var $_019;
    STACKTOP = sp;
    return $_019;
   }
   var $32 = $this + 32 | 0;
   while (1) {
    var $33 = HEAP32[$__enxt >> 2];
    if ($33 >>> 0 <= $21 >>> 0) {
     break L1828;
    }
    var $36 = $33 - 1 | 0;
    HEAP32[$__enxt >> 2] = $36;
    if ((_ungetc(HEAP8[$36] | 0, HEAP32[$32 >> 2]) | 0) == -1) {
     var $_019 = -1;
     break;
    }
   }
   var $_019;
   STACKTOP = sp;
   return $_019;
  }
 } while (0);
 HEAP32[$13 >> 2] = $__c;
 HEAP8[$2] = 1;
 var $_019 = $__c;
 var $_019;
 STACKTOP = sp;
 return $_019;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__1buf = sp + 8;
 var $__enxt = sp + 16;
 var $__inxt = sp + 24;
 var $1 = $this + 52 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  var $6 = $this + 48 | 0;
  var $7 = HEAP32[$6 >> 2];
  if (!$__consume) {
   var $_0 = $7;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
  HEAP32[$6 >> 2] = -1;
  HEAP8[$1] = 0;
  var $_0 = $7;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $10 = HEAP32[$this + 44 >> 2];
 var $_sroa_speculated = ($10 | 0) > 1 ? $10 : 1;
 L1848 : do {
  if (($_sroa_speculated | 0) > 0) {
   var $13 = $this + 32 | 0;
   var $__i_044 = 0;
   while (1) {
    var $__i_044;
    var $16 = _fgetc(HEAP32[$13 >> 2]);
    if (($16 | 0) == -1) {
     var $_0 = -1;
     break;
    }
    HEAP8[$__extbuf + $__i_044 | 0] = $16 & 255;
    var $21 = $__i_044 + 1 | 0;
    if (($21 | 0) < ($_sroa_speculated | 0)) {
     var $__i_044 = $21;
    } else {
     break L1848;
    }
   }
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 L1855 : do {
  if ((HEAP8[$this + 53 | 0] & 1) == 0) {
   var $27 = $this + 40 | 0;
   var $28 = $this + 36 | 0;
   var $29 = $__extbuf | 0;
   var $30 = $__1buf + 4 | 0;
   var $31 = $this + 32 | 0;
   var $__nread_0 = $_sroa_speculated;
   while (1) {
    var $__nread_0;
    var $37 = HEAP32[$27 >> 2];
    var $38 = $37;
    var $39$0 = HEAP32[$38 >> 2];
    var $39$1 = HEAP32[$38 + 4 >> 2];
    var $40 = HEAP32[$28 >> 2];
    var $41 = $__extbuf + $__nread_0 | 0;
    var $46 = FUNCTION_TABLE[HEAP32[HEAP32[$40 >> 2] + 16 >> 2]]($40, $37, $29, $41, $__enxt, $__1buf, $30, $__inxt);
    if (($46 | 0) == 3) {
     label = 1510;
     break;
    } else if (($46 | 0) == 2) {
     var $_0 = -1;
     label = 1522;
     break;
    } else if (($46 | 0) != 1) {
     var $__nread_2 = $__nread_0;
     break L1855;
    }
    var $49 = HEAP32[$27 >> 2];
    HEAP32[$49 >> 2] = $39$0;
    HEAP32[$49 + 4 >> 2] = $39$1;
    if (($__nread_0 | 0) == 8) {
     var $_0 = -1;
     label = 1523;
     break;
    }
    var $53 = _fgetc(HEAP32[$31 >> 2]);
    if (($53 | 0) == -1) {
     var $_0 = -1;
     label = 1524;
     break;
    }
    HEAP8[$41] = $53 & 255;
    var $__nread_0 = $__nread_0 + 1 | 0;
   }
   if (label == 1510) {
    HEAP32[$__1buf >> 2] = HEAP8[$29] | 0;
    var $__nread_2 = $__nread_0;
    break;
   } else if (label == 1522) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1523) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1524) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
  } else {
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf | 0] | 0;
   var $__nread_2 = $_sroa_speculated;
  }
 } while (0);
 var $__nread_2;
 if ($__consume) {
  var $73 = HEAP32[$__1buf >> 2];
  HEAP32[$this + 48 >> 2] = $73;
  var $_0 = $73;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $61 = $this + 32 | 0;
 var $__i2_0 = $__nread_2;
 while (1) {
  var $__i2_0;
  if (($__i2_0 | 0) <= 0) {
   break;
  }
  var $65 = $__i2_0 - 1 | 0;
  if ((_ungetc(HEAP8[$__extbuf + $65 | 0] | 0, HEAP32[$61 >> 2]) | 0) == -1) {
   var $_0 = -1;
   label = 1525;
   break;
  } else {
   var $__i2_0 = $65;
  }
 }
 if (label == 1525) {
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $_0 = HEAP32[$__1buf >> 2];
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 24 >> 2]]($this);
 var $6 = __ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2], 21264);
 var $7 = $6;
 HEAP32[$this + 36 >> 2] = $7;
 HEAP8[$this + 44 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($7) & 1;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__extbuf = sp;
 var $__extbe = sp + 8;
 var $1 = $this + 36 | 0;
 var $2 = $this + 40 | 0;
 var $3 = $__extbuf | 0;
 var $4 = $__extbuf + 8 | 0;
 var $5 = $__extbuf;
 var $6 = $this + 32 | 0;
 while (1) {
  var $8 = HEAP32[$1 >> 2];
  var $14 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 20 >> 2]]($8, HEAP32[$2 >> 2], $3, $4, $__extbe);
  var $17 = HEAP32[$__extbe >> 2] - $5 | 0;
  if ((_fwrite($3, 1, $17, HEAP32[$6 >> 2]) | 0) != ($17 | 0)) {
   var $_0 = -1;
   label = 1544;
   break;
  }
  if (($14 | 0) == 2) {
   var $_0 = -1;
   label = 1545;
   break;
  } else if (($14 | 0) != 1) {
   label = 1542;
   break;
  }
 }
 if (label == 1544) {
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else if (label == 1542) {
  var $_0 = ((_fflush(HEAP32[$6 >> 2]) | 0) != 0) << 31 >> 31;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else if (label == 1545) {
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__1buf = sp + 8;
 var $__extbe = sp + 16;
 var $__e = sp + 24;
 var $1 = ($__c | 0) == -1;
 L1901 : do {
  if (!$1) {
   HEAP8[$__1buf] = $__c & 255;
   if ((HEAP8[$this + 44 | 0] & 1) != 0) {
    if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2]) | 0) == 1) {
     break;
    } else {
     var $_0 = -1;
    }
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   var $14 = $__extbuf | 0;
   HEAP32[$__extbe >> 2] = $14;
   var $15 = $__1buf + 1 | 0;
   var $16 = $this + 36 | 0;
   var $17 = $this + 40 | 0;
   var $18 = $__extbuf + 8 | 0;
   var $19 = $__extbuf;
   var $20 = $this + 32 | 0;
   var $pbase_0 = $__1buf;
   while (1) {
    var $pbase_0;
    var $22 = HEAP32[$16 >> 2];
    var $28 = FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 12 >> 2]]($22, HEAP32[$17 >> 2], $pbase_0, $15, $__e, $14, $18, $__extbe);
    if ((HEAP32[$__e >> 2] | 0) == ($pbase_0 | 0)) {
     var $_0 = -1;
     label = 1563;
     break;
    }
    if (($28 | 0) == 3) {
     label = 1553;
     break;
    }
    var $38 = ($28 | 0) == 1;
    if ($28 >>> 0 >= 2) {
     var $_0 = -1;
     label = 1564;
     break;
    }
    var $43 = HEAP32[$__extbe >> 2] - $19 | 0;
    if ((_fwrite($14, 1, $43, HEAP32[$20 >> 2]) | 0) != ($43 | 0)) {
     var $_0 = -1;
     label = 1562;
     break;
    }
    if ($38) {
     var $pbase_0 = $38 ? HEAP32[$__e >> 2] : $pbase_0;
    } else {
     break L1901;
    }
   }
   if (label == 1563) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1553) {
    if ((_fwrite($pbase_0, 1, 1, HEAP32[$20 >> 2]) | 0) == 1) {
     break;
    } else {
     var $_0 = -1;
    }
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1564) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1562) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
  }
 } while (0);
 var $_0 = $1 ? 0 : $__c;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__enxt = sp + 8;
 var $__ci = sp + 16;
 var $__inxt = sp + 24;
 var $2 = $this + 52 | 0;
 var $5 = (HEAP8[$2] & 1) != 0;
 if (($__c | 0) == -1) {
  if ($5) {
   var $_019 = -1;
   var $_019;
   STACKTOP = sp;
   return $_019;
  }
  var $9 = HEAP32[$this + 48 >> 2];
  HEAP8[$2] = ($9 | 0) != -1 | 0;
  var $_019 = $9;
  var $_019;
  STACKTOP = sp;
  return $_019;
 }
 var $13 = $this + 48 | 0;
 L1941 : do {
  if ($5) {
   HEAP8[$__ci] = HEAP32[$13 >> 2] & 255;
   var $18 = HEAP32[$this + 36 >> 2];
   var $22 = $__extbuf | 0;
   var $28 = FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 12 >> 2]]($18, HEAP32[$this + 40 >> 2], $__ci, $__ci + 1 | 0, $__inxt, $22, $__extbuf + 8 | 0, $__enxt);
   if (($28 | 0) == 2 | ($28 | 0) == 1) {
    var $_019 = -1;
    var $_019;
    STACKTOP = sp;
    return $_019;
   } else if (($28 | 0) == 3) {
    HEAP8[$22] = HEAP32[$13 >> 2] & 255;
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   }
   var $33 = $this + 32 | 0;
   while (1) {
    var $34 = HEAP32[$__enxt >> 2];
    if ($34 >>> 0 <= $22 >>> 0) {
     break L1941;
    }
    var $37 = $34 - 1 | 0;
    HEAP32[$__enxt >> 2] = $37;
    if ((_ungetc(HEAP8[$37] | 0, HEAP32[$33 >> 2]) | 0) == -1) {
     var $_019 = -1;
     break;
    }
   }
   var $_019;
   STACKTOP = sp;
   return $_019;
  }
 } while (0);
 HEAP32[$13 >> 2] = $__c;
 HEAP8[$2] = 1;
 var $_019 = $__c;
 var $_019;
 STACKTOP = sp;
 return $_019;
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__extbuf = sp;
 var $__1buf = sp + 8;
 var $__enxt = sp + 16;
 var $__inxt = sp + 24;
 var $1 = $this + 52 | 0;
 if ((HEAP8[$1] & 1) != 0) {
  var $6 = $this + 48 | 0;
  var $7 = HEAP32[$6 >> 2];
  if (!$__consume) {
   var $_0 = $7;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
  HEAP32[$6 >> 2] = -1;
  HEAP8[$1] = 0;
  var $_0 = $7;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $10 = HEAP32[$this + 44 >> 2];
 var $_sroa_speculated = ($10 | 0) > 1 ? $10 : 1;
 L1961 : do {
  if (($_sroa_speculated | 0) > 0) {
   var $13 = $this + 32 | 0;
   var $__i_044 = 0;
   while (1) {
    var $__i_044;
    var $16 = _fgetc(HEAP32[$13 >> 2]);
    if (($16 | 0) == -1) {
     var $_0 = -1;
     break;
    }
    HEAP8[$__extbuf + $__i_044 | 0] = $16 & 255;
    var $21 = $__i_044 + 1 | 0;
    if (($21 | 0) < ($_sroa_speculated | 0)) {
     var $__i_044 = $21;
    } else {
     break L1961;
    }
   }
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 L1968 : do {
  if ((HEAP8[$this + 53 | 0] & 1) == 0) {
   var $27 = $this + 40 | 0;
   var $28 = $this + 36 | 0;
   var $29 = $__extbuf | 0;
   var $30 = $__1buf + 1 | 0;
   var $31 = $this + 32 | 0;
   var $__nread_0 = $_sroa_speculated;
   while (1) {
    var $__nread_0;
    var $36 = HEAP32[$27 >> 2];
    var $37 = $36;
    var $38$0 = HEAP32[$37 >> 2];
    var $38$1 = HEAP32[$37 + 4 >> 2];
    var $39 = HEAP32[$28 >> 2];
    var $40 = $__extbuf + $__nread_0 | 0;
    var $45 = FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 16 >> 2]]($39, $36, $29, $40, $__enxt, $__1buf, $30, $__inxt);
    if (($45 | 0) == 2) {
     var $_0 = -1;
     label = 1618;
     break;
    } else if (($45 | 0) == 3) {
     label = 1606;
     break;
    } else if (($45 | 0) != 1) {
     var $__nread_2 = $__nread_0;
     break L1968;
    }
    var $48 = HEAP32[$27 >> 2];
    HEAP32[$48 >> 2] = $38$0;
    HEAP32[$48 + 4 >> 2] = $38$1;
    if (($__nread_0 | 0) == 8) {
     var $_0 = -1;
     label = 1620;
     break;
    }
    var $52 = _fgetc(HEAP32[$31 >> 2]);
    if (($52 | 0) == -1) {
     var $_0 = -1;
     label = 1616;
     break;
    }
    HEAP8[$40] = $52 & 255;
    var $__nread_0 = $__nread_0 + 1 | 0;
   }
   if (label == 1620) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1616) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1618) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1606) {
    HEAP8[$__1buf] = HEAP8[$29];
    var $__nread_2 = $__nread_0;
    break;
   }
  } else {
   HEAP8[$__1buf] = HEAP8[$__extbuf | 0];
   var $__nread_2 = $_sroa_speculated;
  }
 } while (0);
 var $__nread_2;
 do {
  if ($__consume) {
   var $71 = HEAP8[$__1buf];
   HEAP32[$this + 48 >> 2] = $71 & 255;
   var $75 = $71;
  } else {
   var $59 = $this + 32 | 0;
   var $__i2_0 = $__nread_2;
   while (1) {
    var $__i2_0;
    if (($__i2_0 | 0) <= 0) {
     label = 1613;
     break;
    }
    var $63 = $__i2_0 - 1 | 0;
    if ((_ungetc(HEAPU8[$__extbuf + $63 | 0], HEAP32[$59 >> 2]) | 0) == -1) {
     var $_0 = -1;
     label = 1619;
     break;
    } else {
     var $__i2_0 = $63;
    }
   }
   if (label == 1619) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 1613) {
    var $75 = HEAP8[$__1buf];
    break;
   }
  }
 } while (0);
 var $75;
 var $_0 = $75 & 255;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 var $1 = __ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2], 21256);
 var $2 = $1;
 var $3 = $this + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 var $9 = $this + 44 | 0;
 HEAP32[$9 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($2);
 var $10 = HEAP32[$3 >> 2];
 HEAP8[$this + 53 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10) & 1;
 if ((HEAP32[$9 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(624);
 } else {
  return;
 }
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 var $1 = __ZNKSt3__16locale9use_facetERNS0_2idE(HEAP32[$__loc >> 2], 21264);
 var $2 = $1;
 var $3 = $this + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 var $9 = $this + 44 | 0;
 HEAP32[$9 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($2);
 var $10 = HEAP32[$3 >> 2];
 HEAP8[$this + 53 | 0] = FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 28 >> 2]]($10) & 1;
 if ((HEAP32[$9 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(624);
 } else {
  return;
 }
}
function __ZNKSt11logic_error4whatEv($this) {
 return HEAP32[$this + 4 >> 2];
}
function __ZNKSt13runtime_error4whatEv($this) {
 return HEAP32[$this + 4 >> 2];
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result, $this, $ev) {
 HEAP32[$agg_result >> 2] = $ev;
 HEAP32[$agg_result + 4 >> 2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 if ((HEAP32[$code + 4 >> 2] | 0) != ($this | 0)) {
  var $9 = 0;
  var $9;
  return $9;
 }
 var $9 = (HEAP32[$code >> 2] | 0) == ($condition | 0);
 var $9;
 return $9;
}
function __GLOBAL__I_a662() {
 var $1 = HEAP32[_stdin >> 2];
 HEAP32[21008 >> 2] = 11568;
 __ZNSt3__16localeC2Ev(21012);
 HEAP32[21016 >> 2] = 0;
 HEAP32[21020 >> 2] = 0;
 HEAP32[21024 >> 2] = 0;
 HEAP32[21028 >> 2] = 0;
 HEAP32[21032 >> 2] = 0;
 HEAP32[21036 >> 2] = 0;
 HEAP32[21008 >> 2] = 12336;
 HEAP32[21040 >> 2] = $1;
 HEAP32[21048 >> 2] = 21064;
 HEAP32[21056 >> 2] = -1;
 HEAP8[21060] = 0;
 var $2 = HEAP32[21012 >> 2];
 var $3 = $2 + 4 | 0;
 tempValue = HEAP32[$3 >> 2], HEAP32[$3 >> 2] = tempValue + 1, tempValue;
 var $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 21264);
 var $6 = $5;
 HEAP32[21044 >> 2] = $6;
 HEAP32[21052 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($6);
 var $12 = HEAP32[21044 >> 2];
 HEAP8[21061] = FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 28 >> 2]]($12) & 1;
 if ((HEAP32[21052 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(624);
 }
 if (((tempValue = HEAP32[$3 >> 2], HEAP32[$3 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2 | 0);
 }
 HEAP32[21928 >> 2] = 11788;
 HEAP32[21936 >> 2] = 11808;
 HEAP32[21932 >> 2] = 0;
 HEAP32[21960 >> 2] = 21008;
 HEAP32[21952 >> 2] = 0;
 HEAP32[21956 >> 2] = 0;
 HEAP32[21940 >> 2] = 4098;
 HEAP32[21948 >> 2] = 0;
 HEAP32[21944 >> 2] = 6;
 _memset(21968, 0, 40);
 __ZNSt3__16localeC2Ev(21964);
 HEAP32[22008 >> 2] = 0;
 HEAP32[22012 >> 2] = -1;
 var $50 = HEAP32[_stdout >> 2];
 HEAP32[20912 >> 2] = 11568;
 __ZNSt3__16localeC2Ev(20916);
 HEAP32[20920 >> 2] = 0;
 HEAP32[20924 >> 2] = 0;
 HEAP32[20928 >> 2] = 0;
 HEAP32[20932 >> 2] = 0;
 HEAP32[20936 >> 2] = 0;
 HEAP32[20940 >> 2] = 0;
 HEAP32[20912 >> 2] = 11936;
 HEAP32[20944 >> 2] = $50;
 var $51 = HEAP32[20916 >> 2];
 var $52 = $51 + 4 | 0;
 tempValue = HEAP32[$52 >> 2], HEAP32[$52 >> 2] = tempValue + 1, tempValue;
 var $54 = __ZNKSt3__16locale9use_facetERNS0_2idE($51, 21264);
 var $75 = $54;
 if (((tempValue = HEAP32[$52 >> 2], HEAP32[$52 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$51 >> 2] + 8 >> 2]]($51 | 0);
 }
 HEAP32[20948 >> 2] = $75;
 HEAP32[20952 >> 2] = 21072;
 HEAP8[20956] = FUNCTION_TABLE[HEAP32[HEAP32[$54 >> 2] + 28 >> 2]]($75) & 1;
 HEAP32[21664 >> 2] = 11692;
 HEAP32[21668 >> 2] = 11712;
 HEAP32[21692 >> 2] = 20912;
 HEAP32[21684 >> 2] = 0;
 HEAP32[21688 >> 2] = 0;
 HEAP32[21672 >> 2] = 4098;
 HEAP32[21680 >> 2] = 0;
 HEAP32[21676 >> 2] = 6;
 _memset(21700, 0, 40);
 __ZNSt3__16localeC2Ev(21696);
 HEAP32[21740 >> 2] = 0;
 HEAP32[21744 >> 2] = -1;
 var $90 = HEAP32[_stderr >> 2];
 HEAP32[20960 >> 2] = 11568;
 __ZNSt3__16localeC2Ev(20964);
 HEAP32[20968 >> 2] = 0;
 HEAP32[20972 >> 2] = 0;
 HEAP32[20976 >> 2] = 0;
 HEAP32[20980 >> 2] = 0;
 HEAP32[20984 >> 2] = 0;
 HEAP32[20988 >> 2] = 0;
 HEAP32[20960 >> 2] = 11936;
 HEAP32[20992 >> 2] = $90;
 var $91 = HEAP32[20964 >> 2];
 var $92 = $91 + 4 | 0;
 tempValue = HEAP32[$92 >> 2], HEAP32[$92 >> 2] = tempValue + 1, tempValue;
 var $94 = __ZNKSt3__16locale9use_facetERNS0_2idE($91, 21264);
 var $115 = $94;
 if (((tempValue = HEAP32[$92 >> 2], HEAP32[$92 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$91 >> 2] + 8 >> 2]]($91 | 0);
 }
 HEAP32[20996 >> 2] = $115;
 HEAP32[21e3 >> 2] = 21080;
 HEAP8[21004] = FUNCTION_TABLE[HEAP32[HEAP32[$94 >> 2] + 28 >> 2]]($115) & 1;
 HEAP32[21840 >> 2] = 11692;
 HEAP32[21844 >> 2] = 11712;
 HEAP32[21868 >> 2] = 20960;
 HEAP32[21860 >> 2] = 0;
 HEAP32[21864 >> 2] = 0;
 HEAP32[21848 >> 2] = 4098;
 HEAP32[21856 >> 2] = 0;
 HEAP32[21852 >> 2] = 6;
 _memset(21876, 0, 40);
 __ZNSt3__16localeC2Ev(21872);
 HEAP32[21916 >> 2] = 0;
 HEAP32[21920 >> 2] = -1;
 var $136 = HEAP32[HEAP32[HEAP32[21840 >> 2] - 12 >> 2] + 21864 >> 2];
 HEAP32[21752 >> 2] = 11692;
 HEAP32[21756 >> 2] = 11712;
 HEAP32[21780 >> 2] = $136;
 HEAP32[21772 >> 2] = ($136 | 0) == 0;
 HEAP32[21776 >> 2] = 0;
 HEAP32[21760 >> 2] = 4098;
 HEAP32[21768 >> 2] = 0;
 HEAP32[21764 >> 2] = 6;
 _memset(21788, 0, 40);
 __ZNSt3__16localeC2Ev(21784);
 HEAP32[21828 >> 2] = 0;
 HEAP32[21832 >> 2] = -1;
 HEAP32[HEAP32[HEAP32[21928 >> 2] - 12 >> 2] + 22e3 >> 2] = 21664;
 var $149 = HEAP32[HEAP32[21840 >> 2] - 12 >> 2] + 21844 | 0;
 HEAP32[$149 >> 2] = HEAP32[$149 >> 2] | 8192;
 HEAP32[HEAP32[HEAP32[21840 >> 2] - 12 >> 2] + 21912 >> 2] = 21664;
 var $158 = HEAP32[_stdin >> 2];
 HEAP32[20856 >> 2] = 11496;
 __ZNSt3__16localeC2Ev(20860);
 HEAP32[20864 >> 2] = 0;
 HEAP32[20868 >> 2] = 0;
 HEAP32[20872 >> 2] = 0;
 HEAP32[20876 >> 2] = 0;
 HEAP32[20880 >> 2] = 0;
 HEAP32[20884 >> 2] = 0;
 HEAP32[20856 >> 2] = 12264;
 HEAP32[20888 >> 2] = $158;
 HEAP32[20896 >> 2] = 21088;
 HEAP32[20904 >> 2] = -1;
 HEAP8[20908] = 0;
 var $159 = HEAP32[20860 >> 2];
 var $160 = $159 + 4 | 0;
 tempValue = HEAP32[$160 >> 2], HEAP32[$160 >> 2] = tempValue + 1, tempValue;
 var $162 = __ZNKSt3__16locale9use_facetERNS0_2idE($159, 21256);
 var $163 = $162;
 HEAP32[20892 >> 2] = $163;
 HEAP32[20900 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$162 >> 2] + 24 >> 2]]($163);
 var $169 = HEAP32[20892 >> 2];
 HEAP8[20909] = FUNCTION_TABLE[HEAP32[HEAP32[$169 >> 2] + 28 >> 2]]($169) & 1;
 if ((HEAP32[20900 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(624);
 }
 if (((tempValue = HEAP32[$160 >> 2], HEAP32[$160 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$159 >> 2] + 8 >> 2]]($159 | 0);
 }
 HEAP32[21576 >> 2] = 11740;
 HEAP32[21584 >> 2] = 11760;
 HEAP32[21580 >> 2] = 0;
 HEAP32[21608 >> 2] = 20856;
 HEAP32[21600 >> 2] = 0;
 HEAP32[21604 >> 2] = 0;
 HEAP32[21588 >> 2] = 4098;
 HEAP32[21596 >> 2] = 0;
 HEAP32[21592 >> 2] = 6;
 _memset(21616, 0, 40);
 __ZNSt3__16localeC2Ev(21612);
 HEAP32[21656 >> 2] = 0;
 HEAP32[21660 >> 2] = -1;
 var $207 = HEAP32[_stdout >> 2];
 HEAP32[20760 >> 2] = 11496;
 __ZNSt3__16localeC2Ev(20764);
 HEAP32[20768 >> 2] = 0;
 HEAP32[20772 >> 2] = 0;
 HEAP32[20776 >> 2] = 0;
 HEAP32[20780 >> 2] = 0;
 HEAP32[20784 >> 2] = 0;
 HEAP32[20788 >> 2] = 0;
 HEAP32[20760 >> 2] = 11864;
 HEAP32[20792 >> 2] = $207;
 var $208 = HEAP32[20764 >> 2];
 var $209 = $208 + 4 | 0;
 tempValue = HEAP32[$209 >> 2], HEAP32[$209 >> 2] = tempValue + 1, tempValue;
 var $211 = __ZNKSt3__16locale9use_facetERNS0_2idE($208, 21256);
 var $232 = $211;
 if (((tempValue = HEAP32[$209 >> 2], HEAP32[$209 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$208 >> 2] + 8 >> 2]]($208 | 0);
 }
 HEAP32[20796 >> 2] = $232;
 HEAP32[20800 >> 2] = 21096;
 HEAP8[20804] = FUNCTION_TABLE[HEAP32[HEAP32[$211 >> 2] + 28 >> 2]]($232) & 1;
 HEAP32[21296 >> 2] = 11644;
 HEAP32[21300 >> 2] = 11664;
 HEAP32[21324 >> 2] = 20760;
 HEAP32[21316 >> 2] = 0;
 HEAP32[21320 >> 2] = 0;
 HEAP32[21304 >> 2] = 4098;
 HEAP32[21312 >> 2] = 0;
 HEAP32[21308 >> 2] = 6;
 _memset(21332, 0, 40);
 __ZNSt3__16localeC2Ev(21328);
 HEAP32[21372 >> 2] = 0;
 HEAP32[21376 >> 2] = -1;
 var $247 = HEAP32[_stderr >> 2];
 HEAP32[20808 >> 2] = 11496;
 __ZNSt3__16localeC2Ev(20812);
 HEAP32[20816 >> 2] = 0;
 HEAP32[20820 >> 2] = 0;
 HEAP32[20824 >> 2] = 0;
 HEAP32[20828 >> 2] = 0;
 HEAP32[20832 >> 2] = 0;
 HEAP32[20836 >> 2] = 0;
 HEAP32[20808 >> 2] = 11864;
 HEAP32[20840 >> 2] = $247;
 var $248 = HEAP32[20812 >> 2];
 var $249 = $248 + 4 | 0;
 tempValue = HEAP32[$249 >> 2], HEAP32[$249 >> 2] = tempValue + 1, tempValue;
 var $251 = __ZNKSt3__16locale9use_facetERNS0_2idE($248, 21256);
 var $272 = $251;
 if (((tempValue = HEAP32[$249 >> 2], HEAP32[$249 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  HEAP32[20844 >> 2] = $272;
  HEAP32[20848 >> 2] = 21104;
  var $281 = $251;
  var $282 = HEAP32[$281 >> 2];
  var $283 = $282 + 28 | 0;
  var $284 = HEAP32[$283 >> 2];
  var $285 = FUNCTION_TABLE[$284]($272);
  var $286 = $285 & 1;
  HEAP8[20852] = $286;
  HEAP32[21472 >> 2] = 11644;
  HEAP32[21476 >> 2] = 11664;
  HEAP32[21500 >> 2] = 20808;
  HEAP32[21492 >> 2] = 0;
  HEAP32[21496 >> 2] = 0;
  HEAP32[21480 >> 2] = 4098;
  HEAP32[21488 >> 2] = 0;
  HEAP32[21484 >> 2] = 6;
  _memset(21508, 0, 40);
  __ZNSt3__16localeC2Ev(21504);
  HEAP32[21548 >> 2] = 0;
  HEAP32[21552 >> 2] = -1;
  var $287 = HEAP32[21472 >> 2];
  var $288 = $287 - 12 | 0;
  var $289 = $288;
  var $290 = HEAP32[$289 >> 2];
  var $_sum108_i = $290 + 24 | 0;
  var $291 = $_sum108_i + 21472 | 0;
  var $292 = $291;
  var $293 = HEAP32[$292 >> 2];
  HEAP32[21384 >> 2] = 11644;
  HEAP32[21388 >> 2] = 11664;
  HEAP32[21412 >> 2] = $293;
  var $not__i18_i = ($293 | 0) == 0;
  var $294 = $not__i18_i & 1;
  HEAP32[21404 >> 2] = $294;
  HEAP32[21408 >> 2] = 0;
  HEAP32[21392 >> 2] = 4098;
  HEAP32[21400 >> 2] = 0;
  HEAP32[21396 >> 2] = 6;
  _memset(21420, 0, 40);
  __ZNSt3__16localeC2Ev(21416);
  HEAP32[21460 >> 2] = 0;
  HEAP32[21464 >> 2] = -1;
  var $295 = HEAP32[21576 >> 2];
  var $296 = $295 - 12 | 0;
  var $297 = $296;
  var $298 = HEAP32[$297 >> 2];
  var $_sum111_i = $298 + 72 | 0;
  var $299 = $_sum111_i + 21576 | 0;
  var $300 = $299;
  HEAP32[$300 >> 2] = 21296;
  var $301 = HEAP32[21472 >> 2];
  var $302 = $301 - 12 | 0;
  var $303 = $302;
  var $304 = HEAP32[$303 >> 2];
  var $_sum112_i = $304 + 4 | 0;
  var $305 = $_sum112_i + 21472 | 0;
  var $306 = $305;
  var $307 = HEAP32[$306 >> 2];
  var $308 = $307 | 8192;
  HEAP32[$306 >> 2] = $308;
  var $309 = HEAP32[21472 >> 2];
  var $310 = $309 - 12 | 0;
  var $311 = $310;
  var $312 = HEAP32[$311 >> 2];
  var $_sum113_i = $312 + 72 | 0;
  var $313 = $_sum113_i + 21472 | 0;
  var $314 = $313;
  HEAP32[$314 >> 2] = 21296;
  var $315 = _atexit(424, 22016, ___dso_handle);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$248 >> 2] + 8 >> 2]]($248 | 0);
 HEAP32[20844 >> 2] = $272;
 HEAP32[20848 >> 2] = 21104;
 var $281 = $251;
 var $282 = HEAP32[$281 >> 2];
 var $283 = $282 + 28 | 0;
 var $284 = HEAP32[$283 >> 2];
 var $285 = FUNCTION_TABLE[$284]($272);
 var $286 = $285 & 1;
 HEAP8[20852] = $286;
 HEAP32[21472 >> 2] = 11644;
 HEAP32[21476 >> 2] = 11664;
 HEAP32[21500 >> 2] = 20808;
 HEAP32[21492 >> 2] = 0;
 HEAP32[21496 >> 2] = 0;
 HEAP32[21480 >> 2] = 4098;
 HEAP32[21488 >> 2] = 0;
 HEAP32[21484 >> 2] = 6;
 _memset(21508, 0, 40);
 __ZNSt3__16localeC2Ev(21504);
 HEAP32[21548 >> 2] = 0;
 HEAP32[21552 >> 2] = -1;
 var $287 = HEAP32[21472 >> 2];
 var $288 = $287 - 12 | 0;
 var $289 = $288;
 var $290 = HEAP32[$289 >> 2];
 var $_sum108_i = $290 + 24 | 0;
 var $291 = $_sum108_i + 21472 | 0;
 var $292 = $291;
 var $293 = HEAP32[$292 >> 2];
 HEAP32[21384 >> 2] = 11644;
 HEAP32[21388 >> 2] = 11664;
 HEAP32[21412 >> 2] = $293;
 var $not__i18_i = ($293 | 0) == 0;
 var $294 = $not__i18_i & 1;
 HEAP32[21404 >> 2] = $294;
 HEAP32[21408 >> 2] = 0;
 HEAP32[21392 >> 2] = 4098;
 HEAP32[21400 >> 2] = 0;
 HEAP32[21396 >> 2] = 6;
 _memset(21420, 0, 40);
 __ZNSt3__16localeC2Ev(21416);
 HEAP32[21460 >> 2] = 0;
 HEAP32[21464 >> 2] = -1;
 var $295 = HEAP32[21576 >> 2];
 var $296 = $295 - 12 | 0;
 var $297 = $296;
 var $298 = HEAP32[$297 >> 2];
 var $_sum111_i = $298 + 72 | 0;
 var $299 = $_sum111_i + 21576 | 0;
 var $300 = $299;
 HEAP32[$300 >> 2] = 21296;
 var $301 = HEAP32[21472 >> 2];
 var $302 = $301 - 12 | 0;
 var $303 = $302;
 var $304 = HEAP32[$303 >> 2];
 var $_sum112_i = $304 + 4 | 0;
 var $305 = $_sum112_i + 21472 | 0;
 var $306 = $305;
 var $307 = HEAP32[$306 >> 2];
 var $308 = $307 | 8192;
 HEAP32[$306 >> 2] = $308;
 var $309 = HEAP32[21472 >> 2];
 var $310 = $309 - 12 | 0;
 var $311 = $310;
 var $312 = HEAP32[$311 >> 2];
 var $_sum113_i = $312 + 72 | 0;
 var $313 = $_sum113_i + 21472 | 0;
 var $314 = $313;
 HEAP32[$314 >> 2] = 21296;
 var $315 = _atexit(424, 22016, ___dso_handle);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 HEAP32[$this >> 2] = 9872;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 do {
  if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) < 0) {
   var $10 = HEAP32[$2 >> 2] - 12 | 0;
   if (($10 | 0) != 0) {
    _free($10);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 HEAP32[$this >> 2] = 9872;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  return;
 }
 _free($10);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 do {
  if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) < 0) {
   var $10 = HEAP32[$2 >> 2] - 12 | 0;
   if (($10 | 0) != 0) {
    _free($10);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  return;
 }
 _free($10);
 return;
}
function __ZNSt12length_errorD0Ev($this) {
 HEAP32[$this >> 2] = 9872;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 do {
  if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) < 0) {
   var $10 = HEAP32[$2 >> 2] - 12 | 0;
   if (($10 | 0) != 0) {
    _free($10);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $1 = sp;
 FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 12 >> 2]]($1, $this, $code);
 if ((HEAP32[$1 + 4 >> 2] | 0) != (HEAP32[$condition + 4 >> 2] | 0)) {
  var $17 = 0;
  var $17;
  STACKTOP = sp;
  return $17;
 }
 var $17 = (HEAP32[$1 >> 2] | 0) == (HEAP32[$condition >> 2] | 0);
 var $17;
 STACKTOP = sp;
 return $17;
}
function __ZNSt3__112system_errorD0Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  var $12 = $this;
  _free($12);
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  var $12 = $this;
  _free($12);
  return;
 }
 _free($10);
 var $12 = $this;
 _free($12);
 return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  return;
 }
 _free($10);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 if ((HEAP8[$this] & 1) == 0) {
  return;
 }
 var $7 = HEAP32[$this + 8 >> 2];
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 var $1 = _strlen($__s);
 var $2 = $this;
 var $3 = $this;
 var $4 = HEAP8[$3];
 if (($4 & 1) == 0) {
  var $13 = 10;
  var $12 = $4;
 } else {
  var $9 = HEAP32[$this >> 2];
  var $13 = ($9 & -2) - 1 | 0;
  var $12 = $9 & 255;
 }
 var $12;
 var $13;
 if ($13 >>> 0 < $1 >>> 0) {
  var $34 = $12 & 255;
  if (($34 & 1 | 0) == 0) {
   var $42 = $34 >>> 1;
  } else {
   var $42 = HEAP32[$this + 4 >> 2];
  }
  var $42;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $1 - $13 | 0, $42, 0, $42, $1, $__s);
  return;
 }
 if (($12 & 1) == 0) {
  var $23 = $2 + 1 | 0;
 } else {
  var $23 = HEAP32[$this + 8 >> 2];
 }
 var $23;
 _memmove($23, $__s, $1, 1, 0);
 HEAP8[$23 + $1 | 0] = 0;
 if ((HEAP8[$3] & 1) == 0) {
  HEAP8[$3] = $1 << 1 & 255;
  return;
 } else {
  HEAP32[$this + 4 >> 2] = $1;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n) {
 var $1 = $this;
 var $2 = $this;
 var $3 = HEAP8[$2];
 var $4 = $3 & 255;
 if (($4 & 1 | 0) == 0) {
  var $12 = $4 >>> 1;
 } else {
  var $12 = HEAP32[$this + 4 >> 2];
 }
 var $12;
 if ($12 >>> 0 >= $__n >>> 0) {
  if (($3 & 1) == 0) {
   HEAP8[$__n + ($1 + 1) | 0] = 0;
   HEAP8[$2] = $__n << 1 & 255;
   return;
  } else {
   HEAP8[HEAP32[$this + 8 >> 2] + $__n | 0] = 0;
   HEAP32[$this + 4 >> 2] = $__n;
   return;
  }
 }
 var $15 = $__n - $12 | 0;
 if (($12 | 0) == ($__n | 0)) {
  return;
 }
 if (($3 & 1) == 0) {
  var $26 = 10;
  var $25 = $3;
 } else {
  var $22 = HEAP32[$this >> 2];
  var $26 = ($22 & -2) - 1 | 0;
  var $25 = $22 & 255;
 }
 var $25;
 var $26;
 var $27 = $25 & 255;
 if (($27 & 1 | 0) == 0) {
  var $35 = $27 >>> 1;
 } else {
  var $35 = HEAP32[$this + 4 >> 2];
 }
 var $35;
 if (($26 - $35 | 0) >>> 0 < $15 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $26, $15 - $26 + $35 | 0, $35, $35, 0);
  var $42 = HEAP8[$2];
 } else {
  var $42 = $25;
 }
 var $42;
 if (($42 & 1) == 0) {
  var $50 = $1 + 1 | 0;
 } else {
  var $50 = HEAP32[$this + 8 >> 2];
 }
 var $50;
 _memset($50 + $35 | 0, 0, $15);
 var $52 = $35 + $15 | 0;
 if ((HEAP8[$2] & 1) == 0) {
  HEAP8[$2] = $52 << 1 & 255;
 } else {
  HEAP32[$this + 4 >> 2] = $52;
 }
 HEAP8[$50 + $52 | 0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 var $2 = $this;
 var $3 = HEAP8[$2];
 if (($3 & 1) == 0) {
  var $12 = 10;
  var $11 = $3;
 } else {
  var $8 = HEAP32[$this >> 2];
  var $12 = ($8 & -2) - 1 | 0;
  var $11 = $8 & 255;
 }
 var $11;
 var $12;
 var $13 = $11 & 255;
 if (($13 & 1 | 0) == 0) {
  var $21 = $13 >>> 1;
 } else {
  var $21 = HEAP32[$this + 4 >> 2];
 }
 var $21;
 if (($12 - $21 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $12, $__n - $12 + $21 | 0, $21, $21, 0, $__n, $__s);
  return;
 }
 if (($__n | 0) == 0) {
  return;
 }
 if (($11 & 1) == 0) {
  var $34 = $this + 1 | 0;
 } else {
  var $34 = HEAP32[$this + 8 >> 2];
 }
 var $34;
 var $35 = $34 + $21 | 0;
 _memcpy($35, $__s, $__n) | 0;
 var $36 = $21 + $__n | 0;
 if ((HEAP8[$2] & 1) == 0) {
  HEAP8[$2] = $36 << 1 & 255;
 } else {
  HEAP32[$this + 4 >> 2] = $36;
 }
 HEAP8[$34 + $36 | 0] = 0;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg) {
 if ((HEAP32[$flag >> 2] | 0) == 1) {
  while (1) {
   _pthread_cond_wait(17640, 17632);
   if ((HEAP32[$flag >> 2] | 0) != 1) {
    break;
   }
  }
 }
 if ((HEAP32[$flag >> 2] | 0) != 0) {
  return;
 }
 HEAP32[$flag >> 2] = 1;
 var $12 = $arg + 4 | 0;
 var $15 = HEAP32[$arg >> 2] + HEAP32[$12 + 4 >> 2] | 0;
 var $17 = HEAP32[$12 >> 2];
 if (($17 & 1 | 0) == 0) {
  var $29 = $17;
 } else {
  var $29 = HEAP32[HEAP32[$15 >> 2] + ($17 - 1) >> 2];
 }
 var $29;
 FUNCTION_TABLE[$29]($15);
 HEAP32[$flag >> 2] = -1;
 _pthread_cond_broadcast(17640);
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var label = 0;
 var $1 = ___cxa_allocate_exception(8);
 HEAP32[$1 >> 2] = 9872;
 var $3 = $1 + 4 | 0;
 var $4 = $3;
 if (($3 | 0) == 0) {
  var $34 = $1;
  HEAP32[$34 >> 2] = 9840;
  ___cxa_throw($1, 16008, 284);
 }
 while (1) {
  var $6 = _malloc(25);
  if (($6 | 0) != 0) {
   label = 1858;
   break;
  }
  var $9 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($9 | 0) == 0) {
   label = 1852;
   break;
  }
  FUNCTION_TABLE[$9]();
 }
 if (label == 1858) {
  HEAP32[$6 + 4 >> 2] = 12;
  HEAP32[$6 >> 2] = 12;
  var $31 = $6 + 12 | 0;
  HEAP32[$4 >> 2] = $31;
  HEAP32[$6 + 8 >> 2] = 0;
  _memcpy($31, 1472, 13) | 0;
  var $34 = $1;
  HEAP32[$34 >> 2] = 9840;
  ___cxa_throw($1, 16008, 284);
 } else if (label == 1852) {
  var $19 = ___cxa_allocate_exception(4);
  HEAP32[$19 >> 2] = 9744;
  ___cxa_throw($19, 15960, 74);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this) {
 var $1 = $this;
 var $2 = $this;
 var $3 = HEAP8[$2];
 if (($3 & 1) == 0) {
  var $12 = 10;
  var $11 = $3;
 } else {
  var $8 = HEAP32[$this >> 2];
  var $12 = ($8 & -2) - 1 | 0;
  var $11 = $8 & 255;
 }
 var $11;
 var $12;
 var $13 = $11 & 255;
 var $15 = ($13 & 1 | 0) == 0;
 if ($15) {
  var $21 = $13 >>> 1;
 } else {
  var $21 = HEAP32[$this + 4 >> 2];
 }
 var $21;
 if ($21 >>> 0 < 11) {
  var $26 = 11;
 } else {
  var $26 = $21 + 16 & -16;
 }
 var $26;
 var $27 = $26 - 1 | 0;
 if (($27 | 0) == ($12 | 0)) {
  return;
 }
 if (($27 | 0) == 10) {
  var $__new_data_1 = $1 + 1 | 0;
  var $__p_0 = HEAP32[$this + 8 >> 2];
  var $__was_long_0_off0 = 1;
  var $__now_long_0_off0 = 0;
 } else {
  var $_size_i = ($26 | 0) == 0 ? 1 : $26;
  L2239 : do {
   if ($27 >>> 0 > $12 >>> 0) {
    while (1) {
     var $39 = _malloc($_size_i);
     if (($39 | 0) != 0) {
      var $__new_data_0 = $39;
      break L2239;
     }
     var $42 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($42 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE[$42]();
    }
    var $52 = ___cxa_allocate_exception(4);
    HEAP32[$52 >> 2] = 9744;
    ___cxa_throw($52, 15960, 74);
   } else {
    while (1) {
     var $57 = _malloc($_size_i);
     if (($57 | 0) != 0) {
      var $__new_data_0 = $57;
      break L2239;
     }
     var $60 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($60 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE[$60]();
    }
    var $70 = ___cxa_allocate_exception(4);
    HEAP32[$70 >> 2] = 9744;
    ___cxa_throw($70, 15960, 74);
   }
  } while (0);
  var $__new_data_0;
  var $77 = $11 & 1;
  if ($77 << 24 >> 24 == 0) {
   var $84 = $1 + 1 | 0;
  } else {
   var $84 = HEAP32[$this + 8 >> 2];
  }
  var $84;
  var $__new_data_1 = $__new_data_0;
  var $__p_0 = $84;
  var $__was_long_0_off0 = $77 << 24 >> 24 != 0;
  var $__now_long_0_off0 = 1;
 }
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 if ($15) {
  var $91 = $13 >>> 1;
 } else {
  var $91 = HEAP32[$this + 4 >> 2];
 }
 var $91;
 var $92 = $91 + 1 | 0;
 _memcpy($__new_data_1, $__p_0, $92) | 0;
 if (!($__was_long_0_off0 ^ 1 | ($__p_0 | 0) == 0)) {
  _free($__p_0);
 }
 if ($__now_long_0_off0) {
  HEAP32[$this >> 2] = $26 | 1;
  HEAP32[$this + 4 >> 2] = $21;
  HEAP32[$this + 8 >> 2] = $__new_data_1;
  return;
 } else {
  HEAP8[$2] = $21 << 1 & 255;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 var label = 0;
 if ((-3 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 if ((HEAP8[$this] & 1) == 0) {
  var $15 = $this + 1 | 0;
 } else {
  var $15 = HEAP32[$this + 8 >> 2];
 }
 var $15;
 do {
  if ($__old_cap >>> 0 < 2147483631) {
   var $17 = $__delta_cap + $__old_cap | 0;
   var $18 = $__old_cap << 1;
   var $_sroa_speculated = $17 >>> 0 < $18 >>> 0 ? $18 : $17;
   if ($_sroa_speculated >>> 0 < 11) {
    var $_sink = 11;
    break;
   }
   var $_sink = $_sroa_speculated + 16 & -16;
  } else {
   var $_sink = -2;
  }
 } while (0);
 var $_sink;
 var $_size_i = ($_sink | 0) == 0 ? 1 : $_sink;
 while (1) {
  var $26 = _malloc($_size_i);
  if (($26 | 0) != 0) {
   break;
  }
  var $29 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($29 | 0) == 0) {
   label = 1929;
   break;
  }
  FUNCTION_TABLE[$29]();
 }
 if (label == 1929) {
  var $39 = ___cxa_allocate_exception(4);
  HEAP32[$39 >> 2] = 9744;
  ___cxa_throw($39, 15960, 74);
 }
 if (($__n_copy | 0) != 0) {
  _memcpy($26, $15, $__n_copy) | 0;
 }
 if (($__n_add | 0) != 0) {
  var $48 = $26 + $__n_copy | 0;
  _memcpy($48, $__p_new_stuff, $__n_add) | 0;
 }
 var $50 = $__old_sz - $__n_del | 0;
 if (($50 | 0) != ($__n_copy | 0)) {
  var $53 = $50 - $__n_copy | 0;
  var $54 = $26 + ($__n_add + $__n_copy) | 0;
  var $55 = $15 + ($__n_del + $__n_copy) | 0;
  _memcpy($54, $55, $53) | 0;
 }
 if (($__old_cap | 0) == 10 | ($15 | 0) == 0) {
  var $60 = $this + 8 | 0;
  HEAP32[$60 >> 2] = $26;
  var $61 = $_sink | 1;
  var $62 = $this | 0;
  HEAP32[$62 >> 2] = $61;
  var $63 = $50 + $__n_add | 0;
  var $64 = $this + 4 | 0;
  HEAP32[$64 >> 2] = $63;
  var $65 = $26 + $63 | 0;
  HEAP8[$65] = 0;
  return;
 }
 _free($15);
 var $60 = $this + 8 | 0;
 HEAP32[$60 >> 2] = $26;
 var $61 = $_sink | 1;
 var $62 = $this | 0;
 HEAP32[$62 >> 2] = $61;
 var $63 = $50 + $__n_add | 0;
 var $64 = $this + 4 | 0;
 HEAP32[$64 >> 2] = $63;
 var $65 = $26 + $63 | 0;
 HEAP8[$65] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 if ((HEAP8[$this] & 1) == 0) {
  return;
 }
 var $7 = HEAP32[$this + 8 >> 2];
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 var label = 0;
 if ((-3 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 if ((HEAP8[$this] & 1) == 0) {
  var $15 = $this + 1 | 0;
 } else {
  var $15 = HEAP32[$this + 8 >> 2];
 }
 var $15;
 do {
  if ($__old_cap >>> 0 < 2147483631) {
   var $17 = $__delta_cap + $__old_cap | 0;
   var $18 = $__old_cap << 1;
   var $_sroa_speculated = $17 >>> 0 < $18 >>> 0 ? $18 : $17;
   if ($_sroa_speculated >>> 0 < 11) {
    var $_sink = 11;
    break;
   }
   var $_sink = $_sroa_speculated + 16 & -16;
  } else {
   var $_sink = -2;
  }
 } while (0);
 var $_sink;
 var $_size_i = ($_sink | 0) == 0 ? 1 : $_sink;
 while (1) {
  var $26 = _malloc($_size_i);
  if (($26 | 0) != 0) {
   break;
  }
  var $29 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($29 | 0) == 0) {
   label = 1966;
   break;
  }
  FUNCTION_TABLE[$29]();
 }
 if (label == 1966) {
  var $39 = ___cxa_allocate_exception(4);
  HEAP32[$39 >> 2] = 9744;
  ___cxa_throw($39, 15960, 74);
 }
 if (($__n_copy | 0) != 0) {
  _memcpy($26, $15, $__n_copy) | 0;
 }
 if (($__old_sz | 0) != ($__n_copy | 0)) {
  var $48 = $__old_sz - $__n_copy | 0;
  var $49 = $26 + ($__n_add + $__n_copy) | 0;
  var $50 = $15 + $__n_copy | 0;
  _memcpy($49, $50, $48) | 0;
 }
 if (($__old_cap | 0) == 10 | ($15 | 0) == 0) {
  var $55 = $this + 8 | 0;
  HEAP32[$55 >> 2] = $26;
  var $56 = $_sink | 1;
  var $57 = $this | 0;
  HEAP32[$57 >> 2] = $56;
  return;
 }
 _free($15);
 var $55 = $this + 8 | 0;
 HEAP32[$55 >> 2] = $26;
 var $56 = $_sink | 1;
 var $57 = $this | 0;
 HEAP32[$57 >> 2] = $56;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 var label = 0;
 var $_0_i = $__s;
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $6 = $__s;
 var $7 = $_0_i - $6 | 0;
 var $8 = $7 >> 2;
 var $9 = $this;
 var $10 = HEAP8[$9];
 if (($10 & 1) == 0) {
  var $19 = 1;
  var $18 = $10;
 } else {
  var $15 = HEAP32[$this >> 2];
  var $19 = ($15 & -2) - 1 | 0;
  var $18 = $15 & 255;
 }
 var $18;
 var $19;
 if ($19 >>> 0 >= $8 >>> 0) {
  if (($18 & 1) == 0) {
   var $29 = $this + 4 | 0;
  } else {
   var $29 = HEAP32[$this + 8 >> 2];
  }
  var $29;
  var $34 = ($8 | 0) == 0;
  do {
   if ($29 - $6 >> 2 >>> 0 < $8 >>> 0) {
    if ($34) {
     break;
    } else {
     var $_in_i_i = $8;
    }
    while (1) {
     var $_in_i_i;
     var $35 = $_in_i_i - 1 | 0;
     HEAP32[$29 + ($35 << 2) >> 2] = HEAP32[$__s + ($35 << 2) >> 2];
     if (($35 | 0) == 0) {
      break;
     } else {
      var $_in_i_i = $35;
     }
    }
   } else {
    if ($34) {
     break;
    } else {
     var $_01316_i_i = $__s;
     var $_117_i_i = $8;
     var $_018_i_i = $29;
    }
    while (1) {
     var $_018_i_i;
     var $_117_i_i;
     var $_01316_i_i;
     var $40 = $_117_i_i - 1 | 0;
     HEAP32[$_018_i_i >> 2] = HEAP32[$_01316_i_i >> 2];
     if (($40 | 0) == 0) {
      break;
     } else {
      var $_01316_i_i = $_01316_i_i + 4 | 0;
      var $_117_i_i = $40;
      var $_018_i_i = $_018_i_i + 4 | 0;
     }
    }
   }
  } while (0);
  HEAP32[$29 + ($8 << 2) >> 2] = 0;
  if ((HEAP8[$9] & 1) == 0) {
   HEAP8[$9] = $7 >>> 1 & 255;
   return;
  } else {
   HEAP32[$this + 4 >> 2] = $8;
   return;
  }
 }
 if ((1073741821 - $19 | 0) >>> 0 < ($8 - $19 | 0) >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 if (($18 & 1) == 0) {
  var $66 = $this + 4 | 0;
 } else {
  var $66 = HEAP32[$this + 8 >> 2];
 }
 var $66;
 do {
  if ($19 >>> 0 < 536870895) {
   var $68 = $19 << 1;
   var $_sroa_speculated_i_i = $8 >>> 0 < $68 >>> 0 ? $68 : $8;
   if ($_sroa_speculated_i_i >>> 0 < 2) {
    var $_sink_i_i = 2;
    break;
   }
   var $_sink_i_i = $_sroa_speculated_i_i + 4 & -4;
  } else {
   var $_sink_i_i = 1073741822;
  }
 } while (0);
 var $_sink_i_i;
 var $74 = $_sink_i_i << 2;
 var $_size_i_i_i = ($74 | 0) == 0 ? 1 : $74;
 while (1) {
  var $77 = _malloc($_size_i_i_i);
  if (($77 | 0) != 0) {
   break;
  }
  var $80 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($80 | 0) == 0) {
   label = 2010;
   break;
  }
  FUNCTION_TABLE[$80]();
 }
 if (label == 2010) {
  var $90 = ___cxa_allocate_exception(4);
  HEAP32[$90 >> 2] = 9744;
  ___cxa_throw($90, 15960, 74);
 }
 var $94 = $77;
 if (($8 | 0) != 0) {
  var $_056_i_i_i = $__s;
  var $_047_i_i_i = $8;
  var $_08_i_i_i = $94;
  while (1) {
   var $_08_i_i_i;
   var $_047_i_i_i;
   var $_056_i_i_i;
   var $96 = $_047_i_i_i - 1 | 0;
   HEAP32[$_08_i_i_i >> 2] = HEAP32[$_056_i_i_i >> 2];
   if (($96 | 0) == 0) {
    break;
   } else {
    var $_056_i_i_i = $_056_i_i_i + 4 | 0;
    var $_047_i_i_i = $96;
    var $_08_i_i_i = $_08_i_i_i + 4 | 0;
   }
  }
 }
 if (!(($19 | 0) == 1 | ($66 | 0) == 0)) {
  _free($66);
 }
 HEAP32[$this + 8 >> 2] = $94;
 HEAP32[$this >> 2] = $_sink_i_i | 1;
 HEAP32[$this + 4 >> 2] = $8;
 HEAP32[$94 + ($8 << 2) >> 2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this) {
 var $1 = $this;
 var $2 = HEAP8[$1];
 if (($2 & 1) == 0) {
  var $11 = 1;
  var $10 = $2;
 } else {
  var $7 = HEAP32[$this >> 2];
  var $11 = ($7 & -2) - 1 | 0;
  var $10 = $7 & 255;
 }
 var $10;
 var $11;
 var $12 = $10 & 255;
 var $14 = ($12 & 1 | 0) == 0;
 if ($14) {
  var $20 = $12 >>> 1;
 } else {
  var $20 = HEAP32[$this + 4 >> 2];
 }
 var $20;
 if ($20 >>> 0 < 2) {
  var $25 = 2;
 } else {
  var $25 = $20 + 4 & -4;
 }
 var $25;
 var $26 = $25 - 1 | 0;
 if (($26 | 0) == ($11 | 0)) {
  return;
 }
 if (($26 | 0) == 1) {
  var $__new_data_1_in = $this + 4 | 0;
  var $__p_0 = HEAP32[$this + 8 >> 2];
  var $__was_long_0_off0 = 1;
  var $__now_long_0_off0 = 0;
 } else {
  var $37 = $25 << 2;
  var $_size_i = ($37 | 0) == 0 ? 1 : $37;
  L2412 : do {
   if ($26 >>> 0 > $11 >>> 0) {
    while (1) {
     var $40 = _malloc($_size_i);
     if (($40 | 0) != 0) {
      var $__new_data_0_in = $40;
      break L2412;
     }
     var $43 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($43 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE[$43]();
    }
    var $53 = ___cxa_allocate_exception(4);
    HEAP32[$53 >> 2] = 9744;
    ___cxa_throw($53, 15960, 74);
   } else {
    while (1) {
     var $58 = _malloc($_size_i);
     if (($58 | 0) != 0) {
      var $__new_data_0_in = $58;
      break L2412;
     }
     var $61 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
     if (($61 | 0) == 0) {
      break;
     }
     FUNCTION_TABLE[$61]();
    }
    var $71 = ___cxa_allocate_exception(4);
    HEAP32[$71 >> 2] = 9744;
    ___cxa_throw($71, 15960, 74);
   }
  } while (0);
  var $__new_data_0_in;
  var $78 = $10 & 1;
  if ($78 << 24 >> 24 == 0) {
   var $85 = $this + 4 | 0;
  } else {
   var $85 = HEAP32[$this + 8 >> 2];
  }
  var $85;
  var $__new_data_1_in = $__new_data_0_in;
  var $__p_0 = $85;
  var $__was_long_0_off0 = $78 << 24 >> 24 != 0;
  var $__now_long_0_off0 = 1;
 }
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1 = $__new_data_1_in;
 if ($14) {
  var $92 = $12 >>> 1;
 } else {
  var $92 = HEAP32[$this + 4 >> 2];
 }
 var $92;
 var $93 = $92 + 1 | 0;
 if (($93 | 0) != 0) {
  var $_056_i = $__p_0;
  var $_047_i = $93;
  var $_08_i = $__new_data_1;
  while (1) {
   var $_08_i;
   var $_047_i;
   var $_056_i;
   var $95 = $_047_i - 1 | 0;
   HEAP32[$_08_i >> 2] = HEAP32[$_056_i >> 2];
   if (($95 | 0) == 0) {
    break;
   } else {
    var $_056_i = $_056_i + 4 | 0;
    var $_047_i = $95;
    var $_08_i = $_08_i + 4 | 0;
   }
  }
 }
 if (!($__was_long_0_off0 ^ 1 | ($__p_0 | 0) == 0)) {
  _free($__p_0);
 }
 if ($__now_long_0_off0) {
  HEAP32[$this >> 2] = $25 | 1;
  HEAP32[$this + 4 >> 2] = $20;
  HEAP32[$this + 8 >> 2] = $__new_data_1;
  return;
 } else {
  HEAP8[$1] = $20 << 1 & 255;
  return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 var label = 0;
 if ((1073741821 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 if ((HEAP8[$this] & 1) == 0) {
  var $14 = $this + 4 | 0;
 } else {
  var $14 = HEAP32[$this + 8 >> 2];
 }
 var $14;
 do {
  if ($__old_cap >>> 0 < 536870895) {
   var $16 = $__delta_cap + $__old_cap | 0;
   var $17 = $__old_cap << 1;
   var $_sroa_speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
   if ($_sroa_speculated >>> 0 < 2) {
    var $_sink = 2;
    break;
   }
   var $_sink = $_sroa_speculated + 4 & -4;
  } else {
   var $_sink = 1073741822;
  }
 } while (0);
 var $_sink;
 var $23 = $_sink << 2;
 var $_size_i = ($23 | 0) == 0 ? 1 : $23;
 while (1) {
  var $26 = _malloc($_size_i);
  if (($26 | 0) != 0) {
   break;
  }
  var $29 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($29 | 0) == 0) {
   label = 2089;
   break;
  }
  FUNCTION_TABLE[$29]();
 }
 if (label == 2089) {
  var $39 = ___cxa_allocate_exception(4);
  HEAP32[$39 >> 2] = 9744;
  ___cxa_throw($39, 15960, 74);
 }
 var $43 = $26;
 if (($__n_copy | 0) != 0) {
  var $_056_i = $14;
  var $_047_i = $__n_copy;
  var $_08_i = $43;
  while (1) {
   var $_08_i;
   var $_047_i;
   var $_056_i;
   var $45 = $_047_i - 1 | 0;
   HEAP32[$_08_i >> 2] = HEAP32[$_056_i >> 2];
   if (($45 | 0) == 0) {
    break;
   } else {
    var $_056_i = $_056_i + 4 | 0;
    var $_047_i = $45;
    var $_08_i = $_08_i + 4 | 0;
   }
  }
 }
 var $50 = $__old_sz - $__n_del | 0;
 if (($50 | 0) != ($__n_copy | 0)) {
  var $_056_i3 = $14 + ($__n_del + $__n_copy << 2) | 0;
  var $_047_i2 = $50 - $__n_copy | 0;
  var $_08_i1 = $43 + ($__n_add + $__n_copy << 2) | 0;
  while (1) {
   var $_08_i1;
   var $_047_i2;
   var $_056_i3;
   var $55 = $_047_i2 - 1 | 0;
   HEAP32[$_08_i1 >> 2] = HEAP32[$_056_i3 >> 2];
   if (($55 | 0) == 0) {
    break;
   } else {
    var $_056_i3 = $_056_i3 + 4 | 0;
    var $_047_i2 = $55;
    var $_08_i1 = $_08_i1 + 4 | 0;
   }
  }
 }
 if (($__old_cap | 0) == 1 | ($14 | 0) == 0) {
  var $64 = $this + 8 | 0;
  HEAP32[$64 >> 2] = $43;
  var $65 = $_sink | 1;
  var $66 = $this | 0;
  HEAP32[$66 >> 2] = $65;
  return;
 }
 _free($14);
 var $64 = $this + 8 | 0;
 HEAP32[$64 >> 2] = $43;
 var $65 = $_sink | 1;
 var $66 = $this | 0;
 HEAP32[$66 >> 2] = $65;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEi($this, $0) {
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEi($this, $0) {
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var $4 = $agg_result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 var $5 = $agg_result + 8 | 0;
 HEAP32[$5 >> 2] = -1;
 HEAP32[$5 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI10_mbstate_tEEj($agg_result, $this, $0, $1) {
 var sp = STACKTOP;
 var tempParam = $0;
 $0 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[$0 >> 2] = HEAP32[tempParam >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[tempParam + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[tempParam + 12 >> 2];
 var $3 = $agg_result;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 var $4 = $agg_result + 8 | 0;
 HEAP32[$4 >> 2] = -1;
 HEAP32[$4 + 4 >> 2] = -1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var $4 = $agg_result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 var $5 = $agg_result + 8 | 0;
 HEAP32[$5 >> 2] = -1;
 HEAP32[$5 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI10_mbstate_tEEj($agg_result, $this, $0, $1) {
 var sp = STACKTOP;
 var tempParam = $0;
 $0 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[$0 >> 2] = HEAP32[tempParam >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[tempParam + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[tempParam + 12 >> 2];
 var $3 = $agg_result;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 var $4 = $agg_result + 8 | 0;
 HEAP32[$4 >> 2] = -1;
 HEAP32[$4 + 4 >> 2] = -1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 HEAP32[$this >> 2] = 11568;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 var label = 0;
 var $1 = $this;
 if (($__n | 0) <= 0) {
  var $__i_0_lcssa = 0;
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
 var $3 = $this + 12 | 0;
 var $4 = $this + 16 | 0;
 var $_08 = $__s;
 var $__i_09 = 0;
 while (1) {
  var $__i_09;
  var $_08;
  var $6 = HEAP32[$3 >> 2];
  if ($6 >>> 0 < HEAP32[$4 >> 2] >>> 0) {
   HEAP32[$3 >> 2] = $6 + 1;
   var $storemerge = HEAP8[$6];
  } else {
   var $16 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($this);
   if (($16 | 0) == -1) {
    var $__i_0_lcssa = $__i_09;
    label = 2139;
    break;
   }
   var $storemerge = $16 & 255;
  }
  var $storemerge;
  HEAP8[$_08] = $storemerge;
  var $21 = $__i_09 + 1 | 0;
  if (($21 | 0) < ($__n | 0)) {
   var $_08 = $_08 + 1 | 0;
   var $__i_09 = $21;
  } else {
   var $__i_0_lcssa = $21;
   label = 2138;
   break;
  }
 }
 if (label == 2139) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 } else if (label == 2138) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 36 >> 2]]($this) | 0) == -1) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $8 = $this + 12 | 0;
 var $9 = HEAP32[$8 >> 2];
 HEAP32[$8 >> 2] = $9 + 1;
 var $_0 = HEAPU8[$9];
 var $_0;
 return $_0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 var label = 0;
 var $1 = $this;
 if (($__n | 0) <= 0) {
  var $__i_0_lcssa = 0;
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
 var $3 = $this + 24 | 0;
 var $4 = $this + 28 | 0;
 var $__i_08 = 0;
 var $_09 = $__s;
 while (1) {
  var $_09;
  var $__i_08;
  var $6 = HEAP32[$3 >> 2];
  if ($6 >>> 0 < HEAP32[$4 >> 2] >>> 0) {
   var $10 = HEAP8[$_09];
   HEAP32[$3 >> 2] = $6 + 1;
   HEAP8[$6] = $10;
  } else {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($this, HEAPU8[$_09]) | 0) == -1) {
    var $__i_0_lcssa = $__i_08;
    label = 2155;
    break;
   }
  }
  var $22 = $__i_08 + 1 | 0;
  if (($22 | 0) < ($__n | 0)) {
   var $__i_08 = $22;
   var $_09 = $_09 + 1 | 0;
  } else {
   var $__i_0_lcssa = $22;
   label = 2153;
   break;
  }
 }
 if (label == 2155) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 } else if (label == 2153) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $13 = $this;
  _free($13);
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 var $13 = $this;
 _free($13);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 HEAP32[$this >> 2] = 11496;
 var $3 = HEAP32[$this + 4 >> 2];
 var $4 = $3 + 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3 | 0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 var label = 0;
 var $1 = $this;
 if (($__n | 0) <= 0) {
  var $__i_0_lcssa = 0;
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
 var $3 = $this + 12 | 0;
 var $4 = $this + 16 | 0;
 var $_08 = $__s;
 var $__i_09 = 0;
 while (1) {
  var $__i_09;
  var $_08;
  var $6 = HEAP32[$3 >> 2];
  if ($6 >>> 0 < HEAP32[$4 >> 2] >>> 0) {
   HEAP32[$3 >> 2] = $6 + 4;
   var $storemerge = HEAP32[$6 >> 2];
  } else {
   var $16 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($this);
   if (($16 | 0) == -1) {
    var $__i_0_lcssa = $__i_09;
    label = 2173;
    break;
   } else {
    var $storemerge = $16;
   }
  }
  var $storemerge;
  HEAP32[$_08 >> 2] = $storemerge;
  var $19 = $__i_09 + 1 | 0;
  if (($19 | 0) < ($__n | 0)) {
   var $_08 = $_08 + 4 | 0;
   var $__i_09 = $19;
  } else {
   var $__i_0_lcssa = $19;
   label = 2174;
   break;
  }
 }
 if (label == 2173) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 } else if (label == 2174) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 36 >> 2]]($this) | 0) == -1) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 var $8 = $this + 12 | 0;
 var $9 = HEAP32[$8 >> 2];
 HEAP32[$8 >> 2] = $9 + 4;
 var $_0 = HEAP32[$9 >> 2];
 var $_0;
 return $_0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 var label = 0;
 var $1 = $this;
 if (($__n | 0) <= 0) {
  var $__i_0_lcssa = 0;
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
 var $3 = $this + 24 | 0;
 var $4 = $this + 28 | 0;
 var $__i_08 = 0;
 var $_09 = $__s;
 while (1) {
  var $_09;
  var $__i_08;
  var $6 = HEAP32[$3 >> 2];
  if ($6 >>> 0 < HEAP32[$4 >> 2] >>> 0) {
   var $10 = HEAP32[$_09 >> 2];
   HEAP32[$3 >> 2] = $6 + 4;
   HEAP32[$6 >> 2] = $10;
  } else {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($this, HEAP32[$_09 >> 2]) | 0) == -1) {
    var $__i_0_lcssa = $__i_08;
    label = 2189;
    break;
   }
  }
  var $21 = $__i_08 + 1 | 0;
  if (($21 | 0) < ($__n | 0)) {
   var $__i_08 = $21;
   var $_09 = $_09 + 4 | 0;
  } else {
   var $__i_0_lcssa = $21;
   label = 2188;
   break;
  }
 }
 if (label == 2189) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 } else if (label == 2188) {
  var $__i_0_lcssa;
  return $__i_0_lcssa;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 var $1 = $this;
 var $6 = HEAP32[HEAP32[$this >> 2] - 12 >> 2];
 var $7 = $1 + $6 | 0;
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 8) | 0);
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[HEAP32[$this >> 2] - 12 >> 2] + 8) | 0);
 return;
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $1 = sp;
 var $2 = sp + 16;
 var $3 = sp + 32;
 var $6 = (HEAP32[$this + 24 >> 2] | 0) == 0;
 if ($6) {
  HEAP32[$this + 16 >> 2] = $state | 1;
 } else {
  HEAP32[$this + 16 >> 2] = $state;
 }
 if ((($6 & 1 | $state) & HEAP32[$this + 20 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $20 = ___cxa_allocate_exception(16);
 do {
  if ((HEAP8[22136] | 0) == 0) {
   if ((___cxa_guard_acquire(22136) | 0) == 0) {
    break;
   }
   HEAP32[19896 >> 2] = 11336;
  }
 } while (0);
 var $27 = $2;
 var $28 = $3;
 while (1) {
  var $30 = _malloc(16);
  if (($30 | 0) != 0) {
   break;
  }
  var $33 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($33 | 0) == 0) {
   label = 2219;
   break;
  }
  FUNCTION_TABLE[$33]();
 }
 if (label == 2219) {
  var $43 = ___cxa_allocate_exception(4);
  HEAP32[$43 >> 2] = 9744;
  ___cxa_throw($43, 15960, 74);
 }
 var $46 = $3 + 8 | 0;
 HEAP32[$46 >> 2] = $30;
 HEAP32[$3 >> 2] = 17;
 var $48 = $3 + 4 | 0;
 HEAP32[$48 >> 2] = 15;
 _memcpy($30, 6520, 15) | 0;
 HEAP8[$30 + 15 | 0] = 0;
 var $50 = $1;
 var $52 = HEAPU8[$28];
 if (((($52 & 1 | 0) == 0 ? $52 >>> 1 : HEAP32[$48 >> 2]) | 0) != 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3, 6248, 2);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[19896 >> 2] + 24 >> 2]]($1, 19896, 1);
 var $63 = HEAP8[$50];
 if (($63 & 1) == 0) {
  var $72 = $1 + 1 | 0;
 } else {
  var $72 = HEAP32[$1 + 8 >> 2];
 }
 var $72;
 var $73 = $63 & 255;
 if (($73 & 1 | 0) == 0) {
  var $81 = $73 >>> 1;
 } else {
  var $81 = HEAP32[$1 + 4 >> 2];
 }
 var $81;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3, $72, $81);
 do {
  if ((HEAP8[$50] & 1) != 0) {
   var $87 = HEAP32[$1 + 8 >> 2];
   if (($87 | 0) == 0) {
    break;
   }
   _free($87);
  }
 } while (0);
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$27 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
 HEAP32[$27 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
 HEAP32[$28 >> 2] = 0;
 HEAP32[$28 + 4 >> 2] = 0;
 HEAP32[$28 + 8 >> 2] = 0;
 var $100 = $20;
 HEAP32[$100 >> 2] = 9808;
 var $101 = $20 + 4 | 0;
 var $102 = $101;
 do {
  if (($101 | 0) != 0) {
   if ((HEAP8[$27] & 1) == 0) {
    var $114 = $2 + 1 | 0;
   } else {
    var $114 = HEAP32[$2 + 8 >> 2];
   }
   var $114;
   var $115 = _strlen($114);
   var $116 = $115 + 1 | 0;
   var $117 = $115 + 13 | 0;
   var $_size_i_i_i = ($117 | 0) == 0 ? 1 : $117;
   while (1) {
    var $120 = _malloc($_size_i_i_i);
    if (($120 | 0) != 0) {
     label = 2252;
     break;
    }
    var $123 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($123 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$123]();
   }
   if (label == 2252) {
    HEAP32[$120 + 4 >> 2] = $115;
    HEAP32[$120 >> 2] = $115;
    var $139 = $120 + 12 | 0;
    HEAP32[$102 >> 2] = $139;
    HEAP32[$120 + 8 >> 2] = 0;
    _memcpy($139, $114, $116) | 0;
    break;
   }
   var $133 = ___cxa_allocate_exception(4);
   HEAP32[$133 >> 2] = 9744;
   ___cxa_throw($133, 15960, 74);
  }
 } while (0);
 do {
  if ((HEAP8[$27] & 1) != 0) {
   var $153 = HEAP32[$2 + 8 >> 2];
   if (($153 | 0) == 0) {
    break;
   }
   _free($153);
  }
 } while (0);
 do {
  if ((HEAP8[$28] & 1) != 0) {
   var $160 = HEAP32[$46 >> 2];
   if (($160 | 0) == 0) {
    break;
   }
   _free($160);
  }
 } while (0);
 HEAP32[$100 >> 2] = 11832;
 var $190 = $20 + 8 | 0;
 var $$etemp$3$0 = _bitshift64Shl(19896, 0, 32);
 HEAP32[$190 >> 2] = $$etemp$3$0 & 0 | 1;
 HEAP32[$190 + 4 >> 2] = tempRet0 & -1;
 HEAP32[$100 >> 2] = 10520;
 ___cxa_throw($20, 16552, 68);
}
function __ZNSt3__18ios_baseD2Ev($this) {
 HEAP32[$this >> 2] = 10496;
 var $3 = HEAP32[$this + 40 >> 2];
 var $_pre = $this + 32 | 0;
 var $_pre1 = $this + 36 | 0;
 if (($3 | 0) != 0) {
  var $i_05_i = $3;
  while (1) {
   var $i_05_i;
   var $5 = $i_05_i - 1 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$_pre >> 2] + ($5 << 2) >> 2]](0, $this, HEAP32[HEAP32[$_pre1 >> 2] + ($5 << 2) >> 2]);
   if (($5 | 0) == 0) {
    break;
   } else {
    var $i_05_i = $5;
   }
  }
 }
 var $14 = HEAP32[$this + 28 >> 2];
 var $16 = $14 + 4 | 0;
 if (((tempValue = HEAP32[$16 >> 2], HEAP32[$16 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 8 >> 2]]($14);
 }
 _free(HEAP32[$_pre >> 2]);
 _free(HEAP32[$_pre1 >> 2]);
 _free(HEAP32[$this + 48 >> 2]);
 _free(HEAP32[$this + 60 >> 2]);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 return 7296;
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 L2668 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   var $_013_lcssa = $__lo1;
  } else {
   var $_01315 = $__lo1;
   var $_01216 = $__lo2;
   while (1) {
    var $_01216;
    var $_01315;
    if (($_01315 | 0) == ($__hi1 | 0)) {
     var $_0 = -1;
     label = 2295;
     break;
    }
    var $4 = HEAP8[$_01315];
    var $5 = HEAP8[$_01216];
    if ($4 << 24 >> 24 < $5 << 24 >> 24) {
     var $_0 = -1;
     label = 2297;
     break;
    }
    if ($5 << 24 >> 24 < $4 << 24 >> 24) {
     var $_0 = 1;
     label = 2296;
     break;
    }
    var $10 = $_01315 + 1 | 0;
    var $11 = $_01216 + 1 | 0;
    if (($11 | 0) == ($__hi2 | 0)) {
     var $_013_lcssa = $10;
     break L2668;
    } else {
     var $_01315 = $10;
     var $_01216 = $11;
    }
   }
   if (label == 2296) {
    var $_0;
    return $_0;
   } else if (label == 2297) {
    var $_0;
    return $_0;
   } else if (label == 2295) {
    var $_0;
    return $_0;
   }
  }
 } while (0);
 var $_013_lcssa;
 var $_0 = ($_013_lcssa | 0) != ($__hi1 | 0) | 0;
 var $_0;
 return $_0;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 var $1 = $this;
 var $6 = HEAP32[HEAP32[$this >> 2] - 12 >> 2];
 var $7 = $1 + $6 | 0;
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 8) | 0);
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[HEAP32[$this >> 2] - 12 >> 2] + 8) | 0);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 var $1 = $this;
 var $6 = HEAP32[HEAP32[$this >> 2] - 12 >> 2];
 var $7 = $1 + $6 | 0;
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 4) | 0);
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[HEAP32[$this >> 2] - 12 >> 2] + 4) | 0);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 var $1 = $this;
 var $6 = HEAP32[HEAP32[$this >> 2] - 12 >> 2];
 var $7 = $1 + $6 | 0;
 __ZNSt3__18ios_baseD2Ev($1 + ($6 + 4) | 0);
 if (($7 | 0) == 0) {
  return;
 }
 _free($7);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[HEAP32[$this >> 2] - 12 >> 2] + 4) | 0);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  var $12 = $this;
  _free($12);
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  var $12 = $this;
  _free($12);
  return;
 }
 _free($10);
 var $12 = $this;
 _free($12);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 HEAP32[$this >> 2] = 9808;
 var $2 = $this + 4 | 0;
 var $4 = HEAP32[$2 >> 2] - 4 | 0;
 if (((tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + -1, tempValue) - 1 | 0) >= 0) {
  return;
 }
 var $10 = HEAP32[$2 >> 2] - 12 | 0;
 if (($10 | 0) == 0) {
  return;
 }
 _free($10);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 __ZNSt3__18ios_baseD2Ev($this);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__s = sp;
 var $1 = $this;
 var $5 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
 var $6 = $this;
 if ((HEAP32[$6 + ($5 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $12 = $__s | 0;
 HEAP8[$12] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 do {
  if ((HEAP32[$6 + ($5 + 16) >> 2] | 0) == 0) {
   var $21 = HEAP32[$6 + ($5 + 72) >> 2];
   if (($21 | 0) == 0) {
    var $25 = $5;
   } else {
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21);
    var $25 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
   }
   var $25;
   HEAP8[$12] = 1;
   var $28 = HEAP32[$6 + ($25 + 24) >> 2];
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 24 >> 2]]($28) | 0) != -1) {
    break;
   }
   var $40 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
   __ZNSt3__18ios_base5clearEj($6 + $40 | 0, HEAP32[$6 + ($40 + 16) >> 2] | 1);
  }
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__s = sp;
 var $1 = $this;
 var $5 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
 var $6 = $this;
 if ((HEAP32[$6 + ($5 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 var $12 = $__s | 0;
 HEAP8[$12] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 do {
  if ((HEAP32[$6 + ($5 + 16) >> 2] | 0) == 0) {
   var $21 = HEAP32[$6 + ($5 + 72) >> 2];
   if (($21 | 0) == 0) {
    var $25 = $5;
   } else {
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21);
    var $25 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
   }
   var $25;
   HEAP8[$12] = 1;
   var $28 = HEAP32[$6 + ($25 + 24) >> 2];
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 24 >> 2]]($28) | 0) != -1) {
    break;
   }
   var $40 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
   __ZNSt3__18ios_base5clearEj($6 + $40 | 0, HEAP32[$6 + ($40 + 16) >> 2] | 1);
  }
 } while (0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 var $1 = $this + 4 | 0;
 var $2 = HEAP32[$1 >> 2];
 var $7 = HEAP32[HEAP32[$2 >> 2] - 12 >> 2];
 var $8 = $2;
 if ((HEAP32[$8 + ($7 + 24) >> 2] | 0) == 0) {
  return;
 }
 if ((HEAP32[$8 + ($7 + 16) >> 2] | 0) != 0) {
  return;
 }
 if ((HEAP32[$8 + ($7 + 4) >> 2] & 8192 | 0) == 0) {
  return;
 }
 if (__ZSt18uncaught_exceptionv()) {
  return;
 }
 var $27 = HEAP32[$1 >> 2];
 var $36 = HEAP32[$27 + (HEAP32[HEAP32[$27 >> 2] - 12 >> 2] + 24) >> 2];
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$36 >> 2] + 24 >> 2]]($36) | 0) != -1) {
  return;
 }
 var $45 = HEAP32[$1 >> 2];
 var $50 = HEAP32[HEAP32[$45 >> 2] - 12 >> 2];
 var $51 = $45;
 __ZNSt3__18ios_base5clearEj($51 + $50 | 0, HEAP32[$51 + ($50 + 16) >> 2] | 1);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 var $1 = $this + 4 | 0;
 var $2 = HEAP32[$1 >> 2];
 var $7 = HEAP32[HEAP32[$2 >> 2] - 12 >> 2];
 var $8 = $2;
 if ((HEAP32[$8 + ($7 + 24) >> 2] | 0) == 0) {
  return;
 }
 if ((HEAP32[$8 + ($7 + 16) >> 2] | 0) != 0) {
  return;
 }
 if ((HEAP32[$8 + ($7 + 4) >> 2] & 8192 | 0) == 0) {
  return;
 }
 if (__ZSt18uncaught_exceptionv()) {
  return;
 }
 var $27 = HEAP32[$1 >> 2];
 var $36 = HEAP32[$27 + (HEAP32[HEAP32[$27 >> 2] - 12 >> 2] + 24) >> 2];
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$36 >> 2] + 24 >> 2]]($36) | 0) != -1) {
  return;
 }
 var $45 = HEAP32[$1 >> 2];
 var $50 = HEAP32[HEAP32[$45 >> 2] - 12 >> 2];
 var $51 = $45;
 __ZNSt3__18ios_base5clearEj($51 + $50 | 0, HEAP32[$51 + ($50 + 16) >> 2] | 1);
 return;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result, $this, $ev) {
 var label = 0;
 if (($ev | 0) == 1) {
  while (1) {
   var $41 = _malloc(48);
   if (($41 | 0) != 0) {
    label = 2466;
    break;
   }
   var $44 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
   if (($44 | 0) == 0) {
    label = 2463;
    break;
   }
   FUNCTION_TABLE[$44]();
  }
  if (label == 2466) {
   HEAP32[$agg_result + 8 >> 2] = $41;
   HEAP32[$agg_result >> 2] = 49;
   HEAP32[$agg_result + 4 >> 2] = 35;
   _memcpy($41, 8016, 35) | 0;
   HEAP8[$41 + 35 | 0] = 0;
   return;
  } else if (label == 2463) {
   var $54 = ___cxa_allocate_exception(4);
   HEAP32[$54 >> 2] = 9744;
   ___cxa_throw($54, 15960, 74);
  }
 }
 var $3 = _strerror($ev);
 var $4 = _strlen($3);
 if (($4 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($4 >>> 0 < 11) {
   HEAP8[$agg_result] = $4 << 1 & 255;
   var $__p_0_i_i = $agg_result + 1 | 0;
  } else {
   var $16 = $4 + 16 & -16;
   var $_size_i_i = ($16 | 0) == 0 ? 1 : $16;
   while (1) {
    var $19 = _malloc($_size_i_i);
    if (($19 | 0) != 0) {
     label = 2454;
     break;
    }
    var $22 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($22 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$22]();
   }
   if (label == 2454) {
    HEAP32[$agg_result + 8 >> 2] = $19;
    HEAP32[$agg_result >> 2] = $16 | 1;
    HEAP32[$agg_result + 4 >> 2] = $4;
    var $__p_0_i_i = $19;
    break;
   }
   var $32 = ___cxa_allocate_exception(4);
   HEAP32[$32 >> 2] = 9744;
   ___cxa_throw($32, 15960, 74);
  }
 } while (0);
 var $__p_0_i_i;
 _memcpy($__p_0_i_i, $3, $4) | 0;
 HEAP8[$__p_0_i_i + $4 | 0] = 0;
 return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 if (($__lo | 0) == ($__hi | 0)) {
  var $__h_0_lcssa = 0;
  var $__h_0_lcssa;
  return $__h_0_lcssa;
 } else {
  var $__p_08 = $__lo;
  var $__h_09 = 0;
 }
 while (1) {
  var $__h_09;
  var $__p_08;
  var $5 = HEAP8[$__p_08] + ($__h_09 << 4) | 0;
  var $6 = $5 & -268435456;
  var $9 = ($6 >>> 24 | $6) ^ $5;
  var $10 = $__p_08 + 1 | 0;
  if (($10 | 0) == ($__hi | 0)) {
   var $__h_0_lcssa = $9;
   break;
  } else {
   var $__p_08 = $10;
   var $__h_09 = $9;
  }
 }
 var $__h_0_lcssa;
 return $__h_0_lcssa;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 L2848 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   var $_013_lcssa = $__lo1;
  } else {
   var $_01315 = $__lo1;
   var $_01216 = $__lo2;
   while (1) {
    var $_01216;
    var $_01315;
    if (($_01315 | 0) == ($__hi1 | 0)) {
     var $_0 = -1;
     label = 2487;
     break;
    }
    var $4 = HEAP32[$_01315 >> 2];
    var $5 = HEAP32[$_01216 >> 2];
    if (($4 | 0) < ($5 | 0)) {
     var $_0 = -1;
     label = 2484;
     break;
    }
    if (($5 | 0) < ($4 | 0)) {
     var $_0 = 1;
     label = 2485;
     break;
    }
    var $10 = $_01315 + 4 | 0;
    var $11 = $_01216 + 4 | 0;
    if (($11 | 0) == ($__hi2 | 0)) {
     var $_013_lcssa = $10;
     break L2848;
    } else {
     var $_01315 = $10;
     var $_01216 = $11;
    }
   }
   if (label == 2484) {
    var $_0;
    return $_0;
   } else if (label == 2485) {
    var $_0;
    return $_0;
   } else if (label == 2487) {
    var $_0;
    return $_0;
   }
  }
 } while (0);
 var $_013_lcssa;
 var $_0 = ($_013_lcssa | 0) != ($__hi1 | 0) | 0;
 var $_0;
 return $_0;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 if (($__lo | 0) == ($__hi | 0)) {
  var $__h_0_lcssa = 0;
  var $__h_0_lcssa;
  return $__h_0_lcssa;
 } else {
  var $__p_08 = $__lo;
  var $__h_09 = 0;
 }
 while (1) {
  var $__h_09;
  var $__p_08;
  var $4 = HEAP32[$__p_08 >> 2] + ($__h_09 << 4) | 0;
  var $5 = $4 & -268435456;
  var $8 = ($5 >>> 24 | $5) ^ $4;
  var $9 = $__p_08 + 4 | 0;
  if (($9 | 0) == ($__hi | 0)) {
   var $__h_0_lcssa = $8;
   break;
  } else {
   var $__p_08 = $9;
   var $__h_09 = $8;
  }
 }
 var $__h_0_lcssa;
 return $__h_0_lcssa;
}
function __ZNSt3__17collateIwED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 var $1 = $__lo;
 var $3 = $__hi - $1 | 0;
 if (($3 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($3 >>> 0 < 11) {
   HEAP8[$agg_result] = $3 << 1 & 255;
   var $__p_0_ph_i = $agg_result + 1 | 0;
  } else {
   var $14 = $3 + 16 & -16;
   var $_size_i = ($14 | 0) == 0 ? 1 : $14;
   while (1) {
    var $17 = _malloc($_size_i);
    if (($17 | 0) != 0) {
     label = 2518;
     break;
    }
    var $20 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($20 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$20]();
   }
   if (label == 2518) {
    HEAP32[$agg_result + 8 >> 2] = $17;
    HEAP32[$agg_result >> 2] = $14 | 1;
    HEAP32[$agg_result + 4 >> 2] = $3;
    var $__p_0_ph_i = $17;
    break;
   }
   var $30 = ___cxa_allocate_exception(4);
   HEAP32[$30 >> 2] = 9744;
   ___cxa_throw($30, 15960, 74);
  }
 } while (0);
 var $__p_0_ph_i;
 if (($__lo | 0) == ($__hi | 0)) {
  var $__p_0_lcssa_i = $__p_0_ph_i;
  var $__p_0_lcssa_i;
  HEAP8[$__p_0_lcssa_i] = 0;
  return;
 }
 var $scevgep_i = $__hi + -$1 | 0;
 var $__p_062_i = $__p_0_ph_i;
 var $_063_i = $__lo;
 while (1) {
  var $_063_i;
  var $__p_062_i;
  HEAP8[$__p_062_i] = HEAP8[$_063_i];
  var $42 = $_063_i + 1 | 0;
  if (($42 | 0) == ($__hi | 0)) {
   break;
  } else {
   var $__p_062_i = $__p_062_i + 1 | 0;
   var $_063_i = $42;
  }
 }
 var $__p_0_lcssa_i = $__p_0_ph_i + $scevgep_i | 0;
 var $__p_0_lcssa_i;
 HEAP8[$__p_0_lcssa_i] = 0;
 return;
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 var $1 = $__lo;
 var $3 = $__hi - $1 | 0;
 var $4 = $3 >> 2;
 if ($4 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($4 >>> 0 < 2) {
   HEAP8[$agg_result] = $3 >>> 1 & 255;
   var $__p_0_ph_i = $agg_result + 4 | 0;
  } else {
   var $15 = $4 + 4 & -4;
   var $16 = $15 << 2;
   var $_size_i = ($16 | 0) == 0 ? 1 : $16;
   while (1) {
    var $19 = _malloc($_size_i);
    if (($19 | 0) != 0) {
     label = 2541;
     break;
    }
    var $22 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($22 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$22]();
   }
   if (label == 2541) {
    var $36 = $19;
    HEAP32[$agg_result + 8 >> 2] = $36;
    HEAP32[$agg_result >> 2] = $15 | 1;
    HEAP32[$agg_result + 4 >> 2] = $4;
    var $__p_0_ph_i = $36;
    break;
   }
   var $32 = ___cxa_allocate_exception(4);
   HEAP32[$32 >> 2] = 9744;
   ___cxa_throw($32, 15960, 74);
  }
 } while (0);
 var $__p_0_ph_i;
 if (($__lo | 0) == ($__hi | 0)) {
  var $__p_0_lcssa_i = $__p_0_ph_i;
  var $__p_0_lcssa_i;
  HEAP32[$__p_0_lcssa_i >> 2] = 0;
  return;
 }
 var $43 = ($__hi - 4 + -$1 | 0) >>> 2;
 var $__p_062_i = $__p_0_ph_i;
 var $_063_i = $__lo;
 while (1) {
  var $_063_i;
  var $__p_062_i;
  HEAP32[$__p_062_i >> 2] = HEAP32[$_063_i >> 2];
  var $46 = $_063_i + 4 | 0;
  if (($46 | 0) == ($__hi | 0)) {
   break;
  } else {
   var $__p_062_i = $__p_062_i + 4 | 0;
   var $_063_i = $46;
  }
 }
 var $__p_0_lcssa_i = $__p_0_ph_i + ($43 + 1 << 2) | 0;
 var $__p_0_lcssa_i;
 HEAP32[$__p_0_lcssa_i >> 2] = 0;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 88 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i24 = sp;
 var $__p_i_i_i = sp + 16;
 var $__lv = sp + 32;
 var $1 = sp + 40;
 var $2 = sp + 48;
 var $3 = sp + 56;
 var $__names = sp + 64;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1;
  var $12 = HEAP32[HEAP32[$this >> 2] + 16 >> 2];
  var $13 = $__b | 0;
  HEAP32[$2 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
  FUNCTION_TABLE[$12]($1, $this, $2, $3, $__iob, $__err, $__lv);
  var $20 = HEAP32[$1 >> 2];
  HEAP32[$13 >> 2] = $20;
  var $21 = HEAP32[$__lv >> 2];
  if (($21 | 0) == 0) {
   HEAP8[$__v] = 0;
  } else if (($21 | 0) == 1) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg_result >> 2] = $20;
  STACKTOP = sp;
  return;
 }
 var $28 = $__iob + 28 | 0;
 var $29 = HEAP32[$28 >> 2];
 var $31 = $29 + 4 | 0;
 tempValue = HEAP32[$31 >> 2], HEAP32[$31 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $38 = HEAP32[21572 >> 2] - 1 | 0;
 var $44 = HEAP32[$29 + 8 >> 2];
 do {
  if (HEAP32[$29 + 12 >> 2] - $44 >> 2 >>> 0 > $38 >>> 0) {
   var $51 = HEAP32[$44 + ($38 << 2) >> 2];
   if (($51 | 0) == 0) {
    break;
   }
   var $55 = $51;
   var $57 = $29 + 4 | 0;
   if (((tempValue = HEAP32[$57 >> 2], HEAP32[$57 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 8 >> 2]]($29);
   }
   var $66 = HEAP32[$28 >> 2];
   var $68 = $66 + 4 | 0;
   tempValue = HEAP32[$68 >> 2], HEAP32[$68 >> 2] = tempValue + 1, tempValue;
   if ((HEAP32[21184 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i24 >> 2] = 21184;
    HEAP32[$__p_i_i_i24 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i24 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i24);
   }
   var $75 = HEAP32[21188 >> 2] - 1 | 0;
   var $81 = HEAP32[$66 + 8 >> 2];
   do {
    if (HEAP32[$66 + 12 >> 2] - $81 >> 2 >>> 0 > $75 >>> 0) {
     var $88 = HEAP32[$81 + ($75 << 2) >> 2];
     if (($88 | 0) == 0) {
      break;
     }
     var $92 = $88;
     var $94 = $66 + 4 | 0;
     if (((tempValue = HEAP32[$94 >> 2], HEAP32[$94 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[$66 >> 2] + 8 >> 2]]($66);
     }
     var $103 = $__names | 0;
     var $104 = $88;
     FUNCTION_TABLE[HEAP32[HEAP32[$104 >> 2] + 24 >> 2]]($103, $92);
     var $108 = $__names + 12 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$104 >> 2] + 28 >> 2]]($108, $92);
     HEAP8[$__v] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2], $103, $__names + 24 | 0, $55, $__err, 1) | 0) == ($103 | 0) | 0;
     HEAP32[$agg_result >> 2] = HEAP32[$__b >> 2];
     do {
      if ((HEAP8[$108] & 1) != 0) {
       var $127 = HEAP32[$__names + 20 >> 2];
       if (($127 | 0) == 0) {
        break;
       }
       _free($127);
      }
     } while (0);
     if ((HEAP8[$__names] & 1) == 0) {
      STACKTOP = sp;
      return;
     }
     var $136 = HEAP32[$__names + 8 >> 2];
     if (($136 | 0) == 0) {
      STACKTOP = sp;
      return;
     }
     _free($136);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $90 = ___cxa_allocate_exception(4);
   HEAP32[$90 >> 2] = 9776;
   ___cxa_throw($90, 15976, 602);
  }
 } while (0);
 var $53 = ___cxa_allocate_exception(4);
 HEAP32[$53 >> 2] = 9776;
 ___cxa_throw($53, 15976, 602);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e_0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 104 | 0;
 var $4 = ($__ke - $__kb | 0) / 12 & -1;
 var $5 = sp | 0;
 do {
  if ($4 >>> 0 > 100) {
   var $8 = _malloc($4);
   if (($8 | 0) != 0) {
    var $__status_0 = $8;
    var $__stat_hold_sroa_0_1 = $8;
    break;
   }
   var $11 = ___cxa_allocate_exception(4);
   HEAP32[$11 >> 2] = 9744;
   ___cxa_throw($11, 15960, 74);
  } else {
   var $__status_0 = $5;
   var $__stat_hold_sroa_0_1 = 0;
  }
 } while (0);
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $16 = ($__kb | 0) == ($__ke | 0);
 if ($16) {
  var $__n_might_match_0_lcssa = $4;
  var $__n_does_match_0_lcssa = 0;
 } else {
  var $__n_might_match_0263 = $4;
  var $__n_does_match_0264 = 0;
  var $__st_0265 = $__status_0;
  var $__ky_0266 = $__kb;
  while (1) {
   var $__ky_0266;
   var $__st_0265;
   var $__n_does_match_0264;
   var $__n_might_match_0263;
   var $21 = HEAPU8[$__ky_0266];
   if (($21 & 1 | 0) == 0) {
    var $29 = $21 >>> 1;
   } else {
    var $29 = HEAP32[$__ky_0266 + 4 >> 2];
   }
   var $29;
   if (($29 | 0) == 0) {
    HEAP8[$__st_0265] = 2;
    var $__n_does_match_1 = $__n_does_match_0264 + 1 | 0;
    var $__n_might_match_1 = $__n_might_match_0263 - 1 | 0;
   } else {
    HEAP8[$__st_0265] = 1;
    var $__n_does_match_1 = $__n_does_match_0264;
    var $__n_might_match_1 = $__n_might_match_0263;
   }
   var $__n_might_match_1;
   var $__n_does_match_1;
   var $36 = $__ky_0266 + 12 | 0;
   if (($36 | 0) == ($__ke | 0)) {
    var $__n_might_match_0_lcssa = $__n_might_match_1;
    var $__n_does_match_0_lcssa = $__n_does_match_1;
    break;
   } else {
    var $__n_might_match_0263 = $__n_might_match_1;
    var $__n_does_match_0264 = $__n_does_match_1;
    var $__st_0265 = $__st_0265 + 1 | 0;
    var $__ky_0266 = $36;
   }
  }
 }
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $17 = $__b | 0;
 var $18 = $__ct;
 var $__indx_0 = 0;
 var $__n_does_match_2 = $__n_does_match_0_lcssa;
 var $__n_might_match_2 = $__n_might_match_0_lcssa;
 var $__e_sroa_0_0 = $__e_0;
 L2986 : while (1) {
  var $__e_sroa_0_0;
  var $__n_might_match_2;
  var $__n_does_match_2;
  var $__indx_0;
  var $39 = HEAP32[$17 >> 2];
  do {
   if (($39 | 0) == 0) {
    var $55 = 0;
   } else {
    if ((HEAP32[$39 + 12 >> 2] | 0) != (HEAP32[$39 + 16 >> 2] | 0)) {
     var $55 = $39;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 36 >> 2]]($39) | 0) == -1) {
     HEAP32[$17 >> 2] = 0;
     var $55 = 0;
     break;
    } else {
     var $55 = HEAP32[$17 >> 2];
     break;
    }
   }
  } while (0);
  var $55;
  var $56 = ($55 | 0) == 0;
  if (($__e_sroa_0_0 | 0) == 0) {
   var $71 = $55;
   var $__e_sroa_0_2 = 0;
  } else {
   if ((HEAP32[$__e_sroa_0_0 + 12 >> 2] | 0) == (HEAP32[$__e_sroa_0_0 + 16 >> 2] | 0)) {
    var $__e_sroa_0_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_0 >> 2] + 36 >> 2]]($__e_sroa_0_0) | 0) == -1 ? 0 : $__e_sroa_0_0;
   } else {
    var $__e_sroa_0_1 = $__e_sroa_0_0;
   }
   var $__e_sroa_0_1;
   var $71 = HEAP32[$17 >> 2];
   var $__e_sroa_0_2 = $__e_sroa_0_1;
  }
  var $__e_sroa_0_2;
  var $71;
  var $72 = ($__e_sroa_0_2 | 0) == 0;
  if (!(($56 ^ $72) & ($__n_might_match_2 | 0) != 0)) {
   break;
  }
  var $77 = HEAP32[$71 + 12 >> 2];
  if (($77 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
   var $_0206_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$71 >> 2] + 36 >> 2]]($71) & 255;
  } else {
   var $_0206_off0 = HEAP8[$77];
  }
  var $_0206_off0;
  if ($__case_sensitive) {
   var $__c_0 = $_0206_off0;
  } else {
   var $__c_0 = FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 12 >> 2]]($__ct, $_0206_off0);
  }
  var $__c_0;
  var $_pre2 = $__indx_0 + 1 | 0;
  if ($16) {
   var $__indx_0 = $_pre2;
   var $__n_does_match_2 = $__n_does_match_2;
   var $__n_might_match_2 = $__n_might_match_2;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  }
  L3013 : do {
   if ($__case_sensitive) {
    var $__n_might_match_3233_us = $__n_might_match_2;
    var $__n_does_match_3234_us = $__n_does_match_2;
    var $__st_1235_us = $__status_0;
    var $__consume_0_off0237_us = 0;
    var $__ky1_0238_us = $__kb;
    while (1) {
     var $__ky1_0238_us;
     var $__consume_0_off0237_us;
     var $__st_1235_us;
     var $__n_does_match_3234_us;
     var $__n_might_match_3233_us;
     do {
      if ((HEAP8[$__st_1235_us] | 0) == 1) {
       var $98 = HEAP8[$__ky1_0238_us];
       if (($98 & 1) == 0) {
        var $107 = $__ky1_0238_us + 1 | 0;
       } else {
        var $107 = HEAP32[$__ky1_0238_us + 8 >> 2];
       }
       var $107;
       if ($__c_0 << 24 >> 24 != (HEAP8[$107 + $__indx_0 | 0] | 0)) {
        HEAP8[$__st_1235_us] = 0;
        var $__consume_1_off0_us = $__consume_0_off0237_us;
        var $__n_does_match_4_us = $__n_does_match_3234_us;
        var $__n_might_match_4_us = $__n_might_match_3233_us - 1 | 0;
        break;
       }
       var $114 = $98 & 255;
       if (($114 & 1 | 0) == 0) {
        var $122 = $114 >>> 1;
       } else {
        var $122 = HEAP32[$__ky1_0238_us + 4 >> 2];
       }
       var $122;
       if (($122 | 0) != ($_pre2 | 0)) {
        var $__consume_1_off0_us = 1;
        var $__n_does_match_4_us = $__n_does_match_3234_us;
        var $__n_might_match_4_us = $__n_might_match_3233_us;
        break;
       }
       HEAP8[$__st_1235_us] = 2;
       var $__consume_1_off0_us = 1;
       var $__n_does_match_4_us = $__n_does_match_3234_us + 1 | 0;
       var $__n_might_match_4_us = $__n_might_match_3233_us - 1 | 0;
      } else {
       var $__consume_1_off0_us = $__consume_0_off0237_us;
       var $__n_does_match_4_us = $__n_does_match_3234_us;
       var $__n_might_match_4_us = $__n_might_match_3233_us;
      }
     } while (0);
     var $__n_might_match_4_us;
     var $__n_does_match_4_us;
     var $__consume_1_off0_us;
     var $128 = $__ky1_0238_us + 12 | 0;
     if (($128 | 0) == ($__ke | 0)) {
      var $__n_might_match_3_lcssa = $__n_might_match_4_us;
      var $__n_does_match_3_lcssa = $__n_does_match_4_us;
      var $__consume_0_off0_lcssa = $__consume_1_off0_us;
      break L3013;
     }
     var $__n_might_match_3233_us = $__n_might_match_4_us;
     var $__n_does_match_3234_us = $__n_does_match_4_us;
     var $__st_1235_us = $__st_1235_us + 1 | 0;
     var $__consume_0_off0237_us = $__consume_1_off0_us;
     var $__ky1_0238_us = $128;
    }
   } else {
    var $__n_might_match_3233 = $__n_might_match_2;
    var $__n_does_match_3234 = $__n_does_match_2;
    var $__st_1235 = $__status_0;
    var $__consume_0_off0237 = 0;
    var $__ky1_0238 = $__kb;
    while (1) {
     var $__ky1_0238;
     var $__consume_0_off0237;
     var $__st_1235;
     var $__n_does_match_3234;
     var $__n_might_match_3233;
     do {
      if ((HEAP8[$__st_1235] | 0) == 1) {
       var $134 = $__ky1_0238;
       if ((HEAP8[$134] & 1) == 0) {
        var $145 = $__ky1_0238 + 1 | 0;
       } else {
        var $145 = HEAP32[$__ky1_0238 + 8 >> 2];
       }
       var $145;
       if ($__c_0 << 24 >> 24 != FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 12 >> 2]]($__ct, HEAP8[$145 + $__indx_0 | 0]) << 24 >> 24) {
        HEAP8[$__st_1235] = 0;
        var $__consume_1_off0 = $__consume_0_off0237;
        var $__n_does_match_4 = $__n_does_match_3234;
        var $__n_might_match_4 = $__n_might_match_3233 - 1 | 0;
        break;
       }
       var $155 = HEAPU8[$134];
       if (($155 & 1 | 0) == 0) {
        var $163 = $155 >>> 1;
       } else {
        var $163 = HEAP32[$__ky1_0238 + 4 >> 2];
       }
       var $163;
       if (($163 | 0) != ($_pre2 | 0)) {
        var $__consume_1_off0 = 1;
        var $__n_does_match_4 = $__n_does_match_3234;
        var $__n_might_match_4 = $__n_might_match_3233;
        break;
       }
       HEAP8[$__st_1235] = 2;
       var $__consume_1_off0 = 1;
       var $__n_does_match_4 = $__n_does_match_3234 + 1 | 0;
       var $__n_might_match_4 = $__n_might_match_3233 - 1 | 0;
      } else {
       var $__consume_1_off0 = $__consume_0_off0237;
       var $__n_does_match_4 = $__n_does_match_3234;
       var $__n_might_match_4 = $__n_might_match_3233;
      }
     } while (0);
     var $__n_might_match_4;
     var $__n_does_match_4;
     var $__consume_1_off0;
     var $171 = $__ky1_0238 + 12 | 0;
     if (($171 | 0) == ($__ke | 0)) {
      var $__n_might_match_3_lcssa = $__n_might_match_4;
      var $__n_does_match_3_lcssa = $__n_does_match_4;
      var $__consume_0_off0_lcssa = $__consume_1_off0;
      break L3013;
     }
     var $__n_might_match_3233 = $__n_might_match_4;
     var $__n_does_match_3234 = $__n_does_match_4;
     var $__st_1235 = $__st_1235 + 1 | 0;
     var $__consume_0_off0237 = $__consume_1_off0;
     var $__ky1_0238 = $171;
    }
   }
  } while (0);
  var $__consume_0_off0_lcssa;
  var $__n_does_match_3_lcssa;
  var $__n_might_match_3_lcssa;
  if (!$__consume_0_off0_lcssa) {
   var $__indx_0 = $_pre2;
   var $__n_does_match_2 = $__n_does_match_3_lcssa;
   var $__n_might_match_2 = $__n_might_match_3_lcssa;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  }
  var $175 = HEAP32[$17 >> 2];
  var $176 = $175 + 12 | 0;
  var $177 = HEAP32[$176 >> 2];
  if (($177 | 0) == (HEAP32[$175 + 16 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$175 >> 2] + 40 >> 2]]($175);
  } else {
   HEAP32[$176 >> 2] = $177 + 1;
  }
  if (($__n_does_match_3_lcssa + $__n_might_match_3_lcssa | 0) >>> 0 < 2) {
   var $__indx_0 = $_pre2;
   var $__n_does_match_2 = $__n_does_match_3_lcssa;
   var $__n_might_match_2 = $__n_might_match_3_lcssa;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  } else {
   var $__n_does_match_5247 = $__n_does_match_3_lcssa;
   var $__st_2248 = $__status_0;
   var $__ky2_0249 = $__kb;
  }
  while (1) {
   var $__ky2_0249;
   var $__st_2248;
   var $__n_does_match_5247;
   do {
    if ((HEAP8[$__st_2248] | 0) == 2) {
     var $195 = HEAPU8[$__ky2_0249];
     if (($195 & 1 | 0) == 0) {
      var $203 = $195 >>> 1;
     } else {
      var $203 = HEAP32[$__ky2_0249 + 4 >> 2];
     }
     var $203;
     if (($203 | 0) == ($_pre2 | 0)) {
      var $__n_does_match_6 = $__n_does_match_5247;
      break;
     }
     HEAP8[$__st_2248] = 0;
     var $__n_does_match_6 = $__n_does_match_5247 - 1 | 0;
    } else {
     var $__n_does_match_6 = $__n_does_match_5247;
    }
   } while (0);
   var $__n_does_match_6;
   var $208 = $__ky2_0249 + 12 | 0;
   if (($208 | 0) == ($__ke | 0)) {
    var $__indx_0 = $_pre2;
    var $__n_does_match_2 = $__n_does_match_6;
    var $__n_might_match_2 = $__n_might_match_3_lcssa;
    var $__e_sroa_0_0 = $__e_sroa_0_2;
    continue L2986;
   } else {
    var $__n_does_match_5247 = $__n_does_match_6;
    var $__st_2248 = $__st_2248 + 1 | 0;
    var $__ky2_0249 = $208;
   }
  }
 }
 do {
  if (($71 | 0) == 0) {
   var $227 = 0;
  } else {
   if ((HEAP32[$71 + 12 >> 2] | 0) != (HEAP32[$71 + 16 >> 2] | 0)) {
    var $227 = $71;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$71 >> 2] + 36 >> 2]]($71) | 0) == -1) {
    HEAP32[$17 >> 2] = 0;
    var $227 = 0;
    break;
   } else {
    var $227 = HEAP32[$17 >> 2];
    break;
   }
  }
 } while (0);
 var $227;
 var $228 = ($227 | 0) == 0;
 do {
  if ($72) {
   label = 2691;
  } else {
   if ((HEAP32[$__e_sroa_0_2 + 12 >> 2] | 0) != (HEAP32[$__e_sroa_0_2 + 16 >> 2] | 0)) {
    if ($228) {
     break;
    } else {
     label = 2693;
     break;
    }
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_2 >> 2] + 36 >> 2]]($__e_sroa_0_2) | 0) == -1) {
    label = 2691;
    break;
   }
   if (!$228) {
    label = 2693;
   }
  }
 } while (0);
 if (label == 2691) {
  if ($228) {
   label = 2693;
  }
 }
 if (label == 2693) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 L3088 : do {
  if ($16) {
   label = 2698;
  } else {
   var $_0209227 = $__kb;
   var $__st_3228 = $__status_0;
   while (1) {
    var $__st_3228;
    var $_0209227;
    if ((HEAP8[$__st_3228] | 0) == 2) {
     var $_0209226 = $_0209227;
     break L3088;
    }
    var $248 = $_0209227 + 12 | 0;
    if (($248 | 0) == ($__ke | 0)) {
     label = 2698;
     break L3088;
    }
    var $_0209227 = $248;
    var $__st_3228 = $__st_3228 + 1 | 0;
   }
  }
 } while (0);
 if (label == 2698) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  var $_0209226 = $__ke;
 }
 var $_0209226;
 if (($__stat_hold_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return $_0209226;
 }
 _free($__stat_hold_sroa_0_1);
 STACKTOP = sp;
 return $_0209226;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var $1 = HEAP32[$__a_end >> 2];
 var $2 = ($1 | 0) == ($__a | 0);
 do {
  if ($2) {
   var $6 = (HEAP8[$__atoms + 24 | 0] | 0) == $__ct << 24 >> 24;
   if (!$6) {
    if ((HEAP8[$__atoms + 25 | 0] | 0) != $__ct << 24 >> 24) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1;
   HEAP8[$__a] = $6 ? 43 : 45;
   HEAP32[$__dc >> 2] = 0;
   var $_049 = 0;
   var $_049;
   return $_049;
  }
 } while (0);
 var $17 = HEAPU8[$__grouping];
 if (($17 & 1 | 0) == 0) {
  var $25 = $17 >>> 1;
 } else {
  var $25 = HEAP32[$__grouping + 4 >> 2];
 }
 var $25;
 if (($25 | 0) != 0 & $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
  var $29 = HEAP32[$__g_end >> 2];
  if (($29 - $__g | 0) >= 160) {
   var $_049 = 0;
   var $_049;
   return $_049;
  }
  var $35 = HEAP32[$__dc >> 2];
  HEAP32[$__g_end >> 2] = $29 + 4;
  HEAP32[$29 >> 2] = $35;
  HEAP32[$__dc >> 2] = 0;
  var $_049 = 0;
  var $_049;
  return $_049;
 }
 var $38 = $__atoms + 26 | 0;
 var $_0 = $__atoms;
 while (1) {
  var $_0;
  if (($_0 | 0) == ($38 | 0)) {
   var $_0_lcssa = $38;
   break;
  }
  if ((HEAP8[$_0] | 0) == $__ct << 24 >> 24) {
   var $_0_lcssa = $_0;
   break;
  } else {
   var $_0 = $_0 + 1 | 0;
  }
 }
 var $_0_lcssa;
 var $47 = $_0_lcssa - $__atoms | 0;
 if (($47 | 0) > 23) {
  var $_049 = -1;
  var $_049;
  return $_049;
 }
 do {
  if (($__base | 0) == 8 | ($__base | 0) == 10) {
   if (($47 | 0) < ($__base | 0)) {
    break;
   } else {
    var $_049 = -1;
   }
   var $_049;
   return $_049;
  } else if (($__base | 0) == 16) {
   if (($47 | 0) < 22) {
    break;
   }
   if ($2) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   if (($1 - $__a | 0) >= 3) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   if ((HEAP8[$1 - 1 | 0] | 0) != 48) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   HEAP32[$__dc >> 2] = 0;
   var $66 = HEAP8[$47 + 17648 | 0];
   var $67 = HEAP32[$__a_end >> 2];
   HEAP32[$__a_end >> 2] = $67 + 1;
   HEAP8[$67] = $66;
   var $_049 = 0;
   var $_049;
   return $_049;
  }
 } while (0);
 var $71 = HEAP8[$47 + 17648 | 0];
 HEAP32[$__a_end >> 2] = $1 + 1;
 HEAP8[$1] = $71;
 HEAP32[$__dc >> 2] = HEAP32[$__dc >> 2] + 1;
 var $_049 = 0;
 var $_049;
 return $_049;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 var $1 = $__grouping;
 var $2 = $__grouping;
 var $3 = HEAP8[$2];
 var $4 = $3 & 255;
 if (($4 & 1 | 0) == 0) {
  var $12 = $4 >>> 1;
 } else {
  var $12 = HEAP32[$__grouping + 4 >> 2];
 }
 var $12;
 if (($12 | 0) == 0) {
  return;
 }
 do {
  if (($__g | 0) == ($__g_end | 0)) {
   var $24 = $3;
  } else {
   var $16 = $__g_end - 4 | 0;
   if ($16 >>> 0 > $__g >>> 0) {
    var $_086 = $__g;
    var $18 = $16;
   } else {
    var $24 = $3;
    break;
   }
   while (1) {
    var $18;
    var $_086;
    var $19 = HEAP32[$_086 >> 2];
    HEAP32[$_086 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$18 >> 2] = $19;
    var $21 = $_086 + 4 | 0;
    var $22 = $18 - 4 | 0;
    if ($21 >>> 0 < $22 >>> 0) {
     var $_086 = $21;
     var $18 = $22;
    } else {
     break;
    }
   }
   var $24 = HEAP8[$2];
  }
 } while (0);
 var $24;
 if (($24 & 1) == 0) {
  var $32 = $1 + 1 | 0;
 } else {
  var $32 = HEAP32[$__grouping + 8 >> 2];
 }
 var $32;
 var $33 = $24 & 255;
 if (($33 & 1 | 0) == 0) {
  var $41 = $33 >>> 1;
 } else {
  var $41 = HEAP32[$__grouping + 4 >> 2];
 }
 var $41;
 var $42 = $__g_end - 4 | 0;
 var $44 = HEAP8[$32];
 var $45 = $44 << 24 >> 24;
 var $or_cond80 = $44 << 24 >> 24 < 1 | $44 << 24 >> 24 == 127;
 L3165 : do {
  if ($42 >>> 0 > $__g >>> 0) {
   var $48 = $32 + $41 | 0;
   var $__ig_081 = $32;
   var $__r_082 = $__g;
   var $50 = $45;
   var $or_cond83 = $or_cond80;
   while (1) {
    var $or_cond83;
    var $50;
    var $__r_082;
    var $__ig_081;
    if (!$or_cond83) {
     if (($50 | 0) != (HEAP32[$__r_082 >> 2] | 0)) {
      break;
     }
    }
    var $___ig_0 = ($48 - $__ig_081 | 0) > 1 ? $__ig_081 + 1 | 0 : $__ig_081;
    var $60 = $__r_082 + 4 | 0;
    var $62 = HEAP8[$___ig_0];
    var $63 = $62 << 24 >> 24;
    var $or_cond = $62 << 24 >> 24 < 1 | $62 << 24 >> 24 == 127;
    if ($60 >>> 0 < $42 >>> 0) {
     var $__ig_081 = $___ig_0;
     var $__r_082 = $60;
     var $50 = $63;
     var $or_cond83 = $or_cond;
    } else {
     var $_lcssa76 = $63;
     var $or_cond_lcssa = $or_cond;
     break L3165;
    }
   }
   HEAP32[$__err >> 2] = 4;
   return;
  } else {
   var $_lcssa76 = $45;
   var $or_cond_lcssa = $or_cond80;
  }
 } while (0);
 var $or_cond_lcssa;
 var $_lcssa76;
 if ($or_cond_lcssa) {
  return;
 }
 var $66 = HEAP32[$42 >> 2];
 if (!($_lcssa76 >>> 0 < $66 >>> 0 | ($66 | 0) == 0)) {
  return;
 }
 HEAP32[$__err >> 2] = 4;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3193 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 2787;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3193;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 2787;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3193;
     }
    }
   }
  } while (0);
  if (label == 2787) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3249 : do {
  if ($135) {
   label = 2831;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 2831;
     break L3249;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 2833;
   }
  }
 } while (0);
 if (label == 2831) {
  if ($177) {
   label = 2833;
  }
 }
 if (label == 2833) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $4 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $17$0 = _strtoll($__a, $__p2, $__base, HEAP32[19888 >> 2]);
 var $17$1 = tempRet0;
 var $19 = HEAP32[___errno_location() >> 2];
 if (($19 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $$etemp$0$1 = -1;
 var $$etemp$1$1 = 0;
 if (($19 | 0) == 34 | (($17$1 | 0) < ($$etemp$0$1 | 0) | ($17$1 | 0) == ($$etemp$0$1 | 0) & $17$0 >>> 0 < -2147483648 >>> 0) | (($17$1 | 0) > ($$etemp$1$1 | 0) | ($17$1 | 0) == ($$etemp$1$1 | 0) & $17$0 >>> 0 > 2147483647 >>> 0)) {
  HEAP32[$__err >> 2] = 4;
  var $$etemp$2$1 = 0;
  var $_0 = ($17$1 | 0) > ($$etemp$2$1 | 0) | ($17$1 | 0) == ($$etemp$2$1 | 0) & $17$0 >>> 0 > 0 >>> 0 ? 2147483647 : -2147483648;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else {
  var $_0 = $17$0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__p_i_i_i15 = sp;
 var $__p_i_i_i = sp + 16;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $11 = HEAP32[21572 >> 2] - 1 | 0;
 var $13 = $2 + 12 | 0;
 var $16 = $2 + 8 | 0;
 var $17 = HEAP32[$16 >> 2];
 do {
  if (HEAP32[$13 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 32 >> 2]]($24, 17648, 17674, $__atoms);
   if ((HEAP32[21184 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i15 >> 2] = 21184;
    HEAP32[$__p_i_i_i15 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i15 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i15);
   }
   var $39 = HEAP32[21188 >> 2] - 1 | 0;
   var $41 = HEAP32[$16 >> 2];
   do {
    if (HEAP32[$13 >> 2] - $41 >> 2 >>> 0 > $39 >>> 0) {
     var $48 = HEAP32[$41 + ($39 << 2) >> 2];
     if (($48 | 0) == 0) {
      break;
     }
     var $52 = $48;
     HEAP8[$__thousands_sep] = FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 16 >> 2]]($52);
     FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 20 >> 2]]($agg_result, $52);
     var $63 = $2 + 4 | 0;
     if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
      STACKTOP = sp;
      return;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $50 = ___cxa_allocate_exception(4);
   HEAP32[$50 >> 2] = 9776;
   ___cxa_throw($50, 15976, 602);
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3329 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 2906;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3329;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 2906;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3329;
     }
    }
   }
  } while (0);
  if (label == 2906) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 var $159$0 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 HEAP32[$__v >> 2] = $159$0;
 HEAP32[$__v + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3385 : do {
  if ($135) {
   label = 2950;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 2950;
     break L3385;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 2952;
   }
  }
 } while (0);
 if (label == 2950) {
  if ($177) {
   label = 2952;
  }
 }
 if (label == 2952) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0$1 = 0;
  var $_0$0 = 0;
  var $_0$0;
  var $_0$1;
  STACKTOP = sp;
  return tempRet0 = $_0$1, $_0$0;
 }
 var $4 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $17$0 = _strtoll($__a, $__p2, $__base, HEAP32[19888 >> 2]);
 var $17$1 = tempRet0;
 var $19 = HEAP32[___errno_location() >> 2];
 if (($19 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0$1 = 0;
  var $_0$0 = 0;
  var $_0$0;
  var $_0$1;
  STACKTOP = sp;
  return tempRet0 = $_0$1, $_0$0;
 }
 if (($19 | 0) != 34) {
  var $_0$1 = $17$1;
  var $_0$0 = $17$0;
  var $_0$0;
  var $_0$1;
  STACKTOP = sp;
  return tempRet0 = $_0$1, $_0$0;
 }
 HEAP32[$__err >> 2] = 4;
 var $$etemp$0$1 = 0;
 var $30 = ($17$1 | 0) > ($$etemp$0$1 | 0) | ($17$1 | 0) == ($$etemp$0$1 | 0) & $17$0 >>> 0 > 0 >>> 0;
 var $_0$1 = $30 ? 2147483647 : -2147483648;
 var $_0$0 = $30 ? -1 : 0;
 var $_0$0;
 var $_0$1;
 STACKTOP = sp;
 return tempRet0 = $_0$1, $_0$0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3440 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 3001;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3440;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 3001;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3440;
     }
    }
   }
  } while (0);
  if (label == 3001) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3496 : do {
  if ($135) {
   label = 3045;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 3045;
     break L3496;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 3047;
   }
  }
 } while (0);
 if (label == 3045) {
  if ($177) {
   label = 3047;
  }
 }
 if (label == 3047) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $8 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $21$0 = _strtoull($__a, $__p2, $__base, HEAP32[19888 >> 2]);
 var $21$1 = tempRet0;
 var $23 = HEAP32[___errno_location() >> 2];
 if (($23 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $8;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $$etemp$0$1 = 0;
 if (($23 | 0) == 34 | ($21$1 >>> 0 > $$etemp$0$1 >>> 0 | $21$1 >>> 0 == $$etemp$0$1 >>> 0 & $21$0 >>> 0 > 65535 >>> 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = -1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else {
  var $_0 = $21$0 & 65535;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3556 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 3100;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3556;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 3100;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3556;
     }
    }
   }
  } while (0);
  if (label == 3100) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3612 : do {
  if ($135) {
   label = 3144;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 3144;
     break L3612;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 3146;
   }
  }
 } while (0);
 if (label == 3144) {
  if ($177) {
   label = 3146;
  }
 }
 if (label == 3146) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $8 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $21$0 = _strtoull($__a, $__p2, $__base, HEAP32[19888 >> 2]);
 var $21$1 = tempRet0;
 var $23 = HEAP32[___errno_location() >> 2];
 if (($23 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $8;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $$etemp$0$1 = 0;
 if (($23 | 0) == 34 | ($21$1 >>> 0 > $$etemp$0$1 >>> 0 | $21$1 >>> 0 == $$etemp$0$1 >>> 0 & $21$0 >>> 0 > -1 >>> 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = -1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else {
  var $_0 = $21$0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3672 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 3199;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3672;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 3199;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3672;
     }
    }
   }
  } while (0);
  if (label == 3199) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3728 : do {
  if ($135) {
   label = 3243;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 3243;
     break L3728;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 3245;
   }
  }
 } while (0);
 if (label == 3243) {
  if ($177) {
   label = 3245;
  }
 }
 if (label == 3245) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if ((HEAP8[$__a] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $8 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $21$0 = _strtoull($__a, $__p2, $__base, HEAP32[19888 >> 2]);
 var $21$1 = tempRet0;
 var $23 = HEAP32[___errno_location() >> 2];
 if (($23 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $8;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $$etemp$0$1 = 0;
 if (($23 | 0) == 34 | ($21$1 >>> 0 > $$etemp$0$1 >>> 0 | $21$1 >>> 0 == $$etemp$0$1 >>> 0 & $21$0 >>> 0 > -1 >>> 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = -1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 } else {
  var $_0 = $21$0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 32;
 var $__grouping = sp + 40;
 var $__buf = sp + 56;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi165 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi165 = $14;
 }
 var $_pre_phi165;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP8[$__thousands_sep];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L3788 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $41 = 0;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     var $41 = $25;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25) | 0) != -1) {
     var $41 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $41 = 0;
   }
  } while (0);
  var $41;
  var $42 = ($41 | 0) == 0;
  var $43 = HEAP32[$21 >> 2];
  do {
   if (($43 | 0) == 0) {
    label = 3298;
   } else {
    if ((HEAP32[$43 + 12 >> 2] | 0) != (HEAP32[$43 + 16 >> 2] | 0)) {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3788;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43) | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 3298;
     break;
    } else {
     if ($42) {
      var $60 = $43;
      var $59 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $136 = $43;
      var $135 = 0;
      break L3788;
     }
    }
   }
  } while (0);
  if (label == 3298) {
   label = 0;
   if ($42) {
    var $__a_2 = $__a_0;
    var $136 = 0;
    var $135 = 1;
    break;
   } else {
    var $60 = 0;
    var $59 = 1;
   }
  }
  var $59;
  var $60;
  var $66 = HEAPU8[$1];
  var $68 = ($66 & 1 | 0) == 0;
  var $69 = HEAP32[$23 >> 2];
  var $70 = $66 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($68 ? $70 : $69) | 0)) {
   var $_ = $68 ? $70 : $69;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $80 = 10;
   } else {
    var $80 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $80;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $80);
   if ((HEAP8[$1] & 1) == 0) {
    var $86 = $_pre_phi;
   } else {
    var $86 = HEAP32[$_pre_phi165 >> 2];
   }
   var $86;
   HEAP32[$__a_end >> 2] = $86 + $_;
   var $__a_1 = $86;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $106 = $41 + 12 | 0;
  var $107 = HEAP32[$106 >> 2];
  var $108 = $41 + 16 | 0;
  if (($107 | 0) == (HEAP32[$108 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) & 255;
  } else {
   var $_0_off0 = HEAP8[$107];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $136 = $60;
   var $135 = $59;
   break;
  }
  var $123 = HEAP32[$106 >> 2];
  if (($123 | 0) == (HEAP32[$108 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 40 >> 2]]($41);
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  } else {
   HEAP32[$106 >> 2] = $123 + 1;
   var $__a_0 = $__a_1;
   var $25 = $41;
   continue;
  }
 }
 var $135;
 var $136;
 var $__a_2;
 var $137 = $__grouping;
 var $139 = HEAPU8[$137];
 if (($139 & 1 | 0) == 0) {
  var $147 = $139 >>> 1;
 } else {
  var $147 = HEAP32[$__grouping + 4 >> 2];
 }
 var $147;
 do {
  if (($147 | 0) != 0) {
   var $150 = HEAP32[$__g_end >> 2];
   if (($150 - $__g | 0) >= 160) {
    break;
   }
   var $156 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $150 + 4;
   HEAP32[$150 >> 2] = $156;
  }
 } while (0);
 var $159$0 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 HEAP32[$__v >> 2] = $159$0;
 HEAP32[$__v + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($42) {
   var $176 = 0;
  } else {
   if ((HEAP32[$41 + 12 >> 2] | 0) != (HEAP32[$41 + 16 >> 2] | 0)) {
    var $176 = $41;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41) | 0) != -1) {
    var $176 = $41;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $176 = 0;
  }
 } while (0);
 var $176;
 var $177 = ($176 | 0) == 0;
 L3844 : do {
  if ($135) {
   label = 3342;
  } else {
   do {
    if ((HEAP32[$136 + 12 >> 2] | 0) == (HEAP32[$136 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$136 >> 2] + 36 >> 2]]($136) | 0) != -1) {
      break;
     }
     HEAP32[$21 >> 2] = 0;
     label = 3342;
     break L3844;
    }
   } while (0);
   if (!($177 ^ ($136 | 0) == 0)) {
    label = 3344;
   }
  }
 } while (0);
 if (label == 3342) {
  if ($177) {
   label = 3344;
  }
 }
 if (label == 3344) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $176;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $203 = HEAP32[$__buf + 8 >> 2];
   if (($203 | 0) == 0) {
    break;
   }
   _free($203);
  }
 } while (0);
 if ((HEAP8[$137] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $211 = HEAP32[$__grouping + 8 >> 2];
 if (($211 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($211);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   var $_0$1 = 0;
   var $_0$0 = 0;
  } else {
   if ((HEAP8[$__a] | 0) == 45) {
    HEAP32[$__err >> 2] = 4;
    var $_0$1 = 0;
    var $_0$0 = 0;
    break;
   }
   var $8 = HEAP32[___errno_location() >> 2];
   HEAP32[___errno_location() >> 2] = 0;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   var $21$0 = _strtoull($__a, $__p2, $__base, HEAP32[19888 >> 2]);
   var $21$1 = tempRet0;
   var $23 = HEAP32[___errno_location() >> 2];
   if (($23 | 0) == 0) {
    HEAP32[___errno_location() >> 2] = $8;
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    var $_0$1 = 0;
    var $_0$0 = 0;
    break;
   }
   if (($23 | 0) != 34) {
    var $_0$1 = $21$1;
    var $_0$0 = $21$0;
    break;
   }
   HEAP32[$__err >> 2] = 4;
   var $_0$1 = -1;
   var $_0$0 = -1;
  }
 } while (0);
 var $_0$0;
 var $_0$1;
 STACKTOP = sp;
 return tempRet0 = $_0$1, $_0$0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 32;
 var $__thousands_sep = sp + 40;
 var $__grouping = sp + 48;
 var $__buf = sp + 64;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi164 = $7;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP8[$__decimal_point];
 var $18 = HEAP8[$__thousands_sep];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L3893 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $35 = 0;
   } else {
    if ((HEAP32[$19 + 12 >> 2] | 0) != (HEAP32[$19 + 16 >> 2] | 0)) {
     var $35 = $19;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19) | 0) != -1) {
     var $35 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $35 = 0;
   }
  } while (0);
  var $35;
  var $36 = ($35 | 0) == 0;
  var $37 = HEAP32[$14 >> 2];
  do {
   if (($37 | 0) == 0) {
    label = 3387;
   } else {
    if ((HEAP32[$37 + 12 >> 2] | 0) != (HEAP32[$37 + 16 >> 2] | 0)) {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L3893;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37) | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 3387;
     break;
    } else {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L3893;
     }
    }
   }
  } while (0);
  if (label == 3387) {
   label = 0;
   if ($36) {
    var $__a_2 = $__a_0;
    var $130 = 0;
    var $129 = 1;
    break;
   } else {
    var $54 = 0;
    var $53 = 1;
   }
  }
  var $53;
  var $54;
  var $60 = HEAPU8[$0];
  var $62 = ($60 & 1 | 0) == 0;
  var $63 = HEAP32[$16 >> 2];
  var $64 = $60 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($62 ? $64 : $63) | 0)) {
   var $_ = $62 ? $64 : $63;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $74 = 10;
   } else {
    var $74 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $74;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74);
   if ((HEAP8[$0] & 1) == 0) {
    var $80 = $_pre_phi;
   } else {
    var $80 = HEAP32[$_pre_phi164 >> 2];
   }
   var $80;
   HEAP32[$__a_end >> 2] = $80 + $_;
   var $__a_1 = $80;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $100 = $35 + 12 | 0;
  var $101 = HEAP32[$100 >> 2];
  var $102 = $35 + 16 | 0;
  if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) & 255;
  } else {
   var $_0_off0 = HEAP8[$101];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $130 = $54;
   var $129 = $53;
   break;
  }
  var $117 = HEAP32[$100 >> 2];
  if (($117 | 0) == (HEAP32[$102 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 40 >> 2]]($35);
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  } else {
   HEAP32[$100 >> 2] = $117 + 1;
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  }
 }
 var $129;
 var $130;
 var $__a_2;
 var $131 = $__grouping;
 var $133 = HEAPU8[$131];
 if (($133 & 1 | 0) == 0) {
  var $141 = $133 >>> 1;
 } else {
  var $141 = HEAP32[$__grouping + 4 >> 2];
 }
 var $141;
 do {
  if (($141 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $148 = HEAP32[$__g_end >> 2];
   if (($148 - $__g | 0) >= 160) {
    break;
   }
   var $154 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $148 + 4;
   HEAP32[$148 >> 2] = $154;
  }
 } while (0);
 HEAPF32[$__v >> 2] = __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($36) {
   var $174 = 0;
  } else {
   if ((HEAP32[$35 + 12 >> 2] | 0) != (HEAP32[$35 + 16 >> 2] | 0)) {
    var $174 = $35;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) | 0) != -1) {
    var $174 = $35;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $174 = 0;
  }
 } while (0);
 var $174;
 var $175 = ($174 | 0) == 0;
 L3950 : do {
  if ($129) {
   label = 3432;
  } else {
   do {
    if ((HEAP32[$130 + 12 >> 2] | 0) == (HEAP32[$130 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$130 >> 2] + 36 >> 2]]($130) | 0) != -1) {
      break;
     }
     HEAP32[$14 >> 2] = 0;
     label = 3432;
     break L3950;
    }
   } while (0);
   if (!($175 ^ ($130 | 0) == 0)) {
    label = 3434;
   }
  }
 } while (0);
 if (label == 3432) {
  if ($175) {
   label = 3434;
  }
 }
 if (label == 3434) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $174;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $201 = HEAP32[$__buf + 8 >> 2];
   if (($201 | 0) == 0) {
    break;
   }
   _free($201);
  }
 } while (0);
 if ((HEAP8[$131] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $209 = HEAP32[$__grouping + 8 >> 2];
 if (($209 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($209);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) {
  if ((HEAP8[$__in_units] & 1) == 0) {
   var $_082 = -1;
   var $_082;
   return $_082;
  }
  HEAP8[$__in_units] = 0;
  var $7 = HEAP32[$__a_end >> 2];
  HEAP32[$__a_end >> 2] = $7 + 1;
  HEAP8[$7] = 46;
  var $11 = HEAPU8[$__grouping];
  if (($11 & 1 | 0) == 0) {
   var $19 = $11 >>> 1;
  } else {
   var $19 = HEAP32[$__grouping + 4 >> 2];
  }
  var $19;
  if (($19 | 0) == 0) {
   var $_082 = 0;
   var $_082;
   return $_082;
  }
  var $22 = HEAP32[$__g_end >> 2];
  if (($22 - $__g | 0) >= 160) {
   var $_082 = 0;
   var $_082;
   return $_082;
  }
  var $28 = HEAP32[$__dc >> 2];
  HEAP32[$__g_end >> 2] = $22 + 4;
  HEAP32[$22 >> 2] = $28;
  var $_082 = 0;
  var $_082;
  return $_082;
 }
 do {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   var $35 = HEAPU8[$__grouping];
   if (($35 & 1 | 0) == 0) {
    var $43 = $35 >>> 1;
   } else {
    var $43 = HEAP32[$__grouping + 4 >> 2];
   }
   var $43;
   if (($43 | 0) == 0) {
    break;
   }
   if ((HEAP8[$__in_units] & 1) == 0) {
    var $_082 = -1;
    var $_082;
    return $_082;
   }
   var $50 = HEAP32[$__g_end >> 2];
   if (($50 - $__g | 0) >= 160) {
    var $_082 = 0;
    var $_082;
    return $_082;
   }
   var $56 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $50 + 4;
   HEAP32[$50 >> 2] = $56;
   HEAP32[$__dc >> 2] = 0;
   var $_082 = 0;
   var $_082;
   return $_082;
  }
 } while (0);
 var $59 = $__atoms + 32 | 0;
 var $_0 = $__atoms;
 while (1) {
  var $_0;
  if (($_0 | 0) == ($59 | 0)) {
   var $_0_lcssa = $59;
   break;
  }
  if ((HEAP8[$_0] | 0) == $__ct << 24 >> 24) {
   var $_0_lcssa = $_0;
   break;
  } else {
   var $_0 = $_0 + 1 | 0;
  }
 }
 var $_0_lcssa;
 var $68 = $_0_lcssa - $__atoms | 0;
 if (($68 | 0) > 31) {
  var $_082 = -1;
  var $_082;
  return $_082;
 }
 var $72 = HEAP8[$68 + 17648 | 0];
 if (($68 | 0) == 25 | ($68 | 0) == 24) {
  var $74 = HEAP32[$__a_end >> 2];
  do {
   if (($74 | 0) != ($__a | 0)) {
    if ((HEAP8[$74 - 1 | 0] & 95 | 0) == (HEAP8[$__exp] & 127 | 0)) {
     break;
    } else {
     var $_082 = -1;
    }
    var $_082;
    return $_082;
   }
  } while (0);
  HEAP32[$__a_end >> 2] = $74 + 1;
  HEAP8[$74] = $72;
  var $_082 = 0;
  var $_082;
  return $_082;
 } else if (($68 | 0) == 22 | ($68 | 0) == 23) {
  HEAP8[$__exp] = 80;
  var $87 = HEAP32[$__a_end >> 2];
  HEAP32[$__a_end >> 2] = $87 + 1;
  HEAP8[$87] = $72;
  var $_082 = 0;
  var $_082;
  return $_082;
 } else {
  var $92 = HEAP8[$__exp];
  do {
   if (($72 & 95 | 0) == ($92 << 24 >> 24 | 0)) {
    HEAP8[$__exp] = $92 | -128;
    if ((HEAP8[$__in_units] & 1) == 0) {
     break;
    }
    HEAP8[$__in_units] = 0;
    var $103 = HEAPU8[$__grouping];
    if (($103 & 1 | 0) == 0) {
     var $111 = $103 >>> 1;
    } else {
     var $111 = HEAP32[$__grouping + 4 >> 2];
    }
    var $111;
    if (($111 | 0) == 0) {
     break;
    }
    var $114 = HEAP32[$__g_end >> 2];
    if (($114 - $__g | 0) >= 160) {
     break;
    }
    var $120 = HEAP32[$__dc >> 2];
    HEAP32[$__g_end >> 2] = $114 + 4;
    HEAP32[$114 >> 2] = $120;
   }
  } while (0);
  var $123 = HEAP32[$__a_end >> 2];
  HEAP32[$__a_end >> 2] = $123 + 1;
  HEAP8[$123] = $72;
  if (($68 | 0) > 21) {
   var $_082 = 0;
   var $_082;
   return $_082;
  }
  HEAP32[$__dc >> 2] = HEAP32[$__dc >> 2] + 1;
  var $_082 = 0;
  var $_082;
  return $_082;
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $4 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $16 = _strtold_l($__a, $__p2);
 var $18 = HEAP32[___errno_location() >> 2];
 if (($18 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if (($18 | 0) == 34) {
  HEAP32[$__err >> 2] = 4;
 }
 var $_0 = $16;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 32;
 var $__thousands_sep = sp + 40;
 var $__grouping = sp + 48;
 var $__buf = sp + 64;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi164 = $7;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP8[$__decimal_point];
 var $18 = HEAP8[$__thousands_sep];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L91 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $35 = 0;
   } else {
    if ((HEAP32[$19 + 12 >> 2] | 0) != (HEAP32[$19 + 16 >> 2] | 0)) {
     var $35 = $19;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19) | 0) != -1) {
     var $35 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $35 = 0;
   }
  } while (0);
  var $35;
  var $36 = ($35 | 0) == 0;
  var $37 = HEAP32[$14 >> 2];
  do {
   if (($37 | 0) == 0) {
    label = 84;
   } else {
    if ((HEAP32[$37 + 12 >> 2] | 0) != (HEAP32[$37 + 16 >> 2] | 0)) {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L91;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37) | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 84;
     break;
    } else {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L91;
     }
    }
   }
  } while (0);
  if (label == 84) {
   label = 0;
   if ($36) {
    var $__a_2 = $__a_0;
    var $130 = 0;
    var $129 = 1;
    break;
   } else {
    var $54 = 0;
    var $53 = 1;
   }
  }
  var $53;
  var $54;
  var $60 = HEAPU8[$0];
  var $62 = ($60 & 1 | 0) == 0;
  var $63 = HEAP32[$16 >> 2];
  var $64 = $60 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($62 ? $64 : $63) | 0)) {
   var $_ = $62 ? $64 : $63;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $74 = 10;
   } else {
    var $74 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $74;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74);
   if ((HEAP8[$0] & 1) == 0) {
    var $80 = $_pre_phi;
   } else {
    var $80 = HEAP32[$_pre_phi164 >> 2];
   }
   var $80;
   HEAP32[$__a_end >> 2] = $80 + $_;
   var $__a_1 = $80;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $100 = $35 + 12 | 0;
  var $101 = HEAP32[$100 >> 2];
  var $102 = $35 + 16 | 0;
  if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) & 255;
  } else {
   var $_0_off0 = HEAP8[$101];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $130 = $54;
   var $129 = $53;
   break;
  }
  var $117 = HEAP32[$100 >> 2];
  if (($117 | 0) == (HEAP32[$102 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 40 >> 2]]($35);
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  } else {
   HEAP32[$100 >> 2] = $117 + 1;
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  }
 }
 var $129;
 var $130;
 var $__a_2;
 var $131 = $__grouping;
 var $133 = HEAPU8[$131];
 if (($133 & 1 | 0) == 0) {
  var $141 = $133 >>> 1;
 } else {
  var $141 = HEAP32[$__grouping + 4 >> 2];
 }
 var $141;
 do {
  if (($141 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $148 = HEAP32[$__g_end >> 2];
   if (($148 - $__g | 0) >= 160) {
    break;
   }
   var $154 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $148 + 4;
   HEAP32[$148 >> 2] = $154;
  }
 } while (0);
 HEAPF64[$__v >> 3] = __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($36) {
   var $174 = 0;
  } else {
   if ((HEAP32[$35 + 12 >> 2] | 0) != (HEAP32[$35 + 16 >> 2] | 0)) {
    var $174 = $35;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) | 0) != -1) {
    var $174 = $35;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $174 = 0;
  }
 } while (0);
 var $174;
 var $175 = ($174 | 0) == 0;
 L148 : do {
  if ($129) {
   label = 129;
  } else {
   do {
    if ((HEAP32[$130 + 12 >> 2] | 0) == (HEAP32[$130 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$130 >> 2] + 36 >> 2]]($130) | 0) != -1) {
      break;
     }
     HEAP32[$14 >> 2] = 0;
     label = 129;
     break L148;
    }
   } while (0);
   if (!($175 ^ ($130 | 0) == 0)) {
    label = 131;
   }
  }
 } while (0);
 if (label == 129) {
  if ($175) {
   label = 131;
  }
 }
 if (label == 131) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $174;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $201 = HEAP32[$__buf + 8 >> 2];
   if (($201 | 0) == 0) {
    break;
   }
   _free($201);
  }
 } while (0);
 if ((HEAP8[$131] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $209 = HEAP32[$__grouping + 8 >> 2];
 if (($209 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($209);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $4 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $16 = _strtold_l($__a, $__p2);
 var $18 = HEAP32[___errno_location() >> 2];
 if (($18 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if (($18 | 0) != 34) {
  var $_0 = $16;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 HEAP32[$__err >> 2] = 4;
 var $_0 = $16;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__p_i_i_i18 = sp;
 var $__p_i_i_i = sp + 16;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $11 = HEAP32[21572 >> 2] - 1 | 0;
 var $13 = $2 + 12 | 0;
 var $16 = $2 + 8 | 0;
 var $17 = HEAP32[$16 >> 2];
 do {
  if (HEAP32[$13 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 32 >> 2]]($24, 17648, 17680, $__atoms);
   if ((HEAP32[21184 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i18 >> 2] = 21184;
    HEAP32[$__p_i_i_i18 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i18 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i18);
   }
   var $39 = HEAP32[21188 >> 2] - 1 | 0;
   var $41 = HEAP32[$16 >> 2];
   do {
    if (HEAP32[$13 >> 2] - $41 >> 2 >>> 0 > $39 >>> 0) {
     var $48 = HEAP32[$41 + ($39 << 2) >> 2];
     if (($48 | 0) == 0) {
      break;
     }
     var $52 = $48;
     var $53 = $48;
     HEAP8[$__decimal_point] = FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 12 >> 2]]($52);
     HEAP8[$__thousands_sep] = FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 16 >> 2]]($52);
     FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 20 >> 2]]($agg_result, $52);
     var $67 = $2 + 4 | 0;
     if (((tempValue = HEAP32[$67 >> 2], HEAP32[$67 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
      STACKTOP = sp;
      return;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $50 = ___cxa_allocate_exception(4);
   HEAP32[$50 >> 2] = 9776;
   ___cxa_throw($50, 15976, 602);
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 32;
 var $__thousands_sep = sp + 40;
 var $__grouping = sp + 48;
 var $__buf = sp + 64;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi164 = $7;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP8[$__decimal_point];
 var $18 = HEAP8[$__thousands_sep];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L223 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $35 = 0;
   } else {
    if ((HEAP32[$19 + 12 >> 2] | 0) != (HEAP32[$19 + 16 >> 2] | 0)) {
     var $35 = $19;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19) | 0) != -1) {
     var $35 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $35 = 0;
   }
  } while (0);
  var $35;
  var $36 = ($35 | 0) == 0;
  var $37 = HEAP32[$14 >> 2];
  do {
   if (($37 | 0) == 0) {
    label = 200;
   } else {
    if ((HEAP32[$37 + 12 >> 2] | 0) != (HEAP32[$37 + 16 >> 2] | 0)) {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L223;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37) | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 200;
     break;
    } else {
     if ($36) {
      var $54 = $37;
      var $53 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $130 = $37;
      var $129 = 0;
      break L223;
     }
    }
   }
  } while (0);
  if (label == 200) {
   label = 0;
   if ($36) {
    var $__a_2 = $__a_0;
    var $130 = 0;
    var $129 = 1;
    break;
   } else {
    var $54 = 0;
    var $53 = 1;
   }
  }
  var $53;
  var $54;
  var $60 = HEAPU8[$0];
  var $62 = ($60 & 1 | 0) == 0;
  var $63 = HEAP32[$16 >> 2];
  var $64 = $60 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($62 ? $64 : $63) | 0)) {
   var $_ = $62 ? $64 : $63;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $74 = 10;
   } else {
    var $74 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $74;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $74);
   if ((HEAP8[$0] & 1) == 0) {
    var $80 = $_pre_phi;
   } else {
    var $80 = HEAP32[$_pre_phi164 >> 2];
   }
   var $80;
   HEAP32[$__a_end >> 2] = $80 + $_;
   var $__a_1 = $80;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $100 = $35 + 12 | 0;
  var $101 = HEAP32[$100 >> 2];
  var $102 = $35 + 16 | 0;
  if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
   var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) & 255;
  } else {
   var $_0_off0 = HEAP8[$101];
  }
  var $_0_off0;
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $130 = $54;
   var $129 = $53;
   break;
  }
  var $117 = HEAP32[$100 >> 2];
  if (($117 | 0) == (HEAP32[$102 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 40 >> 2]]($35);
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  } else {
   HEAP32[$100 >> 2] = $117 + 1;
   var $__a_0 = $__a_1;
   var $19 = $35;
   continue;
  }
 }
 var $129;
 var $130;
 var $__a_2;
 var $131 = $__grouping;
 var $133 = HEAPU8[$131];
 if (($133 & 1 | 0) == 0) {
  var $141 = $133 >>> 1;
 } else {
  var $141 = HEAP32[$__grouping + 4 >> 2];
 }
 var $141;
 do {
  if (($141 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $148 = HEAP32[$__g_end >> 2];
   if (($148 - $__g | 0) >= 160) {
    break;
   }
   var $154 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $148 + 4;
   HEAP32[$148 >> 2] = $154;
  }
 } while (0);
 HEAPF64[$__v >> 3] = __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($36) {
   var $174 = 0;
  } else {
   if ((HEAP32[$35 + 12 >> 2] | 0) != (HEAP32[$35 + 16 >> 2] | 0)) {
    var $174 = $35;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) | 0) != -1) {
    var $174 = $35;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $174 = 0;
  }
 } while (0);
 var $174;
 var $175 = ($174 | 0) == 0;
 L280 : do {
  if ($129) {
   label = 245;
  } else {
   do {
    if ((HEAP32[$130 + 12 >> 2] | 0) == (HEAP32[$130 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$130 >> 2] + 36 >> 2]]($130) | 0) != -1) {
      break;
     }
     HEAP32[$14 >> 2] = 0;
     label = 245;
     break L280;
    }
   } while (0);
   if (!($175 ^ ($130 | 0) == 0)) {
    label = 247;
   }
  }
 } while (0);
 if (label == 245) {
  if ($175) {
   label = 247;
  }
 }
 if (label == 247) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $174;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $201 = HEAP32[$__buf + 8 >> 2];
   if (($201 | 0) == 0) {
    break;
   }
   _free($201);
  }
 } while (0);
 if ((HEAP8[$131] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $209 = HEAP32[$__grouping + 8 >> 2];
 if (($209 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($209);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $4 = HEAP32[___errno_location() >> 2];
 HEAP32[___errno_location() >> 2] = 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $16 = _strtold_l($__a, $__p2);
 var $18 = HEAP32[___errno_location() >> 2];
 if (($18 | 0) == 0) {
  HEAP32[___errno_location() >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if (($18 | 0) != 34) {
  var $_0 = $16;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 HEAP32[$__err >> 2] = 4;
 var $_0 = $16;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__atoms = sp + 16;
 var $__grouping = sp + 48;
 var $__grouping171 = $__grouping;
 var $__buf = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__grouping171 >> 2] = 0;
 HEAP32[$__grouping171 + 4 >> 2] = 0;
 HEAP32[$__grouping171 + 8 >> 2] = 0;
 var $1 = $__buf;
 var $3 = HEAP32[$__iob + 28 >> 2];
 var $5 = $3 + 4 | 0;
 tempValue = HEAP32[$5 >> 2], HEAP32[$5 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $12 = HEAP32[21572 >> 2] - 1 | 0;
 var $18 = HEAP32[$3 + 8 >> 2];
 do {
  if (HEAP32[$3 + 12 >> 2] - $18 >> 2 >>> 0 > $12 >>> 0) {
   var $25 = HEAP32[$18 + ($12 << 2) >> 2];
   if (($25 | 0) == 0) {
    break;
   }
   var $30 = $__atoms | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 32 >> 2]]($25, 17648, 17674, $30);
   var $37 = $3 + 4 | 0;
   if (((tempValue = HEAP32[$37 >> 2], HEAP32[$37 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
   }
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   var $46 = $__buf;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
   if ((HEAP8[$1] & 1) == 0) {
    var $54 = $46 + 1 | 0;
    var $55 = $54;
    var $_pre_phi = $54;
    var $_pre_phi174 = $__buf + 8 | 0;
   } else {
    var $51 = $__buf + 8 | 0;
    var $55 = HEAP32[$51 >> 2];
    var $_pre_phi = $46 + 1 | 0;
    var $_pre_phi174 = $51;
   }
   var $_pre_phi174;
   var $_pre_phi;
   var $55;
   HEAP32[$__a_end >> 2] = $55;
   var $56 = $__g | 0;
   HEAP32[$__g_end >> 2] = $56;
   HEAP32[$__dc >> 2] = 0;
   var $57 = $__b | 0;
   var $58 = $__e | 0;
   var $59 = $__buf | 0;
   var $60 = $__buf + 4 | 0;
   var $__a_0 = $55;
   var $61 = HEAP32[$57 >> 2];
   L346 : while (1) {
    var $61;
    var $__a_0;
    do {
     if (($61 | 0) == 0) {
      var $77 = 0;
     } else {
      if ((HEAP32[$61 + 12 >> 2] | 0) != (HEAP32[$61 + 16 >> 2] | 0)) {
       var $77 = $61;
       break;
      }
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 36 >> 2]]($61) | 0) != -1) {
       var $77 = $61;
       break;
      }
      HEAP32[$57 >> 2] = 0;
      var $77 = 0;
     }
    } while (0);
    var $77;
    var $78 = ($77 | 0) == 0;
    var $79 = HEAP32[$58 >> 2];
    do {
     if (($79 | 0) == 0) {
      label = 307;
     } else {
      if ((HEAP32[$79 + 12 >> 2] | 0) != (HEAP32[$79 + 16 >> 2] | 0)) {
       if ($78) {
        break;
       } else {
        var $__a_2 = $__a_0;
        break L346;
       }
      }
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$79 >> 2] + 36 >> 2]]($79) | 0) == -1) {
       HEAP32[$58 >> 2] = 0;
       label = 307;
       break;
      } else {
       if ($78) {
        break;
       } else {
        var $__a_2 = $__a_0;
        break L346;
       }
      }
     }
    } while (0);
    if (label == 307) {
     label = 0;
     if ($78) {
      var $__a_2 = $__a_0;
      break;
     }
    }
    var $100 = HEAPU8[$1];
    var $102 = ($100 & 1 | 0) == 0;
    var $103 = HEAP32[$60 >> 2];
    var $104 = $100 >>> 1;
    if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($102 ? $104 : $103) | 0)) {
     var $_ = $102 ? $104 : $103;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
     if ((HEAP8[$1] & 1) == 0) {
      var $114 = 10;
     } else {
      var $114 = (HEAP32[$59 >> 2] & -2) - 1 | 0;
     }
     var $114;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $114);
     if ((HEAP8[$1] & 1) == 0) {
      var $120 = $_pre_phi;
     } else {
      var $120 = HEAP32[$_pre_phi174 >> 2];
     }
     var $120;
     HEAP32[$__a_end >> 2] = $120 + $_;
     var $__a_1 = $120;
    } else {
     var $__a_1 = $__a_0;
    }
    var $__a_1;
    var $146 = $77 + 12 | 0;
    var $147 = HEAP32[$146 >> 2];
    var $148 = $77 + 16 | 0;
    if (($147 | 0) == (HEAP32[$148 >> 2] | 0)) {
     var $_0_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$77 >> 2] + 36 >> 2]]($77) & 255;
    } else {
     var $_0_off0 = HEAP8[$147];
    }
    var $_0_off0;
    if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0, 16, $__a_1, $__a_end, $__dc, 0, $__grouping, $56, $__g_end, $30) | 0) != 0) {
     var $__a_2 = $__a_1;
     break;
    }
    var $163 = HEAP32[$146 >> 2];
    if (($163 | 0) == (HEAP32[$148 >> 2] | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$77 >> 2] + 40 >> 2]]($77);
     var $__a_0 = $__a_1;
     var $61 = $77;
     continue;
    } else {
     HEAP32[$146 >> 2] = $163 + 1;
     var $__a_0 = $__a_1;
     var $61 = $77;
     continue;
    }
   }
   var $__a_2;
   HEAP8[$__a_2 + 3 | 0] = 0;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   var $188 = __ZNSt3__110__sscanf_lEPKcPvS1_z($__a_2, HEAP32[19888 >> 2], (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
   STACKTOP = tempVarArgs;
   if (($188 | 0) != 1) {
    HEAP32[$__err >> 2] = 4;
   }
   var $193 = HEAP32[$57 >> 2];
   do {
    if (($193 | 0) == 0) {
     var $209 = 0;
    } else {
     if ((HEAP32[$193 + 12 >> 2] | 0) != (HEAP32[$193 + 16 >> 2] | 0)) {
      var $209 = $193;
      break;
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$193 >> 2] + 36 >> 2]]($193) | 0) != -1) {
      var $209 = $193;
      break;
     }
     HEAP32[$57 >> 2] = 0;
     var $209 = 0;
    }
   } while (0);
   var $209;
   var $210 = ($209 | 0) == 0;
   var $211 = HEAP32[$58 >> 2];
   do {
    if (($211 | 0) == 0) {
     label = 351;
    } else {
     if ((HEAP32[$211 + 12 >> 2] | 0) != (HEAP32[$211 + 16 >> 2] | 0)) {
      if ($210) {
       break;
      } else {
       label = 353;
       break;
      }
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$211 >> 2] + 36 >> 2]]($211) | 0) == -1) {
      HEAP32[$58 >> 2] = 0;
      label = 351;
      break;
     } else {
      if ($210) {
       break;
      } else {
       label = 353;
       break;
      }
     }
    }
   } while (0);
   if (label == 351) {
    if ($210) {
     label = 353;
    }
   }
   if (label == 353) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $209;
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $236 = HEAP32[$__buf + 8 >> 2];
     if (($236 | 0) == 0) {
      break;
     }
     _free($236);
    }
   } while (0);
   if ((HEAP8[$__grouping171] & 1) == 0) {
    STACKTOP = sp;
    return;
   }
   var $244 = HEAP32[$__grouping + 8 >> 2];
   if (($244 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($244);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $27 = ___cxa_allocate_exception(4);
 HEAP32[$27 >> 2] = 9776;
 ___cxa_throw($27, 15976, 602);
}
function __ZNSt3__110__sscanf_lEPKcPvS1_z($__s, $__l, varrp) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__va = sp;
 var $2 = $__va;
 HEAP32[$2 >> 2] = varrp;
 HEAP32[$2 + 4 >> 2] = 0;
 var $3 = _uselocale($__l);
 var $4 = _vsscanf($__s, 6552, $__va | 0);
 if (($3 | 0) == 0) {
  STACKTOP = sp;
  return $4;
 }
 _uselocale($3);
 STACKTOP = sp;
 return $4;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 88 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i24 = sp;
 var $__p_i_i_i = sp + 16;
 var $__lv = sp + 32;
 var $1 = sp + 40;
 var $2 = sp + 48;
 var $3 = sp + 56;
 var $__names = sp + 64;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1;
  var $12 = HEAP32[HEAP32[$this >> 2] + 16 >> 2];
  var $13 = $__b | 0;
  HEAP32[$2 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
  FUNCTION_TABLE[$12]($1, $this, $2, $3, $__iob, $__err, $__lv);
  var $20 = HEAP32[$1 >> 2];
  HEAP32[$13 >> 2] = $20;
  var $21 = HEAP32[$__lv >> 2];
  if (($21 | 0) == 0) {
   HEAP8[$__v] = 0;
  } else if (($21 | 0) == 1) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg_result >> 2] = $20;
  STACKTOP = sp;
  return;
 }
 var $28 = $__iob + 28 | 0;
 var $29 = HEAP32[$28 >> 2];
 var $31 = $29 + 4 | 0;
 tempValue = HEAP32[$31 >> 2], HEAP32[$31 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $38 = HEAP32[21564 >> 2] - 1 | 0;
 var $44 = HEAP32[$29 + 8 >> 2];
 do {
  if (HEAP32[$29 + 12 >> 2] - $44 >> 2 >>> 0 > $38 >>> 0) {
   var $51 = HEAP32[$44 + ($38 << 2) >> 2];
   if (($51 | 0) == 0) {
    break;
   }
   var $55 = $51;
   var $57 = $29 + 4 | 0;
   if (((tempValue = HEAP32[$57 >> 2], HEAP32[$57 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 8 >> 2]]($29);
   }
   var $66 = HEAP32[$28 >> 2];
   var $68 = $66 + 4 | 0;
   tempValue = HEAP32[$68 >> 2], HEAP32[$68 >> 2] = tempValue + 1, tempValue;
   if ((HEAP32[21176 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i24 >> 2] = 21176;
    HEAP32[$__p_i_i_i24 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i24 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i24);
   }
   var $75 = HEAP32[21180 >> 2] - 1 | 0;
   var $81 = HEAP32[$66 + 8 >> 2];
   do {
    if (HEAP32[$66 + 12 >> 2] - $81 >> 2 >>> 0 > $75 >>> 0) {
     var $88 = HEAP32[$81 + ($75 << 2) >> 2];
     if (($88 | 0) == 0) {
      break;
     }
     var $92 = $88;
     var $94 = $66 + 4 | 0;
     if (((tempValue = HEAP32[$94 >> 2], HEAP32[$94 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[$66 >> 2] + 8 >> 2]]($66);
     }
     var $103 = $__names | 0;
     var $104 = $88;
     FUNCTION_TABLE[HEAP32[HEAP32[$104 >> 2] + 24 >> 2]]($103, $92);
     var $108 = $__names + 12 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$104 >> 2] + 28 >> 2]]($108, $92);
     HEAP8[$__v] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, HEAP32[$__e >> 2], $103, $__names + 24 | 0, $55, $__err, 1) | 0) == ($103 | 0) | 0;
     HEAP32[$agg_result >> 2] = HEAP32[$__b >> 2];
     do {
      if ((HEAP8[$108] & 1) != 0) {
       var $127 = HEAP32[$__names + 20 >> 2];
       if (($127 | 0) == 0) {
        break;
       }
       _free($127);
      }
     } while (0);
     if ((HEAP8[$__names] & 1) == 0) {
      STACKTOP = sp;
      return;
     }
     var $137 = HEAP32[$__names + 8 >> 2];
     if (($137 | 0) == 0) {
      STACKTOP = sp;
      return;
     }
     _free($137);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $90 = ___cxa_allocate_exception(4);
   HEAP32[$90 >> 2] = 9776;
   ___cxa_throw($90, 15976, 602);
  }
 } while (0);
 var $53 = ___cxa_allocate_exception(4);
 HEAP32[$53 >> 2] = 9776;
 ___cxa_throw($53, 15976, 602);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e_0, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 104 | 0;
 var $4 = ($__ke - $__kb | 0) / 12 & -1;
 var $5 = sp | 0;
 do {
  if ($4 >>> 0 > 100) {
   var $8 = _malloc($4);
   if (($8 | 0) != 0) {
    var $__status_0 = $8;
    var $__stat_hold_sroa_0_1 = $8;
    break;
   }
   var $11 = ___cxa_allocate_exception(4);
   HEAP32[$11 >> 2] = 9744;
   ___cxa_throw($11, 15960, 74);
  } else {
   var $__status_0 = $5;
   var $__stat_hold_sroa_0_1 = 0;
  }
 } while (0);
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $16 = ($__kb | 0) == ($__ke | 0);
 if ($16) {
  var $__n_might_match_0_lcssa = $4;
  var $__n_does_match_0_lcssa = 0;
 } else {
  var $__n_might_match_0261 = $4;
  var $__n_does_match_0262 = 0;
  var $__st_0263 = $__status_0;
  var $__ky_0264 = $__kb;
  while (1) {
   var $__ky_0264;
   var $__st_0263;
   var $__n_does_match_0262;
   var $__n_might_match_0261;
   var $21 = HEAPU8[$__ky_0264];
   if (($21 & 1 | 0) == 0) {
    var $29 = $21 >>> 1;
   } else {
    var $29 = HEAP32[$__ky_0264 + 4 >> 2];
   }
   var $29;
   if (($29 | 0) == 0) {
    HEAP8[$__st_0263] = 2;
    var $__n_does_match_1 = $__n_does_match_0262 + 1 | 0;
    var $__n_might_match_1 = $__n_might_match_0261 - 1 | 0;
   } else {
    HEAP8[$__st_0263] = 1;
    var $__n_does_match_1 = $__n_does_match_0262;
    var $__n_might_match_1 = $__n_might_match_0261;
   }
   var $__n_might_match_1;
   var $__n_does_match_1;
   var $36 = $__ky_0264 + 12 | 0;
   if (($36 | 0) == ($__ke | 0)) {
    var $__n_might_match_0_lcssa = $__n_might_match_1;
    var $__n_does_match_0_lcssa = $__n_does_match_1;
    break;
   } else {
    var $__n_might_match_0261 = $__n_might_match_1;
    var $__n_does_match_0262 = $__n_does_match_1;
    var $__st_0263 = $__st_0263 + 1 | 0;
    var $__ky_0264 = $36;
   }
  }
 }
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $17 = $__b | 0;
 var $18 = $__ct;
 var $__indx_0 = 0;
 var $__n_does_match_2 = $__n_does_match_0_lcssa;
 var $__n_might_match_2 = $__n_might_match_0_lcssa;
 var $__e_sroa_0_0 = $__e_0;
 L498 : while (1) {
  var $__e_sroa_0_0;
  var $__n_might_match_2;
  var $__n_does_match_2;
  var $__indx_0;
  var $39 = HEAP32[$17 >> 2];
  do {
   if (($39 | 0) == 0) {
    var $57 = 0;
   } else {
    var $43 = HEAP32[$39 + 12 >> 2];
    if (($43 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) {
     var $_0208 = FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 36 >> 2]]($39);
    } else {
     var $_0208 = HEAP32[$43 >> 2];
    }
    var $_0208;
    if (($_0208 | 0) == -1) {
     HEAP32[$17 >> 2] = 0;
     var $57 = 0;
     break;
    } else {
     var $57 = HEAP32[$17 >> 2];
     break;
    }
   }
  } while (0);
  var $57;
  var $58 = ($57 | 0) == 0;
  if (($__e_sroa_0_0 | 0) == 0) {
   var $75 = $57;
   var $__e_sroa_0_2 = 0;
  } else {
   var $62 = HEAP32[$__e_sroa_0_0 + 12 >> 2];
   if (($62 | 0) == (HEAP32[$__e_sroa_0_0 + 16 >> 2] | 0)) {
    var $_0207 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_0 >> 2] + 36 >> 2]]($__e_sroa_0_0);
   } else {
    var $_0207 = HEAP32[$62 >> 2];
   }
   var $_0207;
   var $75 = HEAP32[$17 >> 2];
   var $__e_sroa_0_2 = ($_0207 | 0) == -1 ? 0 : $__e_sroa_0_0;
  }
  var $__e_sroa_0_2;
  var $75;
  var $76 = ($__e_sroa_0_2 | 0) == 0;
  if (!(($58 ^ $76) & ($__n_might_match_2 | 0) != 0)) {
   break;
  }
  var $81 = HEAP32[$75 + 12 >> 2];
  if (($81 | 0) == (HEAP32[$75 + 16 >> 2] | 0)) {
   var $_0206 = FUNCTION_TABLE[HEAP32[HEAP32[$75 >> 2] + 36 >> 2]]($75);
  } else {
   var $_0206 = HEAP32[$81 >> 2];
  }
  var $_0206;
  if ($__case_sensitive) {
   var $__c_0 = $_0206;
  } else {
   var $__c_0 = FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 28 >> 2]]($__ct, $_0206);
  }
  var $__c_0;
  var $_pre3 = $__indx_0 + 1 | 0;
  if ($16) {
   var $__indx_0 = $_pre3;
   var $__n_does_match_2 = $__n_does_match_2;
   var $__n_might_match_2 = $__n_might_match_2;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  }
  L526 : do {
   if ($__case_sensitive) {
    var $__n_might_match_3231_us = $__n_might_match_2;
    var $__n_does_match_3232_us = $__n_does_match_2;
    var $__st_1233_us = $__status_0;
    var $__consume_0_off0235_us = 0;
    var $__ky1_0236_us = $__kb;
    while (1) {
     var $__ky1_0236_us;
     var $__consume_0_off0235_us;
     var $__st_1233_us;
     var $__n_does_match_3232_us;
     var $__n_might_match_3231_us;
     do {
      if ((HEAP8[$__st_1233_us] | 0) == 1) {
       var $102 = HEAP8[$__ky1_0236_us];
       if (($102 & 1) == 0) {
        var $110 = $__ky1_0236_us + 4 | 0;
       } else {
        var $110 = HEAP32[$__ky1_0236_us + 8 >> 2];
       }
       var $110;
       if (($__c_0 | 0) != (HEAP32[$110 + ($__indx_0 << 2) >> 2] | 0)) {
        HEAP8[$__st_1233_us] = 0;
        var $__consume_1_off0_us = $__consume_0_off0235_us;
        var $__n_does_match_4_us = $__n_does_match_3232_us;
        var $__n_might_match_4_us = $__n_might_match_3231_us - 1 | 0;
        break;
       }
       var $117 = $102 & 255;
       if (($117 & 1 | 0) == 0) {
        var $125 = $117 >>> 1;
       } else {
        var $125 = HEAP32[$__ky1_0236_us + 4 >> 2];
       }
       var $125;
       if (($125 | 0) != ($_pre3 | 0)) {
        var $__consume_1_off0_us = 1;
        var $__n_does_match_4_us = $__n_does_match_3232_us;
        var $__n_might_match_4_us = $__n_might_match_3231_us;
        break;
       }
       HEAP8[$__st_1233_us] = 2;
       var $__consume_1_off0_us = 1;
       var $__n_does_match_4_us = $__n_does_match_3232_us + 1 | 0;
       var $__n_might_match_4_us = $__n_might_match_3231_us - 1 | 0;
      } else {
       var $__consume_1_off0_us = $__consume_0_off0235_us;
       var $__n_does_match_4_us = $__n_does_match_3232_us;
       var $__n_might_match_4_us = $__n_might_match_3231_us;
      }
     } while (0);
     var $__n_might_match_4_us;
     var $__n_does_match_4_us;
     var $__consume_1_off0_us;
     var $131 = $__ky1_0236_us + 12 | 0;
     if (($131 | 0) == ($__ke | 0)) {
      var $__n_might_match_3_lcssa = $__n_might_match_4_us;
      var $__n_does_match_3_lcssa = $__n_does_match_4_us;
      var $__consume_0_off0_lcssa = $__consume_1_off0_us;
      break L526;
     }
     var $__n_might_match_3231_us = $__n_might_match_4_us;
     var $__n_does_match_3232_us = $__n_does_match_4_us;
     var $__st_1233_us = $__st_1233_us + 1 | 0;
     var $__consume_0_off0235_us = $__consume_1_off0_us;
     var $__ky1_0236_us = $131;
    }
   } else {
    var $__n_might_match_3231 = $__n_might_match_2;
    var $__n_does_match_3232 = $__n_does_match_2;
    var $__st_1233 = $__status_0;
    var $__consume_0_off0235 = 0;
    var $__ky1_0236 = $__kb;
    while (1) {
     var $__ky1_0236;
     var $__consume_0_off0235;
     var $__st_1233;
     var $__n_does_match_3232;
     var $__n_might_match_3231;
     do {
      if ((HEAP8[$__st_1233] | 0) == 1) {
       var $137 = $__ky1_0236;
       if ((HEAP8[$137] & 1) == 0) {
        var $147 = $__ky1_0236 + 4 | 0;
       } else {
        var $147 = HEAP32[$__ky1_0236 + 8 >> 2];
       }
       var $147;
       if (($__c_0 | 0) != (FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 28 >> 2]]($__ct, HEAP32[$147 + ($__indx_0 << 2) >> 2]) | 0)) {
        HEAP8[$__st_1233] = 0;
        var $__consume_1_off0 = $__consume_0_off0235;
        var $__n_does_match_4 = $__n_does_match_3232;
        var $__n_might_match_4 = $__n_might_match_3231 - 1 | 0;
        break;
       }
       var $157 = HEAPU8[$137];
       if (($157 & 1 | 0) == 0) {
        var $165 = $157 >>> 1;
       } else {
        var $165 = HEAP32[$__ky1_0236 + 4 >> 2];
       }
       var $165;
       if (($165 | 0) != ($_pre3 | 0)) {
        var $__consume_1_off0 = 1;
        var $__n_does_match_4 = $__n_does_match_3232;
        var $__n_might_match_4 = $__n_might_match_3231;
        break;
       }
       HEAP8[$__st_1233] = 2;
       var $__consume_1_off0 = 1;
       var $__n_does_match_4 = $__n_does_match_3232 + 1 | 0;
       var $__n_might_match_4 = $__n_might_match_3231 - 1 | 0;
      } else {
       var $__consume_1_off0 = $__consume_0_off0235;
       var $__n_does_match_4 = $__n_does_match_3232;
       var $__n_might_match_4 = $__n_might_match_3231;
      }
     } while (0);
     var $__n_might_match_4;
     var $__n_does_match_4;
     var $__consume_1_off0;
     var $173 = $__ky1_0236 + 12 | 0;
     if (($173 | 0) == ($__ke | 0)) {
      var $__n_might_match_3_lcssa = $__n_might_match_4;
      var $__n_does_match_3_lcssa = $__n_does_match_4;
      var $__consume_0_off0_lcssa = $__consume_1_off0;
      break L526;
     }
     var $__n_might_match_3231 = $__n_might_match_4;
     var $__n_does_match_3232 = $__n_does_match_4;
     var $__st_1233 = $__st_1233 + 1 | 0;
     var $__consume_0_off0235 = $__consume_1_off0;
     var $__ky1_0236 = $173;
    }
   }
  } while (0);
  var $__consume_0_off0_lcssa;
  var $__n_does_match_3_lcssa;
  var $__n_might_match_3_lcssa;
  if (!$__consume_0_off0_lcssa) {
   var $__indx_0 = $_pre3;
   var $__n_does_match_2 = $__n_does_match_3_lcssa;
   var $__n_might_match_2 = $__n_might_match_3_lcssa;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  }
  var $177 = HEAP32[$17 >> 2];
  var $178 = $177 + 12 | 0;
  var $179 = HEAP32[$178 >> 2];
  if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$177 >> 2] + 40 >> 2]]($177);
  } else {
   HEAP32[$178 >> 2] = $179 + 4;
  }
  if (($__n_does_match_3_lcssa + $__n_might_match_3_lcssa | 0) >>> 0 < 2) {
   var $__indx_0 = $_pre3;
   var $__n_does_match_2 = $__n_does_match_3_lcssa;
   var $__n_might_match_2 = $__n_might_match_3_lcssa;
   var $__e_sroa_0_0 = $__e_sroa_0_2;
   continue;
  } else {
   var $__n_does_match_5245 = $__n_does_match_3_lcssa;
   var $__st_2246 = $__status_0;
   var $__ky2_0247 = $__kb;
  }
  while (1) {
   var $__ky2_0247;
   var $__st_2246;
   var $__n_does_match_5245;
   do {
    if ((HEAP8[$__st_2246] | 0) == 2) {
     var $197 = HEAPU8[$__ky2_0247];
     if (($197 & 1 | 0) == 0) {
      var $205 = $197 >>> 1;
     } else {
      var $205 = HEAP32[$__ky2_0247 + 4 >> 2];
     }
     var $205;
     if (($205 | 0) == ($_pre3 | 0)) {
      var $__n_does_match_6 = $__n_does_match_5245;
      break;
     }
     HEAP8[$__st_2246] = 0;
     var $__n_does_match_6 = $__n_does_match_5245 - 1 | 0;
    } else {
     var $__n_does_match_6 = $__n_does_match_5245;
    }
   } while (0);
   var $__n_does_match_6;
   var $210 = $__ky2_0247 + 12 | 0;
   if (($210 | 0) == ($__ke | 0)) {
    var $__indx_0 = $_pre3;
    var $__n_does_match_2 = $__n_does_match_6;
    var $__n_might_match_2 = $__n_might_match_3_lcssa;
    var $__e_sroa_0_0 = $__e_sroa_0_2;
    continue L498;
   } else {
    var $__n_does_match_5245 = $__n_does_match_6;
    var $__st_2246 = $__st_2246 + 1 | 0;
    var $__ky2_0247 = $210;
   }
  }
 }
 do {
  if (($75 | 0) == 0) {
   var $231 = 1;
  } else {
   var $217 = HEAP32[$75 + 12 >> 2];
   if (($217 | 0) == (HEAP32[$75 + 16 >> 2] | 0)) {
    var $_0204 = FUNCTION_TABLE[HEAP32[HEAP32[$75 >> 2] + 36 >> 2]]($75);
   } else {
    var $_0204 = HEAP32[$217 >> 2];
   }
   var $_0204;
   if (($_0204 | 0) == -1) {
    HEAP32[$17 >> 2] = 0;
    var $231 = 1;
    break;
   } else {
    var $231 = (HEAP32[$17 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 var $231;
 do {
  if ($76) {
   label = 517;
  } else {
   var $234 = HEAP32[$__e_sroa_0_2 + 12 >> 2];
   if (($234 | 0) == (HEAP32[$__e_sroa_0_2 + 16 >> 2] | 0)) {
    var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_2 >> 2] + 36 >> 2]]($__e_sroa_0_2);
   } else {
    var $_0 = HEAP32[$234 >> 2];
   }
   var $_0;
   if (($_0 | 0) == -1) {
    label = 517;
    break;
   }
   if (!$231) {
    label = 519;
   }
  }
 } while (0);
 if (label == 517) {
  if ($231) {
   label = 519;
  }
 }
 if (label == 519) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 L603 : do {
  if ($16) {
   label = 524;
  } else {
   var $_0209225 = $__kb;
   var $__st_3226 = $__status_0;
   while (1) {
    var $__st_3226;
    var $_0209225;
    if ((HEAP8[$__st_3226] | 0) == 2) {
     var $_0209224 = $_0209225;
     break L603;
    }
    var $253 = $_0209225 + 12 | 0;
    if (($253 | 0) == ($__ke | 0)) {
     label = 524;
     break L603;
    }
    var $_0209225 = $253;
    var $__st_3226 = $__st_3226 + 1 | 0;
   }
  }
 } while (0);
 if (label == 524) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  var $_0209224 = $__ke;
 }
 var $_0209224;
 if (($__stat_hold_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return $_0209224;
 }
 _free($__stat_hold_sroa_0_1);
 STACKTOP = sp;
 return $_0209224;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var $1 = HEAP32[$__a_end >> 2];
 var $2 = ($1 | 0) == ($__a | 0);
 do {
  if ($2) {
   var $6 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
   if (!$6) {
    if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1;
   HEAP8[$__a] = $6 ? 43 : 45;
   HEAP32[$__dc >> 2] = 0;
   var $_049 = 0;
   var $_049;
   return $_049;
  }
 } while (0);
 var $17 = HEAPU8[$__grouping];
 if (($17 & 1 | 0) == 0) {
  var $25 = $17 >>> 1;
 } else {
  var $25 = HEAP32[$__grouping + 4 >> 2];
 }
 var $25;
 if (($25 | 0) != 0 & ($__ct | 0) == ($__thousands_sep | 0)) {
  var $29 = HEAP32[$__g_end >> 2];
  if (($29 - $__g | 0) >= 160) {
   var $_049 = 0;
   var $_049;
   return $_049;
  }
  var $35 = HEAP32[$__dc >> 2];
  HEAP32[$__g_end >> 2] = $29 + 4;
  HEAP32[$29 >> 2] = $35;
  HEAP32[$__dc >> 2] = 0;
  var $_049 = 0;
  var $_049;
  return $_049;
 }
 var $38 = $__atoms + 104 | 0;
 var $_0 = $__atoms;
 while (1) {
  var $_0;
  if (($_0 | 0) == ($38 | 0)) {
   var $_0_lcssa = $38;
   break;
  }
  if ((HEAP32[$_0 >> 2] | 0) == ($__ct | 0)) {
   var $_0_lcssa = $_0;
   break;
  } else {
   var $_0 = $_0 + 4 | 0;
  }
 }
 var $_0_lcssa;
 var $47 = $_0_lcssa - $__atoms | 0;
 var $48 = $47 >> 2;
 if (($47 | 0) > 92) {
  var $_049 = -1;
  var $_049;
  return $_049;
 }
 do {
  if (($__base | 0) == 16) {
   if (($47 | 0) < 88) {
    break;
   }
   if ($2) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   if (($1 - $__a | 0) >= 3) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   if ((HEAP8[$1 - 1 | 0] | 0) != 48) {
    var $_049 = -1;
    var $_049;
    return $_049;
   }
   HEAP32[$__dc >> 2] = 0;
   var $67 = HEAP8[$48 + 17648 | 0];
   var $68 = HEAP32[$__a_end >> 2];
   HEAP32[$__a_end >> 2] = $68 + 1;
   HEAP8[$68] = $67;
   var $_049 = 0;
   var $_049;
   return $_049;
  } else if (($__base | 0) == 8 | ($__base | 0) == 10) {
   if (($48 | 0) < ($__base | 0)) {
    break;
   } else {
    var $_049 = -1;
   }
   var $_049;
   return $_049;
  }
 } while (0);
 var $72 = HEAP8[$48 + 17648 | 0];
 HEAP32[$__a_end >> 2] = $1 + 1;
 HEAP8[$1] = $72;
 HEAP32[$__dc >> 2] = HEAP32[$__dc >> 2] + 1;
 var $_049 = 0;
 var $_049;
 return $_049;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L669 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 585;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 585;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L669;
     }
    }
   }
  } while (0);
  if (label == 585) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 630;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 630;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 632;
     break;
    }
   }
  }
 } while (0);
 if (label == 630) {
  if ($183) {
   label = 632;
  }
 }
 if (label == 632) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__p_i_i_i15 = sp;
 var $__p_i_i_i = sp + 16;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $11 = HEAP32[21564 >> 2] - 1 | 0;
 var $13 = $2 + 12 | 0;
 var $16 = $2 + 8 | 0;
 var $17 = HEAP32[$16 >> 2];
 do {
  if (HEAP32[$13 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 48 >> 2]]($24, 17648, 17674, $__atoms);
   if ((HEAP32[21176 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i15 >> 2] = 21176;
    HEAP32[$__p_i_i_i15 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i15 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i15);
   }
   var $39 = HEAP32[21180 >> 2] - 1 | 0;
   var $41 = HEAP32[$16 >> 2];
   do {
    if (HEAP32[$13 >> 2] - $41 >> 2 >>> 0 > $39 >>> 0) {
     var $48 = HEAP32[$41 + ($39 << 2) >> 2];
     if (($48 | 0) == 0) {
      break;
     }
     var $52 = $48;
     HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 16 >> 2]]($52);
     FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 20 >> 2]]($agg_result, $52);
     var $63 = $2 + 4 | 0;
     if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
      STACKTOP = sp;
      return;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $50 = ___cxa_allocate_exception(4);
   HEAP32[$50 >> 2] = 9776;
   ___cxa_throw($50, 15976, 602);
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L788 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 687;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 687;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L788;
     }
    }
   }
  } while (0);
  if (label == 687) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 var $163$0 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 HEAP32[$__v >> 2] = $163$0;
 HEAP32[$__v + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 732;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 732;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 734;
     break;
    }
   }
  }
 } while (0);
 if (label == 732) {
  if ($183) {
   label = 734;
  }
 }
 if (label == 734) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L883 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 766;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 766;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L883;
     }
    }
   }
  } while (0);
  if (label == 766) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 811;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 811;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 813;
     break;
    }
   }
  }
 } while (0);
 if (label == 811) {
  if ($183) {
   label = 813;
  }
 }
 if (label == 813) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L978 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 845;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 845;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L978;
     }
    }
   }
  } while (0);
  if (label == 845) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 890;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 890;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 892;
     break;
    }
   }
  }
 } while (0);
 if (label == 890) {
  if ($183) {
   label = 892;
  }
 }
 if (label == 892) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L1073 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 924;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 924;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L1073;
     }
    }
   }
  } while (0);
  if (label == 924) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 969;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 969;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 971;
     break;
    }
   }
  }
 } while (0);
 if (label == 969) {
  if ($183) {
   label = 971;
  }
 }
 if (label == 971) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__atoms = sp;
 var $__thousands_sep = sp + 104;
 var $__grouping = sp + 112;
 var $__buf = sp + 128;
 var $1 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($4 | 0) == 8) {
  var $_0_i = 16;
 } else if (($4 | 0) == 0) {
  var $_0_i = 0;
 } else if (($4 | 0) == 64) {
  var $_0_i = 8;
 } else {
  var $_0_i = 10;
 }
 var $_0_i;
 var $8 = $__atoms | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $8, $__thousands_sep);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 var $9 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$1] & 1) == 0) {
  var $17 = $9 + 1 | 0;
  var $18 = $17;
  var $_pre_phi = $17;
  var $_pre_phi164 = $__buf + 8 | 0;
 } else {
  var $14 = $__buf + 8 | 0;
  var $18 = HEAP32[$14 >> 2];
  var $_pre_phi = $9 + 1 | 0;
  var $_pre_phi164 = $14;
 }
 var $_pre_phi164;
 var $_pre_phi;
 var $18;
 HEAP32[$__a_end >> 2] = $18;
 var $19 = $__g | 0;
 HEAP32[$__g_end >> 2] = $19;
 HEAP32[$__dc >> 2] = 0;
 var $20 = $__b | 0;
 var $21 = $__e | 0;
 var $22 = $__buf | 0;
 var $23 = $__buf + 4 | 0;
 var $24 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $18;
 var $25 = HEAP32[$20 >> 2];
 L1168 : while (1) {
  var $25;
  var $__a_0;
  do {
   if (($25 | 0) == 0) {
    var $43 = 0;
   } else {
    var $29 = HEAP32[$25 + 12 >> 2];
    if (($29 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) {
     var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 36 >> 2]]($25);
    } else {
     var $_0155 = HEAP32[$29 >> 2];
    }
    var $_0155;
    if (($_0155 | 0) != -1) {
     var $43 = $25;
     break;
    }
    HEAP32[$20 >> 2] = 0;
    var $43 = 0;
   }
  } while (0);
  var $43;
  var $44 = ($43 | 0) == 0;
  var $45 = HEAP32[$21 >> 2];
  do {
   if (($45 | 0) == 0) {
    label = 1003;
   } else {
    var $49 = HEAP32[$45 + 12 >> 2];
    if (($49 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) {
     var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 36 >> 2]]($45);
    } else {
     var $_0154 = HEAP32[$49 >> 2];
    }
    var $_0154;
    if (($_0154 | 0) == -1) {
     HEAP32[$21 >> 2] = 0;
     label = 1003;
     break;
    } else {
     if ($44) {
      var $64 = $45;
      var $63 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $140 = $45;
      var $139 = 0;
      break L1168;
     }
    }
   }
  } while (0);
  if (label == 1003) {
   label = 0;
   if ($44) {
    var $__a_2 = $__a_0;
    var $140 = 0;
    var $139 = 1;
    break;
   } else {
    var $64 = 0;
    var $63 = 1;
   }
  }
  var $63;
  var $64;
  var $70 = HEAPU8[$1];
  var $72 = ($70 & 1 | 0) == 0;
  var $73 = HEAP32[$23 >> 2];
  var $74 = $70 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($72 ? $74 : $73) | 0)) {
   var $_ = $72 ? $74 : $73;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$1] & 1) == 0) {
    var $84 = 10;
   } else {
    var $84 = (HEAP32[$22 >> 2] & -2) - 1 | 0;
   }
   var $84;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $84);
   if ((HEAP8[$1] & 1) == 0) {
    var $90 = $_pre_phi;
   } else {
    var $90 = HEAP32[$_pre_phi164 >> 2];
   }
   var $90;
   HEAP32[$__a_end >> 2] = $90 + $_;
   var $__a_1 = $90;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $110 = $43 + 12 | 0;
  var $111 = HEAP32[$110 >> 2];
  var $112 = $43 + 16 | 0;
  if (($111 | 0) == (HEAP32[$112 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
  } else {
   var $_0 = HEAP32[$111 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, $_0_i, $__a_1, $__a_end, $__dc, $24, $__grouping, $19, $__g_end, $8) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $140 = $64;
   var $139 = $63;
   break;
  }
  var $127 = HEAP32[$110 >> 2];
  if (($127 | 0) == (HEAP32[$112 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 40 >> 2]]($43);
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  } else {
   HEAP32[$110 >> 2] = $127 + 4;
   var $__a_0 = $__a_1;
   var $25 = $43;
   continue;
  }
 }
 var $139;
 var $140;
 var $__a_2;
 var $141 = $__grouping;
 var $143 = HEAPU8[$141];
 if (($143 & 1 | 0) == 0) {
  var $151 = $143 >>> 1;
 } else {
  var $151 = HEAP32[$__grouping + 4 >> 2];
 }
 var $151;
 do {
  if (($151 | 0) != 0) {
   var $154 = HEAP32[$__g_end >> 2];
   if (($154 - $__g | 0) >= 160) {
    break;
   }
   var $160 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $154 + 4;
   HEAP32[$154 >> 2] = $160;
  }
 } while (0);
 var $163$0 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2, HEAP32[$__a_end >> 2], $__err, $_0_i);
 HEAP32[$__v >> 2] = $163$0;
 HEAP32[$__v + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $19, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($44) {
   var $182 = 0;
  } else {
   var $168 = HEAP32[$43 + 12 >> 2];
   if (($168 | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
    var $_0157 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($43);
   } else {
    var $_0157 = HEAP32[$168 >> 2];
   }
   var $_0157;
   if (($_0157 | 0) != -1) {
    var $182 = $43;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   var $182 = 0;
  }
 } while (0);
 var $182;
 var $183 = ($182 | 0) == 0;
 do {
  if ($139) {
   label = 1048;
  } else {
   var $186 = HEAP32[$140 + 12 >> 2];
   if (($186 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
    var $_0156 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
   } else {
    var $_0156 = HEAP32[$186 >> 2];
   }
   var $_0156;
   if (($_0156 | 0) == -1) {
    HEAP32[$21 >> 2] = 0;
    label = 1048;
    break;
   } else {
    if ($183 ^ ($140 | 0) == 0) {
     break;
    } else {
     label = 1050;
     break;
    }
   }
  }
 } while (0);
 if (label == 1048) {
  if ($183) {
   label = 1050;
  }
 }
 if (label == 1050) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $182;
 do {
  if ((HEAP8[$1] & 1) != 0) {
   var $211 = HEAP32[$__buf + 8 >> 2];
   if (($211 | 0) == 0) {
    break;
   }
   _free($211);
  }
 } while (0);
 if ((HEAP8[$141] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $219 = HEAP32[$__grouping + 8 >> 2];
 if (($219 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($219);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 128;
 var $__thousands_sep = sp + 136;
 var $__grouping = sp + 144;
 var $__buf = sp + 160;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi163 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi163 = $7;
 }
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP32[$__decimal_point >> 2];
 var $18 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L1258 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $37 = 0;
   } else {
    var $23 = HEAP32[$19 + 12 >> 2];
    if (($23 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) {
     var $_0153 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19);
    } else {
     var $_0153 = HEAP32[$23 >> 2];
    }
    var $_0153;
    if (($_0153 | 0) != -1) {
     var $37 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $37 = 0;
   }
  } while (0);
  var $37;
  var $38 = ($37 | 0) == 0;
  var $39 = HEAP32[$14 >> 2];
  do {
   if (($39 | 0) == 0) {
    label = 1078;
   } else {
    var $43 = HEAP32[$39 + 12 >> 2];
    if (($43 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) {
     var $_0152 = FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 36 >> 2]]($39);
    } else {
     var $_0152 = HEAP32[$43 >> 2];
    }
    var $_0152;
    if (($_0152 | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 1078;
     break;
    } else {
     if ($38) {
      var $58 = $39;
      var $57 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $134 = $39;
      var $133 = 0;
      break L1258;
     }
    }
   }
  } while (0);
  if (label == 1078) {
   label = 0;
   if ($38) {
    var $__a_2 = $__a_0;
    var $134 = 0;
    var $133 = 1;
    break;
   } else {
    var $58 = 0;
    var $57 = 1;
   }
  }
  var $57;
  var $58;
  var $64 = HEAPU8[$0];
  var $66 = ($64 & 1 | 0) == 0;
  var $67 = HEAP32[$16 >> 2];
  var $68 = $64 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($66 ? $68 : $67) | 0)) {
   var $_ = $66 ? $68 : $67;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $78 = 10;
   } else {
    var $78 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $78;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $78);
   if ((HEAP8[$0] & 1) == 0) {
    var $84 = $_pre_phi;
   } else {
    var $84 = HEAP32[$_pre_phi163 >> 2];
   }
   var $84;
   HEAP32[$__a_end >> 2] = $84 + $_;
   var $__a_1 = $84;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $104 = $37 + 12 | 0;
  var $105 = HEAP32[$104 >> 2];
  var $106 = $37 + 16 | 0;
  if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
  } else {
   var $_0 = HEAP32[$105 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $134 = $58;
   var $133 = $57;
   break;
  }
  var $121 = HEAP32[$104 >> 2];
  if (($121 | 0) == (HEAP32[$106 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 40 >> 2]]($37);
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  } else {
   HEAP32[$104 >> 2] = $121 + 4;
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  }
 }
 var $133;
 var $134;
 var $__a_2;
 var $135 = $__grouping;
 var $137 = HEAPU8[$135];
 if (($137 & 1 | 0) == 0) {
  var $145 = $137 >>> 1;
 } else {
  var $145 = HEAP32[$__grouping + 4 >> 2];
 }
 var $145;
 do {
  if (($145 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $152 = HEAP32[$__g_end >> 2];
   if (($152 - $__g | 0) >= 160) {
    break;
   }
   var $158 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $152 + 4;
   HEAP32[$152 >> 2] = $158;
  }
 } while (0);
 HEAPF32[$__v >> 2] = __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($38) {
   var $180 = 0;
  } else {
   var $166 = HEAP32[$37 + 12 >> 2];
   if (($166 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
   } else {
    var $_0155 = HEAP32[$166 >> 2];
   }
   var $_0155;
   if (($_0155 | 0) != -1) {
    var $180 = $37;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $180 = 0;
  }
 } while (0);
 var $180;
 var $181 = ($180 | 0) == 0;
 do {
  if ($133) {
   label = 1124;
  } else {
   var $184 = HEAP32[$134 + 12 >> 2];
   if (($184 | 0) == (HEAP32[$134 + 16 >> 2] | 0)) {
    var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$134 >> 2] + 36 >> 2]]($134);
   } else {
    var $_0154 = HEAP32[$184 >> 2];
   }
   var $_0154;
   if (($_0154 | 0) == -1) {
    HEAP32[$14 >> 2] = 0;
    label = 1124;
    break;
   } else {
    if ($181 ^ ($134 | 0) == 0) {
     break;
    } else {
     label = 1126;
     break;
    }
   }
  }
 } while (0);
 if (label == 1124) {
  if ($181) {
   label = 1126;
  }
 }
 if (label == 1126) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $180;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $209 = HEAP32[$__buf + 8 >> 2];
   if (($209 | 0) == 0) {
    break;
   }
   _free($209);
  }
 } while (0);
 if ((HEAP8[$135] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $217 = HEAP32[$__grouping + 8 >> 2];
 if (($217 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($217);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 if (($__ct | 0) == ($__decimal_point | 0)) {
  if ((HEAP8[$__in_units] & 1) == 0) {
   var $_082 = -1;
   var $_082;
   return $_082;
  }
  HEAP8[$__in_units] = 0;
  var $7 = HEAP32[$__a_end >> 2];
  HEAP32[$__a_end >> 2] = $7 + 1;
  HEAP8[$7] = 46;
  var $11 = HEAPU8[$__grouping];
  if (($11 & 1 | 0) == 0) {
   var $19 = $11 >>> 1;
  } else {
   var $19 = HEAP32[$__grouping + 4 >> 2];
  }
  var $19;
  if (($19 | 0) == 0) {
   var $_082 = 0;
   var $_082;
   return $_082;
  }
  var $22 = HEAP32[$__g_end >> 2];
  if (($22 - $__g | 0) >= 160) {
   var $_082 = 0;
   var $_082;
   return $_082;
  }
  var $28 = HEAP32[$__dc >> 2];
  HEAP32[$__g_end >> 2] = $22 + 4;
  HEAP32[$22 >> 2] = $28;
  var $_082 = 0;
  var $_082;
  return $_082;
 }
 do {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   var $35 = HEAPU8[$__grouping];
   if (($35 & 1 | 0) == 0) {
    var $43 = $35 >>> 1;
   } else {
    var $43 = HEAP32[$__grouping + 4 >> 2];
   }
   var $43;
   if (($43 | 0) == 0) {
    break;
   }
   if ((HEAP8[$__in_units] & 1) == 0) {
    var $_082 = -1;
    var $_082;
    return $_082;
   }
   var $50 = HEAP32[$__g_end >> 2];
   if (($50 - $__g | 0) >= 160) {
    var $_082 = 0;
    var $_082;
    return $_082;
   }
   var $56 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $50 + 4;
   HEAP32[$50 >> 2] = $56;
   HEAP32[$__dc >> 2] = 0;
   var $_082 = 0;
   var $_082;
   return $_082;
  }
 } while (0);
 var $59 = $__atoms + 128 | 0;
 var $_0 = $__atoms;
 while (1) {
  var $_0;
  if (($_0 | 0) == ($59 | 0)) {
   var $_0_lcssa = $59;
   break;
  }
  if ((HEAP32[$_0 >> 2] | 0) == ($__ct | 0)) {
   var $_0_lcssa = $_0;
   break;
  } else {
   var $_0 = $_0 + 4 | 0;
  }
 }
 var $_0_lcssa;
 var $68 = $_0_lcssa - $__atoms | 0;
 var $69 = $68 >> 2;
 if (($68 | 0) > 124) {
  var $_082 = -1;
  var $_082;
  return $_082;
 }
 var $73 = HEAP8[$69 + 17648 | 0];
 do {
  if (($69 | 0) == 25 | ($69 | 0) == 24) {
   var $75 = HEAP32[$__a_end >> 2];
   do {
    if (($75 | 0) != ($__a | 0)) {
     if ((HEAP8[$75 - 1 | 0] & 95 | 0) == (HEAP8[$__exp] & 127 | 0)) {
      break;
     } else {
      var $_082 = -1;
     }
     var $_082;
     return $_082;
    }
   } while (0);
   HEAP32[$__a_end >> 2] = $75 + 1;
   HEAP8[$75] = $73;
   var $_082 = 0;
   var $_082;
   return $_082;
  } else if (($69 | 0) == 22 | ($69 | 0) == 23) {
   HEAP8[$__exp] = 80;
  } else {
   var $92 = HEAP8[$__exp];
   if (($73 & 95 | 0) != ($92 << 24 >> 24 | 0)) {
    break;
   }
   HEAP8[$__exp] = $92 | -128;
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   HEAP8[$__in_units] = 0;
   var $103 = HEAPU8[$__grouping];
   if (($103 & 1 | 0) == 0) {
    var $111 = $103 >>> 1;
   } else {
    var $111 = HEAP32[$__grouping + 4 >> 2];
   }
   var $111;
   if (($111 | 0) == 0) {
    break;
   }
   var $114 = HEAP32[$__g_end >> 2];
   if (($114 - $__g | 0) >= 160) {
    break;
   }
   var $120 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $114 + 4;
   HEAP32[$114 >> 2] = $120;
  }
 } while (0);
 var $123 = HEAP32[$__a_end >> 2];
 HEAP32[$__a_end >> 2] = $123 + 1;
 HEAP8[$123] = $73;
 if (($68 | 0) > 84) {
  var $_082 = 0;
  var $_082;
  return $_082;
 }
 HEAP32[$__dc >> 2] = HEAP32[$__dc >> 2] + 1;
 var $_082 = 0;
 var $_082;
 return $_082;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 128;
 var $__thousands_sep = sp + 136;
 var $__grouping = sp + 144;
 var $__buf = sp + 160;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi163 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi163 = $7;
 }
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP32[$__decimal_point >> 2];
 var $18 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L1411 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $37 = 0;
   } else {
    var $23 = HEAP32[$19 + 12 >> 2];
    if (($23 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) {
     var $_0153 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19);
    } else {
     var $_0153 = HEAP32[$23 >> 2];
    }
    var $_0153;
    if (($_0153 | 0) != -1) {
     var $37 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $37 = 0;
   }
  } while (0);
  var $37;
  var $38 = ($37 | 0) == 0;
  var $39 = HEAP32[$14 >> 2];
  do {
   if (($39 | 0) == 0) {
    label = 1202;
   } else {
    var $43 = HEAP32[$39 + 12 >> 2];
    if (($43 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) {
     var $_0152 = FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 36 >> 2]]($39);
    } else {
     var $_0152 = HEAP32[$43 >> 2];
    }
    var $_0152;
    if (($_0152 | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 1202;
     break;
    } else {
     if ($38) {
      var $58 = $39;
      var $57 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $134 = $39;
      var $133 = 0;
      break L1411;
     }
    }
   }
  } while (0);
  if (label == 1202) {
   label = 0;
   if ($38) {
    var $__a_2 = $__a_0;
    var $134 = 0;
    var $133 = 1;
    break;
   } else {
    var $58 = 0;
    var $57 = 1;
   }
  }
  var $57;
  var $58;
  var $64 = HEAPU8[$0];
  var $66 = ($64 & 1 | 0) == 0;
  var $67 = HEAP32[$16 >> 2];
  var $68 = $64 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($66 ? $68 : $67) | 0)) {
   var $_ = $66 ? $68 : $67;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $78 = 10;
   } else {
    var $78 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $78;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $78);
   if ((HEAP8[$0] & 1) == 0) {
    var $84 = $_pre_phi;
   } else {
    var $84 = HEAP32[$_pre_phi163 >> 2];
   }
   var $84;
   HEAP32[$__a_end >> 2] = $84 + $_;
   var $__a_1 = $84;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $104 = $37 + 12 | 0;
  var $105 = HEAP32[$104 >> 2];
  var $106 = $37 + 16 | 0;
  if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
  } else {
   var $_0 = HEAP32[$105 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $134 = $58;
   var $133 = $57;
   break;
  }
  var $121 = HEAP32[$104 >> 2];
  if (($121 | 0) == (HEAP32[$106 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 40 >> 2]]($37);
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  } else {
   HEAP32[$104 >> 2] = $121 + 4;
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  }
 }
 var $133;
 var $134;
 var $__a_2;
 var $135 = $__grouping;
 var $137 = HEAPU8[$135];
 if (($137 & 1 | 0) == 0) {
  var $145 = $137 >>> 1;
 } else {
  var $145 = HEAP32[$__grouping + 4 >> 2];
 }
 var $145;
 do {
  if (($145 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $152 = HEAP32[$__g_end >> 2];
   if (($152 - $__g | 0) >= 160) {
    break;
   }
   var $158 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $152 + 4;
   HEAP32[$152 >> 2] = $158;
  }
 } while (0);
 HEAPF64[$__v >> 3] = __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($38) {
   var $180 = 0;
  } else {
   var $166 = HEAP32[$37 + 12 >> 2];
   if (($166 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
   } else {
    var $_0155 = HEAP32[$166 >> 2];
   }
   var $_0155;
   if (($_0155 | 0) != -1) {
    var $180 = $37;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $180 = 0;
  }
 } while (0);
 var $180;
 var $181 = ($180 | 0) == 0;
 do {
  if ($133) {
   label = 1248;
  } else {
   var $184 = HEAP32[$134 + 12 >> 2];
   if (($184 | 0) == (HEAP32[$134 + 16 >> 2] | 0)) {
    var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$134 >> 2] + 36 >> 2]]($134);
   } else {
    var $_0154 = HEAP32[$184 >> 2];
   }
   var $_0154;
   if (($_0154 | 0) == -1) {
    HEAP32[$14 >> 2] = 0;
    label = 1248;
    break;
   } else {
    if ($181 ^ ($134 | 0) == 0) {
     break;
    } else {
     label = 1250;
     break;
    }
   }
  }
 } while (0);
 if (label == 1248) {
  if ($181) {
   label = 1250;
  }
 }
 if (label == 1250) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $180;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $209 = HEAP32[$__buf + 8 >> 2];
   if (($209 | 0) == 0) {
    break;
   }
   _free($209);
  }
 } while (0);
 if ((HEAP8[$135] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $217 = HEAP32[$__grouping + 8 >> 2];
 if (($217 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($217);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 var $__p_i_i_i18 = sp;
 var $__p_i_i_i = sp + 16;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $11 = HEAP32[21564 >> 2] - 1 | 0;
 var $13 = $2 + 12 | 0;
 var $16 = $2 + 8 | 0;
 var $17 = HEAP32[$16 >> 2];
 do {
  if (HEAP32[$13 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 48 >> 2]]($24, 17648, 17680, $__atoms);
   if ((HEAP32[21176 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i18 >> 2] = 21176;
    HEAP32[$__p_i_i_i18 + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i18 + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i18);
   }
   var $39 = HEAP32[21180 >> 2] - 1 | 0;
   var $41 = HEAP32[$16 >> 2];
   do {
    if (HEAP32[$13 >> 2] - $41 >> 2 >>> 0 > $39 >>> 0) {
     var $48 = HEAP32[$41 + ($39 << 2) >> 2];
     if (($48 | 0) == 0) {
      break;
     }
     var $52 = $48;
     var $53 = $48;
     HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 12 >> 2]]($52);
     HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 16 >> 2]]($52);
     FUNCTION_TABLE[HEAP32[HEAP32[$48 >> 2] + 20 >> 2]]($agg_result, $52);
     var $67 = $2 + 4 | 0;
     if (((tempValue = HEAP32[$67 >> 2], HEAP32[$67 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
      STACKTOP = sp;
      return;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     STACKTOP = sp;
     return;
    }
   } while (0);
   var $50 = ___cxa_allocate_exception(4);
   HEAP32[$50 >> 2] = 9776;
   ___cxa_throw($50, 15976, 602);
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__decimal_point = sp + 128;
 var $__thousands_sep = sp + 136;
 var $__grouping = sp + 144;
 var $__buf = sp + 160;
 var $0 = $__buf;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__in_units = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__exp = STACKTOP;
 STACKTOP = STACKTOP + 1 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = sp | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $1, $__decimal_point, $__thousands_sep);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $2 = $__buf;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
 if ((HEAP8[$0] & 1) == 0) {
  var $10 = $2 + 1 | 0;
  var $11 = $10;
  var $_pre_phi = $10;
  var $_pre_phi163 = $__buf + 8 | 0;
 } else {
  var $7 = $__buf + 8 | 0;
  var $11 = HEAP32[$7 >> 2];
  var $_pre_phi = $2 + 1 | 0;
  var $_pre_phi163 = $7;
 }
 var $_pre_phi163;
 var $_pre_phi;
 var $11;
 HEAP32[$__a_end >> 2] = $11;
 var $12 = $__g | 0;
 HEAP32[$__g_end >> 2] = $12;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 var $13 = $__b | 0;
 var $14 = $__e | 0;
 var $15 = $__buf | 0;
 var $16 = $__buf + 4 | 0;
 var $17 = HEAP32[$__decimal_point >> 2];
 var $18 = HEAP32[$__thousands_sep >> 2];
 var $__a_0 = $11;
 var $19 = HEAP32[$13 >> 2];
 L1527 : while (1) {
  var $19;
  var $__a_0;
  do {
   if (($19 | 0) == 0) {
    var $37 = 0;
   } else {
    var $23 = HEAP32[$19 + 12 >> 2];
    if (($23 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) {
     var $_0153 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 36 >> 2]]($19);
    } else {
     var $_0153 = HEAP32[$23 >> 2];
    }
    var $_0153;
    if (($_0153 | 0) != -1) {
     var $37 = $19;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    var $37 = 0;
   }
  } while (0);
  var $37;
  var $38 = ($37 | 0) == 0;
  var $39 = HEAP32[$14 >> 2];
  do {
   if (($39 | 0) == 0) {
    label = 1302;
   } else {
    var $43 = HEAP32[$39 + 12 >> 2];
    if (($43 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) {
     var $_0152 = FUNCTION_TABLE[HEAP32[HEAP32[$39 >> 2] + 36 >> 2]]($39);
    } else {
     var $_0152 = HEAP32[$43 >> 2];
    }
    var $_0152;
    if (($_0152 | 0) == -1) {
     HEAP32[$14 >> 2] = 0;
     label = 1302;
     break;
    } else {
     if ($38) {
      var $58 = $39;
      var $57 = 0;
      break;
     } else {
      var $__a_2 = $__a_0;
      var $134 = $39;
      var $133 = 0;
      break L1527;
     }
    }
   }
  } while (0);
  if (label == 1302) {
   label = 0;
   if ($38) {
    var $__a_2 = $__a_0;
    var $134 = 0;
    var $133 = 1;
    break;
   } else {
    var $58 = 0;
    var $57 = 1;
   }
  }
  var $57;
  var $58;
  var $64 = HEAPU8[$0];
  var $66 = ($64 & 1 | 0) == 0;
  var $67 = HEAP32[$16 >> 2];
  var $68 = $64 >>> 1;
  if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($66 ? $68 : $67) | 0)) {
   var $_ = $66 ? $68 : $67;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
   if ((HEAP8[$0] & 1) == 0) {
    var $78 = 10;
   } else {
    var $78 = (HEAP32[$15 >> 2] & -2) - 1 | 0;
   }
   var $78;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $78);
   if ((HEAP8[$0] & 1) == 0) {
    var $84 = $_pre_phi;
   } else {
    var $84 = HEAP32[$_pre_phi163 >> 2];
   }
   var $84;
   HEAP32[$__a_end >> 2] = $84 + $_;
   var $__a_1 = $84;
  } else {
   var $__a_1 = $__a_0;
  }
  var $__a_1;
  var $104 = $37 + 12 | 0;
  var $105 = HEAP32[$104 >> 2];
  var $106 = $37 + 16 | 0;
  if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
   var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
  } else {
   var $_0 = HEAP32[$105 >> 2];
  }
  var $_0;
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0, $__in_units, $__exp, $__a_1, $__a_end, $17, $18, $__grouping, $12, $__g_end, $__dc, $1) | 0) != 0) {
   var $__a_2 = $__a_1;
   var $134 = $58;
   var $133 = $57;
   break;
  }
  var $121 = HEAP32[$104 >> 2];
  if (($121 | 0) == (HEAP32[$106 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 40 >> 2]]($37);
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  } else {
   HEAP32[$104 >> 2] = $121 + 4;
   var $__a_0 = $__a_1;
   var $19 = $37;
   continue;
  }
 }
 var $133;
 var $134;
 var $__a_2;
 var $135 = $__grouping;
 var $137 = HEAPU8[$135];
 if (($137 & 1 | 0) == 0) {
  var $145 = $137 >>> 1;
 } else {
  var $145 = HEAP32[$__grouping + 4 >> 2];
 }
 var $145;
 do {
  if (($145 | 0) != 0) {
   if ((HEAP8[$__in_units] & 1) == 0) {
    break;
   }
   var $152 = HEAP32[$__g_end >> 2];
   if (($152 - $__g | 0) >= 160) {
    break;
   }
   var $158 = HEAP32[$__dc >> 2];
   HEAP32[$__g_end >> 2] = $152 + 4;
   HEAP32[$152 >> 2] = $158;
  }
 } while (0);
 HEAPF64[$__v >> 3] = __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2, HEAP32[$__a_end >> 2], $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $12, HEAP32[$__g_end >> 2], $__err);
 do {
  if ($38) {
   var $180 = 0;
  } else {
   var $166 = HEAP32[$37 + 12 >> 2];
   if (($166 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    var $_0155 = FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 36 >> 2]]($37);
   } else {
    var $_0155 = HEAP32[$166 >> 2];
   }
   var $_0155;
   if (($_0155 | 0) != -1) {
    var $180 = $37;
    break;
   }
   HEAP32[$13 >> 2] = 0;
   var $180 = 0;
  }
 } while (0);
 var $180;
 var $181 = ($180 | 0) == 0;
 do {
  if ($133) {
   label = 1348;
  } else {
   var $184 = HEAP32[$134 + 12 >> 2];
   if (($184 | 0) == (HEAP32[$134 + 16 >> 2] | 0)) {
    var $_0154 = FUNCTION_TABLE[HEAP32[HEAP32[$134 >> 2] + 36 >> 2]]($134);
   } else {
    var $_0154 = HEAP32[$184 >> 2];
   }
   var $_0154;
   if (($_0154 | 0) == -1) {
    HEAP32[$14 >> 2] = 0;
    label = 1348;
    break;
   } else {
    if ($181 ^ ($134 | 0) == 0) {
     break;
    } else {
     label = 1350;
     break;
    }
   }
  }
 } while (0);
 if (label == 1348) {
  if ($181) {
   label = 1350;
  }
 }
 if (label == 1350) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg_result >> 2] = $180;
 do {
  if ((HEAP8[$0] & 1) != 0) {
   var $209 = HEAP32[$__buf + 8 >> 2];
   if (($209 | 0) == 0) {
    break;
   }
   _free($209);
  }
 } while (0);
 if ((HEAP8[$135] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $217 = HEAP32[$__grouping + 8 >> 2];
 if (($217 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($217);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 136 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__atoms = sp + 16;
 var $__grouping = sp + 120;
 var $__grouping170 = $__grouping;
 var $__buf = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__a_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__g = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 var $__g_end = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__dc = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__grouping170 >> 2] = 0;
 HEAP32[$__grouping170 + 4 >> 2] = 0;
 HEAP32[$__grouping170 + 8 >> 2] = 0;
 var $1 = $__buf;
 var $3 = HEAP32[$__iob + 28 >> 2];
 var $5 = $3 + 4 | 0;
 tempValue = HEAP32[$5 >> 2], HEAP32[$5 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $12 = HEAP32[21564 >> 2] - 1 | 0;
 var $18 = HEAP32[$3 + 8 >> 2];
 do {
  if (HEAP32[$3 + 12 >> 2] - $18 >> 2 >>> 0 > $12 >>> 0) {
   var $25 = HEAP32[$18 + ($12 << 2) >> 2];
   if (($25 | 0) == 0) {
    break;
   }
   var $30 = $__atoms | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$25 >> 2] + 48 >> 2]]($25, 17648, 17674, $30);
   var $37 = $3 + 4 | 0;
   if (((tempValue = HEAP32[$37 >> 2], HEAP32[$37 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
   }
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   var $46 = $__buf;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10);
   if ((HEAP8[$1] & 1) == 0) {
    var $54 = $46 + 1 | 0;
    var $55 = $54;
    var $_pre_phi = $54;
    var $_pre_phi173 = $__buf + 8 | 0;
   } else {
    var $51 = $__buf + 8 | 0;
    var $55 = HEAP32[$51 >> 2];
    var $_pre_phi = $46 + 1 | 0;
    var $_pre_phi173 = $51;
   }
   var $_pre_phi173;
   var $_pre_phi;
   var $55;
   HEAP32[$__a_end >> 2] = $55;
   var $56 = $__g | 0;
   HEAP32[$__g_end >> 2] = $56;
   HEAP32[$__dc >> 2] = 0;
   var $57 = $__b | 0;
   var $58 = $__e | 0;
   var $59 = $__buf | 0;
   var $60 = $__buf + 4 | 0;
   var $__a_0 = $55;
   var $61 = HEAP32[$57 >> 2];
   L1628 : while (1) {
    var $61;
    var $__a_0;
    do {
     if (($61 | 0) == 0) {
      var $79 = 0;
     } else {
      var $65 = HEAP32[$61 + 12 >> 2];
      if (($65 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) {
       var $_0161 = FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 36 >> 2]]($61);
      } else {
       var $_0161 = HEAP32[$65 >> 2];
      }
      var $_0161;
      if (($_0161 | 0) != -1) {
       var $79 = $61;
       break;
      }
      HEAP32[$57 >> 2] = 0;
      var $79 = 0;
     }
    } while (0);
    var $79;
    var $80 = ($79 | 0) == 0;
    var $81 = HEAP32[$58 >> 2];
    do {
     if (($81 | 0) == 0) {
      label = 1387;
     } else {
      var $85 = HEAP32[$81 + 12 >> 2];
      if (($85 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) {
       var $_0160 = FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 36 >> 2]]($81);
      } else {
       var $_0160 = HEAP32[$85 >> 2];
      }
      var $_0160;
      if (($_0160 | 0) == -1) {
       HEAP32[$58 >> 2] = 0;
       label = 1387;
       break;
      } else {
       if ($80) {
        break;
       } else {
        var $__a_2 = $__a_0;
        break L1628;
       }
      }
     }
    } while (0);
    if (label == 1387) {
     label = 0;
     if ($80) {
      var $__a_2 = $__a_0;
      break;
     }
    }
    var $104 = HEAPU8[$1];
    var $106 = ($104 & 1 | 0) == 0;
    var $107 = HEAP32[$60 >> 2];
    var $108 = $104 >>> 1;
    if ((HEAP32[$__a_end >> 2] - $__a_0 | 0) == (($106 ? $108 : $107) | 0)) {
     var $_ = $106 ? $108 : $107;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $_ << 1);
     if ((HEAP8[$1] & 1) == 0) {
      var $118 = 10;
     } else {
      var $118 = (HEAP32[$59 >> 2] & -2) - 1 | 0;
     }
     var $118;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $118);
     if ((HEAP8[$1] & 1) == 0) {
      var $124 = $_pre_phi;
     } else {
      var $124 = HEAP32[$_pre_phi173 >> 2];
     }
     var $124;
     HEAP32[$__a_end >> 2] = $124 + $_;
     var $__a_1 = $124;
    } else {
     var $__a_1 = $__a_0;
    }
    var $__a_1;
    var $150 = $79 + 12 | 0;
    var $151 = HEAP32[$150 >> 2];
    var $152 = $79 + 16 | 0;
    if (($151 | 0) == (HEAP32[$152 >> 2] | 0)) {
     var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$79 >> 2] + 36 >> 2]]($79);
    } else {
     var $_0 = HEAP32[$151 >> 2];
    }
    var $_0;
    if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0, 16, $__a_1, $__a_end, $__dc, 0, $__grouping, $56, $__g_end, $30) | 0) != 0) {
     var $__a_2 = $__a_1;
     break;
    }
    var $167 = HEAP32[$150 >> 2];
    if (($167 | 0) == (HEAP32[$152 >> 2] | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$79 >> 2] + 40 >> 2]]($79);
     var $__a_0 = $__a_1;
     var $61 = $79;
     continue;
    } else {
     HEAP32[$150 >> 2] = $167 + 4;
     var $__a_0 = $__a_1;
     var $61 = $79;
     continue;
    }
   }
   var $__a_2;
   HEAP8[$__a_2 + 3 | 0] = 0;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   var $192 = __ZNSt3__110__sscanf_lEPKcPvS1_z($__a_2, HEAP32[19888 >> 2], (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
   STACKTOP = tempVarArgs;
   if (($192 | 0) != 1) {
    HEAP32[$__err >> 2] = 4;
   }
   var $197 = HEAP32[$57 >> 2];
   do {
    if (($197 | 0) == 0) {
     var $215 = 0;
    } else {
     var $201 = HEAP32[$197 + 12 >> 2];
     if (($201 | 0) == (HEAP32[$197 + 16 >> 2] | 0)) {
      var $_0163 = FUNCTION_TABLE[HEAP32[HEAP32[$197 >> 2] + 36 >> 2]]($197);
     } else {
      var $_0163 = HEAP32[$201 >> 2];
     }
     var $_0163;
     if (($_0163 | 0) != -1) {
      var $215 = $197;
      break;
     }
     HEAP32[$57 >> 2] = 0;
     var $215 = 0;
    }
   } while (0);
   var $215;
   var $216 = ($215 | 0) == 0;
   var $217 = HEAP32[$58 >> 2];
   do {
    if (($217 | 0) == 0) {
     label = 1431;
    } else {
     var $221 = HEAP32[$217 + 12 >> 2];
     if (($221 | 0) == (HEAP32[$217 + 16 >> 2] | 0)) {
      var $_0162 = FUNCTION_TABLE[HEAP32[HEAP32[$217 >> 2] + 36 >> 2]]($217);
     } else {
      var $_0162 = HEAP32[$221 >> 2];
     }
     var $_0162;
     if (($_0162 | 0) == -1) {
      HEAP32[$58 >> 2] = 0;
      label = 1431;
      break;
     } else {
      if ($216) {
       break;
      } else {
       label = 1433;
       break;
      }
     }
    }
   } while (0);
   if (label == 1431) {
    if ($216) {
     label = 1433;
    }
   }
   if (label == 1433) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $215;
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $244 = HEAP32[$__buf + 8 >> 2];
     if (($244 | 0) == 0) {
      break;
     }
     _free($244);
    }
   } while (0);
   if ((HEAP8[$__grouping170] & 1) == 0) {
    STACKTOP = sp;
    return;
   }
   var $252 = HEAP32[$__grouping + 8 >> 2];
   if (($252 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($252);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $27 = ___cxa_allocate_exception(4);
 HEAP32[$27 >> 2] = 9776;
 ___cxa_throw($27, 15976, 602);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 24;
 var $__op = sp + 48;
 var $__oe = sp + 56;
 var $1 = sp + 64;
 var $2 = $__fmt | 0;
 HEAP8[$2] = HEAP8[9512];
 HEAP8[$2 + 1 | 0] = HEAP8[9513 | 0];
 HEAP8[$2 + 2 | 0] = HEAP8[9514 | 0];
 HEAP8[$2 + 3 | 0] = HEAP8[9515 | 0];
 HEAP8[$2 + 4 | 0] = HEAP8[9516 | 0];
 HEAP8[$2 + 5 | 0] = HEAP8[9517 | 0];
 var $3 = $__fmt + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $__fmt + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 var $scevgep = $_116_i_ph + 1 | 0;
 var $15 = $5 & 74;
 do {
  if (($15 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if (($15 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while (0);
 var $23 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $35 = __ZNSt3__112__snprintf_lEPcjPvPKcz($23, 12, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $36 = $__nar + $35 | 0;
 var $38 = HEAP32[$4 >> 2] & 176;
 do {
  if (($38 | 0) == 16) {
   var $40 = HEAP8[$23];
   if ($40 << 24 >> 24 == 45 | $40 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($35 | 0) > 1 & $40 << 24 >> 24 == 48)) {
    label = 1475;
    break;
   }
   var $48 = HEAP8[$__nar + 1 | 0];
   if (!($48 << 24 >> 24 == 120 | $48 << 24 >> 24 == 88)) {
    label = 1475;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($38 | 0) == 32) {
   var $_0_i11 = $36;
  } else {
   label = 1475;
  }
 } while (0);
 if (label == 1475) {
  var $_0_i11 = $23;
 }
 var $_0_i11;
 var $52 = $__o | 0;
 var $54 = $1 | 0;
 var $55 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$54 >> 2] = $55;
 var $58 = $55 + 4 | 0;
 tempValue = HEAP32[$58 >> 2], HEAP32[$58 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23, $_0_i11, $36, $52, $__op, $__oe, $1);
 var $61 = HEAP32[$54 >> 2];
 var $62 = $61 + 4 | 0;
 if (((tempValue = HEAP32[$62 >> 2], HEAP32[$62 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $71 = $__s | 0;
  var $72 = HEAP32[$71 >> 2];
  var $73 = HEAP32[$__op >> 2];
  var $74 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 8 >> 2]]($61 | 0);
 var $71 = $__s | 0;
 var $72 = HEAP32[$71 >> 2];
 var $73 = HEAP32[$__op >> 2];
 var $74 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $1 = sp + 16;
 var $__nm = sp + 24;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  var $10 = HEAP32[HEAP32[$this >> 2] + 24 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
  FUNCTION_TABLE[$10]($agg_result, $this, $1, $__iob, $__fl, $__v & 1);
  STACKTOP = sp;
  return;
 }
 var $17 = HEAP32[$__iob + 28 >> 2];
 var $19 = $17 + 4 | 0;
 tempValue = HEAP32[$19 >> 2], HEAP32[$19 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21184 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21184;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i);
 }
 var $26 = HEAP32[21188 >> 2] - 1 | 0;
 var $32 = HEAP32[$17 + 8 >> 2];
 do {
  if (HEAP32[$17 + 12 >> 2] - $32 >> 2 >>> 0 > $26 >>> 0) {
   var $39 = HEAP32[$32 + ($26 << 2) >> 2];
   if (($39 | 0) == 0) {
    break;
   }
   var $43 = $39;
   var $45 = $17 + 4 | 0;
   if (((tempValue = HEAP32[$45 >> 2], HEAP32[$45 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 8 >> 2]]($17);
   }
   var $55 = HEAP32[$39 >> 2];
   if ($__v) {
    FUNCTION_TABLE[HEAP32[$55 + 24 >> 2]]($__nm, $43);
   } else {
    FUNCTION_TABLE[HEAP32[$55 + 28 >> 2]]($__nm, $43);
   }
   var $63 = $__nm;
   var $64 = $__nm;
   var $65 = HEAP8[$64];
   if (($65 & 1) == 0) {
    var $72 = $63 + 1 | 0;
    var $__i_sroa_0_0_ph = $72;
    var $_pre_phi = $72;
    var $_pre_phi85 = $__nm + 8 | 0;
   } else {
    var $69 = $__nm + 8 | 0;
    var $__i_sroa_0_0_ph = HEAP32[$69 >> 2];
    var $_pre_phi = $63 + 1 | 0;
    var $_pre_phi85 = $69;
   }
   var $_pre_phi85;
   var $_pre_phi;
   var $__i_sroa_0_0_ph;
   var $73 = $__s | 0;
   var $74 = $__nm + 4 | 0;
   var $__i_sroa_0_0 = $__i_sroa_0_0_ph;
   var $75 = $65;
   while (1) {
    var $75;
    var $__i_sroa_0_0;
    var $77 = ($75 & 1) == 0;
    if ($77) {
     var $80 = $_pre_phi;
    } else {
     var $80 = HEAP32[$_pre_phi85 >> 2];
    }
    var $80;
    var $81 = $75 & 255;
    if (($__i_sroa_0_0 | 0) == ($80 + (($81 & 1 | 0) == 0 ? $81 >>> 1 : HEAP32[$74 >> 2]) | 0)) {
     break;
    }
    var $90 = HEAP8[$__i_sroa_0_0];
    var $91 = HEAP32[$73 >> 2];
    do {
     if (($91 | 0) != 0) {
      var $94 = $91 + 24 | 0;
      var $95 = HEAP32[$94 >> 2];
      if (($95 | 0) != (HEAP32[$91 + 28 >> 2] | 0)) {
       HEAP32[$94 >> 2] = $95 + 1;
       HEAP8[$95] = $90;
       break;
      }
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$91 >> 2] + 52 >> 2]]($91, $90 & 255) | 0) != -1) {
       break;
      }
      HEAP32[$73 >> 2] = 0;
     }
    } while (0);
    var $__i_sroa_0_0 = $__i_sroa_0_0 + 1 | 0;
    var $75 = HEAP8[$64];
   }
   HEAP32[$agg_result >> 2] = HEAP32[$73 >> 2];
   if ($77) {
    STACKTOP = sp;
    return;
   }
   var $141 = HEAP32[$__nm + 8 >> 2];
   if (($141 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($141);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $41 = ___cxa_allocate_exception(4);
 HEAP32[$41 >> 2] = 9776;
 ___cxa_throw($41, 15976, 602);
}
function __ZNSt3__112__snprintf_lEPcjPvPKcz($__s, $__n, $__l, $__format, varrp) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__va = sp;
 var $2 = $__va;
 HEAP32[$2 >> 2] = varrp;
 HEAP32[$2 + 4 >> 2] = 0;
 var $3 = _uselocale($__l);
 var $4 = _vsnprintf($__s, $__n, $__format, $__va | 0);
 if (($3 | 0) == 0) {
  STACKTOP = sp;
  return $4;
 }
 _uselocale($3);
 STACKTOP = sp;
 return $4;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $__p_i_i_i158 = sp;
 var $__p_i_i_i = sp + 16;
 var $__grouping = sp + 32;
 var $1 = $__loc | 0;
 var $2 = HEAP32[$1 >> 2];
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $8 = HEAP32[21572 >> 2] - 1 | 0;
 var $12 = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 12 >> 2] - $12 >> 2 >>> 0 <= $8 >>> 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $19 = HEAP32[$12 + ($8 << 2) >> 2];
 if (($19 | 0) == 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $23 = $19;
 var $24 = HEAP32[$1 >> 2];
 if ((HEAP32[21184 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i158 >> 2] = 21184;
  HEAP32[$__p_i_i_i158 + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i158 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i158);
 }
 var $30 = HEAP32[21188 >> 2] - 1 | 0;
 var $34 = HEAP32[$24 + 8 >> 2];
 if (HEAP32[$24 + 12 >> 2] - $34 >> 2 >>> 0 <= $30 >>> 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $41 = HEAP32[$34 + ($30 << 2) >> 2];
 if (($41 | 0) == 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $45 = $41;
 FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 20 >> 2]]($__grouping, $45);
 var $50 = $__grouping;
 var $51 = $__grouping;
 var $53 = HEAPU8[$51];
 if (($53 & 1 | 0) == 0) {
  var $61 = $53 >>> 1;
 } else {
  var $61 = HEAP32[$__grouping + 4 >> 2];
 }
 var $61;
 do {
  if (($61 | 0) == 0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 32 >> 2]]($23, $__nb, $__ne, $__ob);
   HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb);
  } else {
   HEAP32[$__oe >> 2] = $__ob;
   var $83 = HEAP8[$__nb];
   if ($83 << 24 >> 24 == 45 | $83 << 24 >> 24 == 43) {
    var $89 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 28 >> 2]]($23, $83);
    var $91 = HEAP32[$__oe >> 2];
    HEAP32[$__oe >> 2] = $91 + 1;
    HEAP8[$91] = $89;
    var $__nf_0 = $__nb + 1 | 0;
   } else {
    var $__nf_0 = $__nb;
   }
   var $__nf_0;
   do {
    if (($__ne - $__nf_0 | 0) > 1) {
     if ((HEAP8[$__nf_0] | 0) != 48) {
      var $__nf_1 = $__nf_0;
      break;
     }
     var $102 = $__nf_0 + 1 | 0;
     var $103 = HEAP8[$102];
     if (!($103 << 24 >> 24 == 120 | $103 << 24 >> 24 == 88)) {
      var $__nf_1 = $__nf_0;
      break;
     }
     var $105 = $19;
     var $109 = FUNCTION_TABLE[HEAP32[HEAP32[$105 >> 2] + 28 >> 2]]($23, 48);
     var $110 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $110 + 1;
     HEAP8[$110] = $109;
     var $116 = FUNCTION_TABLE[HEAP32[HEAP32[$105 >> 2] + 28 >> 2]]($23, HEAP8[$102]);
     var $118 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $118 + 1;
     HEAP8[$118] = $116;
     var $__nf_1 = $__nf_0 + 2 | 0;
    } else {
     var $__nf_1 = $__nf_0;
    }
   } while (0);
   var $__nf_1;
   do {
    if (($__nf_1 | 0) != ($__ne | 0)) {
     var $122 = $__ne - 1 | 0;
     if ($__nf_1 >>> 0 < $122 >>> 0) {
      var $_0172 = $__nf_1;
      var $124 = $122;
     } else {
      break;
     }
     while (1) {
      var $124;
      var $_0172;
      var $125 = HEAP8[$_0172];
      HEAP8[$_0172] = HEAP8[$124];
      HEAP8[$124] = $125;
      var $127 = $_0172 + 1 | 0;
      var $128 = $124 - 1 | 0;
      if ($127 >>> 0 < $128 >>> 0) {
       var $_0172 = $127;
       var $124 = $128;
      } else {
       break;
      }
     }
    }
   } while (0);
   var $134 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 16 >> 2]]($45);
   if ($__nf_1 >>> 0 < $__ne >>> 0) {
    var $136 = $50 + 1 | 0;
    var $137 = $19;
    var $138 = $__grouping + 4 | 0;
    var $139 = $__grouping + 8 | 0;
    var $__dc_0167 = 0;
    var $__dg_0168 = 0;
    var $__p_0169 = $__nf_1;
    while (1) {
     var $__p_0169;
     var $__dg_0168;
     var $__dc_0167;
     var $145 = HEAP8[((HEAP8[$51] & 1) == 0 ? $136 : HEAP32[$139 >> 2]) + $__dg_0168 | 0];
     if ($145 << 24 >> 24 != 0 & ($__dc_0167 | 0) == ($145 << 24 >> 24 | 0)) {
      var $149 = HEAP32[$__oe >> 2];
      HEAP32[$__oe >> 2] = $149 + 1;
      HEAP8[$149] = $134;
      var $152 = HEAPU8[$51];
      var $__dg_1 = ($__dg_0168 >>> 0 < ((($152 & 1 | 0) == 0 ? $152 >>> 1 : HEAP32[$138 >> 2]) - 1 | 0) >>> 0) + $__dg_0168 | 0;
      var $__dc_1 = 0;
     } else {
      var $__dg_1 = $__dg_0168;
      var $__dc_1 = $__dc_0167;
     }
     var $__dc_1;
     var $__dg_1;
     var $166 = FUNCTION_TABLE[HEAP32[HEAP32[$137 >> 2] + 28 >> 2]]($23, HEAP8[$__p_0169]);
     var $167 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $167 + 1;
     HEAP8[$167] = $166;
     var $170 = $__p_0169 + 1 | 0;
     if ($170 >>> 0 < $__ne >>> 0) {
      var $__dc_0167 = $__dc_1 + 1 | 0;
      var $__dg_0168 = $__dg_1;
      var $__p_0169 = $170;
     } else {
      break;
     }
    }
   }
   var $175 = $__ob + ($__nf_1 - $__nb) | 0;
   var $176 = HEAP32[$__oe >> 2];
   if (($175 | 0) == ($176 | 0)) {
    break;
   }
   var $178 = $176 - 1 | 0;
   if ($175 >>> 0 < $178 >>> 0) {
    var $_0156166 = $175;
    var $180 = $178;
   } else {
    break;
   }
   while (1) {
    var $180;
    var $_0156166;
    var $181 = HEAP8[$_0156166];
    HEAP8[$_0156166] = HEAP8[$180];
    HEAP8[$180] = $181;
    var $183 = $_0156166 + 1 | 0;
    var $184 = $180 - 1 | 0;
    if ($183 >>> 0 < $184 >>> 0) {
     var $_0156166 = $183;
     var $180 = $184;
    } else {
     break;
    }
   }
  }
 } while (0);
 if (($__np | 0) == ($__ne | 0)) {
  var $storemerge = HEAP32[$__oe >> 2];
 } else {
  var $storemerge = $__ob + ($__np - $__nb) | 0;
 }
 var $storemerge;
 HEAP32[$__op >> 2] = $storemerge;
 if ((HEAP8[$51] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $200 = HEAP32[$__grouping + 8 >> 2];
 if (($200 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($200);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 104 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 32;
 var $__op = sp + 80;
 var $__oe = sp + 88;
 var $1 = sp + 96;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $2 = $__fmt;
 var $3 = $2 + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $2 + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 HEAP8[$_116_i_ph + 1 | 0] = 108;
 var $scevgep = $_116_i_ph + 2 | 0;
 var $16 = $5 & 74;
 do {
  if (($16 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if (($16 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while (0);
 var $24 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $36 = __ZNSt3__112__snprintf_lEPcjPvPKcz($24, 22, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $__v$0, HEAP32[tempVarArgs + 8 >> 2] = $__v$1, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $37 = $__nar + $36 | 0;
 var $39 = HEAP32[$4 >> 2] & 176;
 do {
  if (($39 | 0) == 16) {
   var $41 = HEAP8[$24];
   if ($41 << 24 >> 24 == 45 | $41 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($36 | 0) > 1 & $41 << 24 >> 24 == 48)) {
    label = 1611;
    break;
   }
   var $49 = HEAP8[$__nar + 1 | 0];
   if (!($49 << 24 >> 24 == 120 | $49 << 24 >> 24 == 88)) {
    label = 1611;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($39 | 0) == 32) {
   var $_0_i11 = $37;
  } else {
   label = 1611;
  }
 } while (0);
 if (label == 1611) {
  var $_0_i11 = $24;
 }
 var $_0_i11;
 var $53 = $__o | 0;
 var $55 = $1 | 0;
 var $56 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$55 >> 2] = $56;
 var $59 = $56 + 4 | 0;
 tempValue = HEAP32[$59 >> 2], HEAP32[$59 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24, $_0_i11, $37, $53, $__op, $__oe, $1);
 var $62 = HEAP32[$55 >> 2];
 var $63 = $62 + 4 | 0;
 if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $72 = $__s | 0;
  var $73 = HEAP32[$72 >> 2];
  var $74 = HEAP32[$__op >> 2];
  var $75 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$62 >> 2] + 8 >> 2]]($62 | 0);
 var $72 = $__s | 0;
 var $73 = HEAP32[$72 >> 2];
 var $74 = HEAP32[$__op >> 2];
 var $75 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 24;
 var $__op = sp + 48;
 var $__oe = sp + 56;
 var $1 = sp + 64;
 var $2 = $__fmt | 0;
 HEAP8[$2] = HEAP8[9512];
 HEAP8[$2 + 1 | 0] = HEAP8[9513 | 0];
 HEAP8[$2 + 2 | 0] = HEAP8[9514 | 0];
 HEAP8[$2 + 3 | 0] = HEAP8[9515 | 0];
 HEAP8[$2 + 4 | 0] = HEAP8[9516 | 0];
 HEAP8[$2 + 5 | 0] = HEAP8[9517 | 0];
 var $3 = $__fmt + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $__fmt + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 var $scevgep = $_116_i_ph + 1 | 0;
 var $15 = $5 & 74;
 do {
  if (($15 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else if (($15 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while (0);
 var $23 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $35 = __ZNSt3__112__snprintf_lEPcjPvPKcz($23, 12, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $36 = $__nar + $35 | 0;
 var $38 = HEAP32[$4 >> 2] & 176;
 do {
  if (($38 | 0) == 16) {
   var $40 = HEAP8[$23];
   if ($40 << 24 >> 24 == 45 | $40 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($35 | 0) > 1 & $40 << 24 >> 24 == 48)) {
    label = 1642;
    break;
   }
   var $48 = HEAP8[$__nar + 1 | 0];
   if (!($48 << 24 >> 24 == 120 | $48 << 24 >> 24 == 88)) {
    label = 1642;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($38 | 0) == 32) {
   var $_0_i11 = $36;
  } else {
   label = 1642;
  }
 } while (0);
 if (label == 1642) {
  var $_0_i11 = $23;
 }
 var $_0_i11;
 var $52 = $__o | 0;
 var $54 = $1 | 0;
 var $55 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$54 >> 2] = $55;
 var $58 = $55 + 4 | 0;
 tempValue = HEAP32[$58 >> 2], HEAP32[$58 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23, $_0_i11, $36, $52, $__op, $__oe, $1);
 var $61 = HEAP32[$54 >> 2];
 var $62 = $61 + 4 | 0;
 if (((tempValue = HEAP32[$62 >> 2], HEAP32[$62 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $71 = $__s | 0;
  var $72 = HEAP32[$71 >> 2];
  var $73 = HEAP32[$__op >> 2];
  var $74 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 8 >> 2]]($61 | 0);
 var $71 = $__s | 0;
 var $72 = HEAP32[$71 >> 2];
 var $73 = HEAP32[$__op >> 2];
 var $74 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 104 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 32;
 var $__op = sp + 80;
 var $__oe = sp + 88;
 var $1 = sp + 96;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $2 = $__fmt;
 var $3 = $2 + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $2 + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 HEAP8[$_116_i_ph + 1 | 0] = 108;
 var $scevgep = $_116_i_ph + 2 | 0;
 var $16 = $5 & 74;
 do {
  if (($16 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if (($16 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while (0);
 var $24 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $36 = __ZNSt3__112__snprintf_lEPcjPvPKcz($24, 23, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $__v$0, HEAP32[tempVarArgs + 8 >> 2] = $__v$1, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $37 = $__nar + $36 | 0;
 var $39 = HEAP32[$4 >> 2] & 176;
 do {
  if (($39 | 0) == 16) {
   var $41 = HEAP8[$24];
   if ($41 << 24 >> 24 == 45 | $41 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($36 | 0) > 1 & $41 << 24 >> 24 == 48)) {
    label = 1673;
    break;
   }
   var $49 = HEAP8[$__nar + 1 | 0];
   if (!($49 << 24 >> 24 == 120 | $49 << 24 >> 24 == 88)) {
    label = 1673;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($39 | 0) == 32) {
   var $_0_i11 = $37;
  } else {
   label = 1673;
  }
 } while (0);
 if (label == 1673) {
  var $_0_i11 = $24;
 }
 var $_0_i11;
 var $53 = $__o | 0;
 var $55 = $1 | 0;
 var $56 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$55 >> 2] = $56;
 var $59 = $56 + 4 | 0;
 tempValue = HEAP32[$59 >> 2], HEAP32[$59 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24, $_0_i11, $37, $53, $__op, $__oe, $1);
 var $62 = HEAP32[$55 >> 2];
 var $63 = $62 + 4 | 0;
 if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $72 = $__s | 0;
  var $73 = HEAP32[$72 >> 2];
  var $74 = HEAP32[$__op >> 2];
  var $75 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$62 >> 2] + 8 >> 2]]($62 | 0);
 var $72 = $__s | 0;
 var $73 = HEAP32[$72 >> 2];
 var $74 = HEAP32[$__op >> 2];
 var $75 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s_0, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__sp = sp;
 if (($__s_0 | 0) == 0) {
  HEAP32[$agg_result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 var $5 = $__oe;
 var $6 = $__ob;
 var $7 = $5 - $6 | 0;
 var $8 = $__iob + 12 | 0;
 var $9 = HEAP32[$8 >> 2];
 var $__ns_0 = ($9 | 0) > ($7 | 0) ? $9 - $7 | 0 : 0;
 var $12 = $__op;
 var $13 = $12 - $6 | 0;
 do {
  if (($13 | 0) > 0) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $__ob, $13) | 0) == ($13 | 0)) {
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 do {
  if (($__ns_0 | 0) > 0) {
   do {
    if ($__ns_0 >>> 0 < 11) {
     var $32 = $__sp;
     HEAP8[$32] = $__ns_0 << 1 & 255;
     var $__p_0_i = $__sp + 1 | 0;
     var $_pre_phi = $32;
    } else {
     var $35 = $__ns_0 + 16 & -16;
     var $_size_i = ($35 | 0) == 0 ? 1 : $35;
     while (1) {
      var $38 = _malloc($_size_i);
      if (($38 | 0) != 0) {
       label = 1702;
       break;
      }
      var $41 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
      if (($41 | 0) == 0) {
       break;
      }
      FUNCTION_TABLE[$41]();
     }
     if (label == 1702) {
      HEAP32[$__sp + 8 >> 2] = $38;
      HEAP32[$__sp >> 2] = $35 | 1;
      HEAP32[$__sp + 4 >> 2] = $__ns_0;
      var $__p_0_i = $38;
      var $_pre_phi = $__sp;
      break;
     }
     var $51 = ___cxa_allocate_exception(4);
     HEAP32[$51 >> 2] = 9744;
     ___cxa_throw($51, 15960, 74);
    }
   } while (0);
   var $_pre_phi;
   var $__p_0_i;
   _memset($__p_0_i, $__fl, $__ns_0);
   HEAP8[$__p_0_i + $__ns_0 | 0] = 0;
   if ((HEAP8[$_pre_phi] & 1) == 0) {
    var $69 = $__sp + 1 | 0;
   } else {
    var $69 = HEAP32[$__sp + 8 >> 2];
   }
   var $69;
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $69, $__ns_0) | 0) == ($__ns_0 | 0)) {
    if ((HEAP8[$_pre_phi] & 1) == 0) {
     break;
    }
    var $101 = HEAP32[$__sp + 8 >> 2];
    if (($101 | 0) == 0) {
     break;
    }
    _free($101);
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   if ((HEAP8[$_pre_phi] & 1) == 0) {
    STACKTOP = sp;
    return;
   }
   var $82 = HEAP32[$__sp + 8 >> 2];
   if (($82 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($82);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $104 = $5 - $12 | 0;
 do {
  if (($104 | 0) > 0) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $__op, $104) | 0) == ($104 | 0)) {
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = 0;
 HEAP32[$agg_result >> 2] = $__s_0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__nb = sp + 40;
 var $__o = sp + 48;
 var $__op = sp + 112;
 var $__oe = sp + 120;
 var $1 = sp + 128;
 var $2 = sp + 136;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $3 = $__fmt;
 var $4 = $3 + 1 | 0;
 var $5 = $__iob + 4 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 & 2048 | 0) == 0) {
  var $_0_i = $4;
 } else {
  HEAP8[$4] = 43;
  var $_0_i = $3 + 2 | 0;
 }
 var $_0_i;
 if (($6 & 1024 | 0) == 0) {
  var $_1_i = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_1_i = $_0_i + 1 | 0;
 }
 var $_1_i;
 var $17 = $6 & 260;
 var $18 = $6 >>> 14;
 do {
  if (($17 | 0) == 260) {
   if (($18 & 1 | 0) == 0) {
    HEAP8[$_1_i] = 97;
    var $specify_precision_0_off0_ph_i144 = 0;
    break;
   } else {
    HEAP8[$_1_i] = 65;
    var $specify_precision_0_off0_ph_i144 = 0;
    break;
   }
  } else {
   HEAP8[$_1_i] = 46;
   var $21 = $_1_i + 2 | 0;
   HEAP8[$_1_i + 1 | 0] = 42;
   if (($17 | 0) == 256) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 101;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 69;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   } else if (($17 | 0) == 4) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 102;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 70;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   } else {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 103;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 71;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   }
  }
 } while (0);
 var $specify_precision_0_off0_ph_i144;
 var $42 = $__nar | 0;
 HEAP32[$__nb >> 2] = $42;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $53 = HEAP32[19888 >> 2];
 if ($specify_precision_0_off0_ph_i144) {
  var $57 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $57;
 } else {
  var $59 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $59;
 }
 var $__nc_0;
 do {
  if (($__nc_0 | 0) > 29) {
   var $64 = (HEAP8[22128] | 0) == 0;
   if ($specify_precision_0_off0_ph_i144) {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $78 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $78;
   } else {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $96 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $96;
   }
   var $__nc_1;
   var $98 = HEAP32[$__nb >> 2];
   if (($98 | 0) != 0) {
    var $__nc_2 = $__nc_1;
    var $__nbh_sroa_0_1 = $98;
    var $103 = $98;
    break;
   }
   var $101 = ___cxa_allocate_exception(4);
   HEAP32[$101 >> 2] = 9744;
   ___cxa_throw($101, 15960, 74);
  } else {
   var $__nc_2 = $__nc_0;
   var $__nbh_sroa_0_1 = 0;
   var $103 = HEAP32[$__nb >> 2];
  }
 } while (0);
 var $103;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $104 = $103 + $__nc_2 | 0;
 var $106 = HEAP32[$5 >> 2] & 176;
 do {
  if (($106 | 0) == 32) {
   var $_0_i143 = $104;
  } else if (($106 | 0) == 16) {
   var $108 = HEAP8[$103];
   if ($108 << 24 >> 24 == 45 | $108 << 24 >> 24 == 43) {
    var $_0_i143 = $103 + 1 | 0;
    break;
   }
   if (!(($__nc_2 | 0) > 1 & $108 << 24 >> 24 == 48)) {
    label = 1782;
    break;
   }
   var $116 = HEAP8[$103 + 1 | 0];
   if (!($116 << 24 >> 24 == 120 | $116 << 24 >> 24 == 88)) {
    label = 1782;
    break;
   }
   var $_0_i143 = $103 + 2 | 0;
  } else {
   label = 1782;
  }
 } while (0);
 if (label == 1782) {
  var $_0_i143 = $103;
 }
 var $_0_i143;
 do {
  if (($103 | 0) == ($42 | 0)) {
   var $__ob_0 = $__o | 0;
   var $__obh_sroa_0_1 = 0;
   var $134 = $42;
  } else {
   var $124 = _malloc($__nc_2 << 1);
   if (($124 | 0) != 0) {
    var $__ob_0 = $124;
    var $__obh_sroa_0_1 = $124;
    var $134 = $103;
    break;
   }
   var $127 = ___cxa_allocate_exception(4);
   HEAP32[$127 >> 2] = 9744;
   ___cxa_throw($127, 15960, 74);
  }
 } while (0);
 var $134;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $136 = $1 | 0;
 var $137 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$136 >> 2] = $137;
 var $140 = $137 + 4 | 0;
 tempValue = HEAP32[$140 >> 2], HEAP32[$140 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($134, $_0_i143, $104, $__ob_0, $__op, $__oe, $1);
 var $143 = HEAP32[$136 >> 2];
 var $144 = $143 + 4 | 0;
 if (((tempValue = HEAP32[$144 >> 2], HEAP32[$144 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$143 >> 2] + 8 >> 2]]($143 | 0);
 }
 var $153 = $__s | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, HEAP32[$153 >> 2], $__ob_0, HEAP32[$__op >> 2], HEAP32[$__oe >> 2], $__iob, $__fl);
 var $159 = HEAP32[$2 >> 2];
 HEAP32[$153 >> 2] = $159;
 HEAP32[$agg_result >> 2] = $159;
 if (($__obh_sroa_0_1 | 0) != 0) {
  _free($__obh_sroa_0_1);
 }
 if (($__nbh_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($__nbh_sroa_0_1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112__asprintf_lEPPcPvPKcz($__s, $__l, $__format, varrp) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__va = sp;
 var $2 = $__va;
 HEAP32[$2 >> 2] = varrp;
 HEAP32[$2 + 4 >> 2] = 0;
 var $3 = _uselocale($__l);
 var $4 = _vasprintf($__s, $__format, $__va | 0);
 if (($3 | 0) == 0) {
  STACKTOP = sp;
  return $4;
 }
 _uselocale($3);
 STACKTOP = sp;
 return $4;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $__p_i_i_i191 = sp;
 var $__p_i_i_i = sp + 16;
 var $__grouping = sp + 32;
 var $1 = $__loc | 0;
 var $2 = HEAP32[$1 >> 2];
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $8 = HEAP32[21572 >> 2] - 1 | 0;
 var $12 = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 12 >> 2] - $12 >> 2 >>> 0 <= $8 >>> 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $19 = HEAP32[$12 + ($8 << 2) >> 2];
 if (($19 | 0) == 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $23 = $19;
 var $24 = HEAP32[$1 >> 2];
 if ((HEAP32[21184 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i191 >> 2] = 21184;
  HEAP32[$__p_i_i_i191 + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i191 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i191);
 }
 var $30 = HEAP32[21188 >> 2] - 1 | 0;
 var $34 = HEAP32[$24 + 8 >> 2];
 if (HEAP32[$24 + 12 >> 2] - $34 >> 2 >>> 0 <= $30 >>> 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $41 = HEAP32[$34 + ($30 << 2) >> 2];
 if (($41 | 0) == 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $45 = $41;
 FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 20 >> 2]]($__grouping, $45);
 HEAP32[$__oe >> 2] = $__ob;
 var $50 = HEAP8[$__nb];
 if ($50 << 24 >> 24 == 45 | $50 << 24 >> 24 == 43) {
  var $56 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 28 >> 2]]($23, $50);
  var $58 = HEAP32[$__oe >> 2];
  HEAP32[$__oe >> 2] = $58 + 1;
  HEAP8[$58] = $56;
  var $__nf_0 = $__nb + 1 | 0;
 } else {
  var $__nf_0 = $__nb;
 }
 var $__nf_0;
 var $70 = $__ne;
 L2139 : do {
  if (($70 - $__nf_0 | 0) > 1) {
   if ((HEAP8[$__nf_0] | 0) != 48) {
    var $__ns_1 = $__nf_0;
    label = 1853;
    break;
   }
   var $78 = $__nf_0 + 1 | 0;
   var $79 = HEAP8[$78];
   if (!($79 << 24 >> 24 == 120 | $79 << 24 >> 24 == 88)) {
    var $__ns_1 = $__nf_0;
    label = 1853;
    break;
   }
   var $81 = $19;
   var $85 = FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 28 >> 2]]($23, 48);
   var $86 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $86 + 1;
   HEAP8[$86] = $85;
   var $88 = $__nf_0 + 2 | 0;
   var $93 = FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 28 >> 2]]($23, HEAP8[$78]);
   var $94 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $94 + 1;
   HEAP8[$94] = $93;
   var $__ns_0 = $88;
   while (1) {
    var $__ns_0;
    if ($__ns_0 >>> 0 >= $__ne >>> 0) {
     var $__ns_2 = $__ns_0;
     var $__nf_1 = $88;
     break L2139;
    }
    var $99 = HEAP8[$__ns_0];
    do {
     if ((HEAP8[22128] | 0) == 0) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    if ((_isxdigit($99 << 24 >> 24, HEAP32[19888 >> 2]) | 0) == 0) {
     var $__ns_2 = $__ns_0;
     var $__nf_1 = $88;
     break;
    } else {
     var $__ns_0 = $__ns_0 + 1 | 0;
    }
   }
  } else {
   var $__ns_1 = $__nf_0;
   label = 1853;
  }
 } while (0);
 L2154 : do {
  if (label == 1853) {
   while (1) {
    label = 0;
    var $__ns_1;
    if ($__ns_1 >>> 0 >= $__ne >>> 0) {
     var $__ns_2 = $__ns_1;
     var $__nf_1 = $__nf_0;
     break L2154;
    }
    var $119 = HEAP8[$__ns_1];
    do {
     if ((HEAP8[22128] | 0) == 0) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    if ((_isdigit($119 << 24 >> 24, HEAP32[19888 >> 2]) | 0) == 0) {
     var $__ns_2 = $__ns_1;
     var $__nf_1 = $__nf_0;
     break;
    } else {
     var $__ns_1 = $__ns_1 + 1 | 0;
     label = 1853;
    }
   }
  }
 } while (0);
 var $__nf_1;
 var $__ns_2;
 var $137 = $__grouping;
 var $138 = $__grouping;
 var $140 = HEAPU8[$138];
 if (($140 & 1 | 0) == 0) {
  var $148 = $140 >>> 1;
 } else {
  var $148 = HEAP32[$__grouping + 4 >> 2];
 }
 var $148;
 do {
  if (($148 | 0) == 0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 32 >> 2]]($23, $__nf_1, $__ns_2, HEAP32[$__oe >> 2]);
   HEAP32[$__oe >> 2] = HEAP32[$__oe >> 2] + ($__ns_2 - $__nf_1);
  } else {
   do {
    if (($__nf_1 | 0) != ($__ns_2 | 0)) {
     var $166 = $__ns_2 - 1 | 0;
     if ($__nf_1 >>> 0 < $166 >>> 0) {
      var $_0189216 = $__nf_1;
      var $168 = $166;
     } else {
      break;
     }
     while (1) {
      var $168;
      var $_0189216;
      var $169 = HEAP8[$_0189216];
      HEAP8[$_0189216] = HEAP8[$168];
      HEAP8[$168] = $169;
      var $171 = $_0189216 + 1 | 0;
      var $172 = $168 - 1 | 0;
      if ($171 >>> 0 < $172 >>> 0) {
       var $_0189216 = $171;
       var $168 = $172;
      } else {
       break;
      }
     }
    }
   } while (0);
   var $178 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 16 >> 2]]($45);
   if ($__nf_1 >>> 0 < $__ns_2 >>> 0) {
    var $180 = $137 + 1 | 0;
    var $181 = $__grouping + 4 | 0;
    var $182 = $__grouping + 8 | 0;
    var $183 = $19;
    var $__dc_0211 = 0;
    var $__dg_0212 = 0;
    var $__p_0213 = $__nf_1;
    while (1) {
     var $__p_0213;
     var $__dg_0212;
     var $__dc_0211;
     var $189 = HEAP8[((HEAP8[$138] & 1) == 0 ? $180 : HEAP32[$182 >> 2]) + $__dg_0212 | 0];
     if ($189 << 24 >> 24 > 0 & ($__dc_0211 | 0) == ($189 << 24 >> 24 | 0)) {
      var $193 = HEAP32[$__oe >> 2];
      HEAP32[$__oe >> 2] = $193 + 1;
      HEAP8[$193] = $178;
      var $196 = HEAPU8[$138];
      var $__dg_1 = ($__dg_0212 >>> 0 < ((($196 & 1 | 0) == 0 ? $196 >>> 1 : HEAP32[$181 >> 2]) - 1 | 0) >>> 0) + $__dg_0212 | 0;
      var $__dc_1 = 0;
     } else {
      var $__dg_1 = $__dg_0212;
      var $__dc_1 = $__dc_0211;
     }
     var $__dc_1;
     var $__dg_1;
     var $210 = FUNCTION_TABLE[HEAP32[HEAP32[$183 >> 2] + 28 >> 2]]($23, HEAP8[$__p_0213]);
     var $211 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $211 + 1;
     HEAP8[$211] = $210;
     var $214 = $__p_0213 + 1 | 0;
     if ($214 >>> 0 < $__ns_2 >>> 0) {
      var $__dc_0211 = $__dc_1 + 1 | 0;
      var $__dg_0212 = $__dg_1;
      var $__p_0213 = $214;
     } else {
      break;
     }
    }
   }
   var $219 = $__ob + ($__nf_1 - $__nb) | 0;
   var $220 = HEAP32[$__oe >> 2];
   if (($219 | 0) == ($220 | 0)) {
    break;
   }
   var $222 = $220 - 1 | 0;
   if ($219 >>> 0 < $222 >>> 0) {
    var $_0206 = $219;
    var $224 = $222;
   } else {
    break;
   }
   while (1) {
    var $224;
    var $_0206;
    var $225 = HEAP8[$_0206];
    HEAP8[$_0206] = HEAP8[$224];
    HEAP8[$224] = $225;
    var $227 = $_0206 + 1 | 0;
    var $228 = $224 - 1 | 0;
    if ($227 >>> 0 < $228 >>> 0) {
     var $_0206 = $227;
     var $224 = $228;
    } else {
     break;
    }
   }
  }
 } while (0);
 L2192 : do {
  if ($__ns_2 >>> 0 < $__ne >>> 0) {
   var $163 = $19;
   var $__nf_2205 = $__ns_2;
   while (1) {
    var $__nf_2205;
    var $231 = HEAP8[$__nf_2205];
    if ($231 << 24 >> 24 == 46) {
     break;
    }
    var $246 = FUNCTION_TABLE[HEAP32[HEAP32[$163 >> 2] + 28 >> 2]]($23, $231);
    var $247 = HEAP32[$__oe >> 2];
    HEAP32[$__oe >> 2] = $247 + 1;
    HEAP8[$247] = $246;
    var $249 = $__nf_2205 + 1 | 0;
    if ($249 >>> 0 < $__ne >>> 0) {
     var $__nf_2205 = $249;
    } else {
     var $__nf_3 = $249;
     break L2192;
    }
   }
   var $238 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 12 >> 2]]($45);
   var $239 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $239 + 1;
   HEAP8[$239] = $238;
   var $__nf_3 = $__nf_2205 + 1 | 0;
  } else {
   var $__nf_3 = $__ns_2;
  }
 } while (0);
 var $__nf_3;
 FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 32 >> 2]]($23, $__nf_3, $__ne, HEAP32[$__oe >> 2]);
 var $260 = HEAP32[$__oe >> 2] + ($70 - $__nf_3) | 0;
 HEAP32[$__oe >> 2] = $260;
 if (($__np | 0) == ($__ne | 0)) {
  var $storemerge = $260;
 } else {
  var $storemerge = $__ob + ($__np - $__nb) | 0;
 }
 var $storemerge;
 HEAP32[$__op >> 2] = $storemerge;
 if ((HEAP8[$138] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $273 = HEAP32[$__grouping + 8 >> 2];
 if (($273 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($273);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__nb = sp + 40;
 var $__o = sp + 48;
 var $__op = sp + 112;
 var $__oe = sp + 120;
 var $1 = sp + 128;
 var $2 = sp + 136;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $3 = $__fmt;
 var $4 = $3 + 1 | 0;
 var $5 = $__iob + 4 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 & 2048 | 0) == 0) {
  var $_0_i = $4;
 } else {
  HEAP8[$4] = 43;
  var $_0_i = $3 + 2 | 0;
 }
 var $_0_i;
 if (($6 & 1024 | 0) == 0) {
  var $_1_i = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_1_i = $_0_i + 1 | 0;
 }
 var $_1_i;
 var $17 = $6 & 260;
 var $18 = $6 >>> 14;
 do {
  if (($17 | 0) == 260) {
   HEAP8[$_1_i] = 76;
   var $scevgep146 = $_1_i + 1 | 0;
   if (($18 & 1 | 0) == 0) {
    HEAP8[$scevgep146] = 97;
    var $specify_precision_0_off0_ph_i147 = 0;
    break;
   } else {
    HEAP8[$scevgep146] = 65;
    var $specify_precision_0_off0_ph_i147 = 0;
    break;
   }
  } else {
   HEAP8[$_1_i] = 46;
   HEAP8[$_1_i + 1 | 0] = 42;
   HEAP8[$_1_i + 2 | 0] = 76;
   var $scevgep = $_1_i + 3 | 0;
   if (($17 | 0) == 256) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 101;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   } else if (($17 | 0) == 4) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 102;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   } else {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 103;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   }
  }
 } while (0);
 var $specify_precision_0_off0_ph_i147;
 var $42 = $__nar | 0;
 HEAP32[$__nb >> 2] = $42;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $53 = HEAP32[19888 >> 2];
 if ($specify_precision_0_off0_ph_i147) {
  var $57 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $57;
 } else {
  var $59 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $59;
 }
 var $__nc_0;
 do {
  if (($__nc_0 | 0) > 29) {
   var $64 = (HEAP8[22128] | 0) == 0;
   if ($specify_precision_0_off0_ph_i147) {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $78 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $78;
   } else {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $94 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $94;
   }
   var $__nc_1;
   var $96 = HEAP32[$__nb >> 2];
   if (($96 | 0) != 0) {
    var $__nc_2 = $__nc_1;
    var $__nbh_sroa_0_1 = $96;
    var $101 = $96;
    break;
   }
   var $99 = ___cxa_allocate_exception(4);
   HEAP32[$99 >> 2] = 9744;
   ___cxa_throw($99, 15960, 74);
  } else {
   var $__nc_2 = $__nc_0;
   var $__nbh_sroa_0_1 = 0;
   var $101 = HEAP32[$__nb >> 2];
  }
 } while (0);
 var $101;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $102 = $101 + $__nc_2 | 0;
 var $104 = HEAP32[$5 >> 2] & 176;
 do {
  if (($104 | 0) == 16) {
   var $106 = HEAP8[$101];
   if ($106 << 24 >> 24 == 45 | $106 << 24 >> 24 == 43) {
    var $_0_i141 = $101 + 1 | 0;
    break;
   }
   if (!(($__nc_2 | 0) > 1 & $106 << 24 >> 24 == 48)) {
    label = 1953;
    break;
   }
   var $114 = HEAP8[$101 + 1 | 0];
   if (!($114 << 24 >> 24 == 120 | $114 << 24 >> 24 == 88)) {
    label = 1953;
    break;
   }
   var $_0_i141 = $101 + 2 | 0;
  } else if (($104 | 0) == 32) {
   var $_0_i141 = $102;
  } else {
   label = 1953;
  }
 } while (0);
 if (label == 1953) {
  var $_0_i141 = $101;
 }
 var $_0_i141;
 do {
  if (($101 | 0) == ($42 | 0)) {
   var $__ob_0 = $__o | 0;
   var $__obh_sroa_0_1 = 0;
   var $132 = $42;
  } else {
   var $122 = _malloc($__nc_2 << 1);
   if (($122 | 0) != 0) {
    var $__ob_0 = $122;
    var $__obh_sroa_0_1 = $122;
    var $132 = $101;
    break;
   }
   var $125 = ___cxa_allocate_exception(4);
   HEAP32[$125 >> 2] = 9744;
   ___cxa_throw($125, 15960, 74);
  }
 } while (0);
 var $132;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $134 = $1 | 0;
 var $135 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$134 >> 2] = $135;
 var $138 = $135 + 4 | 0;
 tempValue = HEAP32[$138 >> 2], HEAP32[$138 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($132, $_0_i141, $102, $__ob_0, $__op, $__oe, $1);
 var $141 = HEAP32[$134 >> 2];
 var $142 = $141 + 4 | 0;
 if (((tempValue = HEAP32[$142 >> 2], HEAP32[$142 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$141 >> 2] + 8 >> 2]]($141 | 0);
 }
 var $151 = $__s | 0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, HEAP32[$151 >> 2], $__ob_0, HEAP32[$__op >> 2], HEAP32[$__oe >> 2], $__iob, $__fl);
 var $157 = HEAP32[$2 >> 2];
 HEAP32[$151 >> 2] = $157;
 HEAP32[$agg_result >> 2] = $157;
 if (($__obh_sroa_0_1 | 0) != 0) {
  _free($__obh_sroa_0_1);
 }
 if (($__nbh_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($__nbh_sroa_0_1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 136 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 24;
 var $__op = sp + 112;
 var $__oe = sp + 120;
 var $1 = sp + 128;
 var $2 = $__fmt | 0;
 HEAP8[$2] = HEAP8[9512];
 HEAP8[$2 + 1 | 0] = HEAP8[9513 | 0];
 HEAP8[$2 + 2 | 0] = HEAP8[9514 | 0];
 HEAP8[$2 + 3 | 0] = HEAP8[9515 | 0];
 HEAP8[$2 + 4 | 0] = HEAP8[9516 | 0];
 HEAP8[$2 + 5 | 0] = HEAP8[9517 | 0];
 var $3 = $__fmt + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $__fmt + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 var $scevgep = $_116_i_ph + 1 | 0;
 var $15 = $5 & 74;
 do {
  if (($15 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if (($15 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while (0);
 var $23 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $35 = __ZNSt3__112__snprintf_lEPcjPvPKcz($23, 12, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $36 = $__nar + $35 | 0;
 var $38 = HEAP32[$4 >> 2] & 176;
 do {
  if (($38 | 0) == 16) {
   var $40 = HEAP8[$23];
   if ($40 << 24 >> 24 == 45 | $40 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($35 | 0) > 1 & $40 << 24 >> 24 == 48)) {
    label = 2004;
    break;
   }
   var $48 = HEAP8[$__nar + 1 | 0];
   if (!($48 << 24 >> 24 == 120 | $48 << 24 >> 24 == 88)) {
    label = 2004;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($38 | 0) == 32) {
   var $_0_i11 = $36;
  } else {
   label = 2004;
  }
 } while (0);
 if (label == 2004) {
  var $_0_i11 = $23;
 }
 var $_0_i11;
 var $52 = $__o | 0;
 var $54 = $1 | 0;
 var $55 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$54 >> 2] = $55;
 var $58 = $55 + 4 | 0;
 tempValue = HEAP32[$58 >> 2], HEAP32[$58 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23, $_0_i11, $36, $52, $__op, $__oe, $1);
 var $61 = HEAP32[$54 >> 2];
 var $62 = $61 + 4 | 0;
 if (((tempValue = HEAP32[$62 >> 2], HEAP32[$62 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $71 = $__s | 0;
  var $72 = HEAP32[$71 >> 2];
  var $73 = HEAP32[$__op >> 2];
  var $74 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 8 >> 2]]($61 | 0);
 var $71 = $__s | 0;
 var $72 = HEAP32[$71 >> 2];
 var $73 = HEAP32[$__op >> 2];
 var $74 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 88 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__nar = sp + 24;
 var $__o = sp + 48;
 var $1 = sp + 16 | 0;
 HEAP8[$1] = HEAP8[9520];
 HEAP8[$1 + 1 | 0] = HEAP8[9521 | 0];
 HEAP8[$1 + 2 | 0] = HEAP8[9522 | 0];
 HEAP8[$1 + 3 | 0] = HEAP8[9523 | 0];
 HEAP8[$1 + 4 | 0] = HEAP8[9524 | 0];
 HEAP8[$1 + 5 | 0] = HEAP8[9525 | 0];
 var $2 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $14 = __ZNSt3__112__snprintf_lEPcjPvPKcz($2, 20, HEAP32[19888 >> 2], $1, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $15 = $__nar + $14 | 0;
 var $18 = HEAP32[$__iob + 4 >> 2] & 176;
 do {
  if (($18 | 0) == 32) {
   var $_0_i = $15;
  } else if (($18 | 0) == 16) {
   var $20 = HEAP8[$2];
   if ($20 << 24 >> 24 == 45 | $20 << 24 >> 24 == 43) {
    var $_0_i = $__nar + 1 | 0;
    break;
   }
   if (!(($14 | 0) > 1 & $20 << 24 >> 24 == 48)) {
    label = 2025;
    break;
   }
   var $28 = HEAP8[$__nar + 1 | 0];
   if (!($28 << 24 >> 24 == 120 | $28 << 24 >> 24 == 88)) {
    label = 2025;
    break;
   }
   var $_0_i = $__nar + 2 | 0;
  } else {
   label = 2025;
  }
 } while (0);
 if (label == 2025) {
  var $_0_i = $2;
 }
 var $_0_i;
 var $33 = HEAP32[$__iob + 28 >> 2];
 var $35 = $33 + 4 | 0;
 tempValue = HEAP32[$35 >> 2], HEAP32[$35 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $42 = HEAP32[21572 >> 2] - 1 | 0;
 var $48 = HEAP32[$33 + 8 >> 2];
 do {
  if (HEAP32[$33 + 12 >> 2] - $48 >> 2 >>> 0 > $42 >>> 0) {
   var $55 = HEAP32[$48 + ($42 << 2) >> 2];
   if (($55 | 0) == 0) {
    break;
   }
   var $61 = $33 + 4 | 0;
   if (((tempValue = HEAP32[$61 >> 2], HEAP32[$61 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 8 >> 2]]($33);
   }
   var $70 = $__o | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$55 >> 2] + 32 >> 2]]($55, $2, $15, $70);
   var $76 = $__o + $14 | 0;
   if (($_0_i | 0) == ($15 | 0)) {
    var $__op_0 = $76;
    var $__op_0;
    var $96 = $__s | 0;
    var $97 = HEAP32[$96 >> 2];
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $97, $70, $__op_0, $76, $__iob, $__fl);
    STACKTOP = sp;
    return;
   }
   var $__op_0 = $__o + ($_0_i - $__nar) | 0;
   var $__op_0;
   var $96 = $__s | 0;
   var $97 = HEAP32[$96 >> 2];
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $97, $70, $__op_0, $76, $__iob, $__fl);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $57 = ___cxa_allocate_exception(4);
 HEAP32[$57 >> 2] = 9776;
 ___cxa_throw($57, 15976, 602);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $1 = sp + 16;
 var $__nm = sp + 24;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  var $10 = HEAP32[HEAP32[$this >> 2] + 24 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
  FUNCTION_TABLE[$10]($agg_result, $this, $1, $__iob, $__fl, $__v & 1);
  STACKTOP = sp;
  return;
 }
 var $17 = HEAP32[$__iob + 28 >> 2];
 var $19 = $17 + 4 | 0;
 tempValue = HEAP32[$19 >> 2], HEAP32[$19 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21176 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21176;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i);
 }
 var $26 = HEAP32[21180 >> 2] - 1 | 0;
 var $32 = HEAP32[$17 + 8 >> 2];
 do {
  if (HEAP32[$17 + 12 >> 2] - $32 >> 2 >>> 0 > $26 >>> 0) {
   var $39 = HEAP32[$32 + ($26 << 2) >> 2];
   if (($39 | 0) == 0) {
    break;
   }
   var $43 = $39;
   var $45 = $17 + 4 | 0;
   if (((tempValue = HEAP32[$45 >> 2], HEAP32[$45 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 8 >> 2]]($17);
   }
   var $55 = HEAP32[$39 >> 2];
   if ($__v) {
    FUNCTION_TABLE[HEAP32[$55 + 24 >> 2]]($__nm, $43);
   } else {
    FUNCTION_TABLE[HEAP32[$55 + 28 >> 2]]($__nm, $43);
   }
   var $63 = $__nm;
   var $64 = HEAP8[$63];
   if (($64 & 1) == 0) {
    var $71 = $__nm + 4 | 0;
    var $__i_sroa_0_0_ph = $71;
    var $_pre_phi = $71;
    var $_pre_phi85 = $__nm + 8 | 0;
   } else {
    var $68 = $__nm + 8 | 0;
    var $__i_sroa_0_0_ph = HEAP32[$68 >> 2];
    var $_pre_phi = $__nm + 4 | 0;
    var $_pre_phi85 = $68;
   }
   var $_pre_phi85;
   var $_pre_phi;
   var $__i_sroa_0_0_ph;
   var $72 = $__s | 0;
   var $__i_sroa_0_0 = $__i_sroa_0_0_ph;
   var $73 = $64;
   while (1) {
    var $73;
    var $__i_sroa_0_0;
    var $75 = ($73 & 1) == 0;
    if ($75) {
     var $78 = $_pre_phi;
    } else {
     var $78 = HEAP32[$_pre_phi85 >> 2];
    }
    var $78;
    var $79 = $73 & 255;
    if (($79 & 1 | 0) == 0) {
     var $86 = $79 >>> 1;
    } else {
     var $86 = HEAP32[$_pre_phi >> 2];
    }
    var $86;
    if (($__i_sroa_0_0 | 0) == ($78 + ($86 << 2) | 0)) {
     break;
    }
    var $90 = HEAP32[$__i_sroa_0_0 >> 2];
    var $91 = HEAP32[$72 >> 2];
    do {
     if (($91 | 0) != 0) {
      var $94 = $91 + 24 | 0;
      var $95 = HEAP32[$94 >> 2];
      if (($95 | 0) == (HEAP32[$91 + 28 >> 2] | 0)) {
       var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$91 >> 2] + 52 >> 2]]($91, $90);
      } else {
       HEAP32[$94 >> 2] = $95 + 4;
       HEAP32[$95 >> 2] = $90;
       var $_0 = $90;
      }
      var $_0;
      if (($_0 | 0) != -1) {
       break;
      }
      HEAP32[$72 >> 2] = 0;
     }
    } while (0);
    var $__i_sroa_0_0 = $__i_sroa_0_0 + 4 | 0;
    var $73 = HEAP8[$63];
   }
   HEAP32[$agg_result >> 2] = HEAP32[$72 >> 2];
   if ($75) {
    STACKTOP = sp;
    return;
   }
   var $142 = HEAP32[$__nm + 8 >> 2];
   if (($142 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($142);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $41 = ___cxa_allocate_exception(4);
 HEAP32[$41 >> 2] = 9776;
 ___cxa_throw($41, 15976, 602);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 32;
 var $__op = sp + 200;
 var $__oe = sp + 208;
 var $1 = sp + 216;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $2 = $__fmt;
 var $3 = $2 + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $2 + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 HEAP8[$_116_i_ph + 1 | 0] = 108;
 var $scevgep = $_116_i_ph + 2 | 0;
 var $16 = $5 & 74;
 do {
  if (($16 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else if (($16 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while (0);
 var $24 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $36 = __ZNSt3__112__snprintf_lEPcjPvPKcz($24, 22, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $__v$0, HEAP32[tempVarArgs + 8 >> 2] = $__v$1, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $37 = $__nar + $36 | 0;
 var $39 = HEAP32[$4 >> 2] & 176;
 do {
  if (($39 | 0) == 32) {
   var $_0_i11 = $37;
  } else if (($39 | 0) == 16) {
   var $41 = HEAP8[$24];
   if ($41 << 24 >> 24 == 45 | $41 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($36 | 0) > 1 & $41 << 24 >> 24 == 48)) {
    label = 2107;
    break;
   }
   var $49 = HEAP8[$__nar + 1 | 0];
   if (!($49 << 24 >> 24 == 120 | $49 << 24 >> 24 == 88)) {
    label = 2107;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else {
   label = 2107;
  }
 } while (0);
 if (label == 2107) {
  var $_0_i11 = $24;
 }
 var $_0_i11;
 var $53 = $__o | 0;
 var $55 = $1 | 0;
 var $56 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$55 >> 2] = $56;
 var $59 = $56 + 4 | 0;
 tempValue = HEAP32[$59 >> 2], HEAP32[$59 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24, $_0_i11, $37, $53, $__op, $__oe, $1);
 var $62 = HEAP32[$55 >> 2];
 var $63 = $62 + 4 | 0;
 if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $72 = $__s | 0;
  var $73 = HEAP32[$72 >> 2];
  var $74 = HEAP32[$__op >> 2];
  var $75 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$62 >> 2] + 8 >> 2]]($62 | 0);
 var $72 = $__s | 0;
 var $73 = HEAP32[$72 >> 2];
 var $74 = HEAP32[$__op >> 2];
 var $75 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $__p_i_i_i158 = sp;
 var $__p_i_i_i = sp + 16;
 var $__grouping = sp + 32;
 var $1 = $__loc | 0;
 var $2 = HEAP32[$1 >> 2];
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $8 = HEAP32[21564 >> 2] - 1 | 0;
 var $12 = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 12 >> 2] - $12 >> 2 >>> 0 <= $8 >>> 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $19 = HEAP32[$12 + ($8 << 2) >> 2];
 if (($19 | 0) == 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $23 = $19;
 var $24 = HEAP32[$1 >> 2];
 if ((HEAP32[21176 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i158 >> 2] = 21176;
  HEAP32[$__p_i_i_i158 + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i158 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i158);
 }
 var $30 = HEAP32[21180 >> 2] - 1 | 0;
 var $34 = HEAP32[$24 + 8 >> 2];
 if (HEAP32[$24 + 12 >> 2] - $34 >> 2 >>> 0 <= $30 >>> 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $41 = HEAP32[$34 + ($30 << 2) >> 2];
 if (($41 | 0) == 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $45 = $41;
 FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 20 >> 2]]($__grouping, $45);
 var $50 = $__grouping;
 var $51 = $__grouping;
 var $53 = HEAPU8[$51];
 if (($53 & 1 | 0) == 0) {
  var $61 = $53 >>> 1;
 } else {
  var $61 = HEAP32[$__grouping + 4 >> 2];
 }
 var $61;
 do {
  if (($61 | 0) == 0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 48 >> 2]]($23, $__nb, $__ne, $__ob);
   HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb << 2);
  } else {
   HEAP32[$__oe >> 2] = $__ob;
   var $83 = HEAP8[$__nb];
   if ($83 << 24 >> 24 == 45 | $83 << 24 >> 24 == 43) {
    var $89 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 44 >> 2]]($23, $83);
    var $91 = HEAP32[$__oe >> 2];
    HEAP32[$__oe >> 2] = $91 + 4;
    HEAP32[$91 >> 2] = $89;
    var $__nf_0 = $__nb + 1 | 0;
   } else {
    var $__nf_0 = $__nb;
   }
   var $__nf_0;
   do {
    if (($__ne - $__nf_0 | 0) > 1) {
     if ((HEAP8[$__nf_0] | 0) != 48) {
      var $__nf_1 = $__nf_0;
      break;
     }
     var $102 = $__nf_0 + 1 | 0;
     var $103 = HEAP8[$102];
     if (!($103 << 24 >> 24 == 120 | $103 << 24 >> 24 == 88)) {
      var $__nf_1 = $__nf_0;
      break;
     }
     var $105 = $19;
     var $109 = FUNCTION_TABLE[HEAP32[HEAP32[$105 >> 2] + 44 >> 2]]($23, 48);
     var $110 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $110 + 4;
     HEAP32[$110 >> 2] = $109;
     var $116 = FUNCTION_TABLE[HEAP32[HEAP32[$105 >> 2] + 44 >> 2]]($23, HEAP8[$102]);
     var $118 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $118 + 4;
     HEAP32[$118 >> 2] = $116;
     var $__nf_1 = $__nf_0 + 2 | 0;
    } else {
     var $__nf_1 = $__nf_0;
    }
   } while (0);
   var $__nf_1;
   do {
    if (($__nf_1 | 0) != ($__ne | 0)) {
     var $122 = $__ne - 1 | 0;
     if ($__nf_1 >>> 0 < $122 >>> 0) {
      var $_0172 = $__nf_1;
      var $124 = $122;
     } else {
      break;
     }
     while (1) {
      var $124;
      var $_0172;
      var $125 = HEAP8[$_0172];
      HEAP8[$_0172] = HEAP8[$124];
      HEAP8[$124] = $125;
      var $127 = $_0172 + 1 | 0;
      var $128 = $124 - 1 | 0;
      if ($127 >>> 0 < $128 >>> 0) {
       var $_0172 = $127;
       var $124 = $128;
      } else {
       break;
      }
     }
    }
   } while (0);
   var $134 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 16 >> 2]]($45);
   if ($__nf_1 >>> 0 < $__ne >>> 0) {
    var $136 = $50 + 1 | 0;
    var $137 = $19;
    var $138 = $__grouping + 4 | 0;
    var $139 = $__grouping + 8 | 0;
    var $__dc_0167 = 0;
    var $__dg_0168 = 0;
    var $__p_0169 = $__nf_1;
    while (1) {
     var $__p_0169;
     var $__dg_0168;
     var $__dc_0167;
     var $145 = HEAP8[((HEAP8[$51] & 1) == 0 ? $136 : HEAP32[$139 >> 2]) + $__dg_0168 | 0];
     if ($145 << 24 >> 24 != 0 & ($__dc_0167 | 0) == ($145 << 24 >> 24 | 0)) {
      var $149 = HEAP32[$__oe >> 2];
      HEAP32[$__oe >> 2] = $149 + 4;
      HEAP32[$149 >> 2] = $134;
      var $152 = HEAPU8[$51];
      var $__dg_1 = ($__dg_0168 >>> 0 < ((($152 & 1 | 0) == 0 ? $152 >>> 1 : HEAP32[$138 >> 2]) - 1 | 0) >>> 0) + $__dg_0168 | 0;
      var $__dc_1 = 0;
     } else {
      var $__dg_1 = $__dg_0168;
      var $__dc_1 = $__dc_0167;
     }
     var $__dc_1;
     var $__dg_1;
     var $166 = FUNCTION_TABLE[HEAP32[HEAP32[$137 >> 2] + 44 >> 2]]($23, HEAP8[$__p_0169]);
     var $167 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $167 + 4;
     HEAP32[$167 >> 2] = $166;
     var $170 = $__p_0169 + 1 | 0;
     if ($170 >>> 0 < $__ne >>> 0) {
      var $__dc_0167 = $__dc_1 + 1 | 0;
      var $__dg_0168 = $__dg_1;
      var $__p_0169 = $170;
     } else {
      break;
     }
    }
   }
   var $175 = $__ob + ($__nf_1 - $__nb << 2) | 0;
   var $176 = HEAP32[$__oe >> 2];
   if (($175 | 0) == ($176 | 0)) {
    break;
   }
   var $178 = $176 - 4 | 0;
   if ($175 >>> 0 < $178 >>> 0) {
    var $_0156166 = $175;
    var $180 = $178;
   } else {
    break;
   }
   while (1) {
    var $180;
    var $_0156166;
    var $181 = HEAP32[$_0156166 >> 2];
    HEAP32[$_0156166 >> 2] = HEAP32[$180 >> 2];
    HEAP32[$180 >> 2] = $181;
    var $183 = $_0156166 + 4 | 0;
    var $184 = $180 - 4 | 0;
    if ($183 >>> 0 < $184 >>> 0) {
     var $_0156166 = $183;
     var $180 = $184;
    } else {
     break;
    }
   }
  }
 } while (0);
 if (($__np | 0) == ($__ne | 0)) {
  var $storemerge = HEAP32[$__oe >> 2];
 } else {
  var $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 }
 var $storemerge;
 HEAP32[$__op >> 2] = $storemerge;
 if ((HEAP8[$51] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $200 = HEAP32[$__grouping + 8 >> 2];
 if (($200 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($200);
 STACKTOP = sp;
 return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s_0, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__sp = sp;
 if (($__s_0 | 0) == 0) {
  HEAP32[$agg_result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 var $5 = $__oe;
 var $6 = $__ob;
 var $8 = $5 - $6 >> 2;
 var $9 = $__iob + 12 | 0;
 var $10 = HEAP32[$9 >> 2];
 var $__ns_0 = ($10 | 0) > ($8 | 0) ? $10 - $8 | 0 : 0;
 var $13 = $__op;
 var $14 = $13 - $6 | 0;
 var $15 = $14 >> 2;
 do {
  if (($14 | 0) > 0) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $__ob, $15) | 0) == ($15 | 0)) {
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 do {
  if (($__ns_0 | 0) > 0) {
   if ($__ns_0 >>> 0 > 1073741822) {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
   }
   do {
    if ($__ns_0 >>> 0 < 2) {
     HEAP8[$__sp] = $__ns_0 << 1 & 255;
     var $__p_0_i1_ph = $__sp + 4 | 0;
     label = 2197;
    } else {
     var $38 = $__ns_0 + 4 & -4;
     var $39 = $38 << 2;
     var $_size_i = ($39 | 0) == 0 ? 1 : $39;
     while (1) {
      var $42 = _malloc($_size_i);
      if (($42 | 0) != 0) {
       label = 2196;
       break;
      }
      var $45 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
      if (($45 | 0) == 0) {
       break;
      }
      FUNCTION_TABLE[$45]();
     }
     if (label == 2196) {
      var $60 = $42;
      HEAP32[$__sp + 8 >> 2] = $60;
      HEAP32[$__sp >> 2] = $38 | 1;
      HEAP32[$__sp + 4 >> 2] = $__ns_0;
      if (($__ns_0 | 0) == 0) {
       var $__p_0_i2 = $60;
       break;
      } else {
       var $__p_0_i1_ph = $60;
       label = 2197;
       break;
      }
     }
     var $55 = ___cxa_allocate_exception(4);
     HEAP32[$55 >> 2] = 9744;
     ___cxa_throw($55, 15960, 74);
    }
   } while (0);
   if (label == 2197) {
    var $__p_0_i1_ph;
    var $_045_i_i = $__ns_0;
    var $_06_i_i = $__p_0_i1_ph;
    while (1) {
     var $_06_i_i;
     var $_045_i_i;
     var $66 = $_045_i_i - 1 | 0;
     HEAP32[$_06_i_i >> 2] = $__fl;
     if (($66 | 0) == 0) {
      var $__p_0_i2 = $__p_0_i1_ph;
      break;
     } else {
      var $_045_i_i = $66;
      var $_06_i_i = $_06_i_i + 4 | 0;
     }
    }
   }
   var $__p_0_i2;
   HEAP32[$__p_0_i2 + ($__ns_0 << 2) >> 2] = 0;
   var $70 = $__sp;
   if ((HEAP8[$70] & 1) == 0) {
    var $79 = $__sp + 4 | 0;
   } else {
    var $79 = HEAP32[$__sp + 8 >> 2];
   }
   var $79;
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $79, $__ns_0) | 0) == ($__ns_0 | 0)) {
    if ((HEAP8[$70] & 1) == 0) {
     break;
    }
    var $113 = HEAP32[$__sp + 8 >> 2];
    if (($113 | 0) == 0) {
     break;
    }
    _free($113);
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   if ((HEAP8[$70] & 1) == 0) {
    STACKTOP = sp;
    return;
   }
   var $92 = HEAP32[$__sp + 8 >> 2];
   if (($92 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($92);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $117 = $5 - $13 | 0;
 var $118 = $117 >> 2;
 do {
  if (($117 | 0) > 0) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$__s_0 >> 2] + 48 >> 2]]($__s_0, $__op, $118) | 0) == ($118 | 0)) {
    break;
   }
   HEAP32[$agg_result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$agg_result >> 2] = $__s_0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 136 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 24;
 var $__op = sp + 112;
 var $__oe = sp + 120;
 var $1 = sp + 128;
 var $2 = $__fmt | 0;
 HEAP8[$2] = HEAP8[9512];
 HEAP8[$2 + 1 | 0] = HEAP8[9513 | 0];
 HEAP8[$2 + 2 | 0] = HEAP8[9514 | 0];
 HEAP8[$2 + 3 | 0] = HEAP8[9515 | 0];
 HEAP8[$2 + 4 | 0] = HEAP8[9516 | 0];
 HEAP8[$2 + 5 | 0] = HEAP8[9517 | 0];
 var $3 = $__fmt + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $__fmt + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 var $scevgep = $_116_i_ph + 1 | 0;
 var $15 = $5 & 74;
 do {
  if (($15 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if (($15 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while (0);
 var $23 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $35 = __ZNSt3__112__snprintf_lEPcjPvPKcz($23, 12, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $36 = $__nar + $35 | 0;
 var $38 = HEAP32[$4 >> 2] & 176;
 do {
  if (($38 | 0) == 32) {
   var $_0_i11 = $36;
  } else if (($38 | 0) == 16) {
   var $40 = HEAP8[$23];
   if ($40 << 24 >> 24 == 45 | $40 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($35 | 0) > 1 & $40 << 24 >> 24 == 48)) {
    label = 2247;
    break;
   }
   var $48 = HEAP8[$__nar + 1 | 0];
   if (!($48 << 24 >> 24 == 120 | $48 << 24 >> 24 == 88)) {
    label = 2247;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else {
   label = 2247;
  }
 } while (0);
 if (label == 2247) {
  var $_0_i11 = $23;
 }
 var $_0_i11;
 var $52 = $__o | 0;
 var $54 = $1 | 0;
 var $55 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$54 >> 2] = $55;
 var $58 = $55 + 4 | 0;
 tempValue = HEAP32[$58 >> 2], HEAP32[$58 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23, $_0_i11, $36, $52, $__op, $__oe, $1);
 var $61 = HEAP32[$54 >> 2];
 var $62 = $61 + 4 | 0;
 if (((tempValue = HEAP32[$62 >> 2], HEAP32[$62 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $71 = $__s | 0;
  var $72 = HEAP32[$71 >> 2];
  var $73 = HEAP32[$__op >> 2];
  var $74 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 8 >> 2]]($61 | 0);
 var $71 = $__s | 0;
 var $72 = HEAP32[$71 >> 2];
 var $73 = HEAP32[$__op >> 2];
 var $74 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $72, $52, $73, $74, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 232 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__o = sp + 32;
 var $__op = sp + 208;
 var $__oe = sp + 216;
 var $1 = sp + 224;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $2 = $__fmt;
 var $3 = $2 + 1 | 0;
 var $4 = $__iob + 4 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($5 & 2048 | 0) == 0) {
  var $_0_i = $3;
 } else {
  HEAP8[$3] = 43;
  var $_0_i = $2 + 2 | 0;
 }
 var $_0_i;
 if (($5 & 512 | 0) == 0) {
  var $_116_i_ph = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_116_i_ph = $_0_i + 1 | 0;
 }
 var $_116_i_ph;
 HEAP8[$_116_i_ph] = 108;
 HEAP8[$_116_i_ph + 1 | 0] = 108;
 var $scevgep = $_116_i_ph + 2 | 0;
 var $16 = $5 & 74;
 do {
  if (($16 | 0) == 64) {
   HEAP8[$scevgep] = 111;
  } else if (($16 | 0) == 8) {
   if (($5 & 16384 | 0) == 0) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while (0);
 var $24 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $36 = __ZNSt3__112__snprintf_lEPcjPvPKcz($24, 23, HEAP32[19888 >> 2], $2, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $__v$0, HEAP32[tempVarArgs + 8 >> 2] = $__v$1, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $37 = $__nar + $36 | 0;
 var $39 = HEAP32[$4 >> 2] & 176;
 do {
  if (($39 | 0) == 16) {
   var $41 = HEAP8[$24];
   if ($41 << 24 >> 24 == 45 | $41 << 24 >> 24 == 43) {
    var $_0_i11 = $__nar + 1 | 0;
    break;
   }
   if (!(($36 | 0) > 1 & $41 << 24 >> 24 == 48)) {
    label = 2278;
    break;
   }
   var $49 = HEAP8[$__nar + 1 | 0];
   if (!($49 << 24 >> 24 == 120 | $49 << 24 >> 24 == 88)) {
    label = 2278;
    break;
   }
   var $_0_i11 = $__nar + 2 | 0;
  } else if (($39 | 0) == 32) {
   var $_0_i11 = $37;
  } else {
   label = 2278;
  }
 } while (0);
 if (label == 2278) {
  var $_0_i11 = $24;
 }
 var $_0_i11;
 var $53 = $__o | 0;
 var $55 = $1 | 0;
 var $56 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$55 >> 2] = $56;
 var $59 = $56 + 4 | 0;
 tempValue = HEAP32[$59 >> 2], HEAP32[$59 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24, $_0_i11, $37, $53, $__op, $__oe, $1);
 var $62 = HEAP32[$55 >> 2];
 var $63 = $62 + 4 | 0;
 if (((tempValue = HEAP32[$63 >> 2], HEAP32[$63 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
  var $72 = $__s | 0;
  var $73 = HEAP32[$72 >> 2];
  var $74 = HEAP32[$__op >> 2];
  var $75 = HEAP32[$__oe >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$62 >> 2] + 8 >> 2]]($62 | 0);
 var $72 = $__s | 0;
 var $73 = HEAP32[$72 >> 2];
 var $74 = HEAP32[$__op >> 2];
 var $75 = HEAP32[$__oe >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $73, $53, $74, $75, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 312 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__nb = sp + 40;
 var $__o = sp + 48;
 var $__op = sp + 280;
 var $__oe = sp + 288;
 var $1 = sp + 296;
 var $2 = sp + 304;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $3 = $__fmt;
 var $4 = $3 + 1 | 0;
 var $5 = $__iob + 4 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 & 2048 | 0) == 0) {
  var $_0_i = $4;
 } else {
  HEAP8[$4] = 43;
  var $_0_i = $3 + 2 | 0;
 }
 var $_0_i;
 if (($6 & 1024 | 0) == 0) {
  var $_1_i = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_1_i = $_0_i + 1 | 0;
 }
 var $_1_i;
 var $17 = $6 & 260;
 var $18 = $6 >>> 14;
 do {
  if (($17 | 0) == 260) {
   if (($18 & 1 | 0) == 0) {
    HEAP8[$_1_i] = 97;
    var $specify_precision_0_off0_ph_i144 = 0;
    break;
   } else {
    HEAP8[$_1_i] = 65;
    var $specify_precision_0_off0_ph_i144 = 0;
    break;
   }
  } else {
   HEAP8[$_1_i] = 46;
   var $21 = $_1_i + 2 | 0;
   HEAP8[$_1_i + 1 | 0] = 42;
   if (($17 | 0) == 4) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 102;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 70;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   } else if (($17 | 0) == 256) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 101;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 69;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   } else {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$21] = 103;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    } else {
     HEAP8[$21] = 71;
     var $specify_precision_0_off0_ph_i144 = 1;
     break;
    }
   }
  }
 } while (0);
 var $specify_precision_0_off0_ph_i144;
 var $42 = $__nar | 0;
 HEAP32[$__nb >> 2] = $42;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $53 = HEAP32[19888 >> 2];
 if ($specify_precision_0_off0_ph_i144) {
  var $57 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $57;
 } else {
  var $59 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $59;
 }
 var $__nc_0;
 do {
  if (($__nc_0 | 0) > 29) {
   var $64 = (HEAP8[22128] | 0) == 0;
   if ($specify_precision_0_off0_ph_i144) {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $78 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $78;
   } else {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $96 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $96;
   }
   var $__nc_1;
   var $98 = HEAP32[$__nb >> 2];
   if (($98 | 0) != 0) {
    var $__nc_2 = $__nc_1;
    var $__nbh_sroa_0_1 = $98;
    var $103 = $98;
    break;
   }
   var $101 = ___cxa_allocate_exception(4);
   HEAP32[$101 >> 2] = 9744;
   ___cxa_throw($101, 15960, 74);
  } else {
   var $__nc_2 = $__nc_0;
   var $__nbh_sroa_0_1 = 0;
   var $103 = HEAP32[$__nb >> 2];
  }
 } while (0);
 var $103;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $104 = $103 + $__nc_2 | 0;
 var $106 = HEAP32[$5 >> 2] & 176;
 do {
  if (($106 | 0) == 32) {
   var $_0_i143 = $104;
  } else if (($106 | 0) == 16) {
   var $108 = HEAP8[$103];
   if ($108 << 24 >> 24 == 45 | $108 << 24 >> 24 == 43) {
    var $_0_i143 = $103 + 1 | 0;
    break;
   }
   if (!(($__nc_2 | 0) > 1 & $108 << 24 >> 24 == 48)) {
    label = 2340;
    break;
   }
   var $116 = HEAP8[$103 + 1 | 0];
   if (!($116 << 24 >> 24 == 120 | $116 << 24 >> 24 == 88)) {
    label = 2340;
    break;
   }
   var $_0_i143 = $103 + 2 | 0;
  } else {
   label = 2340;
  }
 } while (0);
 if (label == 2340) {
  var $_0_i143 = $103;
 }
 var $_0_i143;
 do {
  if (($103 | 0) == ($42 | 0)) {
   var $__ob_0 = $__o | 0;
   var $__obh_sroa_0_1 = 0;
   var $135 = $42;
  } else {
   var $124 = _malloc($__nc_2 << 3);
   var $125 = $124;
   if (($124 | 0) != 0) {
    var $__ob_0 = $125;
    var $__obh_sroa_0_1 = $125;
    var $135 = $103;
    break;
   }
   var $128 = ___cxa_allocate_exception(4);
   HEAP32[$128 >> 2] = 9744;
   ___cxa_throw($128, 15960, 74);
  }
 } while (0);
 var $135;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $137 = $1 | 0;
 var $138 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$137 >> 2] = $138;
 var $141 = $138 + 4 | 0;
 tempValue = HEAP32[$141 >> 2], HEAP32[$141 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($135, $_0_i143, $104, $__ob_0, $__op, $__oe, $1);
 var $144 = HEAP32[$137 >> 2];
 var $145 = $144 + 4 | 0;
 if (((tempValue = HEAP32[$145 >> 2], HEAP32[$145 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$144 >> 2] + 8 >> 2]]($144 | 0);
 }
 var $154 = $__s | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, HEAP32[$154 >> 2], $__ob_0, HEAP32[$__op >> 2], HEAP32[$__oe >> 2], $__iob, $__fl);
 var $160 = HEAP32[$2 >> 2];
 HEAP32[$154 >> 2] = $160;
 HEAP32[$agg_result >> 2] = $160;
 if (($__obh_sroa_0_1 | 0) != 0) {
  _free($__obh_sroa_0_1);
 }
 if (($__nbh_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($__nbh_sroa_0_1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 var $__p_i_i_i191 = sp;
 var $__p_i_i_i = sp + 16;
 var $__grouping = sp + 32;
 var $1 = $__loc | 0;
 var $2 = HEAP32[$1 >> 2];
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $8 = HEAP32[21564 >> 2] - 1 | 0;
 var $12 = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 12 >> 2] - $12 >> 2 >>> 0 <= $8 >>> 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $19 = HEAP32[$12 + ($8 << 2) >> 2];
 if (($19 | 0) == 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $23 = $19;
 var $24 = HEAP32[$1 >> 2];
 if ((HEAP32[21176 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i191 >> 2] = 21176;
  HEAP32[$__p_i_i_i191 + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i191 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i191);
 }
 var $30 = HEAP32[21180 >> 2] - 1 | 0;
 var $34 = HEAP32[$24 + 8 >> 2];
 if (HEAP32[$24 + 12 >> 2] - $34 >> 2 >>> 0 <= $30 >>> 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $41 = HEAP32[$34 + ($30 << 2) >> 2];
 if (($41 | 0) == 0) {
  var $43 = ___cxa_allocate_exception(4);
  var $44 = $43;
  HEAP32[$44 >> 2] = 9776;
  ___cxa_throw($43, 15976, 602);
 }
 var $45 = $41;
 FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 20 >> 2]]($__grouping, $45);
 HEAP32[$__oe >> 2] = $__ob;
 var $50 = HEAP8[$__nb];
 if ($50 << 24 >> 24 == 45 | $50 << 24 >> 24 == 43) {
  var $56 = FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 44 >> 2]]($23, $50);
  var $58 = HEAP32[$__oe >> 2];
  HEAP32[$__oe >> 2] = $58 + 4;
  HEAP32[$58 >> 2] = $56;
  var $__nf_0 = $__nb + 1 | 0;
 } else {
  var $__nf_0 = $__nb;
 }
 var $__nf_0;
 var $70 = $__ne;
 L2751 : do {
  if (($70 - $__nf_0 | 0) > 1) {
   if ((HEAP8[$__nf_0] | 0) != 48) {
    var $__ns_1 = $__nf_0;
    label = 2400;
    break;
   }
   var $78 = $__nf_0 + 1 | 0;
   var $79 = HEAP8[$78];
   if (!($79 << 24 >> 24 == 120 | $79 << 24 >> 24 == 88)) {
    var $__ns_1 = $__nf_0;
    label = 2400;
    break;
   }
   var $81 = $19;
   var $85 = FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 44 >> 2]]($23, 48);
   var $86 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $86 + 4;
   HEAP32[$86 >> 2] = $85;
   var $88 = $__nf_0 + 2 | 0;
   var $93 = FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 44 >> 2]]($23, HEAP8[$78]);
   var $94 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $93;
   var $__ns_0 = $88;
   while (1) {
    var $__ns_0;
    if ($__ns_0 >>> 0 >= $__ne >>> 0) {
     var $__ns_2 = $__ns_0;
     var $__nf_1 = $88;
     break L2751;
    }
    var $99 = HEAP8[$__ns_0];
    do {
     if ((HEAP8[22128] | 0) == 0) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    if ((_isxdigit($99 << 24 >> 24, HEAP32[19888 >> 2]) | 0) == 0) {
     var $__ns_2 = $__ns_0;
     var $__nf_1 = $88;
     break;
    } else {
     var $__ns_0 = $__ns_0 + 1 | 0;
    }
   }
  } else {
   var $__ns_1 = $__nf_0;
   label = 2400;
  }
 } while (0);
 L2766 : do {
  if (label == 2400) {
   while (1) {
    label = 0;
    var $__ns_1;
    if ($__ns_1 >>> 0 >= $__ne >>> 0) {
     var $__ns_2 = $__ns_1;
     var $__nf_1 = $__nf_0;
     break L2766;
    }
    var $119 = HEAP8[$__ns_1];
    do {
     if ((HEAP8[22128] | 0) == 0) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    if ((_isdigit($119 << 24 >> 24, HEAP32[19888 >> 2]) | 0) == 0) {
     var $__ns_2 = $__ns_1;
     var $__nf_1 = $__nf_0;
     break;
    } else {
     var $__ns_1 = $__ns_1 + 1 | 0;
     label = 2400;
    }
   }
  }
 } while (0);
 var $__nf_1;
 var $__ns_2;
 var $137 = $__grouping;
 var $138 = $__grouping;
 var $140 = HEAPU8[$138];
 if (($140 & 1 | 0) == 0) {
  var $148 = $140 >>> 1;
 } else {
  var $148 = HEAP32[$__grouping + 4 >> 2];
 }
 var $148;
 do {
  if (($148 | 0) == 0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 48 >> 2]]($23, $__nf_1, $__ns_2, HEAP32[$__oe >> 2]);
   HEAP32[$__oe >> 2] = HEAP32[$__oe >> 2] + ($__ns_2 - $__nf_1 << 2);
  } else {
   do {
    if (($__nf_1 | 0) != ($__ns_2 | 0)) {
     var $166 = $__ns_2 - 1 | 0;
     if ($__nf_1 >>> 0 < $166 >>> 0) {
      var $_0189216 = $__nf_1;
      var $168 = $166;
     } else {
      break;
     }
     while (1) {
      var $168;
      var $_0189216;
      var $169 = HEAP8[$_0189216];
      HEAP8[$_0189216] = HEAP8[$168];
      HEAP8[$168] = $169;
      var $171 = $_0189216 + 1 | 0;
      var $172 = $168 - 1 | 0;
      if ($171 >>> 0 < $172 >>> 0) {
       var $_0189216 = $171;
       var $168 = $172;
      } else {
       break;
      }
     }
    }
   } while (0);
   var $178 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 16 >> 2]]($45);
   if ($__nf_1 >>> 0 < $__ns_2 >>> 0) {
    var $180 = $137 + 1 | 0;
    var $181 = $__grouping + 4 | 0;
    var $182 = $__grouping + 8 | 0;
    var $183 = $19;
    var $__dc_0211 = 0;
    var $__dg_0212 = 0;
    var $__p_0213 = $__nf_1;
    while (1) {
     var $__p_0213;
     var $__dg_0212;
     var $__dc_0211;
     var $189 = HEAP8[((HEAP8[$138] & 1) == 0 ? $180 : HEAP32[$182 >> 2]) + $__dg_0212 | 0];
     if ($189 << 24 >> 24 > 0 & ($__dc_0211 | 0) == ($189 << 24 >> 24 | 0)) {
      var $193 = HEAP32[$__oe >> 2];
      HEAP32[$__oe >> 2] = $193 + 4;
      HEAP32[$193 >> 2] = $178;
      var $196 = HEAPU8[$138];
      var $__dg_1 = ($__dg_0212 >>> 0 < ((($196 & 1 | 0) == 0 ? $196 >>> 1 : HEAP32[$181 >> 2]) - 1 | 0) >>> 0) + $__dg_0212 | 0;
      var $__dc_1 = 0;
     } else {
      var $__dg_1 = $__dg_0212;
      var $__dc_1 = $__dc_0211;
     }
     var $__dc_1;
     var $__dg_1;
     var $210 = FUNCTION_TABLE[HEAP32[HEAP32[$183 >> 2] + 44 >> 2]]($23, HEAP8[$__p_0213]);
     var $211 = HEAP32[$__oe >> 2];
     HEAP32[$__oe >> 2] = $211 + 4;
     HEAP32[$211 >> 2] = $210;
     var $214 = $__p_0213 + 1 | 0;
     if ($214 >>> 0 < $__ns_2 >>> 0) {
      var $__dc_0211 = $__dc_1 + 1 | 0;
      var $__dg_0212 = $__dg_1;
      var $__p_0213 = $214;
     } else {
      break;
     }
    }
   }
   var $219 = $__ob + ($__nf_1 - $__nb << 2) | 0;
   var $220 = HEAP32[$__oe >> 2];
   if (($219 | 0) == ($220 | 0)) {
    break;
   }
   var $222 = $220 - 4 | 0;
   if ($219 >>> 0 < $222 >>> 0) {
    var $_0206 = $219;
    var $224 = $222;
   } else {
    break;
   }
   while (1) {
    var $224;
    var $_0206;
    var $225 = HEAP32[$_0206 >> 2];
    HEAP32[$_0206 >> 2] = HEAP32[$224 >> 2];
    HEAP32[$224 >> 2] = $225;
    var $227 = $_0206 + 4 | 0;
    var $228 = $224 - 4 | 0;
    if ($227 >>> 0 < $228 >>> 0) {
     var $_0206 = $227;
     var $224 = $228;
    } else {
     break;
    }
   }
  }
 } while (0);
 L2804 : do {
  if ($__ns_2 >>> 0 < $__ne >>> 0) {
   var $163 = $19;
   var $__nf_2205 = $__ns_2;
   while (1) {
    var $__nf_2205;
    var $231 = HEAP8[$__nf_2205];
    if ($231 << 24 >> 24 == 46) {
     break;
    }
    var $246 = FUNCTION_TABLE[HEAP32[HEAP32[$163 >> 2] + 44 >> 2]]($23, $231);
    var $247 = HEAP32[$__oe >> 2];
    HEAP32[$__oe >> 2] = $247 + 4;
    HEAP32[$247 >> 2] = $246;
    var $249 = $__nf_2205 + 1 | 0;
    if ($249 >>> 0 < $__ne >>> 0) {
     var $__nf_2205 = $249;
    } else {
     var $__nf_3 = $249;
     break L2804;
    }
   }
   var $238 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 12 >> 2]]($45);
   var $239 = HEAP32[$__oe >> 2];
   HEAP32[$__oe >> 2] = $239 + 4;
   HEAP32[$239 >> 2] = $238;
   var $__nf_3 = $__nf_2205 + 1 | 0;
  } else {
   var $__nf_3 = $__ns_2;
  }
 } while (0);
 var $__nf_3;
 FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 48 >> 2]]($23, $__nf_3, $__ne, HEAP32[$__oe >> 2]);
 var $260 = HEAP32[$__oe >> 2] + ($70 - $__nf_3 << 2) | 0;
 HEAP32[$__oe >> 2] = $260;
 if (($__np | 0) == ($__ne | 0)) {
  var $storemerge = $260;
 } else {
  var $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 }
 var $storemerge;
 HEAP32[$__op >> 2] = $storemerge;
 if ((HEAP8[$138] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $273 = HEAP32[$__grouping + 8 >> 2];
 if (($273 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($273);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 312 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__fmt = sp;
 var $__nar = sp + 8;
 var $__nb = sp + 40;
 var $__o = sp + 48;
 var $__op = sp + 280;
 var $__oe = sp + 288;
 var $1 = sp + 296;
 var $2 = sp + 304;
 HEAP32[$__fmt >> 2] = 37;
 HEAP32[$__fmt + 4 >> 2] = 0;
 var $3 = $__fmt;
 var $4 = $3 + 1 | 0;
 var $5 = $__iob + 4 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 & 2048 | 0) == 0) {
  var $_0_i = $4;
 } else {
  HEAP8[$4] = 43;
  var $_0_i = $3 + 2 | 0;
 }
 var $_0_i;
 if (($6 & 1024 | 0) == 0) {
  var $_1_i = $_0_i;
 } else {
  HEAP8[$_0_i] = 35;
  var $_1_i = $_0_i + 1 | 0;
 }
 var $_1_i;
 var $17 = $6 & 260;
 var $18 = $6 >>> 14;
 do {
  if (($17 | 0) == 260) {
   HEAP8[$_1_i] = 76;
   var $scevgep146 = $_1_i + 1 | 0;
   if (($18 & 1 | 0) == 0) {
    HEAP8[$scevgep146] = 97;
    var $specify_precision_0_off0_ph_i147 = 0;
    break;
   } else {
    HEAP8[$scevgep146] = 65;
    var $specify_precision_0_off0_ph_i147 = 0;
    break;
   }
  } else {
   HEAP8[$_1_i] = 46;
   HEAP8[$_1_i + 1 | 0] = 42;
   HEAP8[$_1_i + 2 | 0] = 76;
   var $scevgep = $_1_i + 3 | 0;
   if (($17 | 0) == 4) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 102;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   } else if (($17 | 0) == 256) {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 101;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   } else {
    if (($18 & 1 | 0) == 0) {
     HEAP8[$scevgep] = 103;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     var $specify_precision_0_off0_ph_i147 = 1;
     break;
    }
   }
  }
 } while (0);
 var $specify_precision_0_off0_ph_i147;
 var $42 = $__nar | 0;
 HEAP32[$__nb >> 2] = $42;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $53 = HEAP32[19888 >> 2];
 if ($specify_precision_0_off0_ph_i147) {
  var $57 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $57;
 } else {
  var $59 = __ZNSt3__112__snprintf_lEPcjPvPKcz($42, 30, $53, $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
  STACKTOP = tempVarArgs;
  var $__nc_0 = $59;
 }
 var $__nc_0;
 do {
  if (($__nc_0 | 0) > 29) {
   var $64 = (HEAP8[22128] | 0) == 0;
   if ($specify_precision_0_off0_ph_i147) {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $78 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$__iob + 8 >> 2], HEAPF64[tempVarArgs + 8 >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $78;
   } else {
    do {
     if ($64) {
      if ((___cxa_guard_acquire(22128) | 0) == 0) {
       break;
      }
      HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
     }
    } while (0);
    var $94 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, HEAP32[19888 >> 2], $3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__v, tempVarArgs));
    STACKTOP = tempVarArgs;
    var $__nc_1 = $94;
   }
   var $__nc_1;
   var $96 = HEAP32[$__nb >> 2];
   if (($96 | 0) != 0) {
    var $__nc_2 = $__nc_1;
    var $__nbh_sroa_0_1 = $96;
    var $101 = $96;
    break;
   }
   var $99 = ___cxa_allocate_exception(4);
   HEAP32[$99 >> 2] = 9744;
   ___cxa_throw($99, 15960, 74);
  } else {
   var $__nc_2 = $__nc_0;
   var $__nbh_sroa_0_1 = 0;
   var $101 = HEAP32[$__nb >> 2];
  }
 } while (0);
 var $101;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $102 = $101 + $__nc_2 | 0;
 var $104 = HEAP32[$5 >> 2] & 176;
 do {
  if (($104 | 0) == 16) {
   var $106 = HEAP8[$101];
   if ($106 << 24 >> 24 == 45 | $106 << 24 >> 24 == 43) {
    var $_0_i141 = $101 + 1 | 0;
    break;
   }
   if (!(($__nc_2 | 0) > 1 & $106 << 24 >> 24 == 48)) {
    label = 2500;
    break;
   }
   var $114 = HEAP8[$101 + 1 | 0];
   if (!($114 << 24 >> 24 == 120 | $114 << 24 >> 24 == 88)) {
    label = 2500;
    break;
   }
   var $_0_i141 = $101 + 2 | 0;
  } else if (($104 | 0) == 32) {
   var $_0_i141 = $102;
  } else {
   label = 2500;
  }
 } while (0);
 if (label == 2500) {
  var $_0_i141 = $101;
 }
 var $_0_i141;
 do {
  if (($101 | 0) == ($42 | 0)) {
   var $__ob_0 = $__o | 0;
   var $__obh_sroa_0_1 = 0;
   var $133 = $42;
  } else {
   var $122 = _malloc($__nc_2 << 3);
   var $123 = $122;
   if (($122 | 0) != 0) {
    var $__ob_0 = $123;
    var $__obh_sroa_0_1 = $123;
    var $133 = $101;
    break;
   }
   var $126 = ___cxa_allocate_exception(4);
   HEAP32[$126 >> 2] = 9744;
   ___cxa_throw($126, 15960, 74);
  }
 } while (0);
 var $133;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $135 = $1 | 0;
 var $136 = HEAP32[$__iob + 28 >> 2];
 HEAP32[$135 >> 2] = $136;
 var $139 = $136 + 4 | 0;
 tempValue = HEAP32[$139 >> 2], HEAP32[$139 >> 2] = tempValue + 1, tempValue;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($133, $_0_i141, $102, $__ob_0, $__op, $__oe, $1);
 var $142 = HEAP32[$135 >> 2];
 var $143 = $142 + 4 | 0;
 if (((tempValue = HEAP32[$143 >> 2], HEAP32[$143 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$142 >> 2] + 8 >> 2]]($142 | 0);
 }
 var $152 = $__s | 0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2, HEAP32[$152 >> 2], $__ob_0, HEAP32[$__op >> 2], HEAP32[$__oe >> 2], $__iob, $__fl);
 var $158 = HEAP32[$2 >> 2];
 HEAP32[$152 >> 2] = $158;
 HEAP32[$agg_result >> 2] = $158;
 if (($__obh_sroa_0_1 | 0) != 0) {
  _free($__obh_sroa_0_1);
 }
 if (($__nbh_sroa_0_1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($__nbh_sroa_0_1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 return 2;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, HEAP32[$__b >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9504, 9512);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $1 = $this + 8 | 0;
 var $6 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1);
 var $12 = HEAP8[$6];
 if (($12 & 1) == 0) {
  var $21 = $6 + 1 | 0;
 } else {
  var $21 = HEAP32[$6 + 8 >> 2];
 }
 var $21;
 var $22 = $12 & 255;
 if (($22 & 1 | 0) == 0) {
  var $30 = $22 >>> 1;
 } else {
  var $30 = HEAP32[$6 + 4 >> 2];
 }
 var $30;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, HEAP32[$__b >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $21, $21 + $30 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 200 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__nar = sp + 24;
 var $__o = sp + 48;
 var $1 = sp + 16 | 0;
 HEAP8[$1] = HEAP8[9520];
 HEAP8[$1 + 1 | 0] = HEAP8[9521 | 0];
 HEAP8[$1 + 2 | 0] = HEAP8[9522 | 0];
 HEAP8[$1 + 3 | 0] = HEAP8[9523 | 0];
 HEAP8[$1 + 4 | 0] = HEAP8[9524 | 0];
 HEAP8[$1 + 5 | 0] = HEAP8[9525 | 0];
 var $2 = $__nar | 0;
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 var $14 = __ZNSt3__112__snprintf_lEPcjPvPKcz($2, 20, HEAP32[19888 >> 2], $1, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
 STACKTOP = tempVarArgs;
 var $15 = $__nar + $14 | 0;
 var $18 = HEAP32[$__iob + 4 >> 2] & 176;
 do {
  if (($18 | 0) == 32) {
   var $_0_i = $15;
  } else if (($18 | 0) == 16) {
   var $20 = HEAP8[$2];
   if ($20 << 24 >> 24 == 45 | $20 << 24 >> 24 == 43) {
    var $_0_i = $__nar + 1 | 0;
    break;
   }
   if (!(($14 | 0) > 1 & $20 << 24 >> 24 == 48)) {
    label = 2550;
    break;
   }
   var $28 = HEAP8[$__nar + 1 | 0];
   if (!($28 << 24 >> 24 == 120 | $28 << 24 >> 24 == 88)) {
    label = 2550;
    break;
   }
   var $_0_i = $__nar + 2 | 0;
  } else {
   label = 2550;
  }
 } while (0);
 if (label == 2550) {
  var $_0_i = $2;
 }
 var $_0_i;
 var $33 = HEAP32[$__iob + 28 >> 2];
 var $35 = $33 + 4 | 0;
 tempValue = HEAP32[$35 >> 2], HEAP32[$35 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $42 = HEAP32[21564 >> 2] - 1 | 0;
 var $48 = HEAP32[$33 + 8 >> 2];
 do {
  if (HEAP32[$33 + 12 >> 2] - $48 >> 2 >>> 0 > $42 >>> 0) {
   var $55 = HEAP32[$48 + ($42 << 2) >> 2];
   if (($55 | 0) == 0) {
    break;
   }
   var $61 = $33 + 4 | 0;
   if (((tempValue = HEAP32[$61 >> 2], HEAP32[$61 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$33 >> 2] + 8 >> 2]]($33);
   }
   var $70 = $__o | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$55 >> 2] + 48 >> 2]]($55, $2, $15, $70);
   var $76 = $__o + ($14 << 2) | 0;
   if (($_0_i | 0) == ($15 | 0)) {
    var $__op_0 = $76;
    var $__op_0;
    var $96 = $__s | 0;
    var $97 = HEAP32[$96 >> 2];
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $97, $70, $__op_0, $76, $__iob, $__fl);
    STACKTOP = sp;
    return;
   }
   var $__op_0 = $__o + ($_0_i - $__nar << 2) | 0;
   var $__op_0;
   var $96 = $__s | 0;
   var $97 = HEAP32[$96 >> 2];
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $97, $70, $__op_0, $76, $__iob, $__fl);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $57 = ___cxa_allocate_exception(4);
 HEAP32[$57 >> 2] = 9776;
 ___cxa_throw($57, 15976, 602);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, $__b_0, $__e_0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var $__p_i_i_i = sp;
 var $1 = sp + 16;
 var $2 = sp + 24;
 var $3 = sp + 32;
 var $5 = HEAP32[$__iob + 28 >> 2];
 var $7 = $5 + 4 | 0;
 tempValue = HEAP32[$7 >> 2], HEAP32[$7 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $14 = HEAP32[21572 >> 2] - 1 | 0;
 var $20 = HEAP32[$5 + 8 >> 2];
 do {
  if (HEAP32[$5 + 12 >> 2] - $20 >> 2 >>> 0 > $14 >>> 0) {
   var $27 = HEAP32[$20 + ($14 << 2) >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   var $31 = $27;
   var $33 = $5 + 4 | 0;
   if (((tempValue = HEAP32[$33 >> 2], HEAP32[$33 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5);
   }
   HEAP32[$__err >> 2] = 0;
   L2965 : do {
    if (($__fmtb | 0) == ($__fmte | 0)) {
     var $__e_sroa_0_10 = $__e_0;
     var $__b_sroa_0_7 = $__b_0;
    } else {
     var $43 = $27;
     var $45 = $27 + 8 | 0;
     var $46 = $27;
     var $47 = $this;
     var $48 = $2 | 0;
     var $49 = $3 | 0;
     var $50 = $1 | 0;
     var $_0137_ph162 = $__fmtb;
     var $_pre163 = 0;
     var $__e_sroa_0_0 = $__e_0;
     var $__b_sroa_0_0 = $__b_0;
     L2967 : while (1) {
      var $__b_sroa_0_0;
      var $__e_sroa_0_0;
      var $_pre163;
      var $_0137_ph162;
      var $52 = $_pre163;
      var $__e_sroa_0_1 = $__e_sroa_0_0;
      var $__b_sroa_0_1 = $__b_sroa_0_0;
      while (1) {
       var $__b_sroa_0_1;
       var $__e_sroa_0_1;
       var $52;
       if (($52 | 0) != 0) {
        var $__e_sroa_0_10 = $__e_sroa_0_1;
        var $__b_sroa_0_7 = $__b_sroa_0_1;
        break L2965;
       }
       do {
        if (($__b_sroa_0_1 | 0) == 0) {
         var $__b_sroa_0_2 = 0;
        } else {
         if ((HEAP32[$__b_sroa_0_1 + 12 >> 2] | 0) != (HEAP32[$__b_sroa_0_1 + 16 >> 2] | 0)) {
          var $__b_sroa_0_2 = $__b_sroa_0_1;
          break;
         }
         var $__b_sroa_0_2 = (FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_1 >> 2] + 36 >> 2]]($__b_sroa_0_1) | 0) == -1 ? 0 : $__b_sroa_0_1;
        }
       } while (0);
       var $__b_sroa_0_2;
       var $68 = ($__b_sroa_0_2 | 0) == 0;
       do {
        if (($__e_sroa_0_1 | 0) == 0) {
         label = 2586;
        } else {
         if ((HEAP32[$__e_sroa_0_1 + 12 >> 2] | 0) == (HEAP32[$__e_sroa_0_1 + 16 >> 2] | 0)) {
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_1 >> 2] + 36 >> 2]]($__e_sroa_0_1) | 0) == -1) {
           label = 2586;
           break;
          }
         }
         if ($68) {
          var $__e_sroa_0_4 = $__e_sroa_0_1;
         } else {
          var $__e_sroa_0_3 = $__e_sroa_0_1;
          label = 2587;
          break L2967;
         }
        }
       } while (0);
       if (label == 2586) {
        label = 0;
        if ($68) {
         var $__e_sroa_0_3 = 0;
         label = 2587;
         break L2967;
        } else {
         var $__e_sroa_0_4 = 0;
        }
       }
       var $__e_sroa_0_4;
       if (FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($31, HEAP8[$_0137_ph162], 0) << 24 >> 24 == 37) {
        label = 2592;
        break;
       }
       var $129 = HEAP8[$_0137_ph162];
       if ($129 << 24 >> 24 > -1) {
        var $132 = HEAP32[$45 >> 2];
        if ((HEAP16[$132 + ($129 << 24 >> 24 << 1) >> 1] & 8192) != 0) {
         var $_0137_pn = $_0137_ph162;
         label = 2603;
         break;
        }
       }
       var $206 = $__b_sroa_0_2 + 12 | 0;
       var $207 = HEAP32[$206 >> 2];
       var $208 = $__b_sroa_0_2 + 16 | 0;
       if (($207 | 0) == (HEAP32[$208 >> 2] | 0)) {
        var $_0134_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_2 >> 2] + 36 >> 2]]($__b_sroa_0_2) & 255;
       } else {
        var $_0134_off0 = HEAP8[$207];
       }
       var $_0134_off0;
       var $222 = FUNCTION_TABLE[HEAP32[HEAP32[$46 >> 2] + 12 >> 2]]($31, $_0134_off0);
       if ($222 << 24 >> 24 == FUNCTION_TABLE[HEAP32[HEAP32[$46 >> 2] + 12 >> 2]]($31, HEAP8[$_0137_ph162]) << 24 >> 24) {
        label = 2628;
        break;
       }
       HEAP32[$__err >> 2] = 4;
       var $52 = 4;
       var $__e_sroa_0_1 = $__e_sroa_0_4;
       var $__b_sroa_0_1 = $__b_sroa_0_2;
      }
      L2993 : do {
       if (label == 2592) {
        label = 0;
        var $102 = $_0137_ph162 + 1 | 0;
        if (($102 | 0) == ($__fmte | 0)) {
         label = 2593;
         break L2967;
        }
        var $110 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($31, HEAP8[$102], 0);
        if ($110 << 24 >> 24 == 69 | $110 << 24 >> 24 == 48) {
         var $112 = $_0137_ph162 + 2 | 0;
         if (($112 | 0) == ($__fmte | 0)) {
          label = 2596;
          break L2967;
         }
         var $__opt_0 = $110;
         var $__cmd_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($31, HEAP8[$112], 0);
         var $_1 = $112;
        } else {
         var $__opt_0 = 0;
         var $__cmd_0 = $110;
         var $_1 = $102;
        }
        var $_1;
        var $__cmd_0;
        var $__opt_0;
        var $124 = HEAP32[HEAP32[$47 >> 2] + 36 >> 2];
        HEAP32[$48 >> 2] = $__b_sroa_0_2;
        HEAP32[$49 >> 2] = $__e_sroa_0_4;
        FUNCTION_TABLE[$124]($1, $this, $2, $3, $__iob, $__err, $__tm, $__cmd_0, $__opt_0);
        var $_0137_ph_be = $_1 + 1 | 0;
        var $__e_sroa_0_5 = $__e_sroa_0_4;
        var $__b_sroa_0_3 = HEAP32[$50 >> 2];
       } else if (label == 2628) {
        label = 0;
        var $230 = HEAP32[$206 >> 2];
        if (($230 | 0) == (HEAP32[$208 >> 2] | 0)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_2 >> 2] + 40 >> 2]]($__b_sroa_0_2);
        } else {
         HEAP32[$206 >> 2] = $230 + 1;
        }
        var $_0137_ph_be = $_0137_ph162 + 1 | 0;
        var $__e_sroa_0_5 = $__e_sroa_0_4;
        var $__b_sroa_0_3 = $__b_sroa_0_2;
       } else if (label == 2603) {
        while (1) {
         label = 0;
         var $_0137_pn;
         var $_2 = $_0137_pn + 1 | 0;
         if (($_2 | 0) == ($__fmte | 0)) {
          var $_2_lcssa = $__fmte;
          break;
         }
         var $138 = HEAP8[$_2];
         if ($138 << 24 >> 24 <= -1) {
          var $_2_lcssa = $_2;
          break;
         }
         if ((HEAP16[$132 + ($138 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
          var $_2_lcssa = $_2;
          break;
         } else {
          var $_0137_pn = $_2;
          label = 2603;
         }
        }
        var $_2_lcssa;
        var $145 = $__b_sroa_0_2;
        var $144 = $__e_sroa_0_4;
        var $__e_sroa_0_6 = $__e_sroa_0_4;
        var $__b_sroa_0_4 = $__b_sroa_0_2;
        while (1) {
         var $__b_sroa_0_4;
         var $__e_sroa_0_6;
         var $144;
         var $145;
         do {
          if (($145 | 0) == 0) {
           var $159 = 0;
           var $__b_sroa_0_5 = $__b_sroa_0_4;
          } else {
           if ((HEAP32[$145 + 12 >> 2] | 0) != (HEAP32[$145 + 16 >> 2] | 0)) {
            var $159 = $145;
            var $__b_sroa_0_5 = $__b_sroa_0_4;
            break;
           }
           var $158 = (FUNCTION_TABLE[HEAP32[HEAP32[$145 >> 2] + 36 >> 2]]($145) | 0) == -1;
           var $159 = $158 ? 0 : $145;
           var $__b_sroa_0_5 = $158 ? 0 : $__b_sroa_0_4;
          }
         } while (0);
         var $__b_sroa_0_5;
         var $159;
         var $160 = ($159 | 0) == 0;
         do {
          if (($144 | 0) == 0) {
           var $__e_sroa_0_7 = $__e_sroa_0_6;
           label = 2614;
          } else {
           if ((HEAP32[$144 + 12 >> 2] | 0) != (HEAP32[$144 + 16 >> 2] | 0)) {
            if ($160) {
             var $174 = $144;
             var $__e_sroa_0_8 = $__e_sroa_0_6;
             break;
            } else {
             var $_0137_ph_be = $_2_lcssa;
             var $__e_sroa_0_5 = $__e_sroa_0_6;
             var $__b_sroa_0_3 = $__b_sroa_0_5;
             break L2993;
            }
           }
           if ((FUNCTION_TABLE[HEAP32[HEAP32[$144 >> 2] + 36 >> 2]]($144) | 0) == -1) {
            var $__e_sroa_0_7 = 0;
            label = 2614;
            break;
           }
           if ($160) {
            var $174 = $144;
            var $__e_sroa_0_8 = $__e_sroa_0_6;
           } else {
            var $_0137_ph_be = $_2_lcssa;
            var $__e_sroa_0_5 = $__e_sroa_0_6;
            var $__b_sroa_0_3 = $__b_sroa_0_5;
            break L2993;
           }
          }
         } while (0);
         if (label == 2614) {
          label = 0;
          var $__e_sroa_0_7;
          if ($160) {
           var $_0137_ph_be = $_2_lcssa;
           var $__e_sroa_0_5 = $__e_sroa_0_7;
           var $__b_sroa_0_3 = $__b_sroa_0_5;
           break L2993;
          } else {
           var $174 = 0;
           var $__e_sroa_0_8 = $__e_sroa_0_7;
          }
         }
         var $__e_sroa_0_8;
         var $174;
         var $175 = $159 + 12 | 0;
         var $176 = HEAP32[$175 >> 2];
         var $177 = $159 + 16 | 0;
         if (($176 | 0) == (HEAP32[$177 >> 2] | 0)) {
          var $_0136_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$159 >> 2] + 36 >> 2]]($159) & 255;
         } else {
          var $_0136_off0 = HEAP8[$176];
         }
         var $_0136_off0;
         if ($_0136_off0 << 24 >> 24 <= -1) {
          var $_0137_ph_be = $_2_lcssa;
          var $__e_sroa_0_5 = $__e_sroa_0_8;
          var $__b_sroa_0_3 = $__b_sroa_0_5;
          break L2993;
         }
         if ((HEAP16[HEAP32[$45 >> 2] + ($_0136_off0 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
          var $_0137_ph_be = $_2_lcssa;
          var $__e_sroa_0_5 = $__e_sroa_0_8;
          var $__b_sroa_0_3 = $__b_sroa_0_5;
          break L2993;
         }
         var $195 = HEAP32[$175 >> 2];
         if (($195 | 0) == (HEAP32[$177 >> 2] | 0)) {
          FUNCTION_TABLE[HEAP32[HEAP32[$159 >> 2] + 40 >> 2]]($159);
          var $145 = $159;
          var $144 = $174;
          var $__e_sroa_0_6 = $__e_sroa_0_8;
          var $__b_sroa_0_4 = $__b_sroa_0_5;
          continue;
         } else {
          HEAP32[$175 >> 2] = $195 + 1;
          var $145 = $159;
          var $144 = $174;
          var $__e_sroa_0_6 = $__e_sroa_0_8;
          var $__b_sroa_0_4 = $__b_sroa_0_5;
          continue;
         }
        }
       }
      } while (0);
      var $__b_sroa_0_3;
      var $__e_sroa_0_5;
      var $_0137_ph_be;
      if (($_0137_ph_be | 0) == ($__fmte | 0)) {
       var $__e_sroa_0_10 = $__e_sroa_0_5;
       var $__b_sroa_0_7 = $__b_sroa_0_3;
       break L2965;
      }
      var $_0137_ph162 = $_0137_ph_be;
      var $_pre163 = HEAP32[$__err >> 2];
      var $__e_sroa_0_0 = $__e_sroa_0_5;
      var $__b_sroa_0_0 = $__b_sroa_0_3;
     }
     if (label == 2587) {
      var $__e_sroa_0_3;
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_3;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     } else if (label == 2593) {
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_4;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     } else if (label == 2596) {
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_4;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     }
    }
   } while (0);
   var $__b_sroa_0_7;
   var $__e_sroa_0_10;
   do {
    if (($__b_sroa_0_7 | 0) == 0) {
     label = 2636;
    } else {
     if ((HEAP32[$__b_sroa_0_7 + 12 >> 2] | 0) != (HEAP32[$__b_sroa_0_7 + 16 >> 2] | 0)) {
      label = 2636;
      break;
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_7 >> 2] + 36 >> 2]]($__b_sroa_0_7) | 0) == -1) {
      var $255 = 0;
     } else {
      label = 2636;
     }
    }
   } while (0);
   if (label == 2636) {
    var $255 = $__b_sroa_0_7;
   }
   var $255;
   var $256 = ($255 | 0) == 0;
   do {
    if (($__e_sroa_0_10 | 0) == 0) {
     label = 2641;
    } else {
     if ((HEAP32[$__e_sroa_0_10 + 12 >> 2] | 0) == (HEAP32[$__e_sroa_0_10 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_10 >> 2] + 36 >> 2]]($__e_sroa_0_10) | 0) == -1) {
       label = 2641;
       break;
      }
     }
     if (!$256) {
      break;
     }
     var $273 = $agg_result | 0;
     HEAP32[$273 >> 2] = $255;
     STACKTOP = sp;
     return;
    }
   } while (0);
   do {
    if (label == 2641) {
     if ($256) {
      break;
     }
     var $273 = $agg_result | 0;
     HEAP32[$273 >> 2] = $255;
     STACKTOP = sp;
     return;
    }
   } while (0);
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   var $273 = $agg_result | 0;
   HEAP32[$273 >> 2] = $255;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $29 = ___cxa_allocate_exception(4);
 HEAP32[$29 >> 2] = 9776;
 ___cxa_throw($29, 15976, 602);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $11 = HEAP32[21572 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $40 = HEAP32[$__e >> 2];
   var $41 = $this + 8 | 0;
   var $45 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] >> 2]]($41);
   var $50 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $40, $45, $45 + 168 | 0, $24, $__err, 0) - $45 | 0;
   if (($50 | 0) >= 168) {
    var $56 = $__b | 0;
    var $57 = HEAP32[$56 >> 2];
    var $58 = $agg_result | 0;
    HEAP32[$58 >> 2] = $57;
    STACKTOP = sp;
    return;
   }
   HEAP32[$__tm + 24 >> 2] = (($50 | 0) / 12 & -1 | 0) % 7 & -1;
   var $56 = $__b | 0;
   var $57 = HEAP32[$56 >> 2];
   var $58 = $agg_result | 0;
   HEAP32[$58 >> 2] = $57;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $11 = HEAP32[21572 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $40 = HEAP32[$__e >> 2];
   var $41 = $this + 8 | 0;
   var $46 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 4 >> 2]]($41);
   var $51 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $40, $46, $46 + 288 | 0, $24, $__err, 0) - $46 | 0;
   if (($51 | 0) >= 288) {
    var $57 = $__b | 0;
    var $58 = HEAP32[$57 >> 2];
    var $59 = $agg_result | 0;
    HEAP32[$59 >> 2] = $58;
    STACKTOP = sp;
    return;
   }
   HEAP32[$__tm + 16 >> 2] = (($51 | 0) / 12 & -1 | 0) % 12 & -1;
   var $57 = $__b | 0;
   var $58 = HEAP32[$57 >> 2];
   var $59 = $agg_result | 0;
   HEAP32[$59 >> 2] = $58;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $11 = HEAP32[21572 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $42 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $24, 4);
   if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
    var $55 = $__b | 0;
    var $56 = HEAP32[$55 >> 2];
    var $57 = $agg_result | 0;
    HEAP32[$57 >> 2] = $56;
    STACKTOP = sp;
    return;
   }
   if (($42 | 0) < 69) {
    var $__t_0_i = $42 + 2e3 | 0;
   } else {
    var $__t_0_i = ($42 - 69 | 0) >>> 0 < 31 ? $42 + 1900 | 0 : $42;
   }
   var $__t_0_i;
   HEAP32[$__tm + 20 >> 2] = $__t_0_i - 1900;
   var $55 = $__b | 0;
   var $56 = HEAP32[$55 >> 2];
   var $57 = $agg_result | 0;
   HEAP32[$57 >> 2] = $56;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 88 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = sp + 16;
 var $3 = sp + 24;
 var $4 = sp + 32;
 var $5 = sp + 40;
 var $6 = sp + 48;
 var $7 = sp + 56;
 var $8 = sp + 64;
 var $9 = sp + 72;
 var $10 = sp + 80;
 HEAP32[$__err >> 2] = 0;
 var $12 = HEAP32[$__iob + 28 >> 2];
 var $14 = $12 + 4 | 0;
 tempValue = HEAP32[$14 >> 2], HEAP32[$14 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $21 = HEAP32[21572 >> 2] - 1 | 0;
 var $27 = HEAP32[$12 + 8 >> 2];
 do {
  if (HEAP32[$12 + 12 >> 2] - $27 >> 2 >>> 0 > $21 >>> 0) {
   var $34 = HEAP32[$27 + ($21 << 2) >> 2];
   if (($34 | 0) == 0) {
    break;
   }
   var $38 = $34;
   var $40 = $12 + 4 | 0;
   if (((tempValue = HEAP32[$40 >> 2], HEAP32[$40 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 8 >> 2]]($12);
   }
   var $49 = $__fmt << 24 >> 24;
   L3122 : do {
    if (($49 | 0) == 77) {
     var $213 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $214 = HEAP32[$__err >> 2];
     if (($214 & 4 | 0) == 0 & ($213 | 0) < 60) {
      HEAP32[$__tm + 4 >> 2] = $213;
      break;
     } else {
      HEAP32[$__err >> 2] = $214 | 4;
      break;
     }
    } else if (($49 | 0) == 97 | ($49 | 0) == 65) {
     var $64 = HEAP32[$__e >> 2];
     var $65 = $this + 8 | 0;
     var $69 = FUNCTION_TABLE[HEAP32[HEAP32[$65 >> 2] >> 2]]($65);
     var $74 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $64, $69, $69 + 168 | 0, $38, $__err, 0) - $69 | 0;
     if (($74 | 0) >= 168) {
      break;
     }
     HEAP32[$__tm + 24 >> 2] = (($74 | 0) / 12 & -1 | 0) % 7 & -1;
    } else if (($49 | 0) == 110 | ($49 | 0) == 116) {
     var $225 = $__b | 0;
     var $227 = $34 + 8 | 0;
     var $_sroa_055_0 = HEAP32[$__e >> 2];
     L3130 : while (1) {
      var $_sroa_055_0;
      var $228 = HEAP32[$225 >> 2];
      do {
       if (($228 | 0) == 0) {
        var $243 = 0;
       } else {
        if ((HEAP32[$228 + 12 >> 2] | 0) != (HEAP32[$228 + 16 >> 2] | 0)) {
         var $243 = $228;
         break;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$228 >> 2] + 36 >> 2]]($228) | 0) == -1) {
         HEAP32[$225 >> 2] = 0;
         var $243 = 0;
         break;
        } else {
         var $243 = HEAP32[$225 >> 2];
         break;
        }
       }
      } while (0);
      var $243;
      var $244 = ($243 | 0) == 0;
      do {
       if (($_sroa_055_0 | 0) == 0) {
        label = 2753;
       } else {
        if ((HEAP32[$_sroa_055_0 + 12 >> 2] | 0) == (HEAP32[$_sroa_055_0 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$_sroa_055_0 >> 2] + 36 >> 2]]($_sroa_055_0) | 0) == -1) {
          label = 2753;
          break;
         }
        }
        if ($244) {
         var $258 = 0;
         var $_sroa_055_2 = $_sroa_055_0;
        } else {
         var $295 = $_sroa_055_0;
         var $294 = 0;
         break L3130;
        }
       }
      } while (0);
      if (label == 2753) {
       label = 0;
       if ($244) {
        var $295 = 0;
        var $294 = 1;
        break;
       } else {
        var $258 = 1;
        var $_sroa_055_2 = 0;
       }
      }
      var $_sroa_055_2;
      var $258;
      var $259 = HEAP32[$225 >> 2];
      var $261 = HEAP32[$259 + 12 >> 2];
      if (($261 | 0) == (HEAP32[$259 + 16 >> 2] | 0)) {
       var $_053_off0_i12 = FUNCTION_TABLE[HEAP32[HEAP32[$259 >> 2] + 36 >> 2]]($259) & 255;
      } else {
       var $_053_off0_i12 = HEAP8[$261];
      }
      var $_053_off0_i12;
      if ($_053_off0_i12 << 24 >> 24 <= -1) {
       var $295 = $_sroa_055_2;
       var $294 = $258;
       break;
      }
      if ((HEAP16[HEAP32[$227 >> 2] + ($_053_off0_i12 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
       var $295 = $_sroa_055_2;
       var $294 = $258;
       break;
      }
      var $280 = HEAP32[$225 >> 2];
      var $281 = $280 + 12 | 0;
      var $282 = HEAP32[$281 >> 2];
      if (($282 | 0) == (HEAP32[$280 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$280 >> 2] + 40 >> 2]]($280);
       var $_sroa_055_0 = $_sroa_055_2;
       continue;
      } else {
       HEAP32[$281 >> 2] = $282 + 1;
       var $_sroa_055_0 = $_sroa_055_2;
       continue;
      }
     }
     var $294;
     var $295;
     var $296 = HEAP32[$225 >> 2];
     do {
      if (($296 | 0) == 0) {
       var $311 = 0;
      } else {
       if ((HEAP32[$296 + 12 >> 2] | 0) != (HEAP32[$296 + 16 >> 2] | 0)) {
        var $311 = $296;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$296 >> 2] + 36 >> 2]]($296) | 0) == -1) {
        HEAP32[$225 >> 2] = 0;
        var $311 = 0;
        break;
       } else {
        var $311 = HEAP32[$225 >> 2];
        break;
       }
      }
     } while (0);
     var $311;
     var $312 = ($311 | 0) == 0;
     do {
      if ($294) {
       label = 2771;
      } else {
       if ((HEAP32[$295 + 12 >> 2] | 0) != (HEAP32[$295 + 16 >> 2] | 0)) {
        if ($312 ^ ($295 | 0) == 0) {
         break L3122;
        } else {
         break;
        }
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$295 >> 2] + 36 >> 2]]($295) | 0) == -1) {
        label = 2771;
        break;
       }
       if ($312) {
        break L3122;
       }
      }
     } while (0);
     if (label == 2771) {
      if (!$312) {
       break;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    } else if (($49 | 0) == 98 | ($49 | 0) == 66 | ($49 | 0) == 104) {
     var $82 = HEAP32[$__e >> 2];
     var $83 = $this + 8 | 0;
     var $88 = FUNCTION_TABLE[HEAP32[HEAP32[$83 >> 2] + 4 >> 2]]($83);
     var $93 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $82, $88, $88 + 288 | 0, $38, $__err, 0) - $88 | 0;
     if (($93 | 0) >= 288) {
      break;
     }
     HEAP32[$__tm + 16 >> 2] = (($93 | 0) / 12 & -1 | 0) % 12 & -1;
    } else if (($49 | 0) == 100 | ($49 | 0) == 101) {
     var $134 = $__tm + 12 | 0;
     var $137 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $138 = HEAP32[$__err >> 2];
     do {
      if (($138 & 4 | 0) == 0) {
       if (($137 - 1 | 0) >>> 0 >= 31) {
        break;
       }
       HEAP32[$134 >> 2] = $137;
       break L3122;
      }
     } while (0);
     HEAP32[$__err >> 2] = $138 | 4;
    } else if (($49 | 0) == 72) {
     var $163 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $164 = HEAP32[$__err >> 2];
     if (($164 & 4 | 0) == 0 & ($163 | 0) < 24) {
      HEAP32[$__tm + 8 >> 2] = $163;
      break;
     } else {
      HEAP32[$__err >> 2] = $164 | 4;
      break;
     }
    } else if (($49 | 0) == 73) {
     var $173 = $__tm + 8 | 0;
     var $176 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $177 = HEAP32[$__err >> 2];
     do {
      if (($177 & 4 | 0) == 0) {
       if (($176 - 1 | 0) >>> 0 >= 12) {
        break;
       }
       HEAP32[$173 >> 2] = $176;
       break L3122;
      }
     } while (0);
     HEAP32[$__err >> 2] = $177 | 4;
    } else if (($49 | 0) == 99) {
     var $100 = $this + 8 | 0;
     var $105 = FUNCTION_TABLE[HEAP32[HEAP32[$100 >> 2] + 12 >> 2]]($100);
     var $106 = $__b | 0;
     var $111 = HEAP8[$105];
     if (($111 & 1) == 0) {
      var $120 = $105 + 1 | 0;
     } else {
      var $120 = HEAP32[$105 + 8 >> 2];
     }
     var $120;
     var $121 = $111 & 255;
     if (($121 & 1 | 0) == 0) {
      var $129 = $121 >>> 1;
     } else {
      var $129 = HEAP32[$105 + 4 >> 2];
     }
     var $129;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2, $this, HEAP32[$106 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $120, $120 + $129 | 0);
     HEAP32[$106 >> 2] = HEAP32[$2 >> 2];
    } else if (($49 | 0) == 106) {
     var $188 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 3);
     var $189 = HEAP32[$__err >> 2];
     if (($189 & 4 | 0) == 0 & ($188 | 0) < 366) {
      HEAP32[$__tm + 28 >> 2] = $188;
      break;
     } else {
      HEAP32[$__err >> 2] = $189 | 4;
      break;
     }
    } else if (($49 | 0) == 68) {
     var $147 = $__b | 0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3, $this, HEAP32[$147 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9496, 9504);
     HEAP32[$147 >> 2] = HEAP32[$3 >> 2];
    } else if (($49 | 0) == 70) {
     var $154 = $__b | 0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4, $this, HEAP32[$154 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9488, 9496);
     HEAP32[$154 >> 2] = HEAP32[$4 >> 2];
    } else if (($49 | 0) == 112) {
     var $330 = $__tm + 8 | 0;
     var $332 = HEAP32[$__e >> 2];
     var $333 = $this + 8 | 0;
     var $338 = FUNCTION_TABLE[HEAP32[HEAP32[$333 >> 2] + 8 >> 2]]($333);
     var $341 = HEAPU8[$338];
     if (($341 & 1 | 0) == 0) {
      var $349 = $341 >>> 1;
     } else {
      var $349 = HEAP32[$338 + 4 >> 2];
     }
     var $349;
     var $353 = HEAPU8[$338 + 12 | 0];
     if (($353 & 1 | 0) == 0) {
      var $361 = $353 >>> 1;
     } else {
      var $361 = HEAP32[$338 + 16 >> 2];
     }
     var $361;
     if (($349 | 0) == (-$361 | 0)) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
      break;
     }
     var $369 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $332, $338, $338 + 24 | 0, $38, $__err, 0);
     var $372 = $369 - $338 | 0;
     do {
      if (($369 | 0) == ($338 | 0)) {
       if ((HEAP32[$330 >> 2] | 0) != 12) {
        break;
       }
       HEAP32[$330 >> 2] = 0;
       break L3122;
      }
     } while (0);
     if (($372 | 0) != 12) {
      break;
     }
     var $381 = HEAP32[$330 >> 2];
     if (($381 | 0) >= 12) {
      break;
     }
     HEAP32[$330 >> 2] = $381 + 12;
    } else if (($49 | 0) == 114) {
     var $386 = $__b | 0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5, $this, HEAP32[$386 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9472, 9483);
     HEAP32[$386 >> 2] = HEAP32[$5 >> 2];
    } else if (($49 | 0) == 82) {
     var $393 = $__b | 0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6, $this, HEAP32[$393 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9464, 9469);
     HEAP32[$393 >> 2] = HEAP32[$6 >> 2];
    } else if (($49 | 0) == 83) {
     var $402 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $403 = HEAP32[$__err >> 2];
     if (($403 & 4 | 0) == 0 & ($402 | 0) < 61) {
      HEAP32[$__tm >> 2] = $402;
      break;
     } else {
      HEAP32[$__err >> 2] = $403 | 4;
      break;
     }
    } else if (($49 | 0) == 84) {
     var $412 = $__b | 0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($7, $this, HEAP32[$412 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9456, 9464);
     HEAP32[$412 >> 2] = HEAP32[$7 >> 2];
    } else if (($49 | 0) == 119) {
     var $421 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 1);
     var $422 = HEAP32[$__err >> 2];
     if (($422 & 4 | 0) == 0 & ($421 | 0) < 7) {
      HEAP32[$__tm + 24 >> 2] = $421;
      break;
     } else {
      HEAP32[$__err >> 2] = $422 | 4;
      break;
     }
    } else if (($49 | 0) == 120) {
     var $434 = HEAP32[HEAP32[$this >> 2] + 20 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$__b >> 2];
     HEAP32[$9 >> 2] = HEAP32[$__e >> 2];
     FUNCTION_TABLE[$434]($agg_result, $this, $8, $9, $__iob, $__err, $__tm);
     STACKTOP = sp;
     return;
    } else if (($49 | 0) == 88) {
     var $442 = $this + 8 | 0;
     var $447 = FUNCTION_TABLE[HEAP32[HEAP32[$442 >> 2] + 24 >> 2]]($442);
     var $448 = $__b | 0;
     var $453 = HEAP8[$447];
     if (($453 & 1) == 0) {
      var $462 = $447 + 1 | 0;
     } else {
      var $462 = HEAP32[$447 + 8 >> 2];
     }
     var $462;
     var $463 = $453 & 255;
     if (($463 & 1 | 0) == 0) {
      var $471 = $463 >>> 1;
     } else {
      var $471 = HEAP32[$447 + 4 >> 2];
     }
     var $471;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($10, $this, HEAP32[$448 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $462, $462 + $471 | 0);
     HEAP32[$448 >> 2] = HEAP32[$10 >> 2];
    } else if (($49 | 0) == 109) {
     var $201 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2) - 1 | 0;
     var $202 = HEAP32[$__err >> 2];
     if (($202 & 4 | 0) == 0 & ($201 | 0) < 12) {
      HEAP32[$__tm + 16 >> 2] = $201;
      break;
     } else {
      HEAP32[$__err >> 2] = $202 | 4;
      break;
     }
    } else if (($49 | 0) == 121) {
     var $479 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 4);
     if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
      break;
     }
     if (($479 | 0) < 69) {
      var $__t_0_i = $479 + 2e3 | 0;
     } else {
      var $__t_0_i = ($479 - 69 | 0) >>> 0 < 31 ? $479 + 1900 | 0 : $479;
     }
     var $__t_0_i;
     HEAP32[$__tm + 20 >> 2] = $__t_0_i - 1900;
    } else if (($49 | 0) == 89) {
     var $495 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 4);
     if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
      break;
     }
     HEAP32[$__tm + 20 >> 2] = $495 - 1900;
    } else if (($49 | 0) == 37) {
     var $504 = HEAP32[$__e >> 2];
     var $505 = $__b | 0;
     var $506 = HEAP32[$505 >> 2];
     do {
      if (($506 | 0) == 0) {
       var $521 = 0;
      } else {
       if ((HEAP32[$506 + 12 >> 2] | 0) != (HEAP32[$506 + 16 >> 2] | 0)) {
        var $521 = $506;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$506 >> 2] + 36 >> 2]]($506) | 0) == -1) {
        HEAP32[$505 >> 2] = 0;
        var $521 = 0;
        break;
       } else {
        var $521 = HEAP32[$505 >> 2];
        break;
       }
      }
     } while (0);
     var $521;
     var $522 = ($521 | 0) == 0;
     do {
      if (($504 | 0) == 0) {
       label = 2821;
      } else {
       if ((HEAP32[$504 + 12 >> 2] | 0) == (HEAP32[$504 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$504 >> 2] + 36 >> 2]]($504) | 0) == -1) {
         label = 2821;
         break;
        }
       }
       if ($522) {
        var $540 = $504;
        var $539 = 0;
       } else {
        label = 2822;
       }
      }
     } while (0);
     if (label == 2821) {
      if ($522) {
       label = 2822;
      } else {
       var $540 = 0;
       var $539 = 1;
      }
     }
     if (label == 2822) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
      break;
     }
     var $539;
     var $540;
     var $541 = HEAP32[$505 >> 2];
     var $543 = HEAP32[$541 + 12 >> 2];
     if (($543 | 0) == (HEAP32[$541 + 16 >> 2] | 0)) {
      var $_053_off0_i = FUNCTION_TABLE[HEAP32[HEAP32[$541 >> 2] + 36 >> 2]]($541) & 255;
     } else {
      var $_053_off0_i = HEAP8[$543];
     }
     var $_053_off0_i;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$34 >> 2] + 36 >> 2]]($38, $_053_off0_i, 0) << 24 >> 24 != 37) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
      break;
     }
     var $565 = HEAP32[$505 >> 2];
     var $566 = $565 + 12 | 0;
     var $567 = HEAP32[$566 >> 2];
     if (($567 | 0) == (HEAP32[$565 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$565 >> 2] + 40 >> 2]]($565);
     } else {
      HEAP32[$566 >> 2] = $567 + 1;
     }
     var $579 = HEAP32[$505 >> 2];
     do {
      if (($579 | 0) == 0) {
       var $594 = 0;
      } else {
       if ((HEAP32[$579 + 12 >> 2] | 0) != (HEAP32[$579 + 16 >> 2] | 0)) {
        var $594 = $579;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$579 >> 2] + 36 >> 2]]($579) | 0) == -1) {
        HEAP32[$505 >> 2] = 0;
        var $594 = 0;
        break;
       } else {
        var $594 = HEAP32[$505 >> 2];
        break;
       }
      }
     } while (0);
     var $594;
     var $595 = ($594 | 0) == 0;
     do {
      if ($539) {
       label = 2840;
      } else {
       if ((HEAP32[$540 + 12 >> 2] | 0) != (HEAP32[$540 + 16 >> 2] | 0)) {
        if ($595 ^ ($540 | 0) == 0) {
         break L3122;
        } else {
         break;
        }
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$540 >> 2] + 36 >> 2]]($540) | 0) == -1) {
        label = 2840;
        break;
       }
       if ($595) {
        break L3122;
       }
      }
     } while (0);
     if (label == 2840) {
      if (!$595) {
       break;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    }
   } while (0);
   HEAP32[$agg_result >> 2] = HEAP32[$__b >> 2];
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $36 = ___cxa_allocate_exception(4);
 HEAP32[$36 >> 2] = 9776;
 ___cxa_throw($36, 15976, 602);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 return 2;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e_0, $__err, $__ct, $__n) {
 var label = 0;
 var $1 = $__b | 0;
 var $2 = HEAP32[$1 >> 2];
 do {
  if (($2 | 0) == 0) {
   var $17 = 0;
  } else {
   if ((HEAP32[$2 + 12 >> 2] | 0) != (HEAP32[$2 + 16 >> 2] | 0)) {
    var $17 = $2;
    break;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0) == -1) {
    HEAP32[$1 >> 2] = 0;
    var $17 = 0;
    break;
   } else {
    var $17 = HEAP32[$1 >> 2];
    break;
   }
  }
 } while (0);
 var $17;
 var $18 = ($17 | 0) == 0;
 do {
  if (($__e_0 | 0) == 0) {
   label = 2859;
  } else {
   if ((HEAP32[$__e_0 + 12 >> 2] | 0) == (HEAP32[$__e_0 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_0 >> 2] + 36 >> 2]]($__e_0) | 0) == -1) {
     label = 2859;
     break;
    }
   }
   if ($18) {
    var $35 = $__e_0;
   } else {
    label = 2860;
   }
  }
 } while (0);
 if (label == 2859) {
  if ($18) {
   label = 2860;
  } else {
   var $35 = 0;
  }
 }
 if (label == 2860) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  var $_0102 = 0;
  var $_0102;
  return $_0102;
 }
 var $35;
 var $36 = HEAP32[$1 >> 2];
 var $38 = HEAP32[$36 + 12 >> 2];
 if (($38 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
  var $_0107_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$36 >> 2] + 36 >> 2]]($36) & 255;
 } else {
  var $_0107_off0 = HEAP8[$38];
 }
 var $_0107_off0;
 do {
  if ($_0107_off0 << 24 >> 24 > -1) {
   var $52 = $__ct + 8 | 0;
   if ((HEAP16[HEAP32[$52 >> 2] + ($_0107_off0 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
    break;
   }
   var $60 = $__ct;
   var $65 = FUNCTION_TABLE[HEAP32[HEAP32[$60 >> 2] + 36 >> 2]]($__ct, $_0107_off0, 0) << 24 >> 24;
   var $66 = HEAP32[$1 >> 2];
   var $67 = $66 + 12 | 0;
   var $68 = HEAP32[$67 >> 2];
   if (($68 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$66 >> 2] + 40 >> 2]]($66);
    var $__r_0_in = $65;
    var $_0_in = $__n;
    var $80 = $35;
   } else {
    HEAP32[$67 >> 2] = $68 + 1;
    var $__r_0_in = $65;
    var $_0_in = $__n;
    var $80 = $35;
   }
   while (1) {
    var $80;
    var $_0_in;
    var $__r_0_in;
    var $__r_0 = $__r_0_in - 48 | 0;
    var $_0 = $_0_in - 1 | 0;
    var $81 = HEAP32[$1 >> 2];
    do {
     if (($81 | 0) == 0) {
      var $96 = 0;
     } else {
      if ((HEAP32[$81 + 12 >> 2] | 0) != (HEAP32[$81 + 16 >> 2] | 0)) {
       var $96 = $81;
       break;
      }
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$81 >> 2] + 36 >> 2]]($81) | 0) == -1) {
       HEAP32[$1 >> 2] = 0;
       var $96 = 0;
       break;
      } else {
       var $96 = HEAP32[$1 >> 2];
       break;
      }
     }
    } while (0);
    var $96;
    var $97 = ($96 | 0) == 0;
    if (($80 | 0) == 0) {
     var $113 = $96;
     var $112 = 0;
    } else {
     if ((HEAP32[$80 + 12 >> 2] | 0) == (HEAP32[$80 + 16 >> 2] | 0)) {
      var $111 = (FUNCTION_TABLE[HEAP32[HEAP32[$80 >> 2] + 36 >> 2]]($80) | 0) == -1 ? 0 : $80;
     } else {
      var $111 = $80;
     }
     var $111;
     var $113 = HEAP32[$1 >> 2];
     var $112 = $111;
    }
    var $112;
    var $113;
    var $114 = ($112 | 0) == 0;
    if (!(($97 ^ $114) & ($_0 | 0) > 0)) {
     label = 2888;
     break;
    }
    var $119 = HEAP32[$113 + 12 >> 2];
    if (($119 | 0) == (HEAP32[$113 + 16 >> 2] | 0)) {
     var $_0103_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$113 >> 2] + 36 >> 2]]($113) & 255;
    } else {
     var $_0103_off0 = HEAP8[$119];
    }
    var $_0103_off0;
    if ($_0103_off0 << 24 >> 24 <= -1) {
     var $_0102 = $__r_0;
     label = 2904;
     break;
    }
    if ((HEAP16[HEAP32[$52 >> 2] + ($_0103_off0 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
     var $_0102 = $__r_0;
     label = 2901;
     break;
    }
    var $144 = (FUNCTION_TABLE[HEAP32[HEAP32[$60 >> 2] + 36 >> 2]]($__ct, $_0103_off0, 0) << 24 >> 24) + ($__r_0 * 10 & -1) | 0;
    var $145 = HEAP32[$1 >> 2];
    var $146 = $145 + 12 | 0;
    var $147 = HEAP32[$146 >> 2];
    if (($147 | 0) == (HEAP32[$145 + 16 >> 2] | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$145 >> 2] + 40 >> 2]]($145);
     var $__r_0_in = $144;
     var $_0_in = $_0;
     var $80 = $112;
     continue;
    } else {
     HEAP32[$146 >> 2] = $147 + 1;
     var $__r_0_in = $144;
     var $_0_in = $_0;
     var $80 = $112;
     continue;
    }
   }
   if (label == 2888) {
    do {
     if (($113 | 0) == 0) {
      var $174 = 0;
     } else {
      if ((HEAP32[$113 + 12 >> 2] | 0) != (HEAP32[$113 + 16 >> 2] | 0)) {
       var $174 = $113;
       break;
      }
      if ((FUNCTION_TABLE[HEAP32[HEAP32[$113 >> 2] + 36 >> 2]]($113) | 0) == -1) {
       HEAP32[$1 >> 2] = 0;
       var $174 = 0;
       break;
      } else {
       var $174 = HEAP32[$1 >> 2];
       break;
      }
     }
    } while (0);
    var $174;
    var $175 = ($174 | 0) == 0;
    do {
     if ($114) {
      label = 2897;
     } else {
      if ((HEAP32[$112 + 12 >> 2] | 0) == (HEAP32[$112 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$112 >> 2] + 36 >> 2]]($112) | 0) == -1) {
        label = 2897;
        break;
       }
      }
      if ($175) {
       var $_0102 = $__r_0;
      } else {
       break;
      }
      var $_0102;
      return $_0102;
     }
    } while (0);
    do {
     if (label == 2897) {
      if ($175) {
       break;
      } else {
       var $_0102 = $__r_0;
      }
      var $_0102;
      return $_0102;
     }
    } while (0);
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    var $_0102 = $__r_0;
    var $_0102;
    return $_0102;
   } else if (label == 2901) {
    var $_0102;
    return $_0102;
   } else if (label == 2904) {
    var $_0102;
    return $_0102;
   }
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
 var $_0102 = 0;
 var $_0102;
 return $_0102;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, HEAP32[$__b >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9424, 9456);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $1 = $this + 8 | 0;
 var $6 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1);
 var $12 = HEAP8[$6];
 if (($12 & 1) == 0) {
  var $20 = $6 + 4 | 0;
 } else {
  var $20 = HEAP32[$6 + 8 >> 2];
 }
 var $20;
 var $21 = $12 & 255;
 if (($21 & 1 | 0) == 0) {
  var $29 = $21 >>> 1;
 } else {
  var $29 = HEAP32[$6 + 4 >> 2];
 }
 var $29;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, HEAP32[$__b >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $20, $20 + ($29 << 2) | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, $__b_0, $__e_0, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var $__p_i_i_i = sp;
 var $1 = sp + 16;
 var $2 = sp + 24;
 var $3 = sp + 32;
 var $5 = HEAP32[$__iob + 28 >> 2];
 var $7 = $5 + 4 | 0;
 tempValue = HEAP32[$7 >> 2], HEAP32[$7 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $14 = HEAP32[21564 >> 2] - 1 | 0;
 var $20 = HEAP32[$5 + 8 >> 2];
 do {
  if (HEAP32[$5 + 12 >> 2] - $20 >> 2 >>> 0 > $14 >>> 0) {
   var $27 = HEAP32[$20 + ($14 << 2) >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   var $31 = $27;
   var $33 = $5 + 4 | 0;
   if (((tempValue = HEAP32[$33 >> 2], HEAP32[$33 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5);
   }
   HEAP32[$__err >> 2] = 0;
   L3411 : do {
    if (($__fmtb | 0) == ($__fmte | 0)) {
     var $__e_sroa_0_10 = $__e_0;
     var $__b_sroa_0_7 = $__b_0;
    } else {
     var $43 = $27;
     var $44 = $27;
     var $45 = $27;
     var $46 = $this;
     var $47 = $2 | 0;
     var $48 = $3 | 0;
     var $49 = $1 | 0;
     var $_0134_ph154 = $__fmtb;
     var $_pre155 = 0;
     var $__e_sroa_0_0 = $__e_0;
     var $__b_sroa_0_0 = $__b_0;
     L3413 : while (1) {
      var $__b_sroa_0_0;
      var $__e_sroa_0_0;
      var $_pre155;
      var $_0134_ph154;
      var $51 = $_pre155;
      var $__e_sroa_0_1 = $__e_sroa_0_0;
      var $__b_sroa_0_1 = $__b_sroa_0_0;
      while (1) {
       var $__b_sroa_0_1;
       var $__e_sroa_0_1;
       var $51;
       if (($51 | 0) != 0) {
        var $__e_sroa_0_10 = $__e_sroa_0_1;
        var $__b_sroa_0_7 = $__b_sroa_0_1;
        break L3411;
       }
       if (($__b_sroa_0_1 | 0) == 0) {
        var $__b_sroa_0_2 = 0;
       } else {
        var $57 = HEAP32[$__b_sroa_0_1 + 12 >> 2];
        if (($57 | 0) == (HEAP32[$__b_sroa_0_1 + 16 >> 2] | 0)) {
         var $_0140 = FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_1 >> 2] + 36 >> 2]]($__b_sroa_0_1);
        } else {
         var $_0140 = HEAP32[$57 >> 2];
        }
        var $_0140;
        var $__b_sroa_0_2 = ($_0140 | 0) == -1 ? 0 : $__b_sroa_0_1;
       }
       var $__b_sroa_0_2;
       var $70 = ($__b_sroa_0_2 | 0) == 0;
       do {
        if (($__e_sroa_0_1 | 0) == 0) {
         label = 2942;
        } else {
         var $74 = HEAP32[$__e_sroa_0_1 + 12 >> 2];
         if (($74 | 0) == (HEAP32[$__e_sroa_0_1 + 16 >> 2] | 0)) {
          var $_0139 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_1 >> 2] + 36 >> 2]]($__e_sroa_0_1);
         } else {
          var $_0139 = HEAP32[$74 >> 2];
         }
         var $_0139;
         if (($_0139 | 0) == -1) {
          label = 2942;
          break;
         }
         if ($70) {
          var $__e_sroa_0_4 = $__e_sroa_0_1;
         } else {
          var $__e_sroa_0_3 = $__e_sroa_0_1;
          label = 2944;
          break L3413;
         }
        }
       } while (0);
       if (label == 2942) {
        label = 0;
        if ($70) {
         var $__e_sroa_0_3 = 0;
         label = 2944;
         break L3413;
        } else {
         var $__e_sroa_0_4 = 0;
        }
       }
       var $__e_sroa_0_4;
       if (FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 52 >> 2]]($31, HEAP32[$_0134_ph154 >> 2], 0) << 24 >> 24 == 37) {
        label = 2949;
        break;
       }
       if (FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 12 >> 2]]($31, 8192, HEAP32[$_0134_ph154 >> 2])) {
        var $_0134_pn = $_0134_ph154;
        label = 2959;
        break;
       }
       var $214 = $__b_sroa_0_2 + 12 | 0;
       var $215 = HEAP32[$214 >> 2];
       var $216 = $__b_sroa_0_2 + 16 | 0;
       if (($215 | 0) == (HEAP32[$216 >> 2] | 0)) {
        var $_0133 = FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_2 >> 2] + 36 >> 2]]($__b_sroa_0_2);
       } else {
        var $_0133 = HEAP32[$215 >> 2];
       }
       var $_0133;
       var $230 = FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 28 >> 2]]($31, $_0133);
       if (($230 | 0) == (FUNCTION_TABLE[HEAP32[HEAP32[$45 >> 2] + 28 >> 2]]($31, HEAP32[$_0134_ph154 >> 2]) | 0)) {
        label = 2985;
        break;
       }
       HEAP32[$__err >> 2] = 4;
       var $51 = 4;
       var $__e_sroa_0_1 = $__e_sroa_0_4;
       var $__b_sroa_0_1 = $__b_sroa_0_2;
      }
      L3442 : do {
       if (label == 2985) {
        label = 0;
        var $238 = HEAP32[$214 >> 2];
        if (($238 | 0) == (HEAP32[$216 >> 2] | 0)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_2 >> 2] + 40 >> 2]]($__b_sroa_0_2);
        } else {
         HEAP32[$214 >> 2] = $238 + 4;
        }
        var $_0134_ph_be = $_0134_ph154 + 4 | 0;
        var $__e_sroa_0_5 = $__e_sroa_0_4;
        var $__b_sroa_0_3 = $__b_sroa_0_2;
       } else if (label == 2949) {
        label = 0;
        var $108 = $_0134_ph154 + 4 | 0;
        if (($108 | 0) == ($__fmte | 0)) {
         label = 2950;
         break L3413;
        }
        var $116 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 52 >> 2]]($31, HEAP32[$108 >> 2], 0);
        if ($116 << 24 >> 24 == 69 | $116 << 24 >> 24 == 48) {
         var $118 = $_0134_ph154 + 8 | 0;
         if (($118 | 0) == ($__fmte | 0)) {
          label = 2953;
          break L3413;
         }
         var $__opt_0 = $116;
         var $__cmd_0 = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 52 >> 2]]($31, HEAP32[$118 >> 2], 0);
         var $_1 = $118;
        } else {
         var $__opt_0 = 0;
         var $__cmd_0 = $116;
         var $_1 = $108;
        }
        var $_1;
        var $__cmd_0;
        var $__opt_0;
        var $130 = HEAP32[HEAP32[$46 >> 2] + 36 >> 2];
        HEAP32[$47 >> 2] = $__b_sroa_0_2;
        HEAP32[$48 >> 2] = $__e_sroa_0_4;
        FUNCTION_TABLE[$130]($1, $this, $2, $3, $__iob, $__err, $__tm, $__cmd_0, $__opt_0);
        var $_0134_ph_be = $_1 + 4 | 0;
        var $__e_sroa_0_5 = $__e_sroa_0_4;
        var $__b_sroa_0_3 = HEAP32[$49 >> 2];
       } else if (label == 2959) {
        while (1) {
         label = 0;
         var $_0134_pn;
         var $_2 = $_0134_pn + 4 | 0;
         if (($_2 | 0) == ($__fmte | 0)) {
          var $_2_lcssa = $__fmte;
          break;
         }
         if (FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 12 >> 2]]($31, 8192, HEAP32[$_2 >> 2])) {
          var $_0134_pn = $_2;
          label = 2959;
         } else {
          var $_2_lcssa = $_2;
          break;
         }
        }
        var $_2_lcssa;
        var $148 = $__b_sroa_0_2;
        var $147 = $__e_sroa_0_4;
        var $__e_sroa_0_6 = $__e_sroa_0_4;
        var $__b_sroa_0_4 = $__b_sroa_0_2;
        while (1) {
         var $__b_sroa_0_4;
         var $__e_sroa_0_6;
         var $147;
         var $148;
         if (($148 | 0) == 0) {
          var $165 = 0;
          var $__b_sroa_0_5 = $__b_sroa_0_4;
         } else {
          var $152 = HEAP32[$148 + 12 >> 2];
          if (($152 | 0) == (HEAP32[$148 + 16 >> 2] | 0)) {
           var $_0138 = FUNCTION_TABLE[HEAP32[HEAP32[$148 >> 2] + 36 >> 2]]($148);
          } else {
           var $_0138 = HEAP32[$152 >> 2];
          }
          var $_0138;
          var $164 = ($_0138 | 0) == -1;
          var $165 = $164 ? 0 : $148;
          var $__b_sroa_0_5 = $164 ? 0 : $__b_sroa_0_4;
         }
         var $__b_sroa_0_5;
         var $165;
         var $166 = ($165 | 0) == 0;
         do {
          if (($147 | 0) == 0) {
           var $__e_sroa_0_7 = $__e_sroa_0_6;
           label = 2972;
          } else {
           var $170 = HEAP32[$147 + 12 >> 2];
           if (($170 | 0) == (HEAP32[$147 + 16 >> 2] | 0)) {
            var $_0137 = FUNCTION_TABLE[HEAP32[HEAP32[$147 >> 2] + 36 >> 2]]($147);
           } else {
            var $_0137 = HEAP32[$170 >> 2];
           }
           var $_0137;
           if (($_0137 | 0) == -1) {
            var $__e_sroa_0_7 = 0;
            label = 2972;
            break;
           }
           if ($166) {
            var $183 = $147;
            var $__e_sroa_0_8 = $__e_sroa_0_6;
           } else {
            var $_0134_ph_be = $_2_lcssa;
            var $__e_sroa_0_5 = $__e_sroa_0_6;
            var $__b_sroa_0_3 = $__b_sroa_0_5;
            break L3442;
           }
          }
         } while (0);
         if (label == 2972) {
          label = 0;
          var $__e_sroa_0_7;
          if ($166) {
           var $_0134_ph_be = $_2_lcssa;
           var $__e_sroa_0_5 = $__e_sroa_0_7;
           var $__b_sroa_0_3 = $__b_sroa_0_5;
           break L3442;
          } else {
           var $183 = 0;
           var $__e_sroa_0_8 = $__e_sroa_0_7;
          }
         }
         var $__e_sroa_0_8;
         var $183;
         var $184 = $165 + 12 | 0;
         var $185 = HEAP32[$184 >> 2];
         var $186 = $165 + 16 | 0;
         if (($185 | 0) == (HEAP32[$186 >> 2] | 0)) {
          var $_0136 = FUNCTION_TABLE[HEAP32[HEAP32[$165 >> 2] + 36 >> 2]]($165);
         } else {
          var $_0136 = HEAP32[$185 >> 2];
         }
         var $_0136;
         if (!FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 12 >> 2]]($31, 8192, $_0136)) {
          var $_0134_ph_be = $_2_lcssa;
          var $__e_sroa_0_5 = $__e_sroa_0_8;
          var $__b_sroa_0_3 = $__b_sroa_0_5;
          break L3442;
         }
         var $202 = HEAP32[$184 >> 2];
         if (($202 | 0) == (HEAP32[$186 >> 2] | 0)) {
          FUNCTION_TABLE[HEAP32[HEAP32[$165 >> 2] + 40 >> 2]]($165);
          var $148 = $165;
          var $147 = $183;
          var $__e_sroa_0_6 = $__e_sroa_0_8;
          var $__b_sroa_0_4 = $__b_sroa_0_5;
          continue;
         } else {
          HEAP32[$184 >> 2] = $202 + 4;
          var $148 = $165;
          var $147 = $183;
          var $__e_sroa_0_6 = $__e_sroa_0_8;
          var $__b_sroa_0_4 = $__b_sroa_0_5;
          continue;
         }
        }
       }
      } while (0);
      var $__b_sroa_0_3;
      var $__e_sroa_0_5;
      var $_0134_ph_be;
      if (($_0134_ph_be | 0) == ($__fmte | 0)) {
       var $__e_sroa_0_10 = $__e_sroa_0_5;
       var $__b_sroa_0_7 = $__b_sroa_0_3;
       break L3411;
      }
      var $_0134_ph154 = $_0134_ph_be;
      var $_pre155 = HEAP32[$__err >> 2];
      var $__e_sroa_0_0 = $__e_sroa_0_5;
      var $__b_sroa_0_0 = $__b_sroa_0_3;
     }
     if (label == 2944) {
      var $__e_sroa_0_3;
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_3;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     } else if (label == 2950) {
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_4;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     } else if (label == 2953) {
      HEAP32[$__err >> 2] = 4;
      var $__e_sroa_0_10 = $__e_sroa_0_4;
      var $__b_sroa_0_7 = $__b_sroa_0_2;
      break;
     }
    }
   } while (0);
   var $__b_sroa_0_7;
   var $__e_sroa_0_10;
   if (($__b_sroa_0_7 | 0) == 0) {
    label = 2995;
   } else {
    var $253 = HEAP32[$__b_sroa_0_7 + 12 >> 2];
    if (($253 | 0) == (HEAP32[$__b_sroa_0_7 + 16 >> 2] | 0)) {
     var $_0131 = FUNCTION_TABLE[HEAP32[HEAP32[$__b_sroa_0_7 >> 2] + 36 >> 2]]($__b_sroa_0_7);
    } else {
     var $_0131 = HEAP32[$253 >> 2];
    }
    var $_0131;
    if (($_0131 | 0) == -1) {
     var $266 = 0;
    } else {
     label = 2995;
    }
   }
   if (label == 2995) {
    var $266 = $__b_sroa_0_7;
   }
   var $266;
   var $267 = ($266 | 0) == 0;
   do {
    if (($__e_sroa_0_10 | 0) == 0) {
     label = 3001;
    } else {
     var $271 = HEAP32[$__e_sroa_0_10 + 12 >> 2];
     if (($271 | 0) == (HEAP32[$__e_sroa_0_10 + 16 >> 2] | 0)) {
      var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_10 >> 2] + 36 >> 2]]($__e_sroa_0_10);
     } else {
      var $_0 = HEAP32[$271 >> 2];
     }
     var $_0;
     if (($_0 | 0) == -1) {
      label = 3001;
      break;
     }
     if (!$267) {
      break;
     }
     var $287 = $agg_result | 0;
     HEAP32[$287 >> 2] = $266;
     STACKTOP = sp;
     return;
    }
   } while (0);
   do {
    if (label == 3001) {
     if ($267) {
      break;
     }
     var $287 = $agg_result | 0;
     HEAP32[$287 >> 2] = $266;
     STACKTOP = sp;
     return;
    }
   } while (0);
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   var $287 = $agg_result | 0;
   HEAP32[$287 >> 2] = $266;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $29 = ___cxa_allocate_exception(4);
 HEAP32[$29 >> 2] = 9776;
 ___cxa_throw($29, 15976, 602);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $11 = HEAP32[21564 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $40 = HEAP32[$__e >> 2];
   var $41 = $this + 8 | 0;
   var $45 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] >> 2]]($41);
   var $50 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $40, $45, $45 + 168 | 0, $24, $__err, 0) - $45 | 0;
   if (($50 | 0) >= 168) {
    var $56 = $__b | 0;
    var $57 = HEAP32[$56 >> 2];
    var $58 = $agg_result | 0;
    HEAP32[$58 >> 2] = $57;
    STACKTOP = sp;
    return;
   }
   HEAP32[$__tm + 24 >> 2] = (($50 | 0) / 12 & -1 | 0) % 7 & -1;
   var $56 = $__b | 0;
   var $57 = HEAP32[$56 >> 2];
   var $58 = $agg_result | 0;
   HEAP32[$58 >> 2] = $57;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $11 = HEAP32[21564 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $40 = HEAP32[$__e >> 2];
   var $41 = $this + 8 | 0;
   var $46 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 4 >> 2]]($41);
   var $51 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $40, $46, $46 + 288 | 0, $24, $__err, 0) - $46 | 0;
   if (($51 | 0) >= 288) {
    var $57 = $__b | 0;
    var $58 = HEAP32[$57 >> 2];
    var $59 = $agg_result | 0;
    HEAP32[$59 >> 2] = $58;
    STACKTOP = sp;
    return;
   }
   HEAP32[$__tm + 16 >> 2] = (($51 | 0) / 12 & -1 | 0) % 12 & -1;
   var $57 = $__b | 0;
   var $58 = HEAP32[$57 >> 2];
   var $59 = $agg_result | 0;
   HEAP32[$59 >> 2] = $58;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = HEAP32[$__iob + 28 >> 2];
 var $4 = $2 + 4 | 0;
 tempValue = HEAP32[$4 >> 2], HEAP32[$4 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $11 = HEAP32[21564 >> 2] - 1 | 0;
 var $17 = HEAP32[$2 + 8 >> 2];
 do {
  if (HEAP32[$2 + 12 >> 2] - $17 >> 2 >>> 0 > $11 >>> 0) {
   var $24 = HEAP32[$17 + ($11 << 2) >> 2];
   if (($24 | 0) == 0) {
    break;
   }
   var $30 = $2 + 4 | 0;
   if (((tempValue = HEAP32[$30 >> 2], HEAP32[$30 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
   }
   var $42 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $24, 4);
   if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
    var $55 = $__b | 0;
    var $56 = HEAP32[$55 >> 2];
    var $57 = $agg_result | 0;
    HEAP32[$57 >> 2] = $56;
    STACKTOP = sp;
    return;
   }
   if (($42 | 0) < 69) {
    var $__t_0_i = $42 + 2e3 | 0;
   } else {
    var $__t_0_i = ($42 - 69 | 0) >>> 0 < 31 ? $42 + 1900 | 0 : $42;
   }
   var $__t_0_i;
   HEAP32[$__tm + 20 >> 2] = $__t_0_i - 1900;
   var $55 = $__b | 0;
   var $56 = HEAP32[$55 >> 2];
   var $57 = $agg_result | 0;
   HEAP32[$57 >> 2] = $56;
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $26 = ___cxa_allocate_exception(4);
 HEAP32[$26 >> 2] = 9776;
 ___cxa_throw($26, 15976, 602);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 88 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $2 = sp + 16;
 var $3 = sp + 24;
 var $4 = sp + 32;
 var $5 = sp + 40;
 var $6 = sp + 48;
 var $7 = sp + 56;
 var $8 = sp + 64;
 var $9 = sp + 72;
 var $10 = sp + 80;
 HEAP32[$__err >> 2] = 0;
 var $12 = HEAP32[$__iob + 28 >> 2];
 var $14 = $12 + 4 | 0;
 tempValue = HEAP32[$14 >> 2], HEAP32[$14 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $21 = HEAP32[21564 >> 2] - 1 | 0;
 var $27 = HEAP32[$12 + 8 >> 2];
 do {
  if (HEAP32[$12 + 12 >> 2] - $27 >> 2 >>> 0 > $21 >>> 0) {
   var $34 = HEAP32[$27 + ($21 << 2) >> 2];
   if (($34 | 0) == 0) {
    break;
   }
   var $38 = $34;
   var $40 = $12 + 4 | 0;
   if (((tempValue = HEAP32[$40 >> 2], HEAP32[$40 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 8 >> 2]]($12);
   }
   var $49 = $__fmt << 24 >> 24;
   L10 : do {
    if (($49 | 0) == 97 | ($49 | 0) == 65) {
     var $64 = HEAP32[$__e >> 2];
     var $65 = $this + 8 | 0;
     var $69 = FUNCTION_TABLE[HEAP32[HEAP32[$65 >> 2] >> 2]]($65);
     var $74 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $64, $69, $69 + 168 | 0, $38, $__err, 0) - $69 | 0;
     if (($74 | 0) >= 168) {
      break;
     }
     HEAP32[$__tm + 24 >> 2] = (($74 | 0) / 12 & -1 | 0) % 7 & -1;
    } else if (($49 | 0) == 98 | ($49 | 0) == 66 | ($49 | 0) == 104) {
     var $82 = HEAP32[$__e >> 2];
     var $83 = $this + 8 | 0;
     var $88 = FUNCTION_TABLE[HEAP32[HEAP32[$83 >> 2] + 4 >> 2]]($83);
     var $93 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $82, $88, $88 + 288 | 0, $38, $__err, 0) - $88 | 0;
     if (($93 | 0) >= 288) {
      break;
     }
     HEAP32[$__tm + 16 >> 2] = (($93 | 0) / 12 & -1 | 0) % 12 & -1;
    } else if (($49 | 0) == 99) {
     var $100 = $this + 8 | 0;
     var $105 = FUNCTION_TABLE[HEAP32[HEAP32[$100 >> 2] + 12 >> 2]]($100);
     var $106 = $__b | 0;
     var $111 = HEAP8[$105];
     if (($111 & 1) == 0) {
      var $119 = $105 + 4 | 0;
     } else {
      var $119 = HEAP32[$105 + 8 >> 2];
     }
     var $119;
     var $120 = $111 & 255;
     if (($120 & 1 | 0) == 0) {
      var $128 = $120 >>> 1;
     } else {
      var $128 = HEAP32[$105 + 4 >> 2];
     }
     var $128;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2, $this, HEAP32[$106 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $119, $119 + ($128 << 2) | 0);
     HEAP32[$106 >> 2] = HEAP32[$2 >> 2];
    } else if (($49 | 0) == 100 | ($49 | 0) == 101) {
     var $133 = $__tm + 12 | 0;
     var $136 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $137 = HEAP32[$__err >> 2];
     do {
      if (($137 & 4 | 0) == 0) {
       if (($136 - 1 | 0) >>> 0 >= 31) {
        break;
       }
       HEAP32[$133 >> 2] = $136;
       break L10;
      }
     } while (0);
     HEAP32[$__err >> 2] = $137 | 4;
    } else if (($49 | 0) == 68) {
     var $146 = $__b | 0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3, $this, HEAP32[$146 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9392, 9424);
     HEAP32[$146 >> 2] = HEAP32[$3 >> 2];
    } else if (($49 | 0) == 70) {
     var $153 = $__b | 0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4, $this, HEAP32[$153 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9256, 9288);
     HEAP32[$153 >> 2] = HEAP32[$4 >> 2];
    } else if (($49 | 0) == 72) {
     var $162 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $163 = HEAP32[$__err >> 2];
     if (($163 & 4 | 0) == 0 & ($162 | 0) < 24) {
      HEAP32[$__tm + 8 >> 2] = $162;
      break;
     } else {
      HEAP32[$__err >> 2] = $163 | 4;
      break;
     }
    } else if (($49 | 0) == 73) {
     var $172 = $__tm + 8 | 0;
     var $175 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $176 = HEAP32[$__err >> 2];
     do {
      if (($176 & 4 | 0) == 0) {
       if (($175 - 1 | 0) >>> 0 >= 12) {
        break;
       }
       HEAP32[$172 >> 2] = $175;
       break L10;
      }
     } while (0);
     HEAP32[$__err >> 2] = $176 | 4;
    } else if (($49 | 0) == 106) {
     var $187 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 3);
     var $188 = HEAP32[$__err >> 2];
     if (($188 & 4 | 0) == 0 & ($187 | 0) < 366) {
      HEAP32[$__tm + 28 >> 2] = $187;
      break;
     } else {
      HEAP32[$__err >> 2] = $188 | 4;
      break;
     }
    } else if (($49 | 0) == 109) {
     var $200 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2) - 1 | 0;
     var $201 = HEAP32[$__err >> 2];
     if (($201 & 4 | 0) == 0 & ($200 | 0) < 12) {
      HEAP32[$__tm + 16 >> 2] = $200;
      break;
     } else {
      HEAP32[$__err >> 2] = $201 | 4;
      break;
     }
    } else if (($49 | 0) == 77) {
     var $212 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $213 = HEAP32[$__err >> 2];
     if (($213 & 4 | 0) == 0 & ($212 | 0) < 60) {
      HEAP32[$__tm + 4 >> 2] = $212;
      break;
     } else {
      HEAP32[$__err >> 2] = $213 | 4;
      break;
     }
    } else if (($49 | 0) == 110 | ($49 | 0) == 116) {
     var $224 = $__b | 0;
     var $225 = $34;
     var $_sroa_059_0 = HEAP32[$__e >> 2];
     L53 : while (1) {
      var $_sroa_059_0;
      var $226 = HEAP32[$224 >> 2];
      do {
       if (($226 | 0) == 0) {
        var $244 = 1;
       } else {
        var $230 = HEAP32[$226 + 12 >> 2];
        if (($230 | 0) == (HEAP32[$226 + 16 >> 2] | 0)) {
         var $_054_i6 = FUNCTION_TABLE[HEAP32[HEAP32[$226 >> 2] + 36 >> 2]]($226);
        } else {
         var $_054_i6 = HEAP32[$230 >> 2];
        }
        var $_054_i6;
        if (($_054_i6 | 0) == -1) {
         HEAP32[$224 >> 2] = 0;
         var $244 = 1;
         break;
        } else {
         var $244 = (HEAP32[$224 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      var $244;
      do {
       if (($_sroa_059_0 | 0) == 0) {
        label = 59;
       } else {
        var $248 = HEAP32[$_sroa_059_0 + 12 >> 2];
        if (($248 | 0) == (HEAP32[$_sroa_059_0 + 16 >> 2] | 0)) {
         var $_053_i12 = FUNCTION_TABLE[HEAP32[HEAP32[$_sroa_059_0 >> 2] + 36 >> 2]]($_sroa_059_0);
        } else {
         var $_053_i12 = HEAP32[$248 >> 2];
        }
        var $_053_i12;
        if (($_053_i12 | 0) == -1) {
         label = 59;
         break;
        }
        if ($244) {
         var $261 = 0;
         var $_sroa_059_2 = $_sroa_059_0;
        } else {
         var $296 = $_sroa_059_0;
         var $295 = 0;
         break L53;
        }
       }
      } while (0);
      if (label == 59) {
       label = 0;
       if ($244) {
        var $296 = 0;
        var $295 = 1;
        break;
       } else {
        var $261 = 1;
        var $_sroa_059_2 = 0;
       }
      }
      var $_sroa_059_2;
      var $261;
      var $262 = HEAP32[$224 >> 2];
      var $264 = HEAP32[$262 + 12 >> 2];
      if (($264 | 0) == (HEAP32[$262 + 16 >> 2] | 0)) {
       var $_052_i = FUNCTION_TABLE[HEAP32[HEAP32[$262 >> 2] + 36 >> 2]]($262);
      } else {
       var $_052_i = HEAP32[$264 >> 2];
      }
      var $_052_i;
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$225 >> 2] + 12 >> 2]]($38, 8192, $_052_i)) {
       var $296 = $_sroa_059_2;
       var $295 = $261;
       break;
      }
      var $281 = HEAP32[$224 >> 2];
      var $282 = $281 + 12 | 0;
      var $283 = HEAP32[$282 >> 2];
      if (($283 | 0) == (HEAP32[$281 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$281 >> 2] + 40 >> 2]]($281);
       var $_sroa_059_0 = $_sroa_059_2;
       continue;
      } else {
       HEAP32[$282 >> 2] = $283 + 4;
       var $_sroa_059_0 = $_sroa_059_2;
       continue;
      }
     }
     var $295;
     var $296;
     var $297 = HEAP32[$224 >> 2];
     do {
      if (($297 | 0) == 0) {
       var $315 = 1;
      } else {
       var $301 = HEAP32[$297 + 12 >> 2];
       if (($301 | 0) == (HEAP32[$297 + 16 >> 2] | 0)) {
        var $_050_i = FUNCTION_TABLE[HEAP32[HEAP32[$297 >> 2] + 36 >> 2]]($297);
       } else {
        var $_050_i = HEAP32[$301 >> 2];
       }
       var $_050_i;
       if (($_050_i | 0) == -1) {
        HEAP32[$224 >> 2] = 0;
        var $315 = 1;
        break;
       } else {
        var $315 = (HEAP32[$224 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $315;
     do {
      if ($295) {
       label = 80;
      } else {
       var $318 = HEAP32[$296 + 12 >> 2];
       if (($318 | 0) == (HEAP32[$296 + 16 >> 2] | 0)) {
        var $_0_i20 = FUNCTION_TABLE[HEAP32[HEAP32[$296 >> 2] + 36 >> 2]]($296);
       } else {
        var $_0_i20 = HEAP32[$318 >> 2];
       }
       var $_0_i20;
       if (($_0_i20 | 0) == -1) {
        label = 80;
        break;
       }
       if ($315 ^ ($296 | 0) == 0) {
        break L10;
       }
      }
     } while (0);
     if (label == 80) {
      if (!$315) {
       break;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    } else if (($49 | 0) == 112) {
     var $336 = $__tm + 8 | 0;
     var $338 = HEAP32[$__e >> 2];
     var $339 = $this + 8 | 0;
     var $344 = FUNCTION_TABLE[HEAP32[HEAP32[$339 >> 2] + 8 >> 2]]($339);
     var $347 = HEAPU8[$344];
     if (($347 & 1 | 0) == 0) {
      var $355 = $347 >>> 1;
     } else {
      var $355 = HEAP32[$344 + 4 >> 2];
     }
     var $355;
     var $359 = HEAPU8[$344 + 12 | 0];
     if (($359 & 1 | 0) == 0) {
      var $367 = $359 >>> 1;
     } else {
      var $367 = HEAP32[$344 + 16 >> 2];
     }
     var $367;
     if (($355 | 0) == (-$367 | 0)) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
      break;
     }
     var $375 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $338, $344, $344 + 24 | 0, $38, $__err, 0);
     var $378 = $375 - $344 | 0;
     do {
      if (($375 | 0) == ($344 | 0)) {
       if ((HEAP32[$336 >> 2] | 0) != 12) {
        break;
       }
       HEAP32[$336 >> 2] = 0;
       break L10;
      }
     } while (0);
     if (($378 | 0) != 12) {
      break;
     }
     var $387 = HEAP32[$336 >> 2];
     if (($387 | 0) >= 12) {
      break;
     }
     HEAP32[$336 >> 2] = $387 + 12;
    } else if (($49 | 0) == 114) {
     var $392 = $__b | 0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5, $this, HEAP32[$392 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9344, 9388);
     HEAP32[$392 >> 2] = HEAP32[$5 >> 2];
    } else if (($49 | 0) == 82) {
     var $399 = $__b | 0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6, $this, HEAP32[$399 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9320, 9340);
     HEAP32[$399 >> 2] = HEAP32[$6 >> 2];
    } else if (($49 | 0) == 83) {
     var $408 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 2);
     var $409 = HEAP32[$__err >> 2];
     if (($409 & 4 | 0) == 0 & ($408 | 0) < 61) {
      HEAP32[$__tm >> 2] = $408;
      break;
     } else {
      HEAP32[$__err >> 2] = $409 | 4;
      break;
     }
    } else if (($49 | 0) == 84) {
     var $418 = $__b | 0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($7, $this, HEAP32[$418 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, 9288, 9320);
     HEAP32[$418 >> 2] = HEAP32[$7 >> 2];
    } else if (($49 | 0) == 119) {
     var $427 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 1);
     var $428 = HEAP32[$__err >> 2];
     if (($428 & 4 | 0) == 0 & ($427 | 0) < 7) {
      HEAP32[$__tm + 24 >> 2] = $427;
      break;
     } else {
      HEAP32[$__err >> 2] = $428 | 4;
      break;
     }
    } else if (($49 | 0) == 120) {
     var $440 = HEAP32[HEAP32[$this >> 2] + 20 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$__b >> 2];
     HEAP32[$9 >> 2] = HEAP32[$__e >> 2];
     FUNCTION_TABLE[$440]($agg_result, $this, $8, $9, $__iob, $__err, $__tm);
     STACKTOP = sp;
     return;
    } else if (($49 | 0) == 88) {
     var $448 = $this + 8 | 0;
     var $453 = FUNCTION_TABLE[HEAP32[HEAP32[$448 >> 2] + 24 >> 2]]($448);
     var $454 = $__b | 0;
     var $459 = HEAP8[$453];
     if (($459 & 1) == 0) {
      var $467 = $453 + 4 | 0;
     } else {
      var $467 = HEAP32[$453 + 8 >> 2];
     }
     var $467;
     var $468 = $459 & 255;
     if (($468 & 1 | 0) == 0) {
      var $476 = $468 >>> 1;
     } else {
      var $476 = HEAP32[$453 + 4 >> 2];
     }
     var $476;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($10, $this, HEAP32[$454 >> 2], HEAP32[$__e >> 2], $__iob, $__err, $__tm, $467, $467 + ($476 << 2) | 0);
     HEAP32[$454 >> 2] = HEAP32[$10 >> 2];
    } else if (($49 | 0) == 121) {
     var $484 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 4);
     if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
      break;
     }
     if (($484 | 0) < 69) {
      var $__t_0_i = $484 + 2e3 | 0;
     } else {
      var $__t_0_i = ($484 - 69 | 0) >>> 0 < 31 ? $484 + 1900 | 0 : $484;
     }
     var $__t_0_i;
     HEAP32[$__tm + 20 >> 2] = $__t_0_i - 1900;
    } else if (($49 | 0) == 89) {
     var $500 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, HEAP32[$__e >> 2], $__err, $38, 4);
     if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
      break;
     }
     HEAP32[$__tm + 20 >> 2] = $500 - 1900;
    } else if (($49 | 0) == 37) {
     var $509 = HEAP32[$__e >> 2];
     var $510 = $__b | 0;
     var $511 = HEAP32[$510 >> 2];
     do {
      if (($511 | 0) == 0) {
       var $529 = 1;
      } else {
       var $515 = HEAP32[$511 + 12 >> 2];
       if (($515 | 0) == (HEAP32[$511 + 16 >> 2] | 0)) {
        var $_055_i = FUNCTION_TABLE[HEAP32[HEAP32[$511 >> 2] + 36 >> 2]]($511);
       } else {
        var $_055_i = HEAP32[$515 >> 2];
       }
       var $_055_i;
       if (($_055_i | 0) == -1) {
        HEAP32[$510 >> 2] = 0;
        var $529 = 1;
        break;
       } else {
        var $529 = (HEAP32[$510 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $529;
     do {
      if (($509 | 0) == 0) {
       label = 133;
      } else {
       var $533 = HEAP32[$509 + 12 >> 2];
       if (($533 | 0) == (HEAP32[$509 + 16 >> 2] | 0)) {
        var $_054_i = FUNCTION_TABLE[HEAP32[HEAP32[$509 >> 2] + 36 >> 2]]($509);
       } else {
        var $_054_i = HEAP32[$533 >> 2];
       }
       var $_054_i;
       if (($_054_i | 0) == -1) {
        label = 133;
        break;
       }
       if ($529) {
        var $550 = $509;
        var $549 = 0;
       } else {
        label = 135;
       }
      }
     } while (0);
     if (label == 133) {
      if ($529) {
       label = 135;
      } else {
       var $550 = 0;
       var $549 = 1;
      }
     }
     if (label == 135) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
      break;
     }
     var $549;
     var $550;
     var $551 = HEAP32[$510 >> 2];
     var $553 = HEAP32[$551 + 12 >> 2];
     if (($553 | 0) == (HEAP32[$551 + 16 >> 2] | 0)) {
      var $_053_i = FUNCTION_TABLE[HEAP32[HEAP32[$551 >> 2] + 36 >> 2]]($551);
     } else {
      var $_053_i = HEAP32[$553 >> 2];
     }
     var $_053_i;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$34 >> 2] + 52 >> 2]]($38, $_053_i, 0) << 24 >> 24 != 37) {
      HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
      break;
     }
     var $575 = HEAP32[$510 >> 2];
     var $576 = $575 + 12 | 0;
     var $577 = HEAP32[$576 >> 2];
     if (($577 | 0) == (HEAP32[$575 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$575 >> 2] + 40 >> 2]]($575);
     } else {
      HEAP32[$576 >> 2] = $577 + 4;
     }
     var $589 = HEAP32[$510 >> 2];
     do {
      if (($589 | 0) == 0) {
       var $607 = 1;
      } else {
       var $593 = HEAP32[$589 + 12 >> 2];
       if (($593 | 0) == (HEAP32[$589 + 16 >> 2] | 0)) {
        var $_051_i = FUNCTION_TABLE[HEAP32[HEAP32[$589 >> 2] + 36 >> 2]]($589);
       } else {
        var $_051_i = HEAP32[$593 >> 2];
       }
       var $_051_i;
       if (($_051_i | 0) == -1) {
        HEAP32[$510 >> 2] = 0;
        var $607 = 1;
        break;
       } else {
        var $607 = (HEAP32[$510 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $607;
     do {
      if ($549) {
       label = 156;
      } else {
       var $610 = HEAP32[$550 + 12 >> 2];
       if (($610 | 0) == (HEAP32[$550 + 16 >> 2] | 0)) {
        var $_0_i = FUNCTION_TABLE[HEAP32[HEAP32[$550 >> 2] + 36 >> 2]]($550);
       } else {
        var $_0_i = HEAP32[$610 >> 2];
       }
       var $_0_i;
       if (($_0_i | 0) == -1) {
        label = 156;
        break;
       }
       if ($607 ^ ($550 | 0) == 0) {
        break L10;
       }
      }
     } while (0);
     if (label == 156) {
      if (!$607) {
       break;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    }
   } while (0);
   HEAP32[$agg_result >> 2] = HEAP32[$__b >> 2];
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $36 = ___cxa_allocate_exception(4);
 HEAP32[$36 >> 2] = 9776;
 ___cxa_throw($36, 15976, 602);
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 return 0;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 return 0;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 return 0;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 return 2147483647;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result, $this) {
 var $1 = $agg_result;
 HEAP8[$agg_result] = 2;
 HEAP8[$1 + 1 | 0] = 45;
 HEAP8[$1 + 2 | 0] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result, $this) {
 var $1 = $agg_result;
 HEAP8[$agg_result] = 2;
 HEAP8[$1 + 1 | 0] = 45;
 HEAP8[$1 + 2 | 0] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result, $this) {
 HEAP8[$agg_result] = 2;
 var $2 = $agg_result + 4 | 0;
 var $_045_i_i = 1;
 var $_06_i_i = $2;
 while (1) {
  var $_06_i_i;
  var $_045_i_i;
  var $3 = $_045_i_i - 1 | 0;
  HEAP32[$_06_i_i >> 2] = 45;
  if (($3 | 0) == 0) {
   break;
  } else {
   var $_045_i_i = $3;
   var $_06_i_i = $_06_i_i + 4 | 0;
  }
 }
 HEAP32[$2 + 4 >> 2] = 0;
 return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e_0, $__err, $__ct, $__n) {
 var label = 0;
 var $1 = $__b | 0;
 var $2 = HEAP32[$1 >> 2];
 do {
  if (($2 | 0) == 0) {
   var $20 = 1;
  } else {
   var $6 = HEAP32[$2 + 12 >> 2];
   if (($6 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) {
    var $_0107 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2);
   } else {
    var $_0107 = HEAP32[$6 >> 2];
   }
   var $_0107;
   if (($_0107 | 0) == -1) {
    HEAP32[$1 >> 2] = 0;
    var $20 = 1;
    break;
   } else {
    var $20 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 var $20;
 do {
  if (($__e_0 | 0) == 0) {
   label = 201;
  } else {
   var $24 = HEAP32[$__e_0 + 12 >> 2];
   if (($24 | 0) == (HEAP32[$__e_0 + 16 >> 2] | 0)) {
    var $_0106 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_0 >> 2] + 36 >> 2]]($__e_0);
   } else {
    var $_0106 = HEAP32[$24 >> 2];
   }
   var $_0106;
   if (($_0106 | 0) == -1) {
    label = 201;
    break;
   }
   if ($20) {
    var $40 = $__e_0;
   } else {
    label = 203;
   }
  }
 } while (0);
 if (label == 201) {
  if ($20) {
   label = 203;
  } else {
   var $40 = 0;
  }
 }
 if (label == 203) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  var $_0100 = 0;
  var $_0100;
  return $_0100;
 }
 var $40;
 var $41 = HEAP32[$1 >> 2];
 var $43 = HEAP32[$41 + 12 >> 2];
 if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
  var $_0105 = FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 36 >> 2]]($41);
 } else {
  var $_0105 = HEAP32[$43 >> 2];
 }
 var $_0105;
 var $55 = $__ct;
 if (!FUNCTION_TABLE[HEAP32[HEAP32[$55 >> 2] + 12 >> 2]]($__ct, 2048, $_0105)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  var $_0100 = 0;
  var $_0100;
  return $_0100;
 }
 var $64 = $__ct;
 var $69 = FUNCTION_TABLE[HEAP32[HEAP32[$64 >> 2] + 52 >> 2]]($__ct, $_0105, 0) << 24 >> 24;
 var $70 = HEAP32[$1 >> 2];
 var $71 = $70 + 12 | 0;
 var $72 = HEAP32[$71 >> 2];
 if (($72 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
  FUNCTION_TABLE[HEAP32[HEAP32[$70 >> 2] + 40 >> 2]]($70);
  var $__r_0_in = $69;
  var $_0_in = $__n;
  var $84 = $40;
 } else {
  HEAP32[$71 >> 2] = $72 + 4;
  var $__r_0_in = $69;
  var $_0_in = $__n;
  var $84 = $40;
 }
 while (1) {
  var $84;
  var $_0_in;
  var $__r_0_in;
  var $__r_0 = $__r_0_in - 48 | 0;
  var $_0 = $_0_in - 1 | 0;
  var $85 = HEAP32[$1 >> 2];
  do {
   if (($85 | 0) == 0) {
    var $103 = 0;
   } else {
    var $89 = HEAP32[$85 + 12 >> 2];
    if (($89 | 0) == (HEAP32[$85 + 16 >> 2] | 0)) {
     var $_0103 = FUNCTION_TABLE[HEAP32[HEAP32[$85 >> 2] + 36 >> 2]]($85);
    } else {
     var $_0103 = HEAP32[$89 >> 2];
    }
    var $_0103;
    if (($_0103 | 0) == -1) {
     HEAP32[$1 >> 2] = 0;
     var $103 = 0;
     break;
    } else {
     var $103 = HEAP32[$1 >> 2];
     break;
    }
   }
  } while (0);
  var $103;
  var $104 = ($103 | 0) == 0;
  if (($84 | 0) == 0) {
   var $122 = $103;
   var $121 = 0;
  } else {
   var $108 = HEAP32[$84 + 12 >> 2];
   if (($108 | 0) == (HEAP32[$84 + 16 >> 2] | 0)) {
    var $_0102 = FUNCTION_TABLE[HEAP32[HEAP32[$84 >> 2] + 36 >> 2]]($84);
   } else {
    var $_0102 = HEAP32[$108 >> 2];
   }
   var $_0102;
   var $122 = HEAP32[$1 >> 2];
   var $121 = ($_0102 | 0) == -1 ? 0 : $84;
  }
  var $121;
  var $122;
  var $123 = ($121 | 0) == 0;
  if (!(($104 ^ $123) & ($_0 | 0) > 0)) {
   break;
  }
  var $128 = HEAP32[$122 + 12 >> 2];
  if (($128 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) {
   var $_0101 = FUNCTION_TABLE[HEAP32[HEAP32[$122 >> 2] + 36 >> 2]]($122);
  } else {
   var $_0101 = HEAP32[$128 >> 2];
  }
  var $_0101;
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$55 >> 2] + 12 >> 2]]($__ct, 2048, $_0101)) {
   var $_0100 = $__r_0;
   label = 250;
   break;
  }
  var $151 = (FUNCTION_TABLE[HEAP32[HEAP32[$64 >> 2] + 52 >> 2]]($__ct, $_0101, 0) << 24 >> 24) + ($__r_0 * 10 & -1) | 0;
  var $152 = HEAP32[$1 >> 2];
  var $153 = $152 + 12 | 0;
  var $154 = HEAP32[$153 >> 2];
  if (($154 | 0) == (HEAP32[$152 + 16 >> 2] | 0)) {
   FUNCTION_TABLE[HEAP32[HEAP32[$152 >> 2] + 40 >> 2]]($152);
   var $__r_0_in = $151;
   var $_0_in = $_0;
   var $84 = $121;
   continue;
  } else {
   HEAP32[$153 >> 2] = $154 + 4;
   var $__r_0_in = $151;
   var $_0_in = $_0;
   var $84 = $121;
   continue;
  }
 }
 if (label == 250) {
  var $_0100;
  return $_0100;
 }
 do {
  if (($122 | 0) == 0) {
   var $184 = 1;
  } else {
   var $170 = HEAP32[$122 + 12 >> 2];
   if (($170 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) {
    var $_098 = FUNCTION_TABLE[HEAP32[HEAP32[$122 >> 2] + 36 >> 2]]($122);
   } else {
    var $_098 = HEAP32[$170 >> 2];
   }
   var $_098;
   if (($_098 | 0) == -1) {
    HEAP32[$1 >> 2] = 0;
    var $184 = 1;
    break;
   } else {
    var $184 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 var $184;
 do {
  if ($123) {
   label = 244;
  } else {
   var $187 = HEAP32[$121 + 12 >> 2];
   if (($187 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
    var $_097 = FUNCTION_TABLE[HEAP32[HEAP32[$121 >> 2] + 36 >> 2]]($121);
   } else {
    var $_097 = HEAP32[$187 >> 2];
   }
   var $_097;
   if (($_097 | 0) == -1) {
    label = 244;
    break;
   }
   if ($184) {
    var $_0100 = $__r_0;
   } else {
    break;
   }
   var $_0100;
   return $_0100;
  }
 } while (0);
 do {
  if (label == 244) {
   if ($184) {
    break;
   } else {
    var $_0100 = $__r_0;
   }
   var $_0100;
   return $_0100;
  }
 } while (0);
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 var $_0100 = $__r_0;
 var $_0100;
 return $_0100;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $fmt_i = sp;
 var $__nar = sp + 8;
 var $3 = $__nar | 0;
 var $4 = $fmt_i | 0;
 HEAP8[$4] = 37;
 var $5 = $fmt_i + 1 | 0;
 HEAP8[$5] = $__fmt;
 var $6 = $fmt_i + 2 | 0;
 HEAP8[$6] = $__mod;
 HEAP8[$fmt_i + 3 | 0] = 0;
 if ($__mod << 24 >> 24 != 0) {
  HEAP8[$5] = $__mod;
  HEAP8[$6] = $__fmt;
 }
 var $12 = _strftime($3, 100, $4, $__tm, HEAP32[$this + 8 >> 2]);
 var $13 = $__nar + $12 | 0;
 var $_sroa_0_0_copyload1 = HEAP32[$__s >> 2];
 if (($12 | 0) == 0) {
  var $_sroa_0_0_lcssa = $_sroa_0_0_copyload1;
  var $_sroa_0_0_lcssa;
  var $_sroa_0_0__idx35 = $agg_result | 0;
  HEAP32[$_sroa_0_0__idx35 >> 2] = $_sroa_0_0_lcssa;
  STACKTOP = sp;
  return;
 } else {
  var $_sroa_0_037 = $_sroa_0_0_copyload1;
  var $_03338 = $3;
 }
 while (1) {
  var $_03338;
  var $_sroa_0_037;
  var $15 = HEAP8[$_03338];
  if (($_sroa_0_037 | 0) == 0) {
   var $_sroa_0_1 = 0;
  } else {
   var $18 = $_sroa_0_037 + 24 | 0;
   var $19 = HEAP32[$18 >> 2];
   if (($19 | 0) == (HEAP32[$_sroa_0_037 + 28 >> 2] | 0)) {
    var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$_sroa_0_037 >> 2] + 52 >> 2]]($_sroa_0_037, $15 & 255);
   } else {
    HEAP32[$18 >> 2] = $19 + 1;
    HEAP8[$19] = $15;
    var $_0 = $15 & 255;
   }
   var $_0;
   var $_sroa_0_1 = ($_0 | 0) == -1 ? 0 : $_sroa_0_037;
  }
  var $_sroa_0_1;
  var $34 = $_03338 + 1 | 0;
  if (($34 | 0) == ($13 | 0)) {
   var $_sroa_0_0_lcssa = $_sroa_0_1;
   break;
  } else {
   var $_sroa_0_037 = $_sroa_0_1;
   var $_03338 = $34;
  }
 }
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35 = $agg_result | 0;
 HEAP32[$_sroa_0_0__idx35 >> 2] = $_sroa_0_0_lcssa;
 STACKTOP = sp;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var $1 = $this;
 var $2 = $this + 8 | 0;
 var $3 = HEAP32[$2 >> 2];
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 if (($3 | 0) != (HEAP32[19888 >> 2] | 0)) {
  _freelocale(HEAP32[$2 >> 2]);
 }
 if (($this | 0) == 0) {
  return;
 }
 _free($1);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var $1 = $this + 8 | 0;
 var $2 = HEAP32[$1 >> 2];
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 if (($2 | 0) == (HEAP32[19888 >> 2] | 0)) {
  return;
 }
 _freelocale(HEAP32[$1 >> 2]);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var $1 = $this;
 var $2 = $this + 8 | 0;
 var $3 = HEAP32[$2 >> 2];
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 if (($3 | 0) != (HEAP32[19888 >> 2] | 0)) {
  _freelocale(HEAP32[$2 >> 2]);
 }
 if (($this | 0) == 0) {
  return;
 }
 _free($1);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var $1 = $this + 8 | 0;
 var $2 = HEAP32[$1 >> 2];
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 if (($2 | 0) == (HEAP32[19888 >> 2] | 0)) {
  return;
 }
 _freelocale(HEAP32[$1 >> 2]);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $fmt_i_i = sp;
 var $mb_i = sp + 112;
 var $__nb_i = sp + 120;
 var $__nar = sp + 128;
 var $3 = $__nar | 0;
 var $4 = sp + 8 | 0;
 var $7 = $fmt_i_i | 0;
 HEAP8[$7] = 37;
 var $8 = $fmt_i_i + 1 | 0;
 HEAP8[$8] = $__fmt;
 var $9 = $fmt_i_i + 2 | 0;
 HEAP8[$9] = $__mod;
 HEAP8[$fmt_i_i + 3 | 0] = 0;
 if ($__mod << 24 >> 24 != 0) {
  HEAP8[$8] = $__mod;
  HEAP8[$9] = $__fmt;
 }
 var $13 = $this + 8 | 0;
 _strftime($4, 100, $7, $__tm, HEAP32[$13 >> 2]);
 HEAP32[$mb_i >> 2] = 0;
 HEAP32[$mb_i + 4 >> 2] = 0;
 HEAP32[$__nb_i >> 2] = $4;
 var $17 = _uselocale(HEAP32[$13 >> 2]);
 var $18 = _mbsrtowcs($3, $__nb_i, 100, $mb_i);
 if (($17 | 0) != 0) {
  _uselocale($17);
 }
 if (($18 | 0) == -1) {
  __ZNSt3__121__throw_runtime_errorEPKc(4600);
 }
 var $26 = $__nar + ($18 << 2) | 0;
 var $_sroa_0_0_copyload1 = HEAP32[$__s >> 2];
 if (($18 | 0) == 0) {
  var $_sroa_0_0_lcssa = $_sroa_0_0_copyload1;
  var $_sroa_0_0_lcssa;
  var $_sroa_0_0__idx35 = $agg_result | 0;
  HEAP32[$_sroa_0_0__idx35 >> 2] = $_sroa_0_0_lcssa;
  STACKTOP = sp;
  return;
 } else {
  var $_sroa_0_036 = $_sroa_0_0_copyload1;
  var $_03337 = $3;
 }
 while (1) {
  var $_03337;
  var $_sroa_0_036;
  var $28 = HEAP32[$_03337 >> 2];
  if (($_sroa_0_036 | 0) == 0) {
   var $_sroa_0_1 = 0;
  } else {
   var $31 = $_sroa_0_036 + 24 | 0;
   var $32 = HEAP32[$31 >> 2];
   if (($32 | 0) == (HEAP32[$_sroa_0_036 + 28 >> 2] | 0)) {
    var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$_sroa_0_036 >> 2] + 52 >> 2]]($_sroa_0_036, $28);
   } else {
    HEAP32[$31 >> 2] = $32 + 4;
    HEAP32[$32 >> 2] = $28;
    var $_0 = $28;
   }
   var $_0;
   var $_sroa_0_1 = ($_0 | 0) == -1 ? 0 : $_sroa_0_036;
  }
  var $_sroa_0_1;
  var $45 = $_03337 + 4 | 0;
  if (($45 | 0) == ($26 | 0)) {
   var $_sroa_0_0_lcssa = $_sroa_0_1;
   break;
  } else {
   var $_sroa_0_036 = $_sroa_0_1;
   var $_03337 = $45;
  }
 }
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35 = $agg_result | 0;
 HEAP32[$_sroa_0_0__idx35 >> 2] = $_sroa_0_0_lcssa;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 return 0;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result, $this) {
 var $1 = $agg_result;
 tempBigInt = 67109634;
 HEAP8[$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$1 + 3 | 0] = tempBigInt & 255;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result, $this) {
 HEAP8[$agg_result] = 2;
 var $2 = $agg_result + 4 | 0;
 var $_045_i_i = 1;
 var $_06_i_i = $2;
 while (1) {
  var $_06_i_i;
  var $_045_i_i;
  var $3 = $_045_i_i - 1 | 0;
  HEAP32[$_06_i_i >> 2] = 45;
  if (($3 | 0) == 0) {
   break;
  } else {
   var $_045_i_i = $3;
   var $_06_i_i = $_06_i_i + 4 | 0;
  }
 }
 HEAP32[$2 + 4 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result, $this) {
 var $agg_result13 = $agg_result;
 HEAP32[$agg_result13 >> 2] = 0;
 HEAP32[$agg_result13 + 4 >> 2] = 0;
 HEAP32[$agg_result13 + 8 >> 2] = 0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 264 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__wbuf = sp + 16;
 var $__wb = sp + 120;
 var $__wn = sp + 128;
 var $__neg = sp + 136;
 var $__atoms = sp + 144;
 var $__nbuf = sp + 160;
 var $2 = $__wb | 0;
 HEAP32[$2 >> 2] = $__wbuf;
 var $3 = $__wb + 4 | 0;
 HEAP32[$3 >> 2] = 484;
 var $4 = $__wbuf + 100 | 0;
 var $6 = HEAP32[$__iob + 28 >> 2];
 var $7 = $6;
 var $9 = $6 + 4 | 0;
 tempValue = HEAP32[$9 >> 2], HEAP32[$9 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $16 = HEAP32[21572 >> 2] - 1 | 0;
 var $22 = HEAP32[$6 + 8 >> 2];
 do {
  if (HEAP32[$6 + 12 >> 2] - $22 >> 2 >>> 0 > $16 >>> 0) {
   var $29 = HEAP32[$22 + ($16 << 2) >> 2];
   if (($29 | 0) == 0) {
    break;
   }
   var $33 = $29;
   HEAP8[$__neg] = 0;
   var $34 = $__e | 0;
   do {
    if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, HEAP32[$34 >> 2], $__intl, $7, HEAP32[$__iob + 4 >> 2], $__err, $__neg, $33, $__wb, $__wn, $4)) {
     var $41 = $__atoms | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 32 >> 2]]($33, 9240, 9250, $41);
     var $47 = $__nbuf | 0;
     var $48 = HEAP32[$__wn >> 2];
     var $49 = HEAP32[$2 >> 2];
     var $52 = $48 - $49 | 0;
     do {
      if (($52 | 0) > 98) {
       var $55 = _malloc($52 + 2 | 0);
       if (($55 | 0) != 0) {
        var $__nc_0 = $55;
        var $__h_sroa_0_1 = $55;
        break;
       }
       var $58 = ___cxa_allocate_exception(4);
       HEAP32[$58 >> 2] = 9744;
       ___cxa_throw($58, 15960, 74);
      } else {
       var $__nc_0 = $47;
       var $__h_sroa_0_1 = 0;
      }
     } while (0);
     var $__h_sroa_0_1;
     var $__nc_0;
     if ((HEAP8[$__neg] & 1) == 0) {
      var $__nc_1 = $__nc_0;
     } else {
      HEAP8[$__nc_0] = 45;
      var $__nc_1 = $__nc_0 + 1 | 0;
     }
     var $__nc_1;
     if ($49 >>> 0 < $48 >>> 0) {
      var $78 = $__atoms + 10 | 0;
      var $79 = $__atoms;
      var $__nc_2166 = $__nc_1;
      var $__w_0167 = $49;
      while (1) {
       var $__w_0167;
       var $__nc_2166;
       var $_0 = $41;
       while (1) {
        var $_0;
        if (($_0 | 0) == ($78 | 0)) {
         var $_0_lcssa = $78;
         break;
        }
        if ((HEAP8[$_0] | 0) == (HEAP8[$__w_0167] | 0)) {
         var $_0_lcssa = $_0;
         break;
        } else {
         var $_0 = $_0 + 1 | 0;
        }
       }
       var $_0_lcssa;
       HEAP8[$__nc_2166] = HEAP8[9240 + ($_0_lcssa - $79) | 0];
       var $92 = $__w_0167 + 1 | 0;
       var $93 = $__nc_2166 + 1 | 0;
       if ($92 >>> 0 < HEAP32[$__wn >> 2] >>> 0) {
        var $__nc_2166 = $93;
        var $__w_0167 = $92;
       } else {
        var $__nc_2_lcssa = $93;
        break;
       }
      }
     } else {
      var $__nc_2_lcssa = $__nc_1;
     }
     var $__nc_2_lcssa;
     HEAP8[$__nc_2_lcssa] = 0;
     var $96 = _sscanf($47, 7288, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
     STACKTOP = tempVarArgs;
     if (($96 | 0) == 1) {
      if (($__h_sroa_0_1 | 0) == 0) {
       break;
      }
      _free($__h_sroa_0_1);
      break;
     }
     var $99 = ___cxa_allocate_exception(8);
     HEAP32[$99 >> 2] = 9808;
     var $101 = $99 + 4 | 0;
     var $102 = $101;
     do {
      if (($101 | 0) != 0) {
       while (1) {
        var $104 = _malloc(28);
        if (($104 | 0) != 0) {
         label = 422;
         break;
        }
        var $107 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
        if (($107 | 0) == 0) {
         break;
        }
        FUNCTION_TABLE[$107]();
       }
       if (label == 422) {
        HEAP32[$104 + 4 >> 2] = 15;
        HEAP32[$104 >> 2] = 15;
        var $129 = $104 + 12 | 0;
        HEAP32[$102 >> 2] = $129;
        HEAP32[$104 + 8 >> 2] = 0;
        _memcpy($129, 7144, 16) | 0;
        break;
       }
       var $117 = ___cxa_allocate_exception(4);
       HEAP32[$117 >> 2] = 9744;
       ___cxa_throw($117, 15960, 74);
      }
     } while (0);
     ___cxa_throw($99, 15992, 210);
    }
   } while (0);
   var $137 = $__b | 0;
   var $138 = HEAP32[$137 >> 2];
   do {
    if (($138 | 0) == 0) {
     var $154 = 0;
    } else {
     if ((HEAP32[$138 + 12 >> 2] | 0) != (HEAP32[$138 + 16 >> 2] | 0)) {
      var $154 = $138;
      break;
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$138 >> 2] + 36 >> 2]]($138) | 0) != -1) {
      var $154 = $138;
      break;
     }
     HEAP32[$137 >> 2] = 0;
     var $154 = 0;
    }
   } while (0);
   var $154;
   var $155 = ($154 | 0) == 0;
   var $156 = HEAP32[$34 >> 2];
   do {
    if (($156 | 0) == 0) {
     label = 440;
    } else {
     if ((HEAP32[$156 + 12 >> 2] | 0) != (HEAP32[$156 + 16 >> 2] | 0)) {
      if ($155) {
       break;
      } else {
       label = 442;
       break;
      }
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$156 >> 2] + 36 >> 2]]($156) | 0) == -1) {
      HEAP32[$34 >> 2] = 0;
      label = 440;
      break;
     } else {
      if ($155) {
       break;
      } else {
       label = 442;
       break;
      }
     }
    }
   } while (0);
   if (label == 440) {
    if ($155) {
     label = 442;
    }
   }
   if (label == 442) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $154;
   var $178 = $6 + 4 | 0;
   if (((tempValue = HEAP32[$178 >> 2], HEAP32[$178 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
   }
   var $187 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = 0;
   if (($187 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($187);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $31 = ___cxa_allocate_exception(4);
 HEAP32[$31 >> 2] = 9776;
 ___cxa_throw($31, 15976, 602);
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e_0, $__intl, $__loc_0_0_val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 584 | 0;
 var $__p_i_i_i513_i = sp;
 var $__p_i_i_i_i = sp + 16;
 var $0 = sp + 32;
 var $1 = sp + 40;
 var $2 = sp + 56;
 var $3 = sp + 72;
 var $4 = sp + 88;
 var $5 = sp + 104;
 var $6 = sp + 112;
 var $7 = sp + 128;
 var $8 = sp + 144;
 var $9 = sp + 160;
 var $__gbuf = sp + 176;
 var $__pat = sp + 576;
 var $tmpcast = $__pat;
 var $__grp = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $10 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__psn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__nsn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__spaces = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__et = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $11 = $__gbuf | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 var $12 = $__sym;
 var $13 = $__psn;
 var $14 = $__nsn;
 var $15 = $__spaces;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 0;
 var $17 = $1;
 var $18 = $2;
 var $19 = $3;
 var $20 = $4;
 var $22 = $6;
 var $23 = $7;
 var $24 = $8;
 var $25 = $9;
 L531 : do {
  if ($__intl) {
   var $tmpcast512_i = $0;
   if ((HEAP32[22040 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i_i >> 2] = 22040;
    HEAP32[$__p_i_i_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22040, $__p_i_i_i_i);
   }
   var $32 = HEAP32[22044 >> 2] - 1 | 0;
   var $36 = HEAP32[$__loc_0_0_val + 8 >> 2];
   do {
    if (HEAP32[$__loc_0_0_val + 12 >> 2] - $36 >> 2 >>> 0 > $32 >>> 0) {
     var $43 = HEAP32[$36 + ($32 << 2) >> 2];
     if (($43 | 0) == 0) {
      break;
     }
     var $47 = $43;
     FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 44 >> 2]]($tmpcast512_i, $47);
     HEAP32[$__pat >> 2] = HEAP32[$0 >> 2];
     var $53 = $43;
     FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 32 >> 2]]($1, $47);
     if ((HEAP8[$14] & 1) == 0) {
      HEAP8[$__nsn + 1 | 0] = 0;
      HEAP8[$14] = 0;
     } else {
      HEAP8[HEAP32[$__nsn + 8 >> 2]] = 0;
      HEAP32[$__nsn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn);
     HEAP32[$14 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$14 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     HEAP32[$14 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
     HEAP32[$17 >> 2] = 0;
     HEAP32[$17 + 4 >> 2] = 0;
     HEAP32[$17 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 28 >> 2]]($2, $47);
     if ((HEAP8[$13] & 1) == 0) {
      HEAP8[$__psn + 1 | 0] = 0;
      HEAP8[$13] = 0;
     } else {
      HEAP8[HEAP32[$__psn + 8 >> 2]] = 0;
      HEAP32[$__psn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn);
     HEAP32[$13 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$13 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
     HEAP32[$13 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
     HEAP32[$18 >> 2] = 0;
     HEAP32[$18 + 4 >> 2] = 0;
     HEAP32[$18 + 8 >> 2] = 0;
     var $84 = $43;
     var $88 = FUNCTION_TABLE[HEAP32[HEAP32[$84 >> 2] + 12 >> 2]]($47);
     var $92 = FUNCTION_TABLE[HEAP32[HEAP32[$84 >> 2] + 16 >> 2]]($47);
     FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 20 >> 2]]($3, $47);
     if ((HEAP8[$10] & 1) == 0) {
      HEAP8[$__grp + 1 | 0] = 0;
      HEAP8[$10] = 0;
     } else {
      HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
      HEAP32[$__grp + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
     HEAP32[$10 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$10 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$10 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$53 >> 2] + 24 >> 2]]($4, $47);
     if ((HEAP8[$12] & 1) == 0) {
      HEAP8[$__sym + 1 | 0] = 0;
      HEAP8[$12] = 0;
     } else {
      HEAP8[HEAP32[$__sym + 8 >> 2]] = 0;
      HEAP32[$__sym + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
     HEAP32[$12 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$12 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
     HEAP32[$12 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
     HEAP32[$20 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAP32[$20 + 8 >> 2] = 0;
     var $storemerge_i = FUNCTION_TABLE[HEAP32[HEAP32[$43 >> 2] + 36 >> 2]]($47);
     var $__ts_0 = $92;
     var $__dp_0 = $88;
     break L531;
    }
   } while (0);
   var $45 = ___cxa_allocate_exception(4);
   HEAP32[$45 >> 2] = 9776;
   ___cxa_throw($45, 15976, 602);
  } else {
   var $tmpcast_i = $5;
   if ((HEAP32[22048 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i513_i >> 2] = 22048;
    HEAP32[$__p_i_i_i513_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i513_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22048, $__p_i_i_i513_i);
   }
   var $134 = HEAP32[22052 >> 2] - 1 | 0;
   var $138 = HEAP32[$__loc_0_0_val + 8 >> 2];
   do {
    if (HEAP32[$__loc_0_0_val + 12 >> 2] - $138 >> 2 >>> 0 > $134 >>> 0) {
     var $145 = HEAP32[$138 + ($134 << 2) >> 2];
     if (($145 | 0) == 0) {
      break;
     }
     var $149 = $145;
     FUNCTION_TABLE[HEAP32[HEAP32[$145 >> 2] + 44 >> 2]]($tmpcast_i, $149);
     HEAP32[$__pat >> 2] = HEAP32[$5 >> 2];
     var $155 = $145;
     FUNCTION_TABLE[HEAP32[HEAP32[$155 >> 2] + 32 >> 2]]($6, $149);
     if ((HEAP8[$14] & 1) == 0) {
      HEAP8[$__nsn + 1 | 0] = 0;
      HEAP8[$14] = 0;
     } else {
      HEAP8[HEAP32[$__nsn + 8 >> 2]] = 0;
      HEAP32[$__nsn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn);
     HEAP32[$14 >> 2] = HEAP32[$22 >> 2];
     HEAP32[$14 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
     HEAP32[$14 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
     HEAP32[$22 >> 2] = 0;
     HEAP32[$22 + 4 >> 2] = 0;
     HEAP32[$22 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$155 >> 2] + 28 >> 2]]($7, $149);
     if ((HEAP8[$13] & 1) == 0) {
      HEAP8[$__psn + 1 | 0] = 0;
      HEAP8[$13] = 0;
     } else {
      HEAP8[HEAP32[$__psn + 8 >> 2]] = 0;
      HEAP32[$__psn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn);
     HEAP32[$13 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$13 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
     HEAP32[$13 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
     HEAP32[$23 >> 2] = 0;
     HEAP32[$23 + 4 >> 2] = 0;
     HEAP32[$23 + 8 >> 2] = 0;
     var $186 = $145;
     var $190 = FUNCTION_TABLE[HEAP32[HEAP32[$186 >> 2] + 12 >> 2]]($149);
     var $194 = FUNCTION_TABLE[HEAP32[HEAP32[$186 >> 2] + 16 >> 2]]($149);
     FUNCTION_TABLE[HEAP32[HEAP32[$155 >> 2] + 20 >> 2]]($8, $149);
     if ((HEAP8[$10] & 1) == 0) {
      HEAP8[$__grp + 1 | 0] = 0;
      HEAP8[$10] = 0;
     } else {
      HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
      HEAP32[$__grp + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
     HEAP32[$10 >> 2] = HEAP32[$24 >> 2];
     HEAP32[$10 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
     HEAP32[$10 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
     HEAP32[$24 >> 2] = 0;
     HEAP32[$24 + 4 >> 2] = 0;
     HEAP32[$24 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$155 >> 2] + 24 >> 2]]($9, $149);
     if ((HEAP8[$12] & 1) == 0) {
      HEAP8[$__sym + 1 | 0] = 0;
      HEAP8[$12] = 0;
     } else {
      HEAP8[HEAP32[$__sym + 8 >> 2]] = 0;
      HEAP32[$__sym + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
     HEAP32[$12 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$12 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
     HEAP32[$12 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
     HEAP32[$25 >> 2] = 0;
     HEAP32[$25 + 4 >> 2] = 0;
     HEAP32[$25 + 8 >> 2] = 0;
     var $storemerge_i = FUNCTION_TABLE[HEAP32[HEAP32[$145 >> 2] + 36 >> 2]]($149);
     var $__ts_0 = $194;
     var $__dp_0 = $190;
     break L531;
    }
   } while (0);
   var $147 = ___cxa_allocate_exception(4);
   HEAP32[$147 >> 2] = 9776;
   ___cxa_throw($147, 15976, 602);
  }
 } while (0);
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $232 = $__wb | 0;
 HEAP32[$__wn >> 2] = HEAP32[$232 >> 2];
 var $234 = $__b | 0;
 var $235 = $__ct + 8 | 0;
 var $238 = $__nsn + 1 | 0;
 var $239 = $__nsn + 4 | 0;
 var $240 = $__nsn + 8 | 0;
 var $241 = $__psn + 1 | 0;
 var $242 = $__psn + 4 | 0;
 var $243 = $__psn + 8 | 0;
 var $245 = ($__flags & 512 | 0) != 0;
 var $247 = $__sym + 1 | 0;
 var $248 = $__sym + 4 | 0;
 var $249 = $__sym + 8 | 0;
 var $251 = $__spaces + 1 | 0;
 var $252 = $__spaces + 4 | 0;
 var $253 = $__spaces + 8 | 0;
 var $254 = $tmpcast + 3 | 0;
 var $255 = $__wb + 4 | 0;
 var $256 = $__grp + 4 | 0;
 var $257 = $__spaces | 0;
 var $__we10841210 = $__we;
 var $__gb_sroa_1_4_load105910781213 = 484;
 var $259 = $11;
 var $__gb_sroa_0_0_load104910631216 = $11;
 var $258 = $__gbuf + 400 | 0;
 var $__trailing_sign_01219 = 0;
 var $__p_01221 = 0;
 var $__fd_0 = $storemerge_i;
 var $__e_sroa_0_0 = $__e_0;
 L605 : while (1) {
  var $__e_sroa_0_0;
  var $__fd_0;
  var $__p_01221;
  var $__trailing_sign_01219;
  var $258;
  var $__gb_sroa_0_0_load104910631216;
  var $259;
  var $__gb_sroa_1_4_load105910781213;
  var $__we10841210;
  var $260 = HEAP32[$234 >> 2];
  do {
   if (($260 | 0) == 0) {
    var $276 = 0;
   } else {
    if ((HEAP32[$260 + 12 >> 2] | 0) != (HEAP32[$260 + 16 >> 2] | 0)) {
     var $276 = $260;
     break;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$260 >> 2] + 36 >> 2]]($260) | 0) == -1) {
     HEAP32[$234 >> 2] = 0;
     var $276 = 0;
     break;
    } else {
     var $276 = HEAP32[$234 >> 2];
     break;
    }
   }
  } while (0);
  var $276;
  var $277 = ($276 | 0) == 0;
  do {
   if (($__e_sroa_0_0 | 0) == 0) {
    label = 538;
   } else {
    if ((HEAP32[$__e_sroa_0_0 + 12 >> 2] | 0) != (HEAP32[$__e_sroa_0_0 + 16 >> 2] | 0)) {
     if ($277) {
      var $__e_sroa_0_2 = $__e_sroa_0_0;
      break;
     } else {
      var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load105910781213;
      var $_lcssa = $259;
      var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load104910631216;
      var $__trailing_sign_0_lcssa = $__trailing_sign_01219;
      var $__e_sroa_0_21 = $__e_sroa_0_0;
      label = 824;
      break L605;
     }
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_0 >> 2] + 36 >> 2]]($__e_sroa_0_0) | 0) == -1) {
     label = 538;
     break;
    }
    if ($277) {
     var $__e_sroa_0_2 = $__e_sroa_0_0;
    } else {
     var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load105910781213;
     var $_lcssa = $259;
     var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load104910631216;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01219;
     var $__e_sroa_0_21 = $__e_sroa_0_0;
     label = 824;
     break L605;
    }
   }
  } while (0);
  if (label == 538) {
   label = 0;
   if ($277) {
    var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load105910781213;
    var $_lcssa = $259;
    var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load104910631216;
    var $__trailing_sign_0_lcssa = $__trailing_sign_01219;
    var $__e_sroa_0_21 = 0;
    label = 824;
    break;
   } else {
    var $__e_sroa_0_2 = 0;
   }
  }
  var $__e_sroa_0_2;
  var $295 = HEAP8[$tmpcast + $__p_01221 | 0] | 0;
  do {
   if (($295 | 0) == 1) {
    if (($__p_01221 | 0) == 3) {
     var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load105910781213;
     var $_lcssa = $259;
     var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load104910631216;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01219;
     var $__e_sroa_0_21 = $__e_sroa_0_2;
     label = 824;
     break L605;
    }
    var $344 = HEAP32[$234 >> 2];
    var $346 = HEAP32[$344 + 12 >> 2];
    if (($346 | 0) == (HEAP32[$344 + 16 >> 2] | 0)) {
     var $_0929_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$344 >> 2] + 36 >> 2]]($344) & 255;
    } else {
     var $_0929_off0 = HEAP8[$346];
    }
    var $_0929_off0;
    if ($_0929_off0 << 24 >> 24 <= -1) {
     label = 590;
     break L605;
    }
    if ((HEAP16[HEAP32[$235 >> 2] + ($_0929_off0 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
     label = 590;
     break L605;
    }
    var $365 = HEAP32[$234 >> 2];
    var $366 = $365 + 12 | 0;
    var $367 = HEAP32[$366 >> 2];
    if (($367 | 0) == (HEAP32[$365 + 16 >> 2] | 0)) {
     var $_0928_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$365 >> 2] + 40 >> 2]]($365) & 255;
    } else {
     HEAP32[$366 >> 2] = $367 + 1;
     var $_0928_off0 = HEAP8[$367];
    }
    var $_0928_off0;
    var $380 = HEAP8[$15];
    if (($380 & 1) == 0) {
     var $__sz_0_i = ($380 & 255) >>> 1;
     var $__cap_0_i = 10;
    } else {
     var $__sz_0_i = HEAP32[$252 >> 2];
     var $__cap_0_i = (HEAP32[$257 >> 2] & -2) - 1 | 0;
    }
    var $__cap_0_i;
    var $__sz_0_i;
    if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0);
     var $__is_short_0_off0_in_in_i = HEAP8[$15];
    } else {
     var $__is_short_0_off0_in_in_i = $380;
    }
    var $__is_short_0_off0_in_in_i;
    if (($__is_short_0_off0_in_in_i & 1) == 0) {
     HEAP8[$15] = ($__sz_0_i << 1) + 2 & 255;
     var $_pn_i = $251;
     var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
    } else {
     var $401 = HEAP32[$253 >> 2];
     var $402 = $__sz_0_i + 1 | 0;
     HEAP32[$252 >> 2] = $402;
     var $_pn_i = $401;
     var $__p_0_sum_pre_phi_i = $402;
    }
    var $__p_0_sum_pre_phi_i;
    var $_pn_i;
    HEAP8[$_pn_i + $__sz_0_i | 0] = $_0928_off0;
    HEAP8[$_pn_i + $__p_0_sum_pre_phi_i | 0] = 0;
    label = 591;
   } else if (($295 | 0) == 2) {
    if (!(($__trailing_sign_01219 | 0) != 0 | $__p_01221 >>> 0 < 2)) {
     if (($__p_01221 | 0) == 2) {
      var $690 = (HEAP8[$254] | 0) != 0;
     } else {
      var $690 = 0;
     }
     var $690;
     if (!($245 | $690)) {
      var $__trailing_sign_1 = 0;
      var $1203 = $258;
      var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
      var $1202 = $259;
      var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
      var $__we1085 = $__we10841210;
      var $__fd_3 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
    }
    var $691 = HEAP8[$12];
    var $_1315 = ($691 & 1) == 0 ? $247 : HEAP32[$249 >> 2];
    L659 : do {
     if (($__p_01221 | 0) == 0) {
      var $__sym_curr_char_sroa_0_0_ph1339 = $_1315;
     } else {
      if (HEAPU8[$tmpcast + ($__p_01221 - 1) | 0] >= 2) {
       var $__sym_curr_char_sroa_0_0_ph1339 = $_1315;
       break;
      }
      var $700 = $691 & 255;
      var $706 = $_1315 + (($700 & 1 | 0) == 0 ? $700 >>> 1 : HEAP32[$248 >> 2]) | 0;
      var $__sym_space_end_sroa_0_0 = $_1315;
      while (1) {
       var $__sym_space_end_sroa_0_0;
       if (($__sym_space_end_sroa_0_0 | 0) == ($706 | 0)) {
        var $__sym_space_end_sroa_0_0_lcssa = $706;
        break;
       }
       var $709 = HEAP8[$__sym_space_end_sroa_0_0];
       if ($709 << 24 >> 24 <= -1) {
        var $__sym_space_end_sroa_0_0_lcssa = $__sym_space_end_sroa_0_0;
        break;
       }
       if ((HEAP16[HEAP32[$235 >> 2] + ($709 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        var $__sym_space_end_sroa_0_0_lcssa = $__sym_space_end_sroa_0_0;
        break;
       } else {
        var $__sym_space_end_sroa_0_0 = $__sym_space_end_sroa_0_0 + 1 | 0;
       }
      }
      var $__sym_space_end_sroa_0_0_lcssa;
      var $719 = $__sym_space_end_sroa_0_0_lcssa - $_1315 | 0;
      var $720 = HEAP8[$15];
      var $721 = $720 & 255;
      var $726 = ($721 & 1 | 0) == 0 ? $721 >>> 1 : HEAP32[$252 >> 2];
      if ($719 >>> 0 > $726 >>> 0) {
       var $__sym_curr_char_sroa_0_0_ph1339 = $_1315;
       break;
      }
      var $_1318 = ($720 & 1) == 0 ? $251 : HEAP32[$253 >> 2];
      var $731 = $_1318 + $726 | 0;
      if (($__sym_space_end_sroa_0_0_lcssa | 0) == ($_1315 | 0)) {
       var $__sym_curr_char_sroa_0_0_ph1339 = $_1315;
       break;
      }
      var $_sroa_0943_01126 = $_1315;
      var $_sroa_0945_01127 = $_1318 + ($726 - $719) | 0;
      while (1) {
       var $_sroa_0945_01127;
       var $_sroa_0943_01126;
       if ((HEAP8[$_sroa_0945_01127] | 0) != (HEAP8[$_sroa_0943_01126] | 0)) {
        var $__sym_curr_char_sroa_0_0_ph1339 = $_1315;
        break L659;
       }
       var $737 = $_sroa_0945_01127 + 1 | 0;
       if (($737 | 0) == ($731 | 0)) {
        var $__sym_curr_char_sroa_0_0_ph1339 = $__sym_space_end_sroa_0_0_lcssa;
        break;
       } else {
        var $_sroa_0943_01126 = $_sroa_0943_01126 + 1 | 0;
        var $_sroa_0945_01127 = $737;
       }
      }
     }
    } while (0);
    var $__sym_curr_char_sroa_0_0_ph1339;
    var $740 = $691 & 255;
    L673 : do {
     if (($__sym_curr_char_sroa_0_0_ph1339 | 0) == ($_1315 + (($740 & 1 | 0) == 0 ? $740 >>> 1 : HEAP32[$248 >> 2]) | 0)) {
      var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_0_ph1339;
      var $__e_sroa_0_9 = $__e_sroa_0_2;
     } else {
      var $748 = $__e_sroa_0_2;
      var $__sym_curr_char_sroa_0_01342 = $__sym_curr_char_sroa_0_0_ph1339;
      var $__e_sroa_0_6 = $__e_sroa_0_2;
      while (1) {
       var $__e_sroa_0_6;
       var $__sym_curr_char_sroa_0_01342;
       var $748;
       var $749 = HEAP32[$234 >> 2];
       do {
        if (($749 | 0) == 0) {
         var $765 = 0;
        } else {
         if ((HEAP32[$749 + 12 >> 2] | 0) != (HEAP32[$749 + 16 >> 2] | 0)) {
          var $765 = $749;
          break;
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$749 >> 2] + 36 >> 2]]($749) | 0) == -1) {
          HEAP32[$234 >> 2] = 0;
          var $765 = 0;
          break;
         } else {
          var $765 = HEAP32[$234 >> 2];
          break;
         }
        }
       } while (0);
       var $765;
       var $766 = ($765 | 0) == 0;
       do {
        if (($748 | 0) == 0) {
         var $__e_sroa_0_7 = $__e_sroa_0_6;
         label = 693;
        } else {
         if ((HEAP32[$748 + 12 >> 2] | 0) != (HEAP32[$748 + 16 >> 2] | 0)) {
          if ($766) {
           var $781 = $748;
           var $__e_sroa_0_8 = $__e_sroa_0_6;
           break;
          } else {
           var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_01342;
           var $__e_sroa_0_9 = $__e_sroa_0_6;
           break L673;
          }
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$748 >> 2] + 36 >> 2]]($748) | 0) == -1) {
          var $__e_sroa_0_7 = 0;
          label = 693;
          break;
         }
         if ($766) {
          var $781 = $748;
          var $__e_sroa_0_8 = $__e_sroa_0_6;
         } else {
          var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_01342;
          var $__e_sroa_0_9 = $__e_sroa_0_6;
          break L673;
         }
        }
       } while (0);
       if (label == 693) {
        label = 0;
        var $__e_sroa_0_7;
        if ($766) {
         var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_01342;
         var $__e_sroa_0_9 = $__e_sroa_0_7;
         break L673;
        } else {
         var $781 = 0;
         var $__e_sroa_0_8 = $__e_sroa_0_7;
        }
       }
       var $__e_sroa_0_8;
       var $781;
       var $782 = HEAP32[$234 >> 2];
       var $784 = HEAP32[$782 + 12 >> 2];
       if (($784 | 0) == (HEAP32[$782 + 16 >> 2] | 0)) {
        var $_0901_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$782 >> 2] + 36 >> 2]]($782) & 255;
       } else {
        var $_0901_off0 = HEAP8[$784];
       }
       var $_0901_off0;
       if ($_0901_off0 << 24 >> 24 != (HEAP8[$__sym_curr_char_sroa_0_01342] | 0)) {
        var $__sym_curr_char_sroa_0_0_lcssa = $__sym_curr_char_sroa_0_01342;
        var $__e_sroa_0_9 = $__e_sroa_0_8;
        break L673;
       }
       var $799 = HEAP32[$234 >> 2];
       var $800 = $799 + 12 | 0;
       var $801 = HEAP32[$800 >> 2];
       if (($801 | 0) == (HEAP32[$799 + 16 >> 2] | 0)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$799 >> 2] + 40 >> 2]]($799);
       } else {
        HEAP32[$800 >> 2] = $801 + 1;
       }
       var $813 = $__sym_curr_char_sroa_0_01342 + 1 | 0;
       var $_pre1291 = HEAP8[$12];
       var $817 = $_pre1291 & 255;
       if (($813 | 0) == ((($_pre1291 & 1) == 0 ? $247 : HEAP32[$249 >> 2]) + (($817 & 1 | 0) == 0 ? $817 >>> 1 : HEAP32[$248 >> 2]) | 0)) {
        var $__sym_curr_char_sroa_0_0_lcssa = $813;
        var $__e_sroa_0_9 = $__e_sroa_0_8;
        break;
       } else {
        var $748 = $781;
        var $__sym_curr_char_sroa_0_01342 = $813;
        var $__e_sroa_0_6 = $__e_sroa_0_8;
       }
      }
     }
    } while (0);
    var $__e_sroa_0_9;
    var $__sym_curr_char_sroa_0_0_lcssa;
    if (!$245) {
     var $__trailing_sign_1 = $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_9;
     break;
    }
    var $825 = HEAP8[$12];
    var $829 = $825 & 255;
    if (($__sym_curr_char_sroa_0_0_lcssa | 0) == ((($825 & 1) == 0 ? $247 : HEAP32[$249 >> 2]) + (($829 & 1 | 0) == 0 ? $829 >>> 1 : HEAP32[$248 >> 2]) | 0)) {
     var $__trailing_sign_1 = $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_9;
    } else {
     label = 706;
     break L605;
    }
   } else if (($295 | 0) == 0) {
    label = 591;
   } else if (($295 | 0) == 3) {
    var $502 = HEAP8[$13];
    var $503 = $502 & 255;
    var $508 = ($503 & 1 | 0) == 0 ? $503 >>> 1 : HEAP32[$242 >> 2];
    var $509 = HEAP8[$14];
    var $510 = $509 & 255;
    var $515 = ($510 & 1 | 0) == 0 ? $510 >>> 1 : HEAP32[$239 >> 2];
    if (($508 | 0) == (-$515 | 0)) {
     var $__trailing_sign_1 = $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    var $518 = ($508 | 0) == 0;
    var $520 = HEAP32[$234 >> 2];
    var $522 = HEAP32[$520 + 12 >> 2];
    var $524 = HEAP32[$520 + 16 >> 2];
    var $525 = ($522 | 0) == ($524 | 0);
    if (!($518 | ($515 | 0) == 0)) {
     if ($525) {
      var $extract_t987 = FUNCTION_TABLE[HEAP32[HEAP32[$520 >> 2] + 36 >> 2]]($520) & 255;
      var $_pre1433 = HEAP32[$234 >> 2];
      var $_0910_off0 = $extract_t987;
      var $615 = HEAP8[$13];
      var $614 = $_pre1433;
      var $613 = HEAP32[$_pre1433 + 12 >> 2];
      var $612 = HEAP32[$_pre1433 + 16 >> 2];
     } else {
      var $_0910_off0 = HEAP8[$522];
      var $615 = $502;
      var $614 = $520;
      var $613 = $522;
      var $612 = $524;
     }
     var $612;
     var $613;
     var $614;
     var $615;
     var $_0910_off0;
     var $621 = $614 + 12 | 0;
     var $622 = ($613 | 0) == ($612 | 0);
     if ($_0910_off0 << 24 >> 24 == (HEAP8[($615 & 1) == 0 ? $241 : HEAP32[$243 >> 2]] | 0)) {
      if ($622) {
       FUNCTION_TABLE[HEAP32[HEAP32[$614 >> 2] + 40 >> 2]]($614);
      } else {
       HEAP32[$621 >> 2] = $613 + 1;
      }
      var $633 = HEAPU8[$13];
      var $__trailing_sign_1 = (($633 & 1 | 0) == 0 ? $633 >>> 1 : HEAP32[$242 >> 2]) >>> 0 > 1 ? $__psn : $__trailing_sign_01219;
      var $1203 = $258;
      var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
      var $1202 = $259;
      var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
      var $__we1085 = $__we10841210;
      var $__fd_3 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
     if ($622) {
      var $_0907_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$614 >> 2] + 36 >> 2]]($614) & 255;
     } else {
      var $_0907_off0 = HEAP8[$613];
     }
     var $_0907_off0;
     if ($_0907_off0 << 24 >> 24 != (HEAP8[(HEAP8[$14] & 1) == 0 ? $238 : HEAP32[$240 >> 2]] | 0)) {
      label = 665;
      break L605;
     }
     var $656 = HEAP32[$234 >> 2];
     var $657 = $656 + 12 | 0;
     var $658 = HEAP32[$657 >> 2];
     if (($658 | 0) == (HEAP32[$656 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$656 >> 2] + 40 >> 2]]($656);
     } else {
      HEAP32[$657 >> 2] = $658 + 1;
     }
     HEAP8[$__neg] = 1;
     var $671 = HEAPU8[$14];
     var $__trailing_sign_1 = (($671 & 1 | 0) == 0 ? $671 >>> 1 : HEAP32[$239 >> 2]) >>> 0 > 1 ? $__nsn : $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    if ($518) {
     if ($525) {
      var $extract_t991 = FUNCTION_TABLE[HEAP32[HEAP32[$520 >> 2] + 36 >> 2]]($520) & 255;
      var $_0912_off0 = $extract_t991;
      var $574 = HEAP8[$14];
     } else {
      var $_0912_off0 = HEAP8[$522];
      var $574 = $509;
     }
     var $574;
     var $_0912_off0;
     if ($_0912_off0 << 24 >> 24 != (HEAP8[($574 & 1) == 0 ? $238 : HEAP32[$240 >> 2]] | 0)) {
      var $__trailing_sign_1 = $__trailing_sign_01219;
      var $1203 = $258;
      var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
      var $1202 = $259;
      var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
      var $__we1085 = $__we10841210;
      var $__fd_3 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
     var $581 = HEAP32[$234 >> 2];
     var $582 = $581 + 12 | 0;
     var $583 = HEAP32[$582 >> 2];
     if (($583 | 0) == (HEAP32[$581 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$581 >> 2] + 40 >> 2]]($581);
     } else {
      HEAP32[$582 >> 2] = $583 + 1;
     }
     HEAP8[$__neg] = 1;
     var $596 = HEAPU8[$14];
     var $__trailing_sign_1 = (($596 & 1 | 0) == 0 ? $596 >>> 1 : HEAP32[$239 >> 2]) >>> 0 > 1 ? $__nsn : $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    if ($525) {
     var $extract_t993 = FUNCTION_TABLE[HEAP32[HEAP32[$520 >> 2] + 36 >> 2]]($520) & 255;
     var $_0918_off0 = $extract_t993;
     var $535 = HEAP8[$13];
    } else {
     var $_0918_off0 = HEAP8[$522];
     var $535 = $502;
    }
    var $535;
    var $_0918_off0;
    if ($_0918_off0 << 24 >> 24 != (HEAP8[($535 & 1) == 0 ? $241 : HEAP32[$243 >> 2]] | 0)) {
     HEAP8[$__neg] = 1;
     var $__trailing_sign_1 = $__trailing_sign_01219;
     var $1203 = $258;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
     var $1202 = $259;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
     var $__we1085 = $__we10841210;
     var $__fd_3 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    var $542 = HEAP32[$234 >> 2];
    var $543 = $542 + 12 | 0;
    var $544 = HEAP32[$543 >> 2];
    if (($544 | 0) == (HEAP32[$542 + 16 >> 2] | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$542 >> 2] + 40 >> 2]]($542);
    } else {
     HEAP32[$543 >> 2] = $544 + 1;
    }
    var $557 = HEAPU8[$13];
    var $__trailing_sign_1 = (($557 & 1 | 0) == 0 ? $557 >>> 1 : HEAP32[$242 >> 2]) >>> 0 > 1 ? $__psn : $__trailing_sign_01219;
    var $1203 = $258;
    var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
    var $1202 = $259;
    var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
    var $__we1085 = $__we10841210;
    var $__fd_3 = $__fd_0;
    var $__e_sroa_0_20 = $__e_sroa_0_2;
   } else if (($295 | 0) == 4) {
    var $__ng_0 = 0;
    var $841 = $258;
    var $__gb_sroa_0_0_load10491066 = $__gb_sroa_0_0_load104910631216;
    var $840 = $259;
    var $__gb_sroa_1_4_load10591076 = $__gb_sroa_1_4_load105910781213;
    var $__we1089 = $__we10841210;
    var $__e_sroa_0_10 = $__e_sroa_0_2;
    L758 : while (1) {
     var $__e_sroa_0_10;
     var $__we1089;
     var $__gb_sroa_1_4_load10591076;
     var $840;
     var $__gb_sroa_0_0_load10491066;
     var $841;
     var $__ng_0;
     var $842 = HEAP32[$234 >> 2];
     do {
      if (($842 | 0) == 0) {
       var $858 = 0;
      } else {
       if ((HEAP32[$842 + 12 >> 2] | 0) != (HEAP32[$842 + 16 >> 2] | 0)) {
        var $858 = $842;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$842 >> 2] + 36 >> 2]]($842) | 0) == -1) {
        HEAP32[$234 >> 2] = 0;
        var $858 = 0;
        break;
       } else {
        var $858 = HEAP32[$234 >> 2];
        break;
       }
      }
     } while (0);
     var $858;
     var $859 = ($858 | 0) == 0;
     do {
      if (($__e_sroa_0_10 | 0) == 0) {
       label = 718;
      } else {
       if ((HEAP32[$__e_sroa_0_10 + 12 >> 2] | 0) != (HEAP32[$__e_sroa_0_10 + 16 >> 2] | 0)) {
        if ($859) {
         var $__e_sroa_0_12 = $__e_sroa_0_10;
         break;
        } else {
         var $__e_sroa_0_13 = $__e_sroa_0_10;
         break L758;
        }
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_10 >> 2] + 36 >> 2]]($__e_sroa_0_10) | 0) == -1) {
        label = 718;
        break;
       }
       if ($859) {
        var $__e_sroa_0_12 = $__e_sroa_0_10;
       } else {
        var $__e_sroa_0_13 = $__e_sroa_0_10;
        break L758;
       }
      }
     } while (0);
     if (label == 718) {
      label = 0;
      if ($859) {
       var $__e_sroa_0_13 = 0;
       break;
      } else {
       var $__e_sroa_0_12 = 0;
      }
     }
     var $__e_sroa_0_12;
     var $874 = HEAP32[$234 >> 2];
     var $876 = HEAP32[$874 + 12 >> 2];
     if (($876 | 0) == (HEAP32[$874 + 16 >> 2] | 0)) {
      var $_0905_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$874 >> 2] + 36 >> 2]]($874) & 255;
     } else {
      var $_0905_off0 = HEAP8[$876];
     }
     var $_0905_off0;
     do {
      if ($_0905_off0 << 24 >> 24 > -1) {
       if ((HEAP16[HEAP32[$235 >> 2] + ($_0905_off0 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        label = 738;
        break;
       }
       var $895 = HEAP32[$__wn >> 2];
       if (($895 | 0) == ($__we1089 | 0)) {
        var $899 = (HEAP32[$255 >> 2] | 0) != 484;
        var $900 = HEAP32[$232 >> 2];
        var $903 = $__we1089 - $900 | 0;
        var $906 = $903 >>> 0 < 2147483647 ? $903 << 1 : -1;
        var $907 = _realloc($899 ? $900 : 0, $906);
        if (($907 | 0) == 0) {
         label = 728;
         break L605;
        }
        do {
         if ($899) {
          HEAP32[$232 >> 2] = $907;
          var $918 = $907;
         } else {
          var $_pr_i = HEAP32[$232 >> 2];
          HEAP32[$232 >> 2] = $907;
          if (($_pr_i | 0) == 0) {
           var $918 = $907;
           break;
          }
          FUNCTION_TABLE[HEAP32[$255 >> 2]]($_pr_i);
          var $918 = HEAP32[$232 >> 2];
         }
        } while (0);
        var $918;
        HEAP32[$255 >> 2] = 248;
        var $919 = $918 + $903 | 0;
        HEAP32[$__wn >> 2] = $919;
        var $__we1091 = HEAP32[$232 >> 2] + $906 | 0;
        var $923 = $919;
       } else {
        var $__we1091 = $__we1089;
        var $923 = $895;
       }
       var $923;
       var $__we1091;
       HEAP32[$__wn >> 2] = $923 + 1;
       HEAP8[$923] = $_0905_off0;
       var $__ng_1 = $__ng_0 + 1 | 0;
       var $965 = $841;
       var $__gb_sroa_0_0_load10491067 = $__gb_sroa_0_0_load10491066;
       var $964 = $840;
       var $__gb_sroa_1_4_load10591074 = $__gb_sroa_1_4_load10591076;
       var $__we1090 = $__we1091;
      } else {
       label = 738;
      }
     } while (0);
     if (label == 738) {
      label = 0;
      var $927 = HEAPU8[$10];
      if (!(((((($927 & 1 | 0) == 0 ? $927 >>> 1 : HEAP32[$256 >> 2]) | 0) == 0 | ($__ng_0 | 0) == 0) ^ 1) & $_0905_off0 << 24 >> 24 == $__ts_0 << 24 >> 24)) {
       var $__e_sroa_0_13 = $__e_sroa_0_12;
       break;
      }
      if (($__gb_sroa_0_0_load10491066 | 0) == ($841 | 0)) {
       var $942 = $__gb_sroa_0_0_load10491066 - $840 | 0;
       var $945 = $942 >>> 0 < 2147483647 ? $942 << 1 : -1;
       if (($__gb_sroa_1_4_load10591076 | 0) == 484) {
        var $949 = 0;
       } else {
        var $949 = $840;
       }
       var $949;
       var $950 = _realloc($949, $945);
       var $951 = $950;
       if (($950 | 0) == 0) {
        label = 743;
        break L605;
       }
       var $961 = $951 + ($945 >>> 2 << 2) | 0;
       var $__gb_sroa_0_0_load10491068 = $951 + ($942 >> 2 << 2) | 0;
       var $960 = $951;
       var $__gb_sroa_1_4_load10591075 = 248;
      } else {
       var $961 = $841;
       var $__gb_sroa_0_0_load10491068 = $__gb_sroa_0_0_load10491066;
       var $960 = $840;
       var $__gb_sroa_1_4_load10591075 = $__gb_sroa_1_4_load10591076;
      }
      var $__gb_sroa_1_4_load10591075;
      var $960;
      var $__gb_sroa_0_0_load10491068;
      var $961;
      HEAP32[$__gb_sroa_0_0_load10491068 >> 2] = $__ng_0;
      var $__ng_1 = 0;
      var $965 = $961;
      var $__gb_sroa_0_0_load10491067 = $__gb_sroa_0_0_load10491068 + 4 | 0;
      var $964 = $960;
      var $__gb_sroa_1_4_load10591074 = $__gb_sroa_1_4_load10591075;
      var $__we1090 = $__we1089;
     }
     var $__we1090;
     var $__gb_sroa_1_4_load10591074;
     var $964;
     var $__gb_sroa_0_0_load10491067;
     var $965;
     var $__ng_1;
     var $966 = HEAP32[$234 >> 2];
     var $967 = $966 + 12 | 0;
     var $968 = HEAP32[$967 >> 2];
     if (($968 | 0) == (HEAP32[$966 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$966 >> 2] + 40 >> 2]]($966);
      var $__ng_0 = $__ng_1;
      var $841 = $965;
      var $__gb_sroa_0_0_load10491066 = $__gb_sroa_0_0_load10491067;
      var $840 = $964;
      var $__gb_sroa_1_4_load10591076 = $__gb_sroa_1_4_load10591074;
      var $__we1089 = $__we1090;
      var $__e_sroa_0_10 = $__e_sroa_0_12;
      continue;
     } else {
      HEAP32[$967 >> 2] = $968 + 1;
      var $__ng_0 = $__ng_1;
      var $841 = $965;
      var $__gb_sroa_0_0_load10491066 = $__gb_sroa_0_0_load10491067;
      var $840 = $964;
      var $__gb_sroa_1_4_load10591076 = $__gb_sroa_1_4_load10591074;
      var $__we1089 = $__we1090;
      var $__e_sroa_0_10 = $__e_sroa_0_12;
      continue;
     }
    }
    var $__e_sroa_0_13;
    if (($840 | 0) == ($__gb_sroa_0_0_load10491066 | 0) | ($__ng_0 | 0) == 0) {
     var $1011 = $841;
     var $__gb_sroa_0_0_load10491065 = $__gb_sroa_0_0_load10491066;
     var $1010 = $840;
     var $__gb_sroa_1_4_load10591073 = $__gb_sroa_1_4_load10591076;
    } else {
     if (($__gb_sroa_0_0_load10491066 | 0) == ($841 | 0)) {
      var $989 = $__gb_sroa_0_0_load10491066 - $840 | 0;
      var $992 = $989 >>> 0 < 2147483647 ? $989 << 1 : -1;
      if (($__gb_sroa_1_4_load10591076 | 0) == 484) {
       var $996 = 0;
      } else {
       var $996 = $840;
      }
      var $996;
      var $997 = _realloc($996, $992);
      var $998 = $997;
      if (($997 | 0) == 0) {
       label = 755;
       break L605;
      }
      var $1008 = $998 + ($992 >>> 2 << 2) | 0;
      var $__gb_sroa_0_0_load10491069 = $998 + ($989 >> 2 << 2) | 0;
      var $1007 = $998;
      var $__gb_sroa_1_4_load10591072 = 248;
     } else {
      var $1008 = $841;
      var $__gb_sroa_0_0_load10491069 = $__gb_sroa_0_0_load10491066;
      var $1007 = $840;
      var $__gb_sroa_1_4_load10591072 = $__gb_sroa_1_4_load10591076;
     }
     var $__gb_sroa_1_4_load10591072;
     var $1007;
     var $__gb_sroa_0_0_load10491069;
     var $1008;
     HEAP32[$__gb_sroa_0_0_load10491069 >> 2] = $__ng_0;
     var $1011 = $1008;
     var $__gb_sroa_0_0_load10491065 = $__gb_sroa_0_0_load10491069 + 4 | 0;
     var $1010 = $1007;
     var $__gb_sroa_1_4_load10591073 = $__gb_sroa_1_4_load10591072;
    }
    var $__gb_sroa_1_4_load10591073;
    var $1010;
    var $__gb_sroa_0_0_load10491065;
    var $1011;
    if (($__fd_0 | 0) > 0) {
     var $1014 = HEAP32[$234 >> 2];
     do {
      if (($1014 | 0) == 0) {
       var $1030 = 0;
      } else {
       if ((HEAP32[$1014 + 12 >> 2] | 0) != (HEAP32[$1014 + 16 >> 2] | 0)) {
        var $1030 = $1014;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$1014 >> 2] + 36 >> 2]]($1014) | 0) == -1) {
        HEAP32[$234 >> 2] = 0;
        var $1030 = 0;
        break;
       } else {
        var $1030 = HEAP32[$234 >> 2];
        break;
       }
      }
     } while (0);
     var $1030;
     var $1031 = ($1030 | 0) == 0;
     do {
      if (($__e_sroa_0_13 | 0) == 0) {
       label = 771;
      } else {
       if ((HEAP32[$__e_sroa_0_13 + 12 >> 2] | 0) != (HEAP32[$__e_sroa_0_13 + 16 >> 2] | 0)) {
        if ($1031) {
         var $__e_sroa_0_15 = $__e_sroa_0_13;
         break;
        } else {
         label = 778;
         break L605;
        }
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_13 >> 2] + 36 >> 2]]($__e_sroa_0_13) | 0) == -1) {
        label = 771;
        break;
       }
       if ($1031) {
        var $__e_sroa_0_15 = $__e_sroa_0_13;
       } else {
        label = 778;
        break L605;
       }
      }
     } while (0);
     if (label == 771) {
      label = 0;
      if ($1031) {
       label = 778;
       break L605;
      } else {
       var $__e_sroa_0_15 = 0;
      }
     }
     var $__e_sroa_0_15;
     var $1046 = HEAP32[$234 >> 2];
     var $1048 = HEAP32[$1046 + 12 >> 2];
     if (($1048 | 0) == (HEAP32[$1046 + 16 >> 2] | 0)) {
      var $_0917_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$1046 >> 2] + 36 >> 2]]($1046) & 255;
     } else {
      var $_0917_off0 = HEAP8[$1048];
     }
     var $_0917_off0;
     if ($_0917_off0 << 24 >> 24 != $__dp_0 << 24 >> 24) {
      label = 778;
      break L605;
     }
     var $1065 = HEAP32[$234 >> 2];
     var $1066 = $1065 + 12 | 0;
     var $1067 = HEAP32[$1066 >> 2];
     if (($1067 | 0) == (HEAP32[$1065 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1065 >> 2] + 40 >> 2]]($1065);
      var $__we10881125 = $__we1089;
      var $1079 = $__e_sroa_0_15;
      var $__fd_1 = $__fd_0;
      var $__e_sroa_0_16 = $__e_sroa_0_15;
     } else {
      HEAP32[$1066 >> 2] = $1067 + 1;
      var $__we10881125 = $__we1089;
      var $1079 = $__e_sroa_0_15;
      var $__fd_1 = $__fd_0;
      var $__e_sroa_0_16 = $__e_sroa_0_15;
     }
     while (1) {
      var $__e_sroa_0_16;
      var $__fd_1;
      var $1079;
      var $__we10881125;
      var $1080 = HEAP32[$234 >> 2];
      do {
       if (($1080 | 0) == 0) {
        var $1096 = 0;
       } else {
        if ((HEAP32[$1080 + 12 >> 2] | 0) != (HEAP32[$1080 + 16 >> 2] | 0)) {
         var $1096 = $1080;
         break;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1080 >> 2] + 36 >> 2]]($1080) | 0) == -1) {
         HEAP32[$234 >> 2] = 0;
         var $1096 = 0;
         break;
        } else {
         var $1096 = HEAP32[$234 >> 2];
         break;
        }
       }
      } while (0);
      var $1096;
      var $1097 = ($1096 | 0) == 0;
      do {
       if (($1079 | 0) == 0) {
        var $__e_sroa_0_17 = $__e_sroa_0_16;
        label = 793;
       } else {
        if ((HEAP32[$1079 + 12 >> 2] | 0) != (HEAP32[$1079 + 16 >> 2] | 0)) {
         if ($1097) {
          var $1112 = $1079;
          var $__e_sroa_0_18 = $__e_sroa_0_16;
          break;
         } else {
          label = 801;
          break L605;
         }
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1079 >> 2] + 36 >> 2]]($1079) | 0) == -1) {
         var $__e_sroa_0_17 = 0;
         label = 793;
         break;
        }
        if ($1097) {
         var $1112 = $1079;
         var $__e_sroa_0_18 = $__e_sroa_0_16;
        } else {
         label = 801;
         break L605;
        }
       }
      } while (0);
      if (label == 793) {
       label = 0;
       var $__e_sroa_0_17;
       if ($1097) {
        label = 801;
        break L605;
       } else {
        var $1112 = 0;
        var $__e_sroa_0_18 = $__e_sroa_0_17;
       }
      }
      var $__e_sroa_0_18;
      var $1112;
      var $1113 = HEAP32[$234 >> 2];
      var $1115 = HEAP32[$1113 + 12 >> 2];
      if (($1115 | 0) == (HEAP32[$1113 + 16 >> 2] | 0)) {
       var $_0922_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$1113 >> 2] + 36 >> 2]]($1113) & 255;
      } else {
       var $_0922_off0 = HEAP8[$1115];
      }
      var $_0922_off0;
      if ($_0922_off0 << 24 >> 24 <= -1) {
       label = 801;
       break L605;
      }
      if ((HEAP16[HEAP32[$235 >> 2] + ($_0922_off0 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
       label = 801;
       break L605;
      }
      var $1136 = HEAP32[$__wn >> 2];
      if (($1136 | 0) == ($__we10881125 | 0)) {
       var $1140 = (HEAP32[$255 >> 2] | 0) != 484;
       var $1141 = HEAP32[$232 >> 2];
       var $1144 = $__we10881125 - $1141 | 0;
       var $1147 = $1144 >>> 0 < 2147483647 ? $1144 << 1 : -1;
       var $1148 = _realloc($1140 ? $1141 : 0, $1147);
       if (($1148 | 0) == 0) {
        label = 804;
        break L605;
       }
       do {
        if ($1140) {
         HEAP32[$232 >> 2] = $1148;
         var $1159 = $1148;
        } else {
         var $_pr_i1027 = HEAP32[$232 >> 2];
         HEAP32[$232 >> 2] = $1148;
         if (($_pr_i1027 | 0) == 0) {
          var $1159 = $1148;
          break;
         }
         FUNCTION_TABLE[HEAP32[$255 >> 2]]($_pr_i1027);
         var $1159 = HEAP32[$232 >> 2];
        }
       } while (0);
       var $1159;
       HEAP32[$255 >> 2] = 248;
       var $1160 = $1159 + $1144 | 0;
       HEAP32[$__wn >> 2] = $1160;
       var $__we1087 = HEAP32[$232 >> 2] + $1147 | 0;
       var $1163 = $1160;
      } else {
       var $__we1087 = $__we10881125;
       var $1163 = $1136;
      }
      var $1163;
      var $__we1087;
      var $1164 = HEAP32[$234 >> 2];
      var $1166 = HEAP32[$1164 + 12 >> 2];
      if (($1166 | 0) == (HEAP32[$1164 + 16 >> 2] | 0)) {
       var $extract_t978 = FUNCTION_TABLE[HEAP32[HEAP32[$1164 >> 2] + 36 >> 2]]($1164) & 255;
       var $_0923_off0 = $extract_t978;
       var $1178 = HEAP32[$__wn >> 2];
      } else {
       var $_0923_off0 = HEAP8[$1166];
       var $1178 = $1163;
      }
      var $1178;
      var $_0923_off0;
      HEAP32[$__wn >> 2] = $1178 + 1;
      HEAP8[$1178] = $_0923_off0;
      var $1180 = $__fd_1 - 1 | 0;
      var $1181 = HEAP32[$234 >> 2];
      var $1182 = $1181 + 12 | 0;
      var $1183 = HEAP32[$1182 >> 2];
      if (($1183 | 0) == (HEAP32[$1181 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1181 >> 2] + 40 >> 2]]($1181);
      } else {
       HEAP32[$1182 >> 2] = $1183 + 1;
      }
      if (($1180 | 0) > 0) {
       var $__we10881125 = $__we1087;
       var $1079 = $1112;
       var $__fd_1 = $1180;
       var $__e_sroa_0_16 = $__e_sroa_0_18;
      } else {
       var $__we1086 = $__we1087;
       var $__fd_2 = $1180;
       var $__e_sroa_0_19 = $__e_sroa_0_18;
       break;
      }
     }
    } else {
     var $__we1086 = $__we1089;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_19 = $__e_sroa_0_13;
    }
    var $__e_sroa_0_19;
    var $__fd_2;
    var $__we1086;
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$232 >> 2] | 0)) {
     label = 822;
     break L605;
    } else {
     var $__trailing_sign_1 = $__trailing_sign_01219;
     var $1203 = $1011;
     var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load10491065;
     var $1202 = $1010;
     var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load10591073;
     var $__we1085 = $__we1086;
     var $__fd_3 = $__fd_2;
     var $__e_sroa_0_20 = $__e_sroa_0_19;
    }
   } else {
    var $__trailing_sign_1 = $__trailing_sign_01219;
    var $1203 = $258;
    var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
    var $1202 = $259;
    var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
    var $__we1085 = $__we10841210;
    var $__fd_3 = $__fd_0;
    var $__e_sroa_0_20 = $__e_sroa_0_2;
   }
  } while (0);
  L897 : do {
   if (label == 591) {
    label = 0;
    if (($__p_01221 | 0) == 3) {
     var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load105910781213;
     var $_lcssa = $259;
     var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load104910631216;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01219;
     var $__e_sroa_0_21 = $__e_sroa_0_2;
     label = 824;
     break L605;
    } else {
     var $408 = $__e_sroa_0_2;
     var $__e_sroa_0_3 = $__e_sroa_0_2;
    }
    while (1) {
     var $__e_sroa_0_3;
     var $408;
     var $409 = HEAP32[$234 >> 2];
     do {
      if (($409 | 0) == 0) {
       var $425 = 0;
      } else {
       if ((HEAP32[$409 + 12 >> 2] | 0) != (HEAP32[$409 + 16 >> 2] | 0)) {
        var $425 = $409;
        break;
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$409 >> 2] + 36 >> 2]]($409) | 0) == -1) {
        HEAP32[$234 >> 2] = 0;
        var $425 = 0;
        break;
       } else {
        var $425 = HEAP32[$234 >> 2];
        break;
       }
      }
     } while (0);
     var $425;
     var $426 = ($425 | 0) == 0;
     do {
      if (($408 | 0) == 0) {
       var $__e_sroa_0_4 = $__e_sroa_0_3;
       label = 603;
      } else {
       if ((HEAP32[$408 + 12 >> 2] | 0) != (HEAP32[$408 + 16 >> 2] | 0)) {
        if ($426) {
         var $441 = $408;
         var $__e_sroa_0_5 = $__e_sroa_0_3;
         break;
        } else {
         var $__trailing_sign_1 = $__trailing_sign_01219;
         var $1203 = $258;
         var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
         var $1202 = $259;
         var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
         var $__we1085 = $__we10841210;
         var $__fd_3 = $__fd_0;
         var $__e_sroa_0_20 = $__e_sroa_0_3;
         break L897;
        }
       }
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$408 >> 2] + 36 >> 2]]($408) | 0) == -1) {
        var $__e_sroa_0_4 = 0;
        label = 603;
        break;
       }
       if ($426) {
        var $441 = $408;
        var $__e_sroa_0_5 = $__e_sroa_0_3;
       } else {
        var $__trailing_sign_1 = $__trailing_sign_01219;
        var $1203 = $258;
        var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
        var $1202 = $259;
        var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
        var $__we1085 = $__we10841210;
        var $__fd_3 = $__fd_0;
        var $__e_sroa_0_20 = $__e_sroa_0_3;
        break L897;
       }
      }
     } while (0);
     if (label == 603) {
      label = 0;
      var $__e_sroa_0_4;
      if ($426) {
       var $__trailing_sign_1 = $__trailing_sign_01219;
       var $1203 = $258;
       var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
       var $1202 = $259;
       var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
       var $__we1085 = $__we10841210;
       var $__fd_3 = $__fd_0;
       var $__e_sroa_0_20 = $__e_sroa_0_4;
       break L897;
      } else {
       var $441 = 0;
       var $__e_sroa_0_5 = $__e_sroa_0_4;
      }
     }
     var $__e_sroa_0_5;
     var $441;
     var $442 = HEAP32[$234 >> 2];
     var $444 = HEAP32[$442 + 12 >> 2];
     if (($444 | 0) == (HEAP32[$442 + 16 >> 2] | 0)) {
      var $_0925_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$442 >> 2] + 36 >> 2]]($442) & 255;
     } else {
      var $_0925_off0 = HEAP8[$444];
     }
     var $_0925_off0;
     if ($_0925_off0 << 24 >> 24 <= -1) {
      var $__trailing_sign_1 = $__trailing_sign_01219;
      var $1203 = $258;
      var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
      var $1202 = $259;
      var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
      var $__we1085 = $__we10841210;
      var $__fd_3 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_5;
      break L897;
     }
     if ((HEAP16[HEAP32[$235 >> 2] + ($_0925_off0 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      var $__trailing_sign_1 = $__trailing_sign_01219;
      var $1203 = $258;
      var $__gb_sroa_0_0_load10491064 = $__gb_sroa_0_0_load104910631216;
      var $1202 = $259;
      var $__gb_sroa_1_4_load10591077 = $__gb_sroa_1_4_load105910781213;
      var $__we1085 = $__we10841210;
      var $__fd_3 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_5;
      break L897;
     }
     var $463 = HEAP32[$234 >> 2];
     var $464 = $463 + 12 | 0;
     var $465 = HEAP32[$464 >> 2];
     if (($465 | 0) == (HEAP32[$463 + 16 >> 2] | 0)) {
      var $_0924_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$463 >> 2] + 40 >> 2]]($463) & 255;
     } else {
      HEAP32[$464 >> 2] = $465 + 1;
      var $_0924_off0 = HEAP8[$465];
     }
     var $_0924_off0;
     var $478 = HEAP8[$15];
     if (($478 & 1) == 0) {
      var $__sz_0_i32 = ($478 & 255) >>> 1;
      var $__cap_0_i31 = 10;
     } else {
      var $__sz_0_i32 = HEAP32[$252 >> 2];
      var $__cap_0_i31 = (HEAP32[$257 >> 2] & -2) - 1 | 0;
     }
     var $__cap_0_i31;
     var $__sz_0_i32;
     if (($__sz_0_i32 | 0) == ($__cap_0_i31 | 0)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces, $__cap_0_i31, 1, $__cap_0_i31, $__cap_0_i31, 0);
      var $__is_short_0_off0_in_in_i33 = HEAP8[$15];
     } else {
      var $__is_short_0_off0_in_in_i33 = $478;
     }
     var $__is_short_0_off0_in_in_i33;
     if (($__is_short_0_off0_in_in_i33 & 1) == 0) {
      HEAP8[$15] = ($__sz_0_i32 << 1) + 2 & 255;
      var $_pn_i38 = $251;
      var $__p_0_sum_pre_phi_i37 = $__sz_0_i32 + 1 | 0;
     } else {
      var $499 = HEAP32[$253 >> 2];
      var $500 = $__sz_0_i32 + 1 | 0;
      HEAP32[$252 >> 2] = $500;
      var $_pn_i38 = $499;
      var $__p_0_sum_pre_phi_i37 = $500;
     }
     var $__p_0_sum_pre_phi_i37;
     var $_pn_i38;
     HEAP8[$_pn_i38 + $__sz_0_i32 | 0] = $_0924_off0;
     HEAP8[$_pn_i38 + $__p_0_sum_pre_phi_i37 | 0] = 0;
     var $408 = $441;
     var $__e_sroa_0_3 = $__e_sroa_0_5;
    }
   }
  } while (0);
  var $__e_sroa_0_20;
  var $__fd_3;
  var $__we1085;
  var $__gb_sroa_1_4_load10591077;
  var $1202;
  var $__gb_sroa_0_0_load10491064;
  var $1203;
  var $__trailing_sign_1;
  var $1204 = $__p_01221 + 1 | 0;
  if ($1204 >>> 0 < 4) {
   var $__we10841210 = $__we1085;
   var $__gb_sroa_1_4_load105910781213 = $__gb_sroa_1_4_load10591077;
   var $259 = $1202;
   var $__gb_sroa_0_0_load104910631216 = $__gb_sroa_0_0_load10491064;
   var $258 = $1203;
   var $__trailing_sign_01219 = $__trailing_sign_1;
   var $__p_01221 = $1204;
   var $__fd_0 = $__fd_3;
   var $__e_sroa_0_0 = $__e_sroa_0_20;
  } else {
   var $__gb_sroa_1_4_load10591078_lcssa = $__gb_sroa_1_4_load10591077;
   var $_lcssa = $1202;
   var $__gb_sroa_0_0_load10491063_lcssa = $__gb_sroa_0_0_load10491064;
   var $__trailing_sign_0_lcssa = $__trailing_sign_1;
   var $__e_sroa_0_21 = $__e_sroa_0_20;
   label = 824;
   break;
  }
 }
 L944 : do {
  if (label == 665) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $259;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load105910781213;
  } else if (label == 590) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $259;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load105910781213;
  } else if (label == 706) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $259;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load105910781213;
  } else if (label == 728) {
   var $910 = ___cxa_allocate_exception(4);
   HEAP32[$910 >> 2] = 9744;
   ___cxa_throw($910, 15960, 74);
  } else if (label == 743) {
   var $954 = ___cxa_allocate_exception(4);
   HEAP32[$954 >> 2] = 9744;
   ___cxa_throw($954, 15960, 74);
  } else if (label == 755) {
   var $1001 = ___cxa_allocate_exception(4);
   HEAP32[$1001 >> 2] = 9744;
   ___cxa_throw($1001, 15960, 74);
  } else if (label == 778) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $1010;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591073;
  } else if (label == 801) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $1010;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591073;
  } else if (label == 804) {
   var $1151 = ___cxa_allocate_exception(4);
   HEAP32[$1151 >> 2] = 9744;
   ___cxa_throw($1151, 15960, 74);
  } else if (label == 822) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $1010;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591073;
  } else if (label == 824) {
   var $__e_sroa_0_21;
   var $__trailing_sign_0_lcssa;
   var $__gb_sroa_0_0_load10491063_lcssa;
   var $_lcssa;
   var $__gb_sroa_1_4_load10591078_lcssa;
   L960 : do {
    if (($__trailing_sign_0_lcssa | 0) != 0) {
     var $1208 = $__trailing_sign_0_lcssa;
     var $1209 = $__trailing_sign_0_lcssa + 1 | 0;
     var $1210 = $__trailing_sign_0_lcssa + 8 | 0;
     var $1211 = $__trailing_sign_0_lcssa + 4 | 0;
     var $__i_0 = 1;
     var $__e_sroa_0_22 = $__e_sroa_0_21;
     L962 : while (1) {
      var $__e_sroa_0_22;
      var $__i_0;
      var $1213 = HEAPU8[$1208];
      if (($1213 & 1 | 0) == 0) {
       var $1220 = $1213 >>> 1;
      } else {
       var $1220 = HEAP32[$1211 >> 2];
      }
      var $1220;
      if ($__i_0 >>> 0 >= $1220 >>> 0) {
       break L960;
      }
      var $1223 = HEAP32[$234 >> 2];
      do {
       if (($1223 | 0) == 0) {
        var $1239 = 0;
       } else {
        if ((HEAP32[$1223 + 12 >> 2] | 0) != (HEAP32[$1223 + 16 >> 2] | 0)) {
         var $1239 = $1223;
         break;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1223 >> 2] + 36 >> 2]]($1223) | 0) == -1) {
         HEAP32[$234 >> 2] = 0;
         var $1239 = 0;
         break;
        } else {
         var $1239 = HEAP32[$234 >> 2];
         break;
        }
       }
      } while (0);
      var $1239;
      var $1240 = ($1239 | 0) == 0;
      do {
       if (($__e_sroa_0_22 | 0) == 0) {
        label = 841;
       } else {
        if ((HEAP32[$__e_sroa_0_22 + 12 >> 2] | 0) != (HEAP32[$__e_sroa_0_22 + 16 >> 2] | 0)) {
         if ($1240) {
          var $__e_sroa_0_24 = $__e_sroa_0_22;
          break;
         } else {
          break L962;
         }
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_22 >> 2] + 36 >> 2]]($__e_sroa_0_22) | 0) == -1) {
         label = 841;
         break;
        }
        if ($1240) {
         var $__e_sroa_0_24 = $__e_sroa_0_22;
        } else {
         break L962;
        }
       }
      } while (0);
      if (label == 841) {
       label = 0;
       if ($1240) {
        break;
       } else {
        var $__e_sroa_0_24 = 0;
       }
      }
      var $__e_sroa_0_24;
      var $1255 = HEAP32[$234 >> 2];
      var $1257 = HEAP32[$1255 + 12 >> 2];
      if (($1257 | 0) == (HEAP32[$1255 + 16 >> 2] | 0)) {
       var $_0935_off0 = FUNCTION_TABLE[HEAP32[HEAP32[$1255 >> 2] + 36 >> 2]]($1255) & 255;
      } else {
       var $_0935_off0 = HEAP8[$1257];
      }
      var $_0935_off0;
      if ((HEAP8[$1208] & 1) == 0) {
       var $1274 = $1209;
      } else {
       var $1274 = HEAP32[$1210 >> 2];
      }
      var $1274;
      if ($_0935_off0 << 24 >> 24 != (HEAP8[$1274 + $__i_0 | 0] | 0)) {
       break;
      }
      var $1282 = $__i_0 + 1 | 0;
      var $1283 = HEAP32[$234 >> 2];
      var $1284 = $1283 + 12 | 0;
      var $1285 = HEAP32[$1284 >> 2];
      if (($1285 | 0) == (HEAP32[$1283 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1283 >> 2] + 40 >> 2]]($1283);
       var $__i_0 = $1282;
       var $__e_sroa_0_22 = $__e_sroa_0_24;
       continue;
      } else {
       HEAP32[$1284 >> 2] = $1285 + 1;
       var $__i_0 = $1282;
       var $__e_sroa_0_22 = $__e_sroa_0_24;
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     var $_0914 = 0;
     var $1304 = $_lcssa;
     var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591078_lcssa;
     break L944;
    }
   } while (0);
   if (($_lcssa | 0) == ($__gb_sroa_0_0_load10491063_lcssa | 0)) {
    var $_0914 = 1;
    var $1304 = $__gb_sroa_0_0_load10491063_lcssa;
    var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591078_lcssa;
    break;
   }
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $_lcssa, $__gb_sroa_0_0_load10491063_lcssa, $__et);
   if ((HEAP32[$__et >> 2] | 0) == 0) {
    var $_0914 = 1;
    var $1304 = $_lcssa;
    var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591078_lcssa;
    break;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0914 = 0;
   var $1304 = $_lcssa;
   var $__gb_sroa_1_4_load10591079 = $__gb_sroa_1_4_load10591078_lcssa;
  }
 } while (0);
 var $__gb_sroa_1_4_load10591079;
 var $1304;
 var $_0914;
 do {
  if ((HEAP8[$15] & 1) != 0) {
   var $1309 = HEAP32[$253 >> 2];
   if (($1309 | 0) == 0) {
    break;
   }
   _free($1309);
  }
 } while (0);
 do {
  if ((HEAP8[$14] & 1) != 0) {
   var $1316 = HEAP32[$240 >> 2];
   if (($1316 | 0) == 0) {
    break;
   }
   _free($1316);
  }
 } while (0);
 do {
  if ((HEAP8[$13] & 1) != 0) {
   var $1323 = HEAP32[$243 >> 2];
   if (($1323 | 0) == 0) {
    break;
   }
   _free($1323);
  }
 } while (0);
 do {
  if ((HEAP8[$12] & 1) != 0) {
   var $1330 = HEAP32[$249 >> 2];
   if (($1330 | 0) == 0) {
    break;
   }
   _free($1330);
  }
 } while (0);
 do {
  if ((HEAP8[$10] & 1) != 0) {
   var $1338 = HEAP32[$__grp + 8 >> 2];
   if (($1338 | 0) == 0) {
    break;
   }
   _free($1338);
  }
 } while (0);
 if (($1304 | 0) == 0) {
  STACKTOP = sp;
  return $_0914;
 }
 FUNCTION_TABLE[$__gb_sroa_1_4_load10591079]($1304);
 STACKTOP = sp;
 return $_0914;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 var label = 0;
 var $1 = ___cxa_allocate_exception(8);
 HEAP32[$1 >> 2] = 9808;
 var $3 = $1 + 4 | 0;
 var $4 = $3;
 if (($3 | 0) == 0) {
  ___cxa_throw($1, 15992, 210);
 }
 var $6 = _strlen($msg);
 var $7 = $6 + 1 | 0;
 var $8 = $6 + 13 | 0;
 var $_size_i = ($8 | 0) == 0 ? 1 : $8;
 while (1) {
  var $11 = _malloc($_size_i);
  if (($11 | 0) != 0) {
   label = 901;
   break;
  }
  var $14 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($14 | 0) == 0) {
   label = 895;
   break;
  }
  FUNCTION_TABLE[$14]();
 }
 if (label == 901) {
  HEAP32[$11 + 4 >> 2] = $6;
  HEAP32[$11 >> 2] = $6;
  var $36 = $11 + 12 | 0;
  HEAP32[$4 >> 2] = $36;
  HEAP32[$11 + 8 >> 2] = 0;
  _memcpy($36, $msg, $7) | 0;
  ___cxa_throw($1, 15992, 210);
 } else if (label == 895) {
  var $24 = ___cxa_allocate_exception(4);
  HEAP32[$24 >> 2] = 9744;
  ___cxa_throw($24, 15960, 74);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__wbuf = sp + 16;
 var $__wb = sp + 120;
 var $__wn = sp + 128;
 var $__neg = sp + 136;
 var $2 = $__wb | 0;
 HEAP32[$2 >> 2] = $__wbuf;
 var $3 = $__wb + 4 | 0;
 HEAP32[$3 >> 2] = 484;
 var $4 = $__wbuf + 100 | 0;
 var $6 = HEAP32[$__iob + 28 >> 2];
 var $7 = $6;
 var $9 = $6 + 4 | 0;
 tempValue = HEAP32[$9 >> 2], HEAP32[$9 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $16 = HEAP32[21572 >> 2] - 1 | 0;
 var $22 = HEAP32[$6 + 8 >> 2];
 do {
  if (HEAP32[$6 + 12 >> 2] - $22 >> 2 >>> 0 > $16 >>> 0) {
   var $29 = HEAP32[$22 + ($16 << 2) >> 2];
   if (($29 | 0) == 0) {
    break;
   }
   var $33 = $29;
   HEAP8[$__neg] = 0;
   var $34 = $__e | 0;
   var $35 = HEAP32[$34 >> 2];
   do {
    if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $35, $__intl, $7, HEAP32[$__iob + 4 >> 2], $__err, $__neg, $33, $__wb, $__wn, $4)) {
     var $41 = $__v;
     if ((HEAP8[$41] & 1) == 0) {
      HEAP8[$__v + 1 | 0] = 0;
      HEAP8[$41] = 0;
     } else {
      HEAP8[HEAP32[$__v + 8 >> 2]] = 0;
      HEAP32[$__v + 4 >> 2] = 0;
     }
     var $_pre114 = $29;
     if ((HEAP8[$__neg] & 1) != 0) {
      var $59 = FUNCTION_TABLE[HEAP32[HEAP32[$_pre114 >> 2] + 28 >> 2]]($33, 45);
      var $61 = HEAP8[$41];
      if (($61 & 1) == 0) {
       var $__sz_0_i = ($61 & 255) >>> 1;
       var $__cap_0_i = 10;
      } else {
       var $__sz_0_i = HEAP32[$__v + 4 >> 2];
       var $__cap_0_i = (HEAP32[$__v >> 2] & -2) - 1 | 0;
      }
      var $__cap_0_i;
      var $__sz_0_i;
      if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0);
       var $__is_short_0_off0_in_in_i = HEAP8[$41];
      } else {
       var $__is_short_0_off0_in_in_i = $61;
      }
      var $__is_short_0_off0_in_in_i;
      if (($__is_short_0_off0_in_in_i & 1) == 0) {
       HEAP8[$41] = ($__sz_0_i << 1) + 2 & 255;
       var $_pn_i = $__v + 1 | 0;
       var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
      } else {
       var $86 = HEAP32[$__v + 8 >> 2];
       var $87 = $__sz_0_i + 1 | 0;
       HEAP32[$__v + 4 >> 2] = $87;
       var $_pn_i = $86;
       var $__p_0_sum_pre_phi_i = $87;
      }
      var $__p_0_sum_pre_phi_i;
      var $_pn_i;
      HEAP8[$_pn_i + $__sz_0_i | 0] = $59;
      HEAP8[$_pn_i + $__p_0_sum_pre_phi_i | 0] = 0;
     }
     var $93 = FUNCTION_TABLE[HEAP32[HEAP32[$_pre114 >> 2] + 28 >> 2]]($33, 48);
     var $95 = HEAP32[$__wn >> 2];
     var $96 = $95 - 1 | 0;
     var $__w_0 = HEAP32[$2 >> 2];
     while (1) {
      var $__w_0;
      if ($__w_0 >>> 0 >= $96 >>> 0) {
       break;
      }
      if ((HEAP8[$__w_0] | 0) == $93 << 24 >> 24) {
       var $__w_0 = $__w_0 + 1 | 0;
      } else {
       break;
      }
     }
     var $105 = $__w_0;
     var $106 = HEAP8[$41];
     var $107 = $106 & 255;
     if (($107 & 1 | 0) == 0) {
      var $115 = $107 >>> 1;
     } else {
      var $115 = HEAP32[$__v + 4 >> 2];
     }
     var $115;
     if (($106 & 1) == 0) {
      var $124 = 10;
      var $123 = $106;
     } else {
      var $120 = HEAP32[$__v >> 2];
      var $124 = ($120 & -2) - 1 | 0;
      var $123 = $120 & 255;
     }
     var $123;
     var $124;
     var $126 = $95 - $105 | 0;
     if (($95 | 0) == ($__w_0 | 0)) {
      break;
     }
     if (($124 - $115 | 0) >>> 0 < $126 >>> 0) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v, $124, $115 + $126 - $124 | 0, $115, $115, 0);
      var $135 = HEAP8[$41];
     } else {
      var $135 = $123;
     }
     var $135;
     if (($135 & 1) == 0) {
      var $143 = $__v + 1 | 0;
     } else {
      var $143 = HEAP32[$__v + 8 >> 2];
     }
     var $143;
     var $scevgep71_i = $95 + ($115 - $105) | 0;
     var $_069_i = $__w_0;
     var $__p_070_i = $143 + $115 | 0;
     while (1) {
      var $__p_070_i;
      var $_069_i;
      HEAP8[$__p_070_i] = HEAP8[$_069_i];
      var $148 = $_069_i + 1 | 0;
      if (($148 | 0) == ($95 | 0)) {
       break;
      }
      var $_069_i = $148;
      var $__p_070_i = $__p_070_i + 1 | 0;
     }
     HEAP8[$143 + $scevgep71_i | 0] = 0;
     var $152 = $115 + $126 | 0;
     if ((HEAP8[$41] & 1) == 0) {
      HEAP8[$41] = $152 << 1 & 255;
      break;
     } else {
      HEAP32[$__v + 4 >> 2] = $152;
      break;
     }
    }
   } while (0);
   var $161 = $__b | 0;
   var $162 = HEAP32[$161 >> 2];
   do {
    if (($162 | 0) == 0) {
     var $178 = 0;
    } else {
     if ((HEAP32[$162 + 12 >> 2] | 0) != (HEAP32[$162 + 16 >> 2] | 0)) {
      var $178 = $162;
      break;
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$162 >> 2] + 36 >> 2]]($162) | 0) != -1) {
      var $178 = $162;
      break;
     }
     HEAP32[$161 >> 2] = 0;
     var $178 = 0;
    }
   } while (0);
   var $178;
   var $179 = ($178 | 0) == 0;
   do {
    if (($35 | 0) == 0) {
     label = 963;
    } else {
     if ((HEAP32[$35 + 12 >> 2] | 0) != (HEAP32[$35 + 16 >> 2] | 0)) {
      if ($179) {
       break;
      } else {
       label = 965;
       break;
      }
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35) | 0) == -1) {
      HEAP32[$34 >> 2] = 0;
      label = 963;
      break;
     } else {
      if ($179) {
       break;
      } else {
       label = 965;
       break;
      }
     }
    }
   } while (0);
   if (label == 963) {
    if ($179) {
     label = 965;
    }
   }
   if (label == 965) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $178;
   var $200 = $6 + 4 | 0;
   if (((tempValue = HEAP32[$200 >> 2], HEAP32[$200 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
   }
   var $209 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = 0;
   if (($209 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($209);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $31 = ___cxa_allocate_exception(4);
 HEAP32[$31 >> 2] = 9776;
 ___cxa_throw($31, 15976, 602);
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 584 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__wbuf = sp + 16;
 var $__wb = sp + 416;
 var $__wn = sp + 424;
 var $__neg = sp + 432;
 var $__atoms = sp + 440;
 var $__nbuf = sp + 480;
 var $2 = $__wb | 0;
 HEAP32[$2 >> 2] = $__wbuf;
 var $3 = $__wb + 4 | 0;
 HEAP32[$3 >> 2] = 484;
 var $4 = $__wbuf + 400 | 0;
 var $6 = HEAP32[$__iob + 28 >> 2];
 var $7 = $6;
 var $9 = $6 + 4 | 0;
 tempValue = HEAP32[$9 >> 2], HEAP32[$9 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $16 = HEAP32[21564 >> 2] - 1 | 0;
 var $22 = HEAP32[$6 + 8 >> 2];
 do {
  if (HEAP32[$6 + 12 >> 2] - $22 >> 2 >>> 0 > $16 >>> 0) {
   var $29 = HEAP32[$22 + ($16 << 2) >> 2];
   if (($29 | 0) == 0) {
    break;
   }
   var $33 = $29;
   HEAP8[$__neg] = 0;
   var $34 = $__e | 0;
   do {
    if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, HEAP32[$34 >> 2], $__intl, $7, HEAP32[$__iob + 4 >> 2], $__err, $__neg, $33, $__wb, $__wn, $4)) {
     var $41 = $__atoms | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 48 >> 2]]($33, 9224, 9234, $41);
     var $47 = $__nbuf | 0;
     var $48 = HEAP32[$__wn >> 2];
     var $49 = HEAP32[$2 >> 2];
     var $52 = $48 - $49 | 0;
     do {
      if (($52 | 0) > 392) {
       var $56 = _malloc(($52 >> 2) + 2 | 0);
       if (($56 | 0) != 0) {
        var $__nc_0 = $56;
        var $__h_sroa_0_1 = $56;
        break;
       }
       var $59 = ___cxa_allocate_exception(4);
       HEAP32[$59 >> 2] = 9744;
       ___cxa_throw($59, 15960, 74);
      } else {
       var $__nc_0 = $47;
       var $__h_sroa_0_1 = 0;
      }
     } while (0);
     var $__h_sroa_0_1;
     var $__nc_0;
     if ((HEAP8[$__neg] & 1) == 0) {
      var $__nc_1 = $__nc_0;
     } else {
      HEAP8[$__nc_0] = 45;
      var $__nc_1 = $__nc_0 + 1 | 0;
     }
     var $__nc_1;
     if ($49 >>> 0 < $48 >>> 0) {
      var $79 = $__atoms + 40 | 0;
      var $80 = $__atoms;
      var $__nc_2166 = $__nc_1;
      var $__w_0167 = $49;
      while (1) {
       var $__w_0167;
       var $__nc_2166;
       var $_0 = $41;
       while (1) {
        var $_0;
        if (($_0 | 0) == ($79 | 0)) {
         var $_0_lcssa = $79;
         break;
        }
        if ((HEAP32[$_0 >> 2] | 0) == (HEAP32[$__w_0167 >> 2] | 0)) {
         var $_0_lcssa = $_0;
         break;
        } else {
         var $_0 = $_0 + 4 | 0;
        }
       }
       var $_0_lcssa;
       HEAP8[$__nc_2166] = HEAP8[9224 + ($_0_lcssa - $80 >> 2) | 0];
       var $94 = $__w_0167 + 4 | 0;
       var $95 = $__nc_2166 + 1 | 0;
       if ($94 >>> 0 < HEAP32[$__wn >> 2] >>> 0) {
        var $__nc_2166 = $95;
        var $__w_0167 = $94;
       } else {
        var $__nc_2_lcssa = $95;
        break;
       }
      }
     } else {
      var $__nc_2_lcssa = $__nc_1;
     }
     var $__nc_2_lcssa;
     HEAP8[$__nc_2_lcssa] = 0;
     var $98 = _sscanf($47, 7288, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $__v, tempVarArgs));
     STACKTOP = tempVarArgs;
     if (($98 | 0) == 1) {
      if (($__h_sroa_0_1 | 0) == 0) {
       break;
      }
      _free($__h_sroa_0_1);
      break;
     }
     var $101 = ___cxa_allocate_exception(8);
     HEAP32[$101 >> 2] = 9808;
     var $103 = $101 + 4 | 0;
     var $104 = $103;
     do {
      if (($103 | 0) != 0) {
       while (1) {
        var $106 = _malloc(28);
        if (($106 | 0) != 0) {
         label = 1021;
         break;
        }
        var $109 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
        if (($109 | 0) == 0) {
         break;
        }
        FUNCTION_TABLE[$109]();
       }
       if (label == 1021) {
        HEAP32[$106 + 4 >> 2] = 15;
        HEAP32[$106 >> 2] = 15;
        var $131 = $106 + 12 | 0;
        HEAP32[$104 >> 2] = $131;
        HEAP32[$106 + 8 >> 2] = 0;
        _memcpy($131, 7144, 16) | 0;
        break;
       }
       var $119 = ___cxa_allocate_exception(4);
       HEAP32[$119 >> 2] = 9744;
       ___cxa_throw($119, 15960, 74);
      }
     } while (0);
     ___cxa_throw($101, 15992, 210);
    }
   } while (0);
   var $139 = $__b | 0;
   var $140 = HEAP32[$139 >> 2];
   do {
    if (($140 | 0) == 0) {
     var $158 = 0;
    } else {
     var $144 = HEAP32[$140 + 12 >> 2];
     if (($144 | 0) == (HEAP32[$140 + 16 >> 2] | 0)) {
      var $_0148 = FUNCTION_TABLE[HEAP32[HEAP32[$140 >> 2] + 36 >> 2]]($140);
     } else {
      var $_0148 = HEAP32[$144 >> 2];
     }
     var $_0148;
     if (($_0148 | 0) != -1) {
      var $158 = $140;
      break;
     }
     HEAP32[$139 >> 2] = 0;
     var $158 = 0;
    }
   } while (0);
   var $158;
   var $159 = ($158 | 0) == 0;
   var $160 = HEAP32[$34 >> 2];
   do {
    if (($160 | 0) == 0) {
     label = 1040;
    } else {
     var $164 = HEAP32[$160 + 12 >> 2];
     if (($164 | 0) == (HEAP32[$160 + 16 >> 2] | 0)) {
      var $_0144 = FUNCTION_TABLE[HEAP32[HEAP32[$160 >> 2] + 36 >> 2]]($160);
     } else {
      var $_0144 = HEAP32[$164 >> 2];
     }
     var $_0144;
     if (($_0144 | 0) == -1) {
      HEAP32[$34 >> 2] = 0;
      label = 1040;
      break;
     } else {
      if ($159) {
       break;
      } else {
       label = 1042;
       break;
      }
     }
    }
   } while (0);
   if (label == 1040) {
    if ($159) {
     label = 1042;
    }
   }
   if (label == 1042) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $158;
   var $184 = $6 + 4 | 0;
   if (((tempValue = HEAP32[$184 >> 2], HEAP32[$184 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
   }
   var $193 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = 0;
   if (($193 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($193);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $31 = ___cxa_allocate_exception(4);
 HEAP32[$31 >> 2] = 9776;
 ___cxa_throw($31, 15976, 602);
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e_0, $__intl, $__loc_0_0_val, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 var $__p_i_i_i513_i = sp;
 var $__p_i_i_i_i = sp + 16;
 var $0 = sp + 32;
 var $1 = sp + 40;
 var $2 = sp + 56;
 var $3 = sp + 72;
 var $4 = sp + 88;
 var $5 = sp + 104;
 var $6 = sp + 112;
 var $7 = sp + 128;
 var $8 = sp + 144;
 var $9 = sp + 160;
 var $10 = sp + 176;
 var $__gbuf = sp + 184;
 var $__pat = sp + 584;
 var $tmpcast = $__pat;
 var $__grp = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $11 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__psn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__nsn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__spaces = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__et = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$10 >> 2] = $__we;
 var $12 = $__gbuf | 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$11 + 8 >> 2] = 0;
 var $13 = $__sym;
 var $14 = $__psn;
 var $15 = $__nsn;
 var $16 = $__spaces;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 + 8 >> 2] = 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 var $18 = $1;
 var $19 = $2;
 var $20 = $3;
 var $21 = $4;
 var $23 = $6;
 var $24 = $7;
 var $25 = $8;
 var $26 = $9;
 L1211 : do {
  if ($__intl) {
   var $tmpcast512_i = $0;
   if ((HEAP32[22024 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i_i >> 2] = 22024;
    HEAP32[$__p_i_i_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22024, $__p_i_i_i_i);
   }
   var $33 = HEAP32[22028 >> 2] - 1 | 0;
   var $37 = HEAP32[$__loc_0_0_val + 8 >> 2];
   do {
    if (HEAP32[$__loc_0_0_val + 12 >> 2] - $37 >> 2 >>> 0 > $33 >>> 0) {
     var $44 = HEAP32[$37 + ($33 << 2) >> 2];
     if (($44 | 0) == 0) {
      break;
     }
     var $48 = $44;
     FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 44 >> 2]]($tmpcast512_i, $48);
     HEAP32[$__pat >> 2] = HEAP32[$0 >> 2];
     var $54 = $44;
     FUNCTION_TABLE[HEAP32[HEAP32[$54 >> 2] + 32 >> 2]]($1, $48);
     if ((HEAP8[$15] & 1) == 0) {
      HEAP32[$__nsn + 4 >> 2] = 0;
      HEAP8[$15] = 0;
     } else {
      HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
      HEAP32[$__nsn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn);
     HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$15 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
     HEAP32[$15 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
     HEAP32[$18 >> 2] = 0;
     HEAP32[$18 + 4 >> 2] = 0;
     HEAP32[$18 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$54 >> 2] + 28 >> 2]]($2, $48);
     if ((HEAP8[$14] & 1) == 0) {
      HEAP32[$__psn + 4 >> 2] = 0;
      HEAP8[$14] = 0;
     } else {
      HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
      HEAP32[$__psn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn);
     HEAP32[$14 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$14 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     HEAP32[$14 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
     HEAP32[$19 >> 2] = 0;
     HEAP32[$19 + 4 >> 2] = 0;
     HEAP32[$19 + 8 >> 2] = 0;
     var $83 = $44;
     var $87 = FUNCTION_TABLE[HEAP32[HEAP32[$83 >> 2] + 12 >> 2]]($48);
     var $91 = FUNCTION_TABLE[HEAP32[HEAP32[$83 >> 2] + 16 >> 2]]($48);
     FUNCTION_TABLE[HEAP32[HEAP32[$44 >> 2] + 20 >> 2]]($3, $48);
     if ((HEAP8[$11] & 1) == 0) {
      HEAP8[$__grp + 1 | 0] = 0;
      HEAP8[$11] = 0;
     } else {
      HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
      HEAP32[$__grp + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
     HEAP32[$11 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
     HEAP32[$11 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
     HEAP32[$20 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAP32[$20 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$54 >> 2] + 24 >> 2]]($4, $48);
     if ((HEAP8[$13] & 1) == 0) {
      HEAP32[$__sym + 4 >> 2] = 0;
      HEAP8[$13] = 0;
     } else {
      HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
      HEAP32[$__sym + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
     HEAP32[$13 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$13 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
     HEAP32[$13 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
     HEAP32[$21 >> 2] = 0;
     HEAP32[$21 + 4 >> 2] = 0;
     HEAP32[$21 + 8 >> 2] = 0;
     var $storemerge_i = FUNCTION_TABLE[HEAP32[HEAP32[$83 >> 2] + 36 >> 2]]($48);
     var $__ts_0 = $91;
     var $__dp_0 = $87;
     break L1211;
    }
   } while (0);
   var $46 = ___cxa_allocate_exception(4);
   HEAP32[$46 >> 2] = 9776;
   ___cxa_throw($46, 15976, 602);
  } else {
   var $tmpcast_i = $5;
   if ((HEAP32[22032 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i513_i >> 2] = 22032;
    HEAP32[$__p_i_i_i513_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i513_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22032, $__p_i_i_i513_i);
   }
   var $132 = HEAP32[22036 >> 2] - 1 | 0;
   var $136 = HEAP32[$__loc_0_0_val + 8 >> 2];
   do {
    if (HEAP32[$__loc_0_0_val + 12 >> 2] - $136 >> 2 >>> 0 > $132 >>> 0) {
     var $143 = HEAP32[$136 + ($132 << 2) >> 2];
     if (($143 | 0) == 0) {
      break;
     }
     var $147 = $143;
     FUNCTION_TABLE[HEAP32[HEAP32[$143 >> 2] + 44 >> 2]]($tmpcast_i, $147);
     HEAP32[$__pat >> 2] = HEAP32[$5 >> 2];
     var $153 = $143;
     FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 32 >> 2]]($6, $147);
     if ((HEAP8[$15] & 1) == 0) {
      HEAP32[$__nsn + 4 >> 2] = 0;
      HEAP8[$15] = 0;
     } else {
      HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
      HEAP32[$__nsn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn);
     HEAP32[$15 >> 2] = HEAP32[$23 >> 2];
     HEAP32[$15 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
     HEAP32[$15 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
     HEAP32[$23 >> 2] = 0;
     HEAP32[$23 + 4 >> 2] = 0;
     HEAP32[$23 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 28 >> 2]]($7, $147);
     if ((HEAP8[$14] & 1) == 0) {
      HEAP32[$__psn + 4 >> 2] = 0;
      HEAP8[$14] = 0;
     } else {
      HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
      HEAP32[$__psn + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn);
     HEAP32[$14 >> 2] = HEAP32[$24 >> 2];
     HEAP32[$14 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
     HEAP32[$14 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
     HEAP32[$24 >> 2] = 0;
     HEAP32[$24 + 4 >> 2] = 0;
     HEAP32[$24 + 8 >> 2] = 0;
     var $182 = $143;
     var $186 = FUNCTION_TABLE[HEAP32[HEAP32[$182 >> 2] + 12 >> 2]]($147);
     var $190 = FUNCTION_TABLE[HEAP32[HEAP32[$182 >> 2] + 16 >> 2]]($147);
     FUNCTION_TABLE[HEAP32[HEAP32[$143 >> 2] + 20 >> 2]]($8, $147);
     if ((HEAP8[$11] & 1) == 0) {
      HEAP8[$__grp + 1 | 0] = 0;
      HEAP8[$11] = 0;
     } else {
      HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
      HEAP32[$__grp + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
     HEAP32[$11 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
     HEAP32[$11 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
     HEAP32[$25 >> 2] = 0;
     HEAP32[$25 + 4 >> 2] = 0;
     HEAP32[$25 + 8 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 24 >> 2]]($9, $147);
     if ((HEAP8[$13] & 1) == 0) {
      HEAP32[$__sym + 4 >> 2] = 0;
      HEAP8[$13] = 0;
     } else {
      HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
      HEAP32[$__sym + 4 >> 2] = 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
     HEAP32[$13 >> 2] = HEAP32[$26 >> 2];
     HEAP32[$13 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
     HEAP32[$13 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
     HEAP32[$26 >> 2] = 0;
     HEAP32[$26 + 4 >> 2] = 0;
     HEAP32[$26 + 8 >> 2] = 0;
     var $storemerge_i = FUNCTION_TABLE[HEAP32[HEAP32[$182 >> 2] + 36 >> 2]]($147);
     var $__ts_0 = $190;
     var $__dp_0 = $186;
     break L1211;
    }
   } while (0);
   var $145 = ___cxa_allocate_exception(4);
   HEAP32[$145 >> 2] = 9776;
   ___cxa_throw($145, 15976, 602);
  }
 } while (0);
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $227 = $__wb | 0;
 HEAP32[$__wn >> 2] = HEAP32[$227 >> 2];
 var $229 = $__b | 0;
 var $230 = $__ct;
 var $231 = $__nsn + 4 | 0;
 var $232 = $__nsn + 8 | 0;
 var $233 = $__psn + 4 | 0;
 var $234 = $__psn + 8 | 0;
 var $236 = ($__flags & 512 | 0) != 0;
 var $237 = $__sym + 4 | 0;
 var $238 = $__sym + 8 | 0;
 var $239 = $__spaces + 4 | 0;
 var $240 = $__spaces + 8 | 0;
 var $241 = $tmpcast + 3 | 0;
 var $242 = $__grp + 4 | 0;
 var $243 = $__spaces | 0;
 var $__gb_sroa_1_4_load100910251134 = 484;
 var $245 = $12;
 var $__gb_sroa_0_0_load99910101137 = $12;
 var $244 = $__gbuf + 400 | 0;
 var $__trailing_sign_01140 = 0;
 var $__p_01142 = 0;
 var $__fd_0 = $storemerge_i;
 var $__e_sroa_0_0 = $__e_0;
 L1285 : while (1) {
  var $__e_sroa_0_0;
  var $__fd_0;
  var $__p_01142;
  var $__trailing_sign_01140;
  var $244;
  var $__gb_sroa_0_0_load99910101137;
  var $245;
  var $__gb_sroa_1_4_load100910251134;
  var $246 = HEAP32[$229 >> 2];
  do {
   if (($246 | 0) == 0) {
    var $264 = 1;
   } else {
    var $250 = HEAP32[$246 + 12 >> 2];
    if (($250 | 0) == (HEAP32[$246 + 16 >> 2] | 0)) {
     var $_0926 = FUNCTION_TABLE[HEAP32[HEAP32[$246 >> 2] + 36 >> 2]]($246);
    } else {
     var $_0926 = HEAP32[$250 >> 2];
    }
    var $_0926;
    if (($_0926 | 0) == -1) {
     HEAP32[$229 >> 2] = 0;
     var $264 = 1;
     break;
    } else {
     var $264 = (HEAP32[$229 >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  var $264;
  do {
   if (($__e_sroa_0_0 | 0) == 0) {
    label = 1139;
   } else {
    var $268 = HEAP32[$__e_sroa_0_0 + 12 >> 2];
    if (($268 | 0) == (HEAP32[$__e_sroa_0_0 + 16 >> 2] | 0)) {
     var $_0925 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_0 >> 2] + 36 >> 2]]($__e_sroa_0_0);
    } else {
     var $_0925 = HEAP32[$268 >> 2];
    }
    var $_0925;
    if (($_0925 | 0) == -1) {
     label = 1139;
     break;
    }
    if ($264) {
     var $__e_sroa_0_2 = $__e_sroa_0_0;
    } else {
     var $__gb_sroa_1_4_load10091025_lcssa = $__gb_sroa_1_4_load100910251134;
     var $_lcssa = $245;
     var $__gb_sroa_0_0_load9991010_lcssa = $__gb_sroa_0_0_load99910101137;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01140;
     var $__e_sroa_0_21 = $__e_sroa_0_0;
     label = 1405;
     break L1285;
    }
   }
  } while (0);
  if (label == 1139) {
   label = 0;
   if ($264) {
    var $__gb_sroa_1_4_load10091025_lcssa = $__gb_sroa_1_4_load100910251134;
    var $_lcssa = $245;
    var $__gb_sroa_0_0_load9991010_lcssa = $__gb_sroa_0_0_load99910101137;
    var $__trailing_sign_0_lcssa = $__trailing_sign_01140;
    var $__e_sroa_0_21 = 0;
    label = 1405;
    break;
   } else {
    var $__e_sroa_0_2 = 0;
   }
  }
  var $__e_sroa_0_2;
  var $284 = HEAP8[$tmpcast + $__p_01142 | 0] | 0;
  do {
   if (($284 | 0) == 3) {
    var $495 = HEAP8[$14];
    var $496 = $495 & 255;
    var $501 = ($496 & 1 | 0) == 0 ? $496 >>> 1 : HEAP32[$233 >> 2];
    var $502 = HEAP8[$15];
    var $503 = $502 & 255;
    var $508 = ($503 & 1 | 0) == 0 ? $503 >>> 1 : HEAP32[$231 >> 2];
    if (($501 | 0) == (-$508 | 0)) {
     var $__trailing_sign_1 = $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    if (($501 | 0) == 0) {
     var $559 = HEAP32[$229 >> 2];
     var $561 = HEAP32[$559 + 12 >> 2];
     if (($561 | 0) == (HEAP32[$559 + 16 >> 2] | 0)) {
      var $570 = FUNCTION_TABLE[HEAP32[HEAP32[$559 >> 2] + 36 >> 2]]($559);
      var $_0912 = $570;
      var $573 = HEAP8[$15];
     } else {
      var $_0912 = HEAP32[$561 >> 2];
      var $573 = $502;
     }
     var $573;
     var $_0912;
     if (($_0912 | 0) != (HEAP32[(($573 & 1) == 0 ? $231 : HEAP32[$232 >> 2]) >> 2] | 0)) {
      var $__trailing_sign_1 = $__trailing_sign_01140;
      var $1167 = $244;
      var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
      var $1166 = $245;
      var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
      var $__fd_2 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
     var $580 = HEAP32[$229 >> 2];
     var $581 = $580 + 12 | 0;
     var $582 = HEAP32[$581 >> 2];
     if (($582 | 0) == (HEAP32[$580 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$580 >> 2] + 40 >> 2]]($580);
     } else {
      HEAP32[$581 >> 2] = $582 + 4;
     }
     HEAP8[$__neg] = 1;
     var $595 = HEAPU8[$15];
     var $__trailing_sign_1 = (($595 & 1 | 0) == 0 ? $595 >>> 1 : HEAP32[$231 >> 2]) >>> 0 > 1 ? $__nsn : $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    var $513 = HEAP32[$229 >> 2];
    var $515 = HEAP32[$513 + 12 >> 2];
    var $517 = HEAP32[$513 + 16 >> 2];
    var $518 = ($515 | 0) == ($517 | 0);
    if (($508 | 0) == 0) {
     if ($518) {
      var $525 = FUNCTION_TABLE[HEAP32[HEAP32[$513 >> 2] + 36 >> 2]]($513);
      var $_0916 = $525;
      var $528 = HEAP8[$14];
     } else {
      var $_0916 = HEAP32[$515 >> 2];
      var $528 = $495;
     }
     var $528;
     var $_0916;
     if (($_0916 | 0) != (HEAP32[(($528 & 1) == 0 ? $233 : HEAP32[$234 >> 2]) >> 2] | 0)) {
      HEAP8[$__neg] = 1;
      var $__trailing_sign_1 = $__trailing_sign_01140;
      var $1167 = $244;
      var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
      var $1166 = $245;
      var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
      var $__fd_2 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
     var $535 = HEAP32[$229 >> 2];
     var $536 = $535 + 12 | 0;
     var $537 = HEAP32[$536 >> 2];
     if (($537 | 0) == (HEAP32[$535 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$535 >> 2] + 40 >> 2]]($535);
     } else {
      HEAP32[$536 >> 2] = $537 + 4;
     }
     var $550 = HEAPU8[$14];
     var $__trailing_sign_1 = (($550 & 1 | 0) == 0 ? $550 >>> 1 : HEAP32[$233 >> 2]) >>> 0 > 1 ? $__psn : $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    if ($518) {
     var $608 = FUNCTION_TABLE[HEAP32[HEAP32[$513 >> 2] + 36 >> 2]]($513);
     var $_pre10 = HEAP32[$229 >> 2];
     var $_0907 = $608;
     var $614 = HEAP8[$14];
     var $613 = $_pre10;
     var $612 = HEAP32[$_pre10 + 12 >> 2];
     var $611 = HEAP32[$_pre10 + 16 >> 2];
    } else {
     var $_0907 = HEAP32[$515 >> 2];
     var $614 = $495;
     var $613 = $513;
     var $612 = $515;
     var $611 = $517;
    }
    var $611;
    var $612;
    var $613;
    var $614;
    var $_0907;
    var $620 = $613 + 12 | 0;
    var $621 = ($612 | 0) == ($611 | 0);
    if (($_0907 | 0) == (HEAP32[(($614 & 1) == 0 ? $233 : HEAP32[$234 >> 2]) >> 2] | 0)) {
     if ($621) {
      FUNCTION_TABLE[HEAP32[HEAP32[$613 >> 2] + 40 >> 2]]($613);
     } else {
      HEAP32[$620 >> 2] = $612 + 4;
     }
     var $632 = HEAPU8[$14];
     var $__trailing_sign_1 = (($632 & 1 | 0) == 0 ? $632 >>> 1 : HEAP32[$233 >> 2]) >>> 0 > 1 ? $__psn : $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_2;
     break;
    }
    if ($621) {
     var $_0903 = FUNCTION_TABLE[HEAP32[HEAP32[$613 >> 2] + 36 >> 2]]($613);
    } else {
     var $_0903 = HEAP32[$612 >> 2];
    }
    var $_0903;
    if (($_0903 | 0) != (HEAP32[((HEAP8[$15] & 1) == 0 ? $231 : HEAP32[$232 >> 2]) >> 2] | 0)) {
     label = 1262;
     break L1285;
    }
    var $655 = HEAP32[$229 >> 2];
    var $656 = $655 + 12 | 0;
    var $657 = HEAP32[$656 >> 2];
    if (($657 | 0) == (HEAP32[$655 + 16 >> 2] | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$655 >> 2] + 40 >> 2]]($655);
    } else {
     HEAP32[$656 >> 2] = $657 + 4;
    }
    HEAP8[$__neg] = 1;
    var $670 = HEAPU8[$15];
    var $__trailing_sign_1 = (($670 & 1 | 0) == 0 ? $670 >>> 1 : HEAP32[$231 >> 2]) >>> 0 > 1 ? $__nsn : $__trailing_sign_01140;
    var $1167 = $244;
    var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
    var $1166 = $245;
    var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
    var $__fd_2 = $__fd_0;
    var $__e_sroa_0_20 = $__e_sroa_0_2;
   } else if (($284 | 0) == 2) {
    if (!(($__trailing_sign_01140 | 0) != 0 | $__p_01142 >>> 0 < 2)) {
     if (($__p_01142 | 0) == 2) {
      var $689 = (HEAP8[$241] | 0) != 0;
     } else {
      var $689 = 0;
     }
     var $689;
     if (!($236 | $689)) {
      var $__trailing_sign_1 = 0;
      var $1167 = $244;
      var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
      var $1166 = $245;
      var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
      var $__fd_2 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_2;
      break;
     }
    }
    var $690 = HEAP8[$13];
    var $693 = HEAP32[$238 >> 2];
    var $_1227 = ($690 & 1) == 0 ? $237 : $693;
    L1366 : do {
     if (($__p_01142 | 0) == 0) {
      var $__sym_curr_char_sroa_0_0 = $_1227;
      var $748 = $690;
      var $747 = $__e_sroa_0_2;
      var $__e_sroa_0_6 = $__e_sroa_0_2;
      var $746 = $693;
     } else {
      if (HEAPU8[$tmpcast + ($__p_01142 - 1) | 0] < 2) {
       var $__sym_space_end_sroa_0_0 = $_1227;
       var $700 = $690;
       var $699 = $693;
      } else {
       var $__sym_curr_char_sroa_0_0 = $_1227;
       var $748 = $690;
       var $747 = $__e_sroa_0_2;
       var $__e_sroa_0_6 = $__e_sroa_0_2;
       var $746 = $693;
       break;
      }
      while (1) {
       var $699;
       var $700;
       var $__sym_space_end_sroa_0_0;
       var $703 = $700 & 255;
       if (($__sym_space_end_sroa_0_0 | 0) == ((($700 & 1) == 0 ? $237 : $699) + ((($703 & 1 | 0) == 0 ? $703 >>> 1 : HEAP32[$237 >> 2]) << 2) | 0)) {
        var $719 = $700;
        var $718 = $699;
        break;
       }
       if (!FUNCTION_TABLE[HEAP32[HEAP32[$230 >> 2] + 12 >> 2]]($__ct, 8192, HEAP32[$__sym_space_end_sroa_0_0 >> 2])) {
        label = 1273;
        break;
       }
       var $__sym_space_end_sroa_0_0 = $__sym_space_end_sroa_0_0 + 4 | 0;
       var $700 = HEAP8[$13];
       var $699 = HEAP32[$238 >> 2];
      }
      if (label == 1273) {
       label = 0;
       var $719 = HEAP8[$13];
       var $718 = HEAP32[$238 >> 2];
      }
      var $718;
      var $719;
      var $_1229 = ($719 & 1) == 0 ? $237 : $718;
      var $725 = $__sym_space_end_sroa_0_0 - $_1229 >> 2;
      var $726 = HEAP8[$16];
      var $727 = $726 & 255;
      var $732 = ($727 & 1 | 0) == 0 ? $727 >>> 1 : HEAP32[$239 >> 2];
      if ($725 >>> 0 > $732 >>> 0) {
       var $__sym_curr_char_sroa_0_0 = $_1229;
       var $748 = $719;
       var $747 = $__e_sroa_0_2;
       var $__e_sroa_0_6 = $__e_sroa_0_2;
       var $746 = $718;
       break;
      }
      var $_1230 = ($726 & 1) == 0 ? $239 : HEAP32[$240 >> 2];
      var $737 = $_1230 + ($732 << 2) | 0;
      if (($725 | 0) == 0) {
       var $__sym_curr_char_sroa_0_0 = $__sym_space_end_sroa_0_0;
       var $748 = $719;
       var $747 = $__e_sroa_0_2;
       var $__e_sroa_0_6 = $__e_sroa_0_2;
       var $746 = $718;
       break;
      }
      var $_sroa_0936_01057 = $_1230 + ($732 - $725 << 2) | 0;
      var $_sroa_0934_01058 = $_1229;
      while (1) {
       var $_sroa_0934_01058;
       var $_sroa_0936_01057;
       if ((HEAP32[$_sroa_0936_01057 >> 2] | 0) != (HEAP32[$_sroa_0934_01058 >> 2] | 0)) {
        var $__sym_curr_char_sroa_0_0 = $_1229;
        var $748 = $719;
        var $747 = $__e_sroa_0_2;
        var $__e_sroa_0_6 = $__e_sroa_0_2;
        var $746 = $718;
        break L1366;
       }
       var $743 = $_sroa_0936_01057 + 4 | 0;
       if (($743 | 0) == ($737 | 0)) {
        var $__sym_curr_char_sroa_0_0 = $__sym_space_end_sroa_0_0;
        var $748 = $719;
        var $747 = $__e_sroa_0_2;
        var $__e_sroa_0_6 = $__e_sroa_0_2;
        var $746 = $718;
        break L1366;
       }
       var $_sroa_0936_01057 = $743;
       var $_sroa_0934_01058 = $_sroa_0934_01058 + 4 | 0;
      }
     }
    } while (0);
    L1382 : while (1) {
     var $746;
     var $__e_sroa_0_6;
     var $747;
     var $748;
     var $__sym_curr_char_sroa_0_0;
     var $751 = $748 & 255;
     if (($__sym_curr_char_sroa_0_0 | 0) == ((($748 & 1) == 0 ? $237 : $746) + ((($751 & 1 | 0) == 0 ? $751 >>> 1 : HEAP32[$237 >> 2]) << 2) | 0)) {
      var $__e_sroa_0_9 = $__e_sroa_0_6;
      break;
     }
     var $760 = HEAP32[$229 >> 2];
     do {
      if (($760 | 0) == 0) {
       var $778 = 1;
      } else {
       var $764 = HEAP32[$760 + 12 >> 2];
       if (($764 | 0) == (HEAP32[$760 + 16 >> 2] | 0)) {
        var $_0895 = FUNCTION_TABLE[HEAP32[HEAP32[$760 >> 2] + 36 >> 2]]($760);
       } else {
        var $_0895 = HEAP32[$764 >> 2];
       }
       var $_0895;
       if (($_0895 | 0) == -1) {
        HEAP32[$229 >> 2] = 0;
        var $778 = 1;
        break;
       } else {
        var $778 = (HEAP32[$229 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $778;
     do {
      if (($747 | 0) == 0) {
       var $__e_sroa_0_7 = $__e_sroa_0_6;
       label = 1293;
      } else {
       var $782 = HEAP32[$747 + 12 >> 2];
       if (($782 | 0) == (HEAP32[$747 + 16 >> 2] | 0)) {
        var $_0894 = FUNCTION_TABLE[HEAP32[HEAP32[$747 >> 2] + 36 >> 2]]($747);
       } else {
        var $_0894 = HEAP32[$782 >> 2];
       }
       var $_0894;
       if (($_0894 | 0) == -1) {
        var $__e_sroa_0_7 = 0;
        label = 1293;
        break;
       }
       if ($778) {
        var $795 = $747;
        var $__e_sroa_0_8 = $__e_sroa_0_6;
       } else {
        var $__e_sroa_0_9 = $__e_sroa_0_6;
        break L1382;
       }
      }
     } while (0);
     if (label == 1293) {
      label = 0;
      var $__e_sroa_0_7;
      if ($778) {
       var $__e_sroa_0_9 = $__e_sroa_0_7;
       break;
      } else {
       var $795 = 0;
       var $__e_sroa_0_8 = $__e_sroa_0_7;
      }
     }
     var $__e_sroa_0_8;
     var $795;
     var $796 = HEAP32[$229 >> 2];
     var $798 = HEAP32[$796 + 12 >> 2];
     if (($798 | 0) == (HEAP32[$796 + 16 >> 2] | 0)) {
      var $_0896 = FUNCTION_TABLE[HEAP32[HEAP32[$796 >> 2] + 36 >> 2]]($796);
     } else {
      var $_0896 = HEAP32[$798 >> 2];
     }
     var $_0896;
     if (($_0896 | 0) != (HEAP32[$__sym_curr_char_sroa_0_0 >> 2] | 0)) {
      var $__e_sroa_0_9 = $__e_sroa_0_8;
      break;
     }
     var $813 = HEAP32[$229 >> 2];
     var $814 = $813 + 12 | 0;
     var $815 = HEAP32[$814 >> 2];
     if (($815 | 0) == (HEAP32[$813 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$813 >> 2] + 40 >> 2]]($813);
     } else {
      HEAP32[$814 >> 2] = $815 + 4;
     }
     var $__sym_curr_char_sroa_0_0 = $__sym_curr_char_sroa_0_0 + 4 | 0;
     var $748 = HEAP8[$13];
     var $747 = $795;
     var $__e_sroa_0_6 = $__e_sroa_0_8;
     var $746 = HEAP32[$238 >> 2];
    }
    var $__e_sroa_0_9;
    if (!$236) {
     var $__trailing_sign_1 = $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_9;
     break;
    }
    var $828 = HEAP8[$13];
    var $832 = $828 & 255;
    if (($__sym_curr_char_sroa_0_0 | 0) == ((($828 & 1) == 0 ? $237 : HEAP32[$238 >> 2]) + ((($832 & 1 | 0) == 0 ? $832 >>> 1 : HEAP32[$237 >> 2]) << 2) | 0)) {
     var $__trailing_sign_1 = $__trailing_sign_01140;
     var $1167 = $244;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
     var $1166 = $245;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
     var $__fd_2 = $__fd_0;
     var $__e_sroa_0_20 = $__e_sroa_0_9;
    } else {
     label = 1305;
     break L1285;
    }
   } else if (($284 | 0) == 1) {
    if (($__p_01142 | 0) == 3) {
     var $__gb_sroa_1_4_load10091025_lcssa = $__gb_sroa_1_4_load100910251134;
     var $_lcssa = $245;
     var $__gb_sroa_0_0_load9991010_lcssa = $__gb_sroa_0_0_load99910101137;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01140;
     var $__e_sroa_0_21 = $__e_sroa_0_2;
     label = 1405;
     break L1285;
    }
    var $337 = HEAP32[$229 >> 2];
    var $339 = HEAP32[$337 + 12 >> 2];
    if (($339 | 0) == (HEAP32[$337 + 16 >> 2] | 0)) {
     var $_0924 = FUNCTION_TABLE[HEAP32[HEAP32[$337 >> 2] + 36 >> 2]]($337);
    } else {
     var $_0924 = HEAP32[$339 >> 2];
    }
    var $_0924;
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$230 >> 2] + 12 >> 2]]($__ct, 8192, $_0924)) {
     label = 1189;
     break L1285;
    }
    var $356 = HEAP32[$229 >> 2];
    var $357 = $356 + 12 | 0;
    var $358 = HEAP32[$357 >> 2];
    if (($358 | 0) == (HEAP32[$356 + 16 >> 2] | 0)) {
     var $_0923 = FUNCTION_TABLE[HEAP32[HEAP32[$356 >> 2] + 40 >> 2]]($356);
    } else {
     HEAP32[$357 >> 2] = $358 + 4;
     var $_0923 = HEAP32[$358 >> 2];
    }
    var $_0923;
    var $371 = HEAP8[$16];
    if (($371 & 1) == 0) {
     var $__sz_0_i = ($371 & 255) >>> 1;
     var $__cap_0_i = 1;
    } else {
     var $__sz_0_i = HEAP32[$239 >> 2];
     var $__cap_0_i = (HEAP32[$243 >> 2] & -2) - 1 | 0;
    }
    var $__cap_0_i;
    var $__sz_0_i;
    if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0, 0);
     var $__is_short_0_off0_in_in_i = HEAP8[$16];
    } else {
     var $__is_short_0_off0_in_in_i = $371;
    }
    var $__is_short_0_off0_in_in_i;
    if (($__is_short_0_off0_in_in_i & 1) == 0) {
     HEAP8[$16] = ($__sz_0_i << 1) + 2 & 255;
     var $_pn_i = $239;
     var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
    } else {
     var $392 = HEAP32[$240 >> 2];
     var $393 = $__sz_0_i + 1 | 0;
     HEAP32[$239 >> 2] = $393;
     var $_pn_i = $392;
     var $__p_0_sum_pre_phi_i = $393;
    }
    var $__p_0_sum_pre_phi_i;
    var $_pn_i;
    HEAP32[$_pn_i + ($__sz_0_i << 2) >> 2] = $_0923;
    HEAP32[$_pn_i + ($__p_0_sum_pre_phi_i << 2) >> 2] = 0;
    label = 1190;
   } else if (($284 | 0) == 0) {
    label = 1190;
   } else if (($284 | 0) == 4) {
    var $__ng_0 = 0;
    var $844 = $244;
    var $__gb_sroa_0_0_load9991013 = $__gb_sroa_0_0_load99910101137;
    var $843 = $245;
    var $__gb_sroa_1_4_load10091023 = $__gb_sroa_1_4_load100910251134;
    var $__e_sroa_0_10 = $__e_sroa_0_2;
    L1440 : while (1) {
     var $__e_sroa_0_10;
     var $__gb_sroa_1_4_load10091023;
     var $843;
     var $__gb_sroa_0_0_load9991013;
     var $844;
     var $__ng_0;
     var $845 = HEAP32[$229 >> 2];
     do {
      if (($845 | 0) == 0) {
       var $863 = 1;
      } else {
       var $849 = HEAP32[$845 + 12 >> 2];
       if (($849 | 0) == (HEAP32[$845 + 16 >> 2] | 0)) {
        var $_0899 = FUNCTION_TABLE[HEAP32[HEAP32[$845 >> 2] + 36 >> 2]]($845);
       } else {
        var $_0899 = HEAP32[$849 >> 2];
       }
       var $_0899;
       if (($_0899 | 0) == -1) {
        HEAP32[$229 >> 2] = 0;
        var $863 = 1;
        break;
       } else {
        var $863 = (HEAP32[$229 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $863;
     do {
      if (($__e_sroa_0_10 | 0) == 0) {
       label = 1318;
      } else {
       var $867 = HEAP32[$__e_sroa_0_10 + 12 >> 2];
       if (($867 | 0) == (HEAP32[$__e_sroa_0_10 + 16 >> 2] | 0)) {
        var $_0898 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_10 >> 2] + 36 >> 2]]($__e_sroa_0_10);
       } else {
        var $_0898 = HEAP32[$867 >> 2];
       }
       var $_0898;
       if (($_0898 | 0) == -1) {
        label = 1318;
        break;
       }
       if ($863) {
        var $__e_sroa_0_12 = $__e_sroa_0_10;
       } else {
        var $__e_sroa_0_13 = $__e_sroa_0_10;
        break L1440;
       }
      }
     } while (0);
     if (label == 1318) {
      label = 0;
      if ($863) {
       var $__e_sroa_0_13 = 0;
       break;
      } else {
       var $__e_sroa_0_12 = 0;
      }
     }
     var $__e_sroa_0_12;
     var $880 = HEAP32[$229 >> 2];
     var $882 = HEAP32[$880 + 12 >> 2];
     if (($882 | 0) == (HEAP32[$880 + 16 >> 2] | 0)) {
      var $_0900 = FUNCTION_TABLE[HEAP32[HEAP32[$880 >> 2] + 36 >> 2]]($880);
     } else {
      var $_0900 = HEAP32[$882 >> 2];
     }
     var $_0900;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$230 >> 2] + 12 >> 2]]($__ct, 2048, $_0900)) {
      var $899 = HEAP32[$__wn >> 2];
      if (($899 | 0) == (HEAP32[$10 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
       var $904 = HEAP32[$__wn >> 2];
      } else {
       var $904 = $899;
      }
      var $904;
      HEAP32[$__wn >> 2] = $904 + 4;
      HEAP32[$904 >> 2] = $_0900;
      var $__ng_1 = $__ng_0 + 1 | 0;
      var $946 = $844;
      var $__gb_sroa_0_0_load9991014 = $__gb_sroa_0_0_load9991013;
      var $945 = $843;
      var $__gb_sroa_1_4_load10091021 = $__gb_sroa_1_4_load10091023;
     } else {
      var $908 = HEAPU8[$11];
      if (!(((((($908 & 1 | 0) == 0 ? $908 >>> 1 : HEAP32[$242 >> 2]) | 0) == 0 | ($__ng_0 | 0) == 0) ^ 1) & ($_0900 | 0) == ($__ts_0 | 0))) {
       var $__e_sroa_0_13 = $__e_sroa_0_12;
       break;
      }
      if (($__gb_sroa_0_0_load9991013 | 0) == ($844 | 0)) {
       var $923 = $__gb_sroa_0_0_load9991013 - $843 | 0;
       var $926 = $923 >>> 0 < 2147483647 ? $923 << 1 : -1;
       if (($__gb_sroa_1_4_load10091023 | 0) == 484) {
        var $930 = 0;
       } else {
        var $930 = $843;
       }
       var $930;
       var $931 = _realloc($930, $926);
       var $932 = $931;
       if (($931 | 0) == 0) {
        label = 1334;
        break L1285;
       }
       var $942 = $932 + ($926 >>> 2 << 2) | 0;
       var $__gb_sroa_0_0_load9991015 = $932 + ($923 >> 2 << 2) | 0;
       var $941 = $932;
       var $__gb_sroa_1_4_load10091022 = 248;
      } else {
       var $942 = $844;
       var $__gb_sroa_0_0_load9991015 = $__gb_sroa_0_0_load9991013;
       var $941 = $843;
       var $__gb_sroa_1_4_load10091022 = $__gb_sroa_1_4_load10091023;
      }
      var $__gb_sroa_1_4_load10091022;
      var $941;
      var $__gb_sroa_0_0_load9991015;
      var $942;
      HEAP32[$__gb_sroa_0_0_load9991015 >> 2] = $__ng_0;
      var $__ng_1 = 0;
      var $946 = $942;
      var $__gb_sroa_0_0_load9991014 = $__gb_sroa_0_0_load9991015 + 4 | 0;
      var $945 = $941;
      var $__gb_sroa_1_4_load10091021 = $__gb_sroa_1_4_load10091022;
     }
     var $__gb_sroa_1_4_load10091021;
     var $945;
     var $__gb_sroa_0_0_load9991014;
     var $946;
     var $__ng_1;
     var $947 = HEAP32[$229 >> 2];
     var $948 = $947 + 12 | 0;
     var $949 = HEAP32[$948 >> 2];
     if (($949 | 0) == (HEAP32[$947 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$947 >> 2] + 40 >> 2]]($947);
      var $__ng_0 = $__ng_1;
      var $844 = $946;
      var $__gb_sroa_0_0_load9991013 = $__gb_sroa_0_0_load9991014;
      var $843 = $945;
      var $__gb_sroa_1_4_load10091023 = $__gb_sroa_1_4_load10091021;
      var $__e_sroa_0_10 = $__e_sroa_0_12;
      continue;
     } else {
      HEAP32[$948 >> 2] = $949 + 4;
      var $__ng_0 = $__ng_1;
      var $844 = $946;
      var $__gb_sroa_0_0_load9991013 = $__gb_sroa_0_0_load9991014;
      var $843 = $945;
      var $__gb_sroa_1_4_load10091023 = $__gb_sroa_1_4_load10091021;
      var $__e_sroa_0_10 = $__e_sroa_0_12;
      continue;
     }
    }
    var $__e_sroa_0_13;
    if (($843 | 0) == ($__gb_sroa_0_0_load9991013 | 0) | ($__ng_0 | 0) == 0) {
     var $992 = $844;
     var $__gb_sroa_0_0_load9991012 = $__gb_sroa_0_0_load9991013;
     var $991 = $843;
     var $__gb_sroa_1_4_load10091020 = $__gb_sroa_1_4_load10091023;
    } else {
     if (($__gb_sroa_0_0_load9991013 | 0) == ($844 | 0)) {
      var $970 = $__gb_sroa_0_0_load9991013 - $843 | 0;
      var $973 = $970 >>> 0 < 2147483647 ? $970 << 1 : -1;
      if (($__gb_sroa_1_4_load10091023 | 0) == 484) {
       var $977 = 0;
      } else {
       var $977 = $843;
      }
      var $977;
      var $978 = _realloc($977, $973);
      var $979 = $978;
      if (($978 | 0) == 0) {
       label = 1346;
       break L1285;
      }
      var $989 = $979 + ($973 >>> 2 << 2) | 0;
      var $__gb_sroa_0_0_load9991016 = $979 + ($970 >> 2 << 2) | 0;
      var $988 = $979;
      var $__gb_sroa_1_4_load10091019 = 248;
     } else {
      var $989 = $844;
      var $__gb_sroa_0_0_load9991016 = $__gb_sroa_0_0_load9991013;
      var $988 = $843;
      var $__gb_sroa_1_4_load10091019 = $__gb_sroa_1_4_load10091023;
     }
     var $__gb_sroa_1_4_load10091019;
     var $988;
     var $__gb_sroa_0_0_load9991016;
     var $989;
     HEAP32[$__gb_sroa_0_0_load9991016 >> 2] = $__ng_0;
     var $992 = $989;
     var $__gb_sroa_0_0_load9991012 = $__gb_sroa_0_0_load9991016 + 4 | 0;
     var $991 = $988;
     var $__gb_sroa_1_4_load10091020 = $__gb_sroa_1_4_load10091019;
    }
    var $__gb_sroa_1_4_load10091020;
    var $991;
    var $__gb_sroa_0_0_load9991012;
    var $992;
    if (($__fd_0 | 0) > 0) {
     var $995 = HEAP32[$229 >> 2];
     do {
      if (($995 | 0) == 0) {
       var $1013 = 1;
      } else {
       var $999 = HEAP32[$995 + 12 >> 2];
       if (($999 | 0) == (HEAP32[$995 + 16 >> 2] | 0)) {
        var $_0906 = FUNCTION_TABLE[HEAP32[HEAP32[$995 >> 2] + 36 >> 2]]($995);
       } else {
        var $_0906 = HEAP32[$999 >> 2];
       }
       var $_0906;
       if (($_0906 | 0) == -1) {
        HEAP32[$229 >> 2] = 0;
        var $1013 = 1;
        break;
       } else {
        var $1013 = (HEAP32[$229 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $1013;
     do {
      if (($__e_sroa_0_13 | 0) == 0) {
       label = 1363;
      } else {
       var $1017 = HEAP32[$__e_sroa_0_13 + 12 >> 2];
       if (($1017 | 0) == (HEAP32[$__e_sroa_0_13 + 16 >> 2] | 0)) {
        var $_0905 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_13 >> 2] + 36 >> 2]]($__e_sroa_0_13);
       } else {
        var $_0905 = HEAP32[$1017 >> 2];
       }
       var $_0905;
       if (($_0905 | 0) == -1) {
        label = 1363;
        break;
       }
       if ($1013) {
        var $__e_sroa_0_15 = $__e_sroa_0_13;
       } else {
        label = 1369;
        break L1285;
       }
      }
     } while (0);
     if (label == 1363) {
      label = 0;
      if ($1013) {
       label = 1369;
       break L1285;
      } else {
       var $__e_sroa_0_15 = 0;
      }
     }
     var $__e_sroa_0_15;
     var $1030 = HEAP32[$229 >> 2];
     var $1032 = HEAP32[$1030 + 12 >> 2];
     if (($1032 | 0) == (HEAP32[$1030 + 16 >> 2] | 0)) {
      var $_0908 = FUNCTION_TABLE[HEAP32[HEAP32[$1030 >> 2] + 36 >> 2]]($1030);
     } else {
      var $_0908 = HEAP32[$1032 >> 2];
     }
     var $_0908;
     if (($_0908 | 0) != ($__dp_0 | 0)) {
      label = 1369;
      break L1285;
     }
     var $1049 = HEAP32[$229 >> 2];
     var $1050 = $1049 + 12 | 0;
     var $1051 = HEAP32[$1050 >> 2];
     if (($1051 | 0) == (HEAP32[$1049 + 16 >> 2] | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1049 >> 2] + 40 >> 2]]($1049);
      var $1064 = $__e_sroa_0_15;
      var $1063 = $__fd_0;
      var $__e_sroa_0_16 = $__e_sroa_0_15;
     } else {
      HEAP32[$1050 >> 2] = $1051 + 4;
      var $1064 = $__e_sroa_0_15;
      var $1063 = $__fd_0;
      var $__e_sroa_0_16 = $__e_sroa_0_15;
     }
     while (1) {
      var $__e_sroa_0_16;
      var $1063;
      var $1064;
      var $1065 = HEAP32[$229 >> 2];
      do {
       if (($1065 | 0) == 0) {
        var $1083 = 1;
       } else {
        var $1069 = HEAP32[$1065 + 12 >> 2];
        if (($1069 | 0) == (HEAP32[$1065 + 16 >> 2] | 0)) {
         var $_0915 = FUNCTION_TABLE[HEAP32[HEAP32[$1065 >> 2] + 36 >> 2]]($1065);
        } else {
         var $_0915 = HEAP32[$1069 >> 2];
        }
        var $_0915;
        if (($_0915 | 0) == -1) {
         HEAP32[$229 >> 2] = 0;
         var $1083 = 1;
         break;
        } else {
         var $1083 = (HEAP32[$229 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      var $1083;
      do {
       if (($1064 | 0) == 0) {
        var $__e_sroa_0_17 = $__e_sroa_0_16;
        label = 1385;
       } else {
        var $1087 = HEAP32[$1064 + 12 >> 2];
        if (($1087 | 0) == (HEAP32[$1064 + 16 >> 2] | 0)) {
         var $_0914 = FUNCTION_TABLE[HEAP32[HEAP32[$1064 >> 2] + 36 >> 2]]($1064);
        } else {
         var $_0914 = HEAP32[$1087 >> 2];
        }
        var $_0914;
        if (($_0914 | 0) == -1) {
         var $__e_sroa_0_17 = 0;
         label = 1385;
         break;
        }
        if ($1083) {
         var $1100 = $1064;
         var $__e_sroa_0_18 = $__e_sroa_0_16;
        } else {
         label = 1392;
         break L1285;
        }
       }
      } while (0);
      if (label == 1385) {
       label = 0;
       var $__e_sroa_0_17;
       if ($1083) {
        label = 1392;
        break L1285;
       } else {
        var $1100 = 0;
        var $__e_sroa_0_18 = $__e_sroa_0_17;
       }
      }
      var $__e_sroa_0_18;
      var $1100;
      var $1101 = HEAP32[$229 >> 2];
      var $1103 = HEAP32[$1101 + 12 >> 2];
      if (($1103 | 0) == (HEAP32[$1101 + 16 >> 2] | 0)) {
       var $_0917 = FUNCTION_TABLE[HEAP32[HEAP32[$1101 >> 2] + 36 >> 2]]($1101);
      } else {
       var $_0917 = HEAP32[$1103 >> 2];
      }
      var $_0917;
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$230 >> 2] + 12 >> 2]]($__ct, 2048, $_0917)) {
       label = 1392;
       break L1285;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $10);
      }
      var $1128 = HEAP32[$229 >> 2];
      var $1130 = HEAP32[$1128 + 12 >> 2];
      if (($1130 | 0) == (HEAP32[$1128 + 16 >> 2] | 0)) {
       var $_0918 = FUNCTION_TABLE[HEAP32[HEAP32[$1128 >> 2] + 36 >> 2]]($1128);
      } else {
       var $_0918 = HEAP32[$1130 >> 2];
      }
      var $_0918;
      var $1142 = HEAP32[$__wn >> 2];
      HEAP32[$__wn >> 2] = $1142 + 4;
      HEAP32[$1142 >> 2] = $_0918;
      var $1144 = $1063 - 1 | 0;
      var $1145 = HEAP32[$229 >> 2];
      var $1146 = $1145 + 12 | 0;
      var $1147 = HEAP32[$1146 >> 2];
      if (($1147 | 0) == (HEAP32[$1145 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1145 >> 2] + 40 >> 2]]($1145);
      } else {
       HEAP32[$1146 >> 2] = $1147 + 4;
      }
      if (($1144 | 0) > 0) {
       var $1064 = $1100;
       var $1063 = $1144;
       var $__e_sroa_0_16 = $__e_sroa_0_18;
      } else {
       var $__fd_1 = $1144;
       var $__e_sroa_0_19 = $__e_sroa_0_18;
       break;
      }
     }
    } else {
     var $__fd_1 = $__fd_0;
     var $__e_sroa_0_19 = $__e_sroa_0_13;
    }
    var $__e_sroa_0_19;
    var $__fd_1;
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$227 >> 2] | 0)) {
     label = 1403;
     break L1285;
    } else {
     var $__trailing_sign_1 = $__trailing_sign_01140;
     var $1167 = $992;
     var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load9991012;
     var $1166 = $991;
     var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load10091020;
     var $__fd_2 = $__fd_1;
     var $__e_sroa_0_20 = $__e_sroa_0_19;
    }
   } else {
    var $__trailing_sign_1 = $__trailing_sign_01140;
    var $1167 = $244;
    var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
    var $1166 = $245;
    var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
    var $__fd_2 = $__fd_0;
    var $__e_sroa_0_20 = $__e_sroa_0_2;
   }
  } while (0);
  L1567 : do {
   if (label == 1190) {
    label = 0;
    if (($__p_01142 | 0) == 3) {
     var $__gb_sroa_1_4_load10091025_lcssa = $__gb_sroa_1_4_load100910251134;
     var $_lcssa = $245;
     var $__gb_sroa_0_0_load9991010_lcssa = $__gb_sroa_0_0_load99910101137;
     var $__trailing_sign_0_lcssa = $__trailing_sign_01140;
     var $__e_sroa_0_21 = $__e_sroa_0_2;
     label = 1405;
     break L1285;
    } else {
     var $400 = $__e_sroa_0_2;
     var $__e_sroa_0_3 = $__e_sroa_0_2;
    }
    while (1) {
     var $__e_sroa_0_3;
     var $400;
     var $401 = HEAP32[$229 >> 2];
     do {
      if (($401 | 0) == 0) {
       var $419 = 1;
      } else {
       var $405 = HEAP32[$401 + 12 >> 2];
       if (($405 | 0) == (HEAP32[$401 + 16 >> 2] | 0)) {
        var $_0922 = FUNCTION_TABLE[HEAP32[HEAP32[$401 >> 2] + 36 >> 2]]($401);
       } else {
        var $_0922 = HEAP32[$405 >> 2];
       }
       var $_0922;
       if (($_0922 | 0) == -1) {
        HEAP32[$229 >> 2] = 0;
        var $419 = 1;
        break;
       } else {
        var $419 = (HEAP32[$229 >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     var $419;
     do {
      if (($400 | 0) == 0) {
       var $__e_sroa_0_4 = $__e_sroa_0_3;
       label = 1203;
      } else {
       var $423 = HEAP32[$400 + 12 >> 2];
       if (($423 | 0) == (HEAP32[$400 + 16 >> 2] | 0)) {
        var $_0921 = FUNCTION_TABLE[HEAP32[HEAP32[$400 >> 2] + 36 >> 2]]($400);
       } else {
        var $_0921 = HEAP32[$423 >> 2];
       }
       var $_0921;
       if (($_0921 | 0) == -1) {
        var $__e_sroa_0_4 = 0;
        label = 1203;
        break;
       }
       if ($419) {
        var $436 = $400;
        var $__e_sroa_0_5 = $__e_sroa_0_3;
       } else {
        var $__trailing_sign_1 = $__trailing_sign_01140;
        var $1167 = $244;
        var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
        var $1166 = $245;
        var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
        var $__fd_2 = $__fd_0;
        var $__e_sroa_0_20 = $__e_sroa_0_3;
        break L1567;
       }
      }
     } while (0);
     if (label == 1203) {
      label = 0;
      var $__e_sroa_0_4;
      if ($419) {
       var $__trailing_sign_1 = $__trailing_sign_01140;
       var $1167 = $244;
       var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
       var $1166 = $245;
       var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
       var $__fd_2 = $__fd_0;
       var $__e_sroa_0_20 = $__e_sroa_0_4;
       break L1567;
      } else {
       var $436 = 0;
       var $__e_sroa_0_5 = $__e_sroa_0_4;
      }
     }
     var $__e_sroa_0_5;
     var $436;
     var $437 = HEAP32[$229 >> 2];
     var $439 = HEAP32[$437 + 12 >> 2];
     if (($439 | 0) == (HEAP32[$437 + 16 >> 2] | 0)) {
      var $_0920 = FUNCTION_TABLE[HEAP32[HEAP32[$437 >> 2] + 36 >> 2]]($437);
     } else {
      var $_0920 = HEAP32[$439 >> 2];
     }
     var $_0920;
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$230 >> 2] + 12 >> 2]]($__ct, 8192, $_0920)) {
      var $__trailing_sign_1 = $__trailing_sign_01140;
      var $1167 = $244;
      var $__gb_sroa_0_0_load9991011 = $__gb_sroa_0_0_load99910101137;
      var $1166 = $245;
      var $__gb_sroa_1_4_load10091024 = $__gb_sroa_1_4_load100910251134;
      var $__fd_2 = $__fd_0;
      var $__e_sroa_0_20 = $__e_sroa_0_5;
      break L1567;
     }
     var $456 = HEAP32[$229 >> 2];
     var $457 = $456 + 12 | 0;
     var $458 = HEAP32[$457 >> 2];
     if (($458 | 0) == (HEAP32[$456 + 16 >> 2] | 0)) {
      var $_0919 = FUNCTION_TABLE[HEAP32[HEAP32[$456 >> 2] + 40 >> 2]]($456);
     } else {
      HEAP32[$457 >> 2] = $458 + 4;
      var $_0919 = HEAP32[$458 >> 2];
     }
     var $_0919;
     var $471 = HEAP8[$16];
     if (($471 & 1) == 0) {
      var $__sz_0_i30 = ($471 & 255) >>> 1;
      var $__cap_0_i29 = 1;
     } else {
      var $__sz_0_i30 = HEAP32[$239 >> 2];
      var $__cap_0_i29 = (HEAP32[$243 >> 2] & -2) - 1 | 0;
     }
     var $__cap_0_i29;
     var $__sz_0_i30;
     if (($__sz_0_i30 | 0) == ($__cap_0_i29 | 0)) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces, $__cap_0_i29, 1, $__cap_0_i29, $__cap_0_i29, 0, 0);
      var $__is_short_0_off0_in_in_i31 = HEAP8[$16];
     } else {
      var $__is_short_0_off0_in_in_i31 = $471;
     }
     var $__is_short_0_off0_in_in_i31;
     if (($__is_short_0_off0_in_in_i31 & 1) == 0) {
      HEAP8[$16] = ($__sz_0_i30 << 1) + 2 & 255;
      var $_pn_i36 = $239;
      var $__p_0_sum_pre_phi_i35 = $__sz_0_i30 + 1 | 0;
     } else {
      var $492 = HEAP32[$240 >> 2];
      var $493 = $__sz_0_i30 + 1 | 0;
      HEAP32[$239 >> 2] = $493;
      var $_pn_i36 = $492;
      var $__p_0_sum_pre_phi_i35 = $493;
     }
     var $__p_0_sum_pre_phi_i35;
     var $_pn_i36;
     HEAP32[$_pn_i36 + ($__sz_0_i30 << 2) >> 2] = $_0919;
     HEAP32[$_pn_i36 + ($__p_0_sum_pre_phi_i35 << 2) >> 2] = 0;
     var $400 = $436;
     var $__e_sroa_0_3 = $__e_sroa_0_5;
    }
   }
  } while (0);
  var $__e_sroa_0_20;
  var $__fd_2;
  var $__gb_sroa_1_4_load10091024;
  var $1166;
  var $__gb_sroa_0_0_load9991011;
  var $1167;
  var $__trailing_sign_1;
  var $1168 = $__p_01142 + 1 | 0;
  if ($1168 >>> 0 < 4) {
   var $__gb_sroa_1_4_load100910251134 = $__gb_sroa_1_4_load10091024;
   var $245 = $1166;
   var $__gb_sroa_0_0_load99910101137 = $__gb_sroa_0_0_load9991011;
   var $244 = $1167;
   var $__trailing_sign_01140 = $__trailing_sign_1;
   var $__p_01142 = $1168;
   var $__fd_0 = $__fd_2;
   var $__e_sroa_0_0 = $__e_sroa_0_20;
  } else {
   var $__gb_sroa_1_4_load10091025_lcssa = $__gb_sroa_1_4_load10091024;
   var $_lcssa = $1166;
   var $__gb_sroa_0_0_load9991010_lcssa = $__gb_sroa_0_0_load9991011;
   var $__trailing_sign_0_lcssa = $__trailing_sign_1;
   var $__e_sroa_0_21 = $__e_sroa_0_20;
   label = 1405;
   break;
  }
 }
 L1614 : do {
  if (label == 1262) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $245;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load100910251134;
  } else if (label == 1189) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $245;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load100910251134;
  } else if (label == 1305) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $245;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load100910251134;
  } else if (label == 1334) {
   var $935 = ___cxa_allocate_exception(4);
   HEAP32[$935 >> 2] = 9744;
   ___cxa_throw($935, 15960, 74);
  } else if (label == 1346) {
   var $982 = ___cxa_allocate_exception(4);
   HEAP32[$982 >> 2] = 9744;
   ___cxa_throw($982, 15960, 74);
  } else if (label == 1369) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $991;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091020;
  } else if (label == 1392) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $991;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091020;
  } else if (label == 1403) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $991;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091020;
  } else if (label == 1405) {
   var $__e_sroa_0_21;
   var $__trailing_sign_0_lcssa;
   var $__gb_sroa_0_0_load9991010_lcssa;
   var $_lcssa;
   var $__gb_sroa_1_4_load10091025_lcssa;
   L1626 : do {
    if (($__trailing_sign_0_lcssa | 0) != 0) {
     var $1171 = $__trailing_sign_0_lcssa;
     var $1172 = $__trailing_sign_0_lcssa + 4 | 0;
     var $1173 = $__trailing_sign_0_lcssa + 8 | 0;
     var $__i_0 = 1;
     var $__e_sroa_0_22 = $__e_sroa_0_21;
     L1628 : while (1) {
      var $__e_sroa_0_22;
      var $__i_0;
      var $1175 = HEAPU8[$1171];
      if (($1175 & 1 | 0) == 0) {
       var $1182 = $1175 >>> 1;
      } else {
       var $1182 = HEAP32[$1172 >> 2];
      }
      var $1182;
      if ($__i_0 >>> 0 >= $1182 >>> 0) {
       break L1626;
      }
      var $1185 = HEAP32[$229 >> 2];
      do {
       if (($1185 | 0) == 0) {
        var $1203 = 1;
       } else {
        var $1189 = HEAP32[$1185 + 12 >> 2];
        if (($1189 | 0) == (HEAP32[$1185 + 16 >> 2] | 0)) {
         var $_0929 = FUNCTION_TABLE[HEAP32[HEAP32[$1185 >> 2] + 36 >> 2]]($1185);
        } else {
         var $_0929 = HEAP32[$1189 >> 2];
        }
        var $_0929;
        if (($_0929 | 0) == -1) {
         HEAP32[$229 >> 2] = 0;
         var $1203 = 1;
         break;
        } else {
         var $1203 = (HEAP32[$229 >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      var $1203;
      do {
       if (($__e_sroa_0_22 | 0) == 0) {
        label = 1423;
       } else {
        var $1207 = HEAP32[$__e_sroa_0_22 + 12 >> 2];
        if (($1207 | 0) == (HEAP32[$__e_sroa_0_22 + 16 >> 2] | 0)) {
         var $_0928 = FUNCTION_TABLE[HEAP32[HEAP32[$__e_sroa_0_22 >> 2] + 36 >> 2]]($__e_sroa_0_22);
        } else {
         var $_0928 = HEAP32[$1207 >> 2];
        }
        var $_0928;
        if (($_0928 | 0) == -1) {
         label = 1423;
         break;
        }
        if ($1203) {
         var $__e_sroa_0_24 = $__e_sroa_0_22;
        } else {
         break L1628;
        }
       }
      } while (0);
      if (label == 1423) {
       label = 0;
       if ($1203) {
        break;
       } else {
        var $__e_sroa_0_24 = 0;
       }
      }
      var $__e_sroa_0_24;
      var $1220 = HEAP32[$229 >> 2];
      var $1222 = HEAP32[$1220 + 12 >> 2];
      if (($1222 | 0) == (HEAP32[$1220 + 16 >> 2] | 0)) {
       var $_0930 = FUNCTION_TABLE[HEAP32[HEAP32[$1220 >> 2] + 36 >> 2]]($1220);
      } else {
       var $_0930 = HEAP32[$1222 >> 2];
      }
      var $_0930;
      if ((HEAP8[$1171] & 1) == 0) {
       var $1239 = $1172;
      } else {
       var $1239 = HEAP32[$1173 >> 2];
      }
      var $1239;
      if (($_0930 | 0) != (HEAP32[$1239 + ($__i_0 << 2) >> 2] | 0)) {
       break;
      }
      var $1247 = $__i_0 + 1 | 0;
      var $1248 = HEAP32[$229 >> 2];
      var $1249 = $1248 + 12 | 0;
      var $1250 = HEAP32[$1249 >> 2];
      if (($1250 | 0) == (HEAP32[$1248 + 16 >> 2] | 0)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1248 >> 2] + 40 >> 2]]($1248);
       var $__i_0 = $1247;
       var $__e_sroa_0_22 = $__e_sroa_0_24;
       continue;
      } else {
       HEAP32[$1249 >> 2] = $1250 + 4;
       var $__i_0 = $1247;
       var $__e_sroa_0_22 = $__e_sroa_0_24;
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     var $_0909 = 0;
     var $1269 = $_lcssa;
     var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091025_lcssa;
     break L1614;
    }
   } while (0);
   if (($_lcssa | 0) == ($__gb_sroa_0_0_load9991010_lcssa | 0)) {
    var $_0909 = 1;
    var $1269 = $__gb_sroa_0_0_load9991010_lcssa;
    var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091025_lcssa;
    break;
   }
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $_lcssa, $__gb_sroa_0_0_load9991010_lcssa, $__et);
   if ((HEAP32[$__et >> 2] | 0) == 0) {
    var $_0909 = 1;
    var $1269 = $_lcssa;
    var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091025_lcssa;
    break;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   var $_0909 = 0;
   var $1269 = $_lcssa;
   var $__gb_sroa_1_4_load10091026 = $__gb_sroa_1_4_load10091025_lcssa;
  }
 } while (0);
 var $__gb_sroa_1_4_load10091026;
 var $1269;
 var $_0909;
 do {
  if ((HEAP8[$16] & 1) != 0) {
   var $1274 = HEAP32[$240 >> 2];
   if (($1274 | 0) == 0) {
    break;
   }
   _free($1274);
  }
 } while (0);
 do {
  if ((HEAP8[$15] & 1) != 0) {
   var $1282 = HEAP32[$232 >> 2];
   if (($1282 | 0) == 0) {
    break;
   }
   _free($1282);
  }
 } while (0);
 do {
  if ((HEAP8[$14] & 1) != 0) {
   var $1290 = HEAP32[$234 >> 2];
   if (($1290 | 0) == 0) {
    break;
   }
   _free($1290);
  }
 } while (0);
 do {
  if ((HEAP8[$13] & 1) != 0) {
   var $1298 = HEAP32[$238 >> 2];
   if (($1298 | 0) == 0) {
    break;
   }
   _free($1298);
  }
 } while (0);
 do {
  if ((HEAP8[$11] & 1) != 0) {
   var $1307 = HEAP32[$__grp + 8 >> 2];
   if (($1307 | 0) == 0) {
    break;
   }
   _free($1307);
  }
 } while (0);
 if (($1269 | 0) == 0) {
  STACKTOP = sp;
  return $_0909;
 }
 FUNCTION_TABLE[$__gb_sroa_1_4_load10091026]($1269);
 STACKTOP = sp;
 return $_0909;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 440 | 0;
 var tempParam = $__b;
 $__b = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__b >> 2] = HEAP32[tempParam >> 2];
 var tempParam = $__e;
 $__e = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__e >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__wbuf = sp + 16;
 var $__wb = sp + 416;
 var $__wn = sp + 424;
 var $__neg = sp + 432;
 var $2 = $__wb | 0;
 HEAP32[$2 >> 2] = $__wbuf;
 var $3 = $__wb + 4 | 0;
 HEAP32[$3 >> 2] = 484;
 var $4 = $__wbuf + 400 | 0;
 var $6 = HEAP32[$__iob + 28 >> 2];
 var $7 = $6;
 var $9 = $6 + 4 | 0;
 tempValue = HEAP32[$9 >> 2], HEAP32[$9 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $16 = HEAP32[21564 >> 2] - 1 | 0;
 var $22 = HEAP32[$6 + 8 >> 2];
 do {
  if (HEAP32[$6 + 12 >> 2] - $22 >> 2 >>> 0 > $16 >>> 0) {
   var $29 = HEAP32[$22 + ($16 << 2) >> 2];
   if (($29 | 0) == 0) {
    break;
   }
   var $33 = $29;
   HEAP8[$__neg] = 0;
   var $34 = $__e | 0;
   var $35 = HEAP32[$34 >> 2];
   do {
    if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $35, $__intl, $7, HEAP32[$__iob + 4 >> 2], $__err, $__neg, $33, $__wb, $__wn, $4)) {
     var $41 = $__v;
     if ((HEAP8[$41] & 1) == 0) {
      HEAP32[$__v + 4 >> 2] = 0;
      HEAP8[$41] = 0;
     } else {
      HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
      HEAP32[$__v + 4 >> 2] = 0;
     }
     var $_pre114 = $29;
     if ((HEAP8[$__neg] & 1) != 0) {
      var $58 = FUNCTION_TABLE[HEAP32[HEAP32[$_pre114 >> 2] + 44 >> 2]]($33, 45);
      var $59 = HEAP8[$41];
      if (($59 & 1) == 0) {
       var $__sz_0_i = ($59 & 255) >>> 1;
       var $__cap_0_i = 1;
      } else {
       var $__sz_0_i = HEAP32[$__v + 4 >> 2];
       var $__cap_0_i = (HEAP32[$__v >> 2] & -2) - 1 | 0;
      }
      var $__cap_0_i;
      var $__sz_0_i;
      if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0, 0);
       var $__is_short_0_off0_in_in_i = HEAP8[$41];
      } else {
       var $__is_short_0_off0_in_in_i = $59;
      }
      var $__is_short_0_off0_in_in_i;
      if (($__is_short_0_off0_in_in_i & 1) == 0) {
       HEAP8[$41] = ($__sz_0_i << 1) + 2 & 255;
       var $_pn_i = $__v + 4 | 0;
       var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
      } else {
       var $84 = HEAP32[$__v + 8 >> 2];
       var $85 = $__sz_0_i + 1 | 0;
       HEAP32[$__v + 4 >> 2] = $85;
       var $_pn_i = $84;
       var $__p_0_sum_pre_phi_i = $85;
      }
      var $__p_0_sum_pre_phi_i;
      var $_pn_i;
      HEAP32[$_pn_i + ($__sz_0_i << 2) >> 2] = $58;
      HEAP32[$_pn_i + ($__p_0_sum_pre_phi_i << 2) >> 2] = 0;
     }
     var $91 = FUNCTION_TABLE[HEAP32[HEAP32[$_pre114 >> 2] + 44 >> 2]]($33, 48);
     var $93 = HEAP32[$__wn >> 2];
     var $94 = $93 - 4 | 0;
     var $__w_0 = HEAP32[$2 >> 2];
     while (1) {
      var $__w_0;
      if ($__w_0 >>> 0 >= $94 >>> 0) {
       break;
      }
      if ((HEAP32[$__w_0 >> 2] | 0) == ($91 | 0)) {
       var $__w_0 = $__w_0 + 4 | 0;
      } else {
       break;
      }
     }
     var $102 = $__w_0;
     var $103 = HEAP8[$41];
     var $104 = $103 & 255;
     if (($104 & 1 | 0) == 0) {
      var $112 = $104 >>> 1;
     } else {
      var $112 = HEAP32[$__v + 4 >> 2];
     }
     var $112;
     if (($103 & 1) == 0) {
      var $121 = 1;
      var $120 = $103;
     } else {
      var $117 = HEAP32[$__v >> 2];
      var $121 = ($117 & -2) - 1 | 0;
      var $120 = $117 & 255;
     }
     var $120;
     var $121;
     var $124 = $93 - $102 >> 2;
     if (($124 | 0) == 0) {
      break;
     }
     if (($121 - $112 | 0) >>> 0 < $124 >>> 0) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v, $121, $112 + $124 - $121 | 0, $112, $112, 0, 0);
      var $133 = HEAP8[$41];
     } else {
      var $133 = $120;
     }
     var $133;
     if (($133 & 1) == 0) {
      var $141 = $__v + 4 | 0;
     } else {
      var $141 = HEAP32[$__v + 8 >> 2];
     }
     var $141;
     var $142 = $141 + ($112 << 2) | 0;
     if (($__w_0 | 0) == ($93 | 0)) {
      var $__p_0_lcssa_i = $142;
     } else {
      var $147 = $112 + (($94 + -$102 | 0) >>> 2) + 1 | 0;
      var $_069_i = $__w_0;
      var $__p_070_i = $142;
      while (1) {
       var $__p_070_i;
       var $_069_i;
       HEAP32[$__p_070_i >> 2] = HEAP32[$_069_i >> 2];
       var $150 = $_069_i + 4 | 0;
       if (($150 | 0) == ($93 | 0)) {
        break;
       }
       var $_069_i = $150;
       var $__p_070_i = $__p_070_i + 4 | 0;
      }
      var $__p_0_lcssa_i = $141 + ($147 << 2) | 0;
     }
     var $__p_0_lcssa_i;
     HEAP32[$__p_0_lcssa_i >> 2] = 0;
     var $154 = $112 + $124 | 0;
     if ((HEAP8[$41] & 1) == 0) {
      HEAP8[$41] = $154 << 1 & 255;
      break;
     } else {
      HEAP32[$__v + 4 >> 2] = $154;
      break;
     }
    }
   } while (0);
   var $163 = $__b | 0;
   var $164 = HEAP32[$163 >> 2];
   do {
    if (($164 | 0) == 0) {
     var $182 = 0;
    } else {
     var $168 = HEAP32[$164 + 12 >> 2];
     if (($168 | 0) == (HEAP32[$164 + 16 >> 2] | 0)) {
      var $_0104 = FUNCTION_TABLE[HEAP32[HEAP32[$164 >> 2] + 36 >> 2]]($164);
     } else {
      var $_0104 = HEAP32[$168 >> 2];
     }
     var $_0104;
     if (($_0104 | 0) != -1) {
      var $182 = $164;
      break;
     }
     HEAP32[$163 >> 2] = 0;
     var $182 = 0;
    }
   } while (0);
   var $182;
   var $183 = ($182 | 0) == 0;
   do {
    if (($35 | 0) == 0) {
     label = 1525;
    } else {
     var $187 = HEAP32[$35 + 12 >> 2];
     if (($187 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
      var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$35 >> 2] + 36 >> 2]]($35);
     } else {
      var $_0 = HEAP32[$187 >> 2];
     }
     var $_0;
     if (($_0 | 0) == -1) {
      HEAP32[$34 >> 2] = 0;
      label = 1525;
      break;
     } else {
      if ($183) {
       break;
      } else {
       label = 1527;
       break;
      }
     }
    }
   } while (0);
   if (label == 1525) {
    if ($183) {
     label = 1527;
    }
   }
   if (label == 1527) {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
   }
   HEAP32[$agg_result >> 2] = $182;
   var $206 = $6 + 4 | 0;
   if (((tempValue = HEAP32[$206 >> 2], HEAP32[$206 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6);
   }
   var $215 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = 0;
   if (($215 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($215);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $31 = ___cxa_allocate_exception(4);
 HEAP32[$31 >> 2] = 9776;
 ___cxa_throw($31, 15976, 602);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 var $1 = $__b + 4 | 0;
 var $3 = (HEAP32[$1 >> 2] | 0) != 484;
 var $5 = $__b | 0;
 var $6 = HEAP32[$5 >> 2];
 var $8 = $6;
 var $9 = HEAP32[$__e >> 2] - $8 | 0;
 var $12 = $9 >>> 0 < 2147483647 ? $9 << 1 : -1;
 var $16 = HEAP32[$__n >> 2] - $8 >> 2;
 if ($3) {
  var $19 = $6;
 } else {
  var $19 = 0;
 }
 var $19;
 var $20 = _realloc($19, $12);
 var $21 = $20;
 if (($20 | 0) == 0) {
  var $24 = ___cxa_allocate_exception(4);
  HEAP32[$24 >> 2] = 9744;
  ___cxa_throw($24, 15960, 74);
 }
 do {
  if ($3) {
   HEAP32[$5 >> 2] = $21;
   var $34 = $21;
  } else {
   var $_pr = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $21;
   if (($_pr | 0) == 0) {
    var $34 = $21;
    break;
   }
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($_pr);
   var $34 = HEAP32[$5 >> 2];
  }
 } while (0);
 var $34;
 HEAP32[$1 >> 2] = 248;
 HEAP32[$__n >> 2] = $34 + ($16 << 2);
 HEAP32[$__e >> 2] = HEAP32[$5 >> 2] + ($12 >>> 2 << 2);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__bb = sp + 120;
 var $__pat = sp + 232;
 var $__dp = sp + 240;
 var $__ts = sp + 248;
 var $__grp = sp + 256;
 var $__grp289 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = $__sym;
 var $__sn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $2 = $__sn;
 var $__fd = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mbuf = STACKTOP;
 STACKTOP = STACKTOP + 100 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mi = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__me = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $3 = sp + 16 | 0;
 HEAP32[$__bb >> 2] = $3;
 var $4 = sp + 128 | 0;
 var $5 = _snprintf($3, 100, 7032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__units, tempVarArgs));
 STACKTOP = tempVarArgs;
 do {
  if ($5 >>> 0 > 99) {
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   var $20 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__bb, HEAP32[19888 >> 2], 7032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__units, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $22 = HEAP32[$__bb >> 2];
   if (($22 | 0) == 0) {
    var $25 = ___cxa_allocate_exception(4);
    HEAP32[$25 >> 2] = 9744;
    ___cxa_throw($25, 15960, 74);
   }
   var $31 = _malloc($20);
   if (($31 | 0) != 0) {
    var $__db_0 = $31;
    var $__n_0 = $20;
    var $__hn_sroa_0_1 = $22;
    var $__hd_sroa_0_1 = $31;
    break;
   }
   var $34 = ___cxa_allocate_exception(4);
   HEAP32[$34 >> 2] = 9744;
   ___cxa_throw($34, 15960, 74);
  } else {
   var $__db_0 = $4;
   var $__n_0 = $5;
   var $__hn_sroa_0_1 = 0;
   var $__hd_sroa_0_1 = 0;
  }
 } while (0);
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 var $38 = HEAP32[$__iob + 28 >> 2];
 var $39 = $38;
 var $41 = $38 + 4 | 0;
 tempValue = HEAP32[$41 >> 2], HEAP32[$41 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $48 = HEAP32[21572 >> 2] - 1 | 0;
 var $54 = HEAP32[$38 + 8 >> 2];
 do {
  if (HEAP32[$38 + 12 >> 2] - $54 >> 2 >>> 0 > $48 >>> 0) {
   var $61 = HEAP32[$54 + ($48 << 2) >> 2];
   if (($61 | 0) == 0) {
    break;
   }
   var $65 = $61;
   var $66 = HEAP32[$__bb >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 32 >> 2]]($65, $66, $66 + $__n_0 | 0, $__db_0);
   if (($__n_0 | 0) == 0) {
    var $78 = 0;
   } else {
    var $78 = (HEAP8[HEAP32[$__bb >> 2]] | 0) == 45;
   }
   var $78;
   HEAP32[$__grp289 >> 2] = 0;
   HEAP32[$__grp289 + 4 >> 2] = 0;
   HEAP32[$__grp289 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $78, $39, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
   var $80 = $__mbuf | 0;
   var $81 = HEAP32[$__fd >> 2];
   if (($__n_0 | 0) > ($81 | 0)) {
    var $87 = HEAPU8[$2];
    if (($87 & 1 | 0) == 0) {
     var $95 = $87 >>> 1;
    } else {
     var $95 = HEAP32[$__sn + 4 >> 2];
    }
    var $95;
    var $97 = HEAPU8[$1];
    if (($97 & 1 | 0) == 0) {
     var $105 = $97 >>> 1;
    } else {
     var $105 = HEAP32[$__sym + 4 >> 2];
    }
    var $105;
    var $_pn = ($__n_0 - $81 << 1 | 1) + $95 + $105 | 0;
   } else {
    var $111 = HEAPU8[$2];
    if (($111 & 1 | 0) == 0) {
     var $119 = $111 >>> 1;
    } else {
     var $119 = HEAP32[$__sn + 4 >> 2];
    }
    var $119;
    var $121 = HEAPU8[$1];
    if (($121 & 1 | 0) == 0) {
     var $129 = $121 >>> 1;
    } else {
     var $129 = HEAP32[$__sym + 4 >> 2];
    }
    var $129;
    var $_pn = $119 + 2 + $129 | 0;
   }
   var $_pn;
   var $133 = $_pn + $81 | 0;
   do {
    if ($133 >>> 0 > 100) {
     var $135 = _malloc($133);
     if (($135 | 0) != 0) {
      var $__mb_0 = $135;
      var $__hw_sroa_0_1 = $135;
      break;
     }
     var $138 = ___cxa_allocate_exception(4);
     HEAP32[$138 >> 2] = 9744;
     ___cxa_throw($138, 15960, 74);
    } else {
     var $__mb_0 = $80;
     var $__hw_sroa_0_1 = 0;
    }
   } while (0);
   var $__hw_sroa_0_1;
   var $__mb_0;
   __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0, $__mi, $__me, HEAP32[$__iob + 4 >> 2], $__db_0, $__db_0 + $__n_0 | 0, $65, $78, $__pat, HEAP8[$__dp], HEAP8[$__ts], $__grp, $__sym, $__sn, $81);
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, HEAP32[$__s >> 2], $__mb_0, HEAP32[$__mi >> 2], HEAP32[$__me >> 2], $__iob, $__fl);
   if (($__hw_sroa_0_1 | 0) != 0) {
    _free($__hw_sroa_0_1);
   }
   do {
    if ((HEAP8[$2] & 1) != 0) {
     var $176 = HEAP32[$__sn + 8 >> 2];
     if (($176 | 0) == 0) {
      break;
     }
     _free($176);
    }
   } while (0);
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $184 = HEAP32[$__sym + 8 >> 2];
     if (($184 | 0) == 0) {
      break;
     }
     _free($184);
    }
   } while (0);
   do {
    if ((HEAP8[$__grp289] & 1) != 0) {
     var $192 = HEAP32[$__grp + 8 >> 2];
     if (($192 | 0) == 0) {
      break;
     }
     _free($192);
    }
   } while (0);
   var $196 = $38 + 4 | 0;
   if (((tempValue = HEAP32[$196 >> 2], HEAP32[$196 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 8 >> 2]]($38);
   }
   if (($__hd_sroa_0_1 | 0) != 0) {
    _free($__hd_sroa_0_1);
   }
   if (($__hn_sroa_0_1 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($__hn_sroa_0_1);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $63 = ___cxa_allocate_exception(4);
 HEAP32[$63 >> 2] = 9776;
 ___cxa_throw($63, 15976, 602);
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc_0_0_val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var $__p_i_i_i519 = sp;
 var $__p_i_i_i = sp + 16;
 var $1 = sp + 32;
 var $tmpcast518 = $1;
 var $2 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $3 = $2;
 var $4 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast517 = $4;
 var $5 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $6 = $5;
 var $7 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $8 = $7;
 var $9 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $10 = $9;
 var $11 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast516 = $11;
 var $12 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $13 = $12;
 var $14 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast = $14;
 var $15 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $16 = $15;
 var $17 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $18 = $17;
 var $19 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $20 = $19;
 if ($__intl) {
  if ((HEAP32[22040 >> 2] | 0) != -1) {
   HEAP32[$__p_i_i_i >> 2] = 22040;
   HEAP32[$__p_i_i_i + 4 >> 2] = 26;
   HEAP32[$__p_i_i_i + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(22040, $__p_i_i_i);
  }
  var $27 = HEAP32[22044 >> 2] - 1 | 0;
  var $31 = HEAP32[$__loc_0_0_val + 8 >> 2];
  if (HEAP32[$__loc_0_0_val + 12 >> 2] - $31 >> 2 >>> 0 <= $27 >>> 0) {
   var $40 = ___cxa_allocate_exception(4);
   var $41 = $40;
   HEAP32[$41 >> 2] = 9776;
   ___cxa_throw($40, 15976, 602);
  }
  var $38 = HEAP32[$31 + ($27 << 2) >> 2];
  if (($38 | 0) == 0) {
   var $40 = ___cxa_allocate_exception(4);
   var $41 = $40;
   HEAP32[$41 >> 2] = 9776;
   ___cxa_throw($40, 15976, 602);
  }
  var $42 = $38;
  var $44 = HEAP32[$38 >> 2];
  if ($__neg) {
   FUNCTION_TABLE[HEAP32[$44 + 44 >> 2]]($tmpcast518, $42);
   var $48 = $__pat;
   tempBigInt = HEAP32[$1 >> 2];
   HEAP8[$48] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 32 >> 2]]($2, $42);
   var $54 = $__sn;
   if ((HEAP8[$54] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0;
    HEAP8[$54] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2]] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$54 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$54 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$54 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE[HEAP32[$44 + 40 >> 2]]($tmpcast517, $42);
   var $70 = $__pat;
   tempBigInt = HEAP32[$4 >> 2];
   HEAP8[$70] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$70 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$70 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$70 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 28 >> 2]]($5, $42);
   var $76 = $__sn;
   if ((HEAP8[$76] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0;
    HEAP8[$76] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2]] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$76 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$76 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$76 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$6 + 8 >> 2] = 0;
  }
  var $89 = $38;
  HEAP8[$__dp] = FUNCTION_TABLE[HEAP32[HEAP32[$89 >> 2] + 12 >> 2]]($42);
  HEAP8[$__ts] = FUNCTION_TABLE[HEAP32[HEAP32[$89 >> 2] + 16 >> 2]]($42);
  var $98 = $38;
  FUNCTION_TABLE[HEAP32[HEAP32[$98 >> 2] + 20 >> 2]]($7, $42);
  var $102 = $__grp;
  if ((HEAP8[$102] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0;
   HEAP8[$102] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$102 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$102 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$102 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$98 >> 2] + 24 >> 2]]($9, $42);
  var $118 = $__sym;
  if ((HEAP8[$118] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0;
   HEAP8[$118] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2]] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$118 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$118 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$118 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  var $storemerge = FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 36 >> 2]]($42);
  var $storemerge;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[22048 >> 2] | 0) != -1) {
   HEAP32[$__p_i_i_i519 >> 2] = 22048;
   HEAP32[$__p_i_i_i519 + 4 >> 2] = 26;
   HEAP32[$__p_i_i_i519 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(22048, $__p_i_i_i519);
  }
  var $142 = HEAP32[22052 >> 2] - 1 | 0;
  var $146 = HEAP32[$__loc_0_0_val + 8 >> 2];
  if (HEAP32[$__loc_0_0_val + 12 >> 2] - $146 >> 2 >>> 0 <= $142 >>> 0) {
   var $155 = ___cxa_allocate_exception(4);
   var $156 = $155;
   HEAP32[$156 >> 2] = 9776;
   ___cxa_throw($155, 15976, 602);
  }
  var $153 = HEAP32[$146 + ($142 << 2) >> 2];
  if (($153 | 0) == 0) {
   var $155 = ___cxa_allocate_exception(4);
   var $156 = $155;
   HEAP32[$156 >> 2] = 9776;
   ___cxa_throw($155, 15976, 602);
  }
  var $157 = $153;
  var $159 = HEAP32[$153 >> 2];
  if ($__neg) {
   FUNCTION_TABLE[HEAP32[$159 + 44 >> 2]]($tmpcast516, $157);
   var $163 = $__pat;
   tempBigInt = HEAP32[$11 >> 2];
   HEAP8[$163] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$163 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$163 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$163 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 32 >> 2]]($12, $157);
   var $169 = $__sn;
   if ((HEAP8[$169] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0;
    HEAP8[$169] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2]] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$169 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$169 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
   HEAP32[$169 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   HEAP32[$13 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE[HEAP32[$159 + 40 >> 2]]($tmpcast, $157);
   var $185 = $__pat;
   tempBigInt = HEAP32[$14 >> 2];
   HEAP8[$185] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$185 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$185 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$185 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 28 >> 2]]($15, $157);
   var $191 = $__sn;
   if ((HEAP8[$191] & 1) == 0) {
    HEAP8[$__sn + 1 | 0] = 0;
    HEAP8[$191] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2]] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn);
   HEAP32[$191 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$191 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
   HEAP32[$191 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$16 + 4 >> 2] = 0;
   HEAP32[$16 + 8 >> 2] = 0;
  }
  var $204 = $153;
  HEAP8[$__dp] = FUNCTION_TABLE[HEAP32[HEAP32[$204 >> 2] + 12 >> 2]]($157);
  HEAP8[$__ts] = FUNCTION_TABLE[HEAP32[HEAP32[$204 >> 2] + 16 >> 2]]($157);
  var $213 = $153;
  FUNCTION_TABLE[HEAP32[HEAP32[$213 >> 2] + 20 >> 2]]($17, $157);
  var $217 = $__grp;
  if ((HEAP8[$217] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0;
   HEAP8[$217] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$217 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$217 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
  HEAP32[$217 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
  HEAP32[$18 + 8 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$213 >> 2] + 24 >> 2]]($19, $157);
  var $233 = $__sym;
  if ((HEAP8[$233] & 1) == 0) {
   HEAP8[$__sym + 1 | 0] = 0;
   HEAP8[$233] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2]] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym);
  HEAP32[$233 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$233 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
  HEAP32[$233 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
  HEAP32[$20 >> 2] = 0;
  HEAP32[$20 + 4 >> 2] = 0;
  HEAP32[$20 + 8 >> 2] = 0;
  var $storemerge = FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 36 >> 2]]($157);
  var $storemerge;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 HEAP32[$__me >> 2] = $__mb;
 var $1 = $__ct;
 var $3 = $__sn;
 var $4 = $__sn + 1 | 0;
 var $5 = $__sn + 8 | 0;
 var $6 = $__sn + 4 | 0;
 var $8 = $__sym;
 var $10 = ($__flags & 512 | 0) == 0;
 var $11 = $__sym + 1 | 0;
 var $12 = $__sym + 4 | 0;
 var $13 = $__sym + 8 | 0;
 var $14 = $__ct + 8 | 0;
 var $15 = ($__fd | 0) > 0;
 var $17 = $__grp;
 var $18 = $__grp + 1 | 0;
 var $19 = $__grp + 8 | 0;
 var $20 = $__grp + 4 | 0;
 var $21 = -$__fd | 0;
 var $_0362404 = $__db;
 var $__p_0405 = 0;
 while (1) {
  var $__p_0405;
  var $_0362404;
  var $25 = HEAP8[$__pat + $__p_0405 | 0] | 0;
  do {
   if (($25 | 0) == 4) {
    var $86 = HEAP32[$__me >> 2];
    var $__0362 = $__neg ? $_0362404 + 1 | 0 : $_0362404;
    var $__d_0 = $__0362;
    while (1) {
     var $__d_0;
     if ($__d_0 >>> 0 >= $__de >>> 0) {
      break;
     }
     var $91 = HEAP8[$__d_0];
     if ($91 << 24 >> 24 <= -1) {
      break;
     }
     if ((HEAP16[HEAP32[$14 >> 2] + ($91 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
      break;
     } else {
      var $__d_0 = $__d_0 + 1 | 0;
     }
    }
    var $__d_0_lcssa412 = $__d_0;
    if ($15) {
     if ($__d_0 >>> 0 > $__0362 >>> 0) {
      var $scevgep413 = $__0362 + -$__d_0_lcssa412 | 0;
      var $umax = $scevgep413 >>> 0 < $21 >>> 0 ? $21 : $scevgep413;
      var $scevgep415416 = $umax + $__fd | 0;
      var $__d_1381 = $__d_0;
      var $__f_0382 = $__fd;
      var $103 = $86;
      while (1) {
       var $103;
       var $__f_0382;
       var $__d_1381;
       var $104 = $__d_1381 - 1 | 0;
       var $105 = HEAP8[$104];
       HEAP32[$__me >> 2] = $103 + 1;
       HEAP8[$103] = $105;
       var $107 = $__f_0382 - 1 | 0;
       var $109 = ($107 | 0) > 0;
       if (!($104 >>> 0 > $__0362 >>> 0 & $109)) {
        break;
       }
       var $__d_1381 = $104;
       var $__f_0382 = $107;
       var $103 = HEAP32[$__me >> 2];
      }
      var $scevgep417 = $__d_0 + $umax | 0;
      if ($109) {
       var $__f_0_lcssa426 = $scevgep415416;
       var $__d_1_lcssa428 = $scevgep417;
       label = 1739;
      } else {
       var $114 = 0;
       var $__f_0_lcssa425 = $scevgep415416;
       var $__d_1_lcssa427 = $scevgep417;
      }
     } else {
      var $__f_0_lcssa426 = $__fd;
      var $__d_1_lcssa428 = $__d_0;
      label = 1739;
     }
     if (label == 1739) {
      label = 0;
      var $__d_1_lcssa428;
      var $__f_0_lcssa426;
      var $114 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($__ct, 48);
      var $__f_0_lcssa425 = $__f_0_lcssa426;
      var $__d_1_lcssa427 = $__d_1_lcssa428;
     }
     var $__d_1_lcssa427;
     var $__f_0_lcssa425;
     var $114;
     var $116 = HEAP32[$__me >> 2];
     HEAP32[$__me >> 2] = $116 + 1;
     if (($__f_0_lcssa425 | 0) > 0) {
      var $__f_1388 = $__f_0_lcssa425;
      var $118 = $116;
      while (1) {
       var $118;
       var $__f_1388;
       HEAP8[$118] = $114;
       var $119 = $__f_1388 - 1 | 0;
       var $121 = HEAP32[$__me >> 2];
       HEAP32[$__me >> 2] = $121 + 1;
       if (($119 | 0) > 0) {
        var $__f_1388 = $119;
        var $118 = $121;
       } else {
        var $_lcssa387 = $121;
        break;
       }
      }
     } else {
      var $_lcssa387 = $116;
     }
     var $_lcssa387;
     HEAP8[$_lcssa387] = $__dp;
     var $__d_2 = $__d_1_lcssa427;
    } else {
     var $__d_2 = $__d_0;
    }
    var $__d_2;
    if (($__d_2 | 0) == ($__0362 | 0)) {
     var $129 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($__ct, 48);
     var $130 = HEAP32[$__me >> 2];
     HEAP32[$__me >> 2] = $130 + 1;
     HEAP8[$130] = $129;
    } else {
     var $133 = HEAP8[$17];
     var $134 = $133 & 255;
     if (($134 & 1 | 0) == 0) {
      var $141 = $134 >>> 1;
     } else {
      var $141 = HEAP32[$20 >> 2];
     }
     var $141;
     if (($141 | 0) == 0) {
      var $__d_3392 = $__d_2;
      var $__ng_0393 = 0;
      var $__ig_0394 = 0;
      var $__gl_0395 = -1;
     } else {
      if (($133 & 1) == 0) {
       var $148 = $18;
      } else {
       var $148 = HEAP32[$19 >> 2];
      }
      var $148;
      var $__d_3392 = $__d_2;
      var $__ng_0393 = 0;
      var $__ig_0394 = 0;
      var $__gl_0395 = HEAP8[$148] | 0;
     }
     while (1) {
      var $__gl_0395;
      var $__ig_0394;
      var $__ng_0393;
      var $__d_3392;
      do {
       if (($__ng_0393 | 0) == ($__gl_0395 | 0)) {
        var $153 = HEAP32[$__me >> 2];
        HEAP32[$__me >> 2] = $153 + 1;
        HEAP8[$153] = $__ts;
        var $155 = $__ig_0394 + 1 | 0;
        var $156 = HEAP8[$17];
        var $157 = $156 & 255;
        if (($157 & 1 | 0) == 0) {
         var $164 = $157 >>> 1;
        } else {
         var $164 = HEAP32[$20 >> 2];
        }
        var $164;
        if ($155 >>> 0 >= $164 >>> 0) {
         var $__gl_1 = $__gl_0395;
         var $__ig_1 = $155;
         var $__ng_1 = 0;
         break;
        }
        var $168 = ($156 & 1) == 0;
        if ($168) {
         var $171 = $18;
        } else {
         var $171 = HEAP32[$19 >> 2];
        }
        var $171;
        if ((HEAP8[$171 + $155 | 0] | 0) == 127) {
         var $__gl_1 = -1;
         var $__ig_1 = $155;
         var $__ng_1 = 0;
         break;
        }
        if ($168) {
         var $178 = $18;
        } else {
         var $178 = HEAP32[$19 >> 2];
        }
        var $178;
        var $__gl_1 = HEAP8[$178 + $155 | 0] | 0;
        var $__ig_1 = $155;
        var $__ng_1 = 0;
       } else {
        var $__gl_1 = $__gl_0395;
        var $__ig_1 = $__ig_0394;
        var $__ng_1 = $__ng_0393;
       }
      } while (0);
      var $__ng_1;
      var $__ig_1;
      var $__gl_1;
      var $182 = $__d_3392 - 1 | 0;
      var $183 = HEAP8[$182];
      var $184 = HEAP32[$__me >> 2];
      HEAP32[$__me >> 2] = $184 + 1;
      HEAP8[$184] = $183;
      if (($182 | 0) == ($__0362 | 0)) {
       break;
      } else {
       var $__d_3392 = $182;
       var $__ng_0393 = $__ng_1 + 1 | 0;
       var $__ig_0394 = $__ig_1;
       var $__gl_0395 = $__gl_1;
      }
     }
    }
    var $188 = HEAP32[$__me >> 2];
    if (($86 | 0) == ($188 | 0)) {
     var $_2 = $__0362;
     break;
    }
    var $190 = $188 - 1 | 0;
    if ($86 >>> 0 < $190 >>> 0) {
     var $_0359398 = $86;
     var $192 = $190;
    } else {
     var $_2 = $__0362;
     break;
    }
    while (1) {
     var $192;
     var $_0359398;
     var $193 = HEAP8[$_0359398];
     HEAP8[$_0359398] = HEAP8[$192];
     HEAP8[$192] = $193;
     var $195 = $_0359398 + 1 | 0;
     var $196 = $192 - 1 | 0;
     if ($195 >>> 0 < $196 >>> 0) {
      var $_0359398 = $195;
      var $192 = $196;
     } else {
      var $_2 = $__0362;
      break;
     }
    }
   } else if (($25 | 0) == 1) {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    var $33 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($__ct, 32);
    var $34 = HEAP32[$__me >> 2];
    HEAP32[$__me >> 2] = $34 + 1;
    HEAP8[$34] = $33;
    var $_2 = $_0362404;
   } else if (($25 | 0) == 3) {
    var $37 = HEAP8[$3];
    var $38 = $37 & 255;
    if (($38 & 1 | 0) == 0) {
     var $45 = $38 >>> 1;
    } else {
     var $45 = HEAP32[$6 >> 2];
    }
    var $45;
    if (($45 | 0) == 0) {
     var $_2 = $_0362404;
     break;
    }
    if (($37 & 1) == 0) {
     var $52 = $4;
    } else {
     var $52 = HEAP32[$5 >> 2];
    }
    var $52;
    var $53 = HEAP8[$52];
    var $54 = HEAP32[$__me >> 2];
    HEAP32[$__me >> 2] = $54 + 1;
    HEAP8[$54] = $53;
    var $_2 = $_0362404;
   } else if (($25 | 0) == 2) {
    var $57 = HEAP8[$8];
    var $58 = $57 & 255;
    var $60 = ($58 & 1 | 0) == 0;
    if ($60) {
     var $65 = $58 >>> 1;
    } else {
     var $65 = HEAP32[$12 >> 2];
    }
    var $65;
    if (($65 | 0) == 0 | $10) {
     var $_2 = $_0362404;
     break;
    }
    if (($57 & 1) == 0) {
     var $72 = $11;
    } else {
     var $72 = HEAP32[$13 >> 2];
    }
    var $72;
    if ($60) {
     var $77 = $58 >>> 1;
    } else {
     var $77 = HEAP32[$12 >> 2];
    }
    var $77;
    var $78 = $72 + $77 | 0;
    var $79 = HEAP32[$__me >> 2];
    if (($72 | 0) == ($78 | 0)) {
     var $_0_lcssa = $79;
    } else {
     var $_sroa_0364_0400 = $72;
     var $_0401 = $79;
     while (1) {
      var $_0401;
      var $_sroa_0364_0400;
      HEAP8[$_0401] = HEAP8[$_sroa_0364_0400];
      var $82 = $_sroa_0364_0400 + 1 | 0;
      var $83 = $_0401 + 1 | 0;
      if (($82 | 0) == ($78 | 0)) {
       var $_0_lcssa = $83;
       break;
      } else {
       var $_sroa_0364_0400 = $82;
       var $_0401 = $83;
      }
     }
    }
    var $_0_lcssa;
    HEAP32[$__me >> 2] = $_0_lcssa;
    var $_2 = $_0362404;
   } else if (($25 | 0) == 0) {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    var $_2 = $_0362404;
   } else {
    var $_2 = $_0362404;
   }
  } while (0);
  var $_2;
  var $198 = $__p_0405 + 1 | 0;
  if ($198 >>> 0 < 4) {
   var $_0362404 = $_2;
   var $__p_0405 = $198;
  } else {
   break;
  }
 }
 var $201 = HEAP8[$3];
 var $202 = $201 & 255;
 var $204 = ($202 & 1 | 0) == 0;
 if ($204) {
  var $209 = $202 >>> 1;
 } else {
  var $209 = HEAP32[$6 >> 2];
 }
 var $209;
 if ($209 >>> 0 > 1) {
  if (($201 & 1) == 0) {
   var $216 = $4;
  } else {
   var $216 = HEAP32[$5 >> 2];
  }
  var $216;
  if ($204) {
   var $221 = $202 >>> 1;
  } else {
   var $221 = HEAP32[$6 >> 2];
  }
  var $221;
  var $222 = $216 + $221 | 0;
  var $223 = HEAP32[$__me >> 2];
  var $_sroa_0372_0377 = $216 + 1 | 0;
  if (($_sroa_0372_0377 | 0) == ($222 | 0)) {
   var $_0361_lcssa = $223;
  } else {
   var $_0361378 = $223;
   var $_sroa_0372_0379 = $_sroa_0372_0377;
   while (1) {
    var $_sroa_0372_0379;
    var $_0361378;
    HEAP8[$_0361378] = HEAP8[$_sroa_0372_0379];
    var $226 = $_0361378 + 1 | 0;
    var $_sroa_0372_0 = $_sroa_0372_0379 + 1 | 0;
    if (($_sroa_0372_0 | 0) == ($222 | 0)) {
     var $_0361_lcssa = $226;
     break;
    } else {
     var $_0361378 = $226;
     var $_sroa_0372_0379 = $_sroa_0372_0;
    }
   }
  }
  var $_0361_lcssa;
  HEAP32[$__me >> 2] = $_0361_lcssa;
 }
 var $229 = $__flags & 176;
 if (($229 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  return;
 } else if (($229 | 0) == 16) {
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__pat = sp + 16;
 var $__dp = sp + 24;
 var $__ts = sp + 32;
 var $__grp = sp + 40;
 var $__grp246 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = $__sym;
 var $__sn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $2 = $__sn;
 var $__fd = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mbuf = STACKTOP;
 STACKTOP = STACKTOP + 100 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mi = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__me = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 28 >> 2];
 var $5 = $4;
 var $7 = $4 + 4 | 0;
 tempValue = HEAP32[$7 >> 2], HEAP32[$7 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21568 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21568;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i);
 }
 var $14 = HEAP32[21572 >> 2] - 1 | 0;
 var $20 = HEAP32[$4 + 8 >> 2];
 do {
  if (HEAP32[$4 + 12 >> 2] - $20 >> 2 >>> 0 > $14 >>> 0) {
   var $27 = HEAP32[$20 + ($14 << 2) >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   var $31 = $27;
   var $32 = $__digits;
   var $33 = $__digits;
   var $34 = HEAP8[$33];
   var $35 = $34 & 255;
   if (($35 & 1 | 0) == 0) {
    var $43 = $35 >>> 1;
   } else {
    var $43 = HEAP32[$__digits + 4 >> 2];
   }
   var $43;
   if (($43 | 0) == 0) {
    var $61 = 0;
   } else {
    if (($34 & 1) == 0) {
     var $53 = $32 + 1 | 0;
    } else {
     var $53 = HEAP32[$__digits + 8 >> 2];
    }
    var $53;
    var $54 = HEAP8[$53];
    var $61 = $54 << 24 >> 24 == FUNCTION_TABLE[HEAP32[HEAP32[$27 >> 2] + 28 >> 2]]($31, 45) << 24 >> 24;
   }
   var $61;
   HEAP32[$__grp246 >> 2] = 0;
   HEAP32[$__grp246 + 4 >> 2] = 0;
   HEAP32[$__grp246 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $61, $5, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
   var $63 = $__mbuf | 0;
   var $64 = HEAP8[$33];
   var $65 = $64 & 255;
   var $67 = ($65 & 1 | 0) == 0;
   if ($67) {
    var $73 = $65 >>> 1;
   } else {
    var $73 = HEAP32[$__digits + 4 >> 2];
   }
   var $73;
   var $74 = HEAP32[$__fd >> 2];
   if (($73 | 0) > ($74 | 0)) {
    if ($67) {
     var $82 = $65 >>> 1;
    } else {
     var $82 = HEAP32[$__digits + 4 >> 2];
    }
    var $82;
    var $86 = HEAPU8[$2];
    if (($86 & 1 | 0) == 0) {
     var $94 = $86 >>> 1;
    } else {
     var $94 = HEAP32[$__sn + 4 >> 2];
    }
    var $94;
    var $96 = HEAPU8[$1];
    if (($96 & 1 | 0) == 0) {
     var $104 = $96 >>> 1;
    } else {
     var $104 = HEAP32[$__sym + 4 >> 2];
    }
    var $104;
    var $_pn = ($82 - $74 << 1 | 1) + $94 + $104 | 0;
   } else {
    var $110 = HEAPU8[$2];
    if (($110 & 1 | 0) == 0) {
     var $118 = $110 >>> 1;
    } else {
     var $118 = HEAP32[$__sn + 4 >> 2];
    }
    var $118;
    var $120 = HEAPU8[$1];
    if (($120 & 1 | 0) == 0) {
     var $128 = $120 >>> 1;
    } else {
     var $128 = HEAP32[$__sym + 4 >> 2];
    }
    var $128;
    var $_pn = $118 + 2 + $128 | 0;
   }
   var $_pn;
   var $132 = $_pn + $74 | 0;
   do {
    if ($132 >>> 0 > 100) {
     var $134 = _malloc($132);
     if (($134 | 0) != 0) {
      var $__mb_0 = $134;
      var $__h_sroa_0_1 = $134;
      break;
     }
     var $137 = ___cxa_allocate_exception(4);
     HEAP32[$137 >> 2] = 9744;
     ___cxa_throw($137, 15960, 74);
    } else {
     var $__mb_0 = $63;
     var $__h_sroa_0_1 = 0;
    }
   } while (0);
   var $__h_sroa_0_1;
   var $__mb_0;
   if (($64 & 1) == 0) {
    var $166 = $32 + 1 | 0;
   } else {
    var $166 = HEAP32[$__digits + 8 >> 2];
   }
   var $166;
   if ($67) {
    var $172 = $65 >>> 1;
   } else {
    var $172 = HEAP32[$__digits + 4 >> 2];
   }
   var $172;
   __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0, $__mi, $__me, HEAP32[$__iob + 4 >> 2], $166, $166 + $172 | 0, $31, $61, $__pat, HEAP8[$__dp], HEAP8[$__ts], $__grp, $__sym, $__sn, $74);
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, HEAP32[$__s >> 2], $__mb_0, HEAP32[$__mi >> 2], HEAP32[$__me >> 2], $__iob, $__fl);
   if (($__h_sroa_0_1 | 0) != 0) {
    _free($__h_sroa_0_1);
   }
   do {
    if ((HEAP8[$2] & 1) != 0) {
     var $189 = HEAP32[$__sn + 8 >> 2];
     if (($189 | 0) == 0) {
      break;
     }
     _free($189);
    }
   } while (0);
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $197 = HEAP32[$__sym + 8 >> 2];
     if (($197 | 0) == 0) {
      break;
     }
     _free($197);
    }
   } while (0);
   do {
    if ((HEAP8[$__grp246] & 1) != 0) {
     var $205 = HEAP32[$__grp + 8 >> 2];
     if (($205 | 0) == 0) {
      break;
     }
     _free($205);
    }
   } while (0);
   var $209 = $4 + 4 | 0;
   if (((tempValue = HEAP32[$209 >> 2], HEAP32[$209 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $29 = ___cxa_allocate_exception(4);
 HEAP32[$29 >> 2] = 9776;
 ___cxa_throw($29, 15976, 602);
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var tempVarArgs = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 568 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__bb = sp + 120;
 var $__pat = sp + 528;
 var $__dp = sp + 536;
 var $__ts = sp + 544;
 var $__grp = sp + 552;
 var $__grp289 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = $__sym;
 var $__sn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $2 = $__sn;
 var $__fd = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mbuf = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 var $__mi = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__me = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $3 = sp + 16 | 0;
 HEAP32[$__bb >> 2] = $3;
 var $4 = sp + 128 | 0;
 var $5 = _snprintf($3, 100, 7032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__units, tempVarArgs));
 STACKTOP = tempVarArgs;
 do {
  if ($5 >>> 0 > 99) {
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   var $20 = __ZNSt3__112__asprintf_lEPPcPvPKcz($__bb, HEAP32[19888 >> 2], 7032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempVarArgs >> 3] = $__units, tempVarArgs));
   STACKTOP = tempVarArgs;
   var $22 = HEAP32[$__bb >> 2];
   if (($22 | 0) == 0) {
    var $25 = ___cxa_allocate_exception(4);
    HEAP32[$25 >> 2] = 9744;
    ___cxa_throw($25, 15960, 74);
   }
   var $32 = _malloc($20 << 2);
   var $33 = $32;
   if (($32 | 0) != 0) {
    var $__db_0 = $33;
    var $__n_0 = $20;
    var $__hn_sroa_0_1 = $22;
    var $__hd_sroa_0_1 = $33;
    break;
   }
   var $36 = ___cxa_allocate_exception(4);
   HEAP32[$36 >> 2] = 9744;
   ___cxa_throw($36, 15960, 74);
  } else {
   var $__db_0 = $4;
   var $__n_0 = $5;
   var $__hn_sroa_0_1 = 0;
   var $__hd_sroa_0_1 = 0;
  }
 } while (0);
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 var $40 = HEAP32[$__iob + 28 >> 2];
 var $41 = $40;
 var $43 = $40 + 4 | 0;
 tempValue = HEAP32[$43 >> 2], HEAP32[$43 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $50 = HEAP32[21564 >> 2] - 1 | 0;
 var $56 = HEAP32[$40 + 8 >> 2];
 do {
  if (HEAP32[$40 + 12 >> 2] - $56 >> 2 >>> 0 > $50 >>> 0) {
   var $63 = HEAP32[$56 + ($50 << 2) >> 2];
   if (($63 | 0) == 0) {
    break;
   }
   var $67 = $63;
   var $68 = HEAP32[$__bb >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$63 >> 2] + 48 >> 2]]($67, $68, $68 + $__n_0 | 0, $__db_0);
   if (($__n_0 | 0) == 0) {
    var $80 = 0;
   } else {
    var $80 = (HEAP8[HEAP32[$__bb >> 2]] | 0) == 45;
   }
   var $80;
   HEAP32[$__grp289 >> 2] = 0;
   HEAP32[$__grp289 + 4 >> 2] = 0;
   HEAP32[$__grp289 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $80, $41, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
   var $82 = $__mbuf | 0;
   var $83 = HEAP32[$__fd >> 2];
   if (($__n_0 | 0) > ($83 | 0)) {
    var $89 = HEAPU8[$2];
    if (($89 & 1 | 0) == 0) {
     var $97 = $89 >>> 1;
    } else {
     var $97 = HEAP32[$__sn + 4 >> 2];
    }
    var $97;
    var $99 = HEAPU8[$1];
    if (($99 & 1 | 0) == 0) {
     var $107 = $99 >>> 1;
    } else {
     var $107 = HEAP32[$__sym + 4 >> 2];
    }
    var $107;
    var $_pn = ($__n_0 - $83 << 1 | 1) + $97 + $107 | 0;
   } else {
    var $113 = HEAPU8[$2];
    if (($113 & 1 | 0) == 0) {
     var $121 = $113 >>> 1;
    } else {
     var $121 = HEAP32[$__sn + 4 >> 2];
    }
    var $121;
    var $123 = HEAPU8[$1];
    if (($123 & 1 | 0) == 0) {
     var $131 = $123 >>> 1;
    } else {
     var $131 = HEAP32[$__sym + 4 >> 2];
    }
    var $131;
    var $_pn = $121 + 2 + $131 | 0;
   }
   var $_pn;
   var $135 = $_pn + $83 | 0;
   do {
    if ($135 >>> 0 > 100) {
     var $138 = _malloc($135 << 2);
     var $139 = $138;
     if (($138 | 0) != 0) {
      var $__mb_0 = $139;
      var $__hw_sroa_0_1 = $139;
      break;
     }
     var $142 = ___cxa_allocate_exception(4);
     HEAP32[$142 >> 2] = 9744;
     ___cxa_throw($142, 15960, 74);
    } else {
     var $__mb_0 = $82;
     var $__hw_sroa_0_1 = 0;
    }
   } while (0);
   var $__hw_sroa_0_1;
   var $__mb_0;
   __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0, $__mi, $__me, HEAP32[$__iob + 4 >> 2], $__db_0, $__db_0 + ($__n_0 << 2) | 0, $67, $80, $__pat, HEAP32[$__dp >> 2], HEAP32[$__ts >> 2], $__grp, $__sym, $__sn, $83);
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, HEAP32[$__s >> 2], $__mb_0, HEAP32[$__mi >> 2], HEAP32[$__me >> 2], $__iob, $__fl);
   if (($__hw_sroa_0_1 | 0) != 0) {
    _free($__hw_sroa_0_1);
   }
   do {
    if ((HEAP8[$2] & 1) != 0) {
     var $179 = HEAP32[$__sn + 8 >> 2];
     if (($179 | 0) == 0) {
      break;
     }
     _free($179);
    }
   } while (0);
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $188 = HEAP32[$__sym + 8 >> 2];
     if (($188 | 0) == 0) {
      break;
     }
     _free($188);
    }
   } while (0);
   do {
    if ((HEAP8[$__grp289] & 1) != 0) {
     var $197 = HEAP32[$__grp + 8 >> 2];
     if (($197 | 0) == 0) {
      break;
     }
     _free($197);
    }
   } while (0);
   var $201 = $40 + 4 | 0;
   if (((tempValue = HEAP32[$201 >> 2], HEAP32[$201 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$40 >> 2] + 8 >> 2]]($40);
   }
   if (($__hd_sroa_0_1 | 0) != 0) {
    _free($__hd_sroa_0_1);
   }
   if (($__hn_sroa_0_1 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   _free($__hn_sroa_0_1);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $65 = ___cxa_allocate_exception(4);
 HEAP32[$65 >> 2] = 9776;
 ___cxa_throw($65, 15976, 602);
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc_0_0_val, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 var $__p_i_i_i519 = sp;
 var $__p_i_i_i = sp + 16;
 var $1 = sp + 32;
 var $tmpcast518 = $1;
 var $2 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $3 = $2;
 var $4 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast517 = $4;
 var $5 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $6 = $5;
 var $7 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $8 = $7;
 var $9 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $10 = $9;
 var $11 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast516 = $11;
 var $12 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $13 = $12;
 var $14 = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $tmpcast = $14;
 var $15 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $16 = $15;
 var $17 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $18 = $17;
 var $19 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $20 = $19;
 if ($__intl) {
  if ((HEAP32[22024 >> 2] | 0) != -1) {
   HEAP32[$__p_i_i_i >> 2] = 22024;
   HEAP32[$__p_i_i_i + 4 >> 2] = 26;
   HEAP32[$__p_i_i_i + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(22024, $__p_i_i_i);
  }
  var $27 = HEAP32[22028 >> 2] - 1 | 0;
  var $31 = HEAP32[$__loc_0_0_val + 8 >> 2];
  if (HEAP32[$__loc_0_0_val + 12 >> 2] - $31 >> 2 >>> 0 <= $27 >>> 0) {
   var $40 = ___cxa_allocate_exception(4);
   var $41 = $40;
   HEAP32[$41 >> 2] = 9776;
   ___cxa_throw($40, 15976, 602);
  }
  var $38 = HEAP32[$31 + ($27 << 2) >> 2];
  if (($38 | 0) == 0) {
   var $40 = ___cxa_allocate_exception(4);
   var $41 = $40;
   HEAP32[$41 >> 2] = 9776;
   ___cxa_throw($40, 15976, 602);
  }
  var $42 = $38;
  var $44 = HEAP32[$38 >> 2];
  if ($__neg) {
   FUNCTION_TABLE[HEAP32[$44 + 44 >> 2]]($tmpcast518, $42);
   var $48 = $__pat;
   tempBigInt = HEAP32[$1 >> 2];
   HEAP8[$48] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$48 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 32 >> 2]]($2, $42);
   var $54 = $__sn;
   if ((HEAP8[$54] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$54] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$54 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$54 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$54 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE[HEAP32[$44 + 40 >> 2]]($tmpcast517, $42);
   var $69 = $__pat;
   tempBigInt = HEAP32[$4 >> 2];
   HEAP8[$69] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$69 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$69 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$69 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 28 >> 2]]($5, $42);
   var $75 = $__sn;
   if ((HEAP8[$75] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$75] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$75 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$75 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$75 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$6 + 8 >> 2] = 0;
  }
  var $87 = $38;
  HEAP32[$__dp >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$87 >> 2] + 12 >> 2]]($42);
  HEAP32[$__ts >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$87 >> 2] + 16 >> 2]]($42);
  FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 20 >> 2]]($7, $42);
  var $100 = $__grp;
  if ((HEAP8[$100] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0;
   HEAP8[$100] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$100 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$100 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$100 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 24 >> 2]]($9, $42);
  var $117 = $__sym;
  if ((HEAP8[$117] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$117] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$117 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$117 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$117 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  var $storemerge = FUNCTION_TABLE[HEAP32[HEAP32[$87 >> 2] + 36 >> 2]]($42);
  var $storemerge;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[22032 >> 2] | 0) != -1) {
   HEAP32[$__p_i_i_i519 >> 2] = 22032;
   HEAP32[$__p_i_i_i519 + 4 >> 2] = 26;
   HEAP32[$__p_i_i_i519 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(22032, $__p_i_i_i519);
  }
  var $139 = HEAP32[22036 >> 2] - 1 | 0;
  var $143 = HEAP32[$__loc_0_0_val + 8 >> 2];
  if (HEAP32[$__loc_0_0_val + 12 >> 2] - $143 >> 2 >>> 0 <= $139 >>> 0) {
   var $152 = ___cxa_allocate_exception(4);
   var $153 = $152;
   HEAP32[$153 >> 2] = 9776;
   ___cxa_throw($152, 15976, 602);
  }
  var $150 = HEAP32[$143 + ($139 << 2) >> 2];
  if (($150 | 0) == 0) {
   var $152 = ___cxa_allocate_exception(4);
   var $153 = $152;
   HEAP32[$153 >> 2] = 9776;
   ___cxa_throw($152, 15976, 602);
  }
  var $154 = $150;
  var $156 = HEAP32[$150 >> 2];
  if ($__neg) {
   FUNCTION_TABLE[HEAP32[$156 + 44 >> 2]]($tmpcast516, $154);
   var $160 = $__pat;
   tempBigInt = HEAP32[$11 >> 2];
   HEAP8[$160] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$160 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$160 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$160 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$150 >> 2] + 32 >> 2]]($12, $154);
   var $166 = $__sn;
   if ((HEAP8[$166] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$166] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$166 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$166 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
   HEAP32[$166 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   HEAP32[$13 + 8 >> 2] = 0;
  } else {
   FUNCTION_TABLE[HEAP32[$156 + 40 >> 2]]($tmpcast, $154);
   var $181 = $__pat;
   tempBigInt = HEAP32[$14 >> 2];
   HEAP8[$181] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$181 + 1 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$181 + 2 | 0] = tempBigInt & 255;
   tempBigInt = tempBigInt >> 8;
   HEAP8[$181 + 3 | 0] = tempBigInt & 255;
   FUNCTION_TABLE[HEAP32[HEAP32[$150 >> 2] + 28 >> 2]]($15, $154);
   var $187 = $__sn;
   if ((HEAP8[$187] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$187] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn);
   HEAP32[$187 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$187 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
   HEAP32[$187 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$16 + 4 >> 2] = 0;
   HEAP32[$16 + 8 >> 2] = 0;
  }
  var $199 = $150;
  HEAP32[$__dp >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$199 >> 2] + 12 >> 2]]($154);
  HEAP32[$__ts >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$199 >> 2] + 16 >> 2]]($154);
  FUNCTION_TABLE[HEAP32[HEAP32[$150 >> 2] + 20 >> 2]]($17, $154);
  var $212 = $__grp;
  if ((HEAP8[$212] & 1) == 0) {
   HEAP8[$__grp + 1 | 0] = 0;
   HEAP8[$212] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2]] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp);
  HEAP32[$212 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$212 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
  HEAP32[$212 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
  HEAP32[$18 + 8 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$150 >> 2] + 24 >> 2]]($19, $154);
  var $229 = $__sym;
  if ((HEAP8[$229] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$229] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym);
  HEAP32[$229 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$229 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
  HEAP32[$229 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
  HEAP32[$20 >> 2] = 0;
  HEAP32[$20 + 4 >> 2] = 0;
  HEAP32[$20 + 8 >> 2] = 0;
  var $storemerge = FUNCTION_TABLE[HEAP32[HEAP32[$199 >> 2] + 36 >> 2]]($154);
  var $storemerge;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 HEAP32[$__me >> 2] = $__mb;
 var $1 = $__ct;
 var $2 = $__sn;
 var $3 = $__sn + 4 | 0;
 var $4 = $__sn + 8 | 0;
 var $5 = $__sym;
 var $7 = ($__flags & 512 | 0) == 0;
 var $8 = $__sym + 4 | 0;
 var $9 = $__sym + 8 | 0;
 var $10 = $__ct;
 var $11 = ($__fd | 0) > 0;
 var $13 = $__grp;
 var $14 = $__grp + 1 | 0;
 var $15 = $__grp + 8 | 0;
 var $16 = $__grp + 4 | 0;
 var $_0361402 = $__db;
 var $__p_0403 = 0;
 while (1) {
  var $__p_0403;
  var $_0361402;
  var $20 = HEAP8[$__pat + $__p_0403 | 0] | 0;
  do {
   if (($20 | 0) == 4) {
    var $84 = HEAP32[$__me >> 2];
    var $__0361 = $__neg ? $_0361402 + 4 | 0 : $_0361402;
    var $__d_0 = $__0361;
    while (1) {
     var $__d_0;
     if ($__d_0 >>> 0 >= $__de >>> 0) {
      break;
     }
     if (FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 12 >> 2]]($__ct, 2048, HEAP32[$__d_0 >> 2])) {
      var $__d_0 = $__d_0 + 4 | 0;
     } else {
      break;
     }
    }
    if ($11) {
     do {
      if ($__d_0 >>> 0 > $__0361 >>> 0) {
       var $__d_1379 = $__d_0;
       var $__f_0380 = $__fd;
       while (1) {
        var $__f_0380;
        var $__d_1379;
        var $97 = $__d_1379 - 4 | 0;
        var $98 = HEAP32[$97 >> 2];
        var $99 = HEAP32[$__me >> 2];
        HEAP32[$__me >> 2] = $99 + 4;
        HEAP32[$99 >> 2] = $98;
        var $101 = $__f_0380 - 1 | 0;
        var $103 = ($101 | 0) > 0;
        if ($97 >>> 0 > $__0361 >>> 0 & $103) {
         var $__d_1379 = $97;
         var $__f_0380 = $101;
        } else {
         break;
        }
       }
       if ($103) {
        var $__f_0_lcssa424 = $101;
        var $__d_1_lcssa426 = $97;
        label = 2061;
        break;
       }
       var $104 = HEAP32[$__me >> 2];
       HEAP32[$__me >> 2] = $104 + 4;
       var $_lcssa385 = $104;
       var $__d_1_lcssa4251 = $97;
      } else {
       var $__f_0_lcssa424 = $__fd;
       var $__d_1_lcssa426 = $__d_0;
       label = 2061;
      }
     } while (0);
     do {
      if (label == 2061) {
       label = 0;
       var $__d_1_lcssa426;
       var $__f_0_lcssa424;
       var $109 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($__ct, 48);
       var $111 = HEAP32[$__me >> 2];
       HEAP32[$__me >> 2] = $111 + 4;
       if (($__f_0_lcssa424 | 0) > 0) {
        var $__f_1386 = $__f_0_lcssa424;
        var $113 = $111;
       } else {
        var $_lcssa385 = $111;
        var $__d_1_lcssa4251 = $__d_1_lcssa426;
        break;
       }
       while (1) {
        var $113;
        var $__f_1386;
        HEAP32[$113 >> 2] = $109;
        var $114 = $__f_1386 - 1 | 0;
        var $116 = HEAP32[$__me >> 2];
        HEAP32[$__me >> 2] = $116 + 4;
        if (($114 | 0) > 0) {
         var $__f_1386 = $114;
         var $113 = $116;
        } else {
         var $_lcssa385 = $116;
         var $__d_1_lcssa4251 = $__d_1_lcssa426;
         break;
        }
       }
      }
     } while (0);
     var $__d_1_lcssa4251;
     var $_lcssa385;
     HEAP32[$_lcssa385 >> 2] = $__dp;
     var $__d_2 = $__d_1_lcssa4251;
    } else {
     var $__d_2 = $__d_0;
    }
    var $__d_2;
    if (($__d_2 | 0) == ($__0361 | 0)) {
     var $124 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($__ct, 48);
     var $125 = HEAP32[$__me >> 2];
     HEAP32[$__me >> 2] = $125 + 4;
     HEAP32[$125 >> 2] = $124;
    } else {
     var $128 = HEAP8[$13];
     var $129 = $128 & 255;
     if (($129 & 1 | 0) == 0) {
      var $136 = $129 >>> 1;
     } else {
      var $136 = HEAP32[$16 >> 2];
     }
     var $136;
     if (($136 | 0) == 0) {
      var $__d_3390 = $__d_2;
      var $__ng_0391 = 0;
      var $__ig_0392 = 0;
      var $__gl_0393 = -1;
     } else {
      if (($128 & 1) == 0) {
       var $143 = $14;
      } else {
       var $143 = HEAP32[$15 >> 2];
      }
      var $143;
      var $__d_3390 = $__d_2;
      var $__ng_0391 = 0;
      var $__ig_0392 = 0;
      var $__gl_0393 = HEAP8[$143] | 0;
     }
     while (1) {
      var $__gl_0393;
      var $__ig_0392;
      var $__ng_0391;
      var $__d_3390;
      do {
       if (($__ng_0391 | 0) == ($__gl_0393 | 0)) {
        var $148 = HEAP32[$__me >> 2];
        HEAP32[$__me >> 2] = $148 + 4;
        HEAP32[$148 >> 2] = $__ts;
        var $150 = $__ig_0392 + 1 | 0;
        var $151 = HEAP8[$13];
        var $152 = $151 & 255;
        if (($152 & 1 | 0) == 0) {
         var $159 = $152 >>> 1;
        } else {
         var $159 = HEAP32[$16 >> 2];
        }
        var $159;
        if ($150 >>> 0 >= $159 >>> 0) {
         var $__gl_1 = $__gl_0393;
         var $__ig_1 = $150;
         var $__ng_1 = 0;
         break;
        }
        var $163 = ($151 & 1) == 0;
        if ($163) {
         var $166 = $14;
        } else {
         var $166 = HEAP32[$15 >> 2];
        }
        var $166;
        if ((HEAP8[$166 + $150 | 0] | 0) == 127) {
         var $__gl_1 = -1;
         var $__ig_1 = $150;
         var $__ng_1 = 0;
         break;
        }
        if ($163) {
         var $173 = $14;
        } else {
         var $173 = HEAP32[$15 >> 2];
        }
        var $173;
        var $__gl_1 = HEAP8[$173 + $150 | 0] | 0;
        var $__ig_1 = $150;
        var $__ng_1 = 0;
       } else {
        var $__gl_1 = $__gl_0393;
        var $__ig_1 = $__ig_0392;
        var $__ng_1 = $__ng_0391;
       }
      } while (0);
      var $__ng_1;
      var $__ig_1;
      var $__gl_1;
      var $177 = $__d_3390 - 4 | 0;
      var $178 = HEAP32[$177 >> 2];
      var $179 = HEAP32[$__me >> 2];
      HEAP32[$__me >> 2] = $179 + 4;
      HEAP32[$179 >> 2] = $178;
      if (($177 | 0) == ($__0361 | 0)) {
       break;
      } else {
       var $__d_3390 = $177;
       var $__ng_0391 = $__ng_1 + 1 | 0;
       var $__ig_0392 = $__ig_1;
       var $__gl_0393 = $__gl_1;
      }
     }
    }
    var $183 = HEAP32[$__me >> 2];
    if (($84 | 0) == ($183 | 0)) {
     var $_2 = $__0361;
     break;
    }
    var $185 = $183 - 4 | 0;
    if ($84 >>> 0 < $185 >>> 0) {
     var $_0358396 = $84;
     var $187 = $185;
    } else {
     var $_2 = $__0361;
     break;
    }
    while (1) {
     var $187;
     var $_0358396;
     var $188 = HEAP32[$_0358396 >> 2];
     HEAP32[$_0358396 >> 2] = HEAP32[$187 >> 2];
     HEAP32[$187 >> 2] = $188;
     var $190 = $_0358396 + 4 | 0;
     var $191 = $187 - 4 | 0;
     if ($190 >>> 0 < $191 >>> 0) {
      var $_0358396 = $190;
      var $187 = $191;
     } else {
      var $_2 = $__0361;
      break;
     }
    }
   } else if (($20 | 0) == 1) {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    var $28 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($__ct, 32);
    var $29 = HEAP32[$__me >> 2];
    HEAP32[$__me >> 2] = $29 + 4;
    HEAP32[$29 >> 2] = $28;
    var $_2 = $_0361402;
   } else if (($20 | 0) == 3) {
    var $32 = HEAP8[$2];
    var $33 = $32 & 255;
    if (($33 & 1 | 0) == 0) {
     var $40 = $33 >>> 1;
    } else {
     var $40 = HEAP32[$3 >> 2];
    }
    var $40;
    if (($40 | 0) == 0) {
     var $_2 = $_0361402;
     break;
    }
    if (($32 & 1) == 0) {
     var $47 = $3;
    } else {
     var $47 = HEAP32[$4 >> 2];
    }
    var $47;
    var $48 = HEAP32[$47 >> 2];
    var $49 = HEAP32[$__me >> 2];
    HEAP32[$__me >> 2] = $49 + 4;
    HEAP32[$49 >> 2] = $48;
    var $_2 = $_0361402;
   } else if (($20 | 0) == 2) {
    var $52 = HEAP8[$5];
    var $53 = $52 & 255;
    var $55 = ($53 & 1 | 0) == 0;
    if ($55) {
     var $60 = $53 >>> 1;
    } else {
     var $60 = HEAP32[$8 >> 2];
    }
    var $60;
    if (($60 | 0) == 0 | $7) {
     var $_2 = $_0361402;
     break;
    }
    if (($52 & 1) == 0) {
     var $_in427 = $8;
    } else {
     var $_in427 = HEAP32[$9 >> 2];
    }
    var $_in427;
    if ($55) {
     var $72 = $53 >>> 1;
    } else {
     var $72 = HEAP32[$8 >> 2];
    }
    var $72;
    var $73 = $_in427 + ($72 << 2) | 0;
    var $74 = HEAP32[$__me >> 2];
    if (($_in427 | 0) == ($73 | 0)) {
     var $_0_lcssa = $74;
    } else {
     var $77 = ($_in427 + ($72 - 1 << 2) + -$_in427 | 0) >>> 2;
     var $_sroa_0362_0398 = $_in427;
     var $_0399 = $74;
     while (1) {
      var $_0399;
      var $_sroa_0362_0398;
      HEAP32[$_0399 >> 2] = HEAP32[$_sroa_0362_0398 >> 2];
      var $80 = $_sroa_0362_0398 + 4 | 0;
      if (($80 | 0) == ($73 | 0)) {
       break;
      }
      var $_sroa_0362_0398 = $80;
      var $_0399 = $_0399 + 4 | 0;
     }
     var $_0_lcssa = $74 + ($77 + 1 << 2) | 0;
    }
    var $_0_lcssa;
    HEAP32[$__me >> 2] = $_0_lcssa;
    var $_2 = $_0361402;
   } else if (($20 | 0) == 0) {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    var $_2 = $_0361402;
   } else {
    var $_2 = $_0361402;
   }
  } while (0);
  var $_2;
  var $193 = $__p_0403 + 1 | 0;
  if ($193 >>> 0 < 4) {
   var $_0361402 = $_2;
   var $__p_0403 = $193;
  } else {
   break;
  }
 }
 var $196 = HEAP8[$2];
 var $197 = $196 & 255;
 var $199 = ($197 & 1 | 0) == 0;
 if ($199) {
  var $204 = $197 >>> 1;
 } else {
  var $204 = HEAP32[$3 >> 2];
 }
 var $204;
 if ($204 >>> 0 > 1) {
  if (($196 & 1) == 0) {
   var $_in = $3;
  } else {
   var $_in = HEAP32[$4 >> 2];
  }
  var $_in;
  if ($199) {
   var $216 = $197 >>> 1;
  } else {
   var $216 = HEAP32[$3 >> 2];
  }
  var $216;
  var $217 = $_in + ($216 << 2) | 0;
  var $218 = HEAP32[$__me >> 2];
  var $_sroa_0371_0375 = $_in + 4 | 0;
  if (($_sroa_0371_0375 | 0) == ($217 | 0)) {
   var $_0360_lcssa = $218;
  } else {
   var $223 = (($_in + ($216 - 2 << 2) + -$_in | 0) >>> 2) + 1 | 0;
   var $_0360376 = $218;
   var $_sroa_0371_0377 = $_sroa_0371_0375;
   while (1) {
    var $_sroa_0371_0377;
    var $_0360376;
    HEAP32[$_0360376 >> 2] = HEAP32[$_sroa_0371_0377 >> 2];
    var $_sroa_0371_0 = $_sroa_0371_0377 + 4 | 0;
    if (($_sroa_0371_0 | 0) == ($217 | 0)) {
     break;
    } else {
     var $_0360376 = $_0360376 + 4 | 0;
     var $_sroa_0371_0377 = $_sroa_0371_0;
    }
   }
   var $_0360_lcssa = $218 + ($223 << 2) | 0;
  }
  var $_0360_lcssa;
  HEAP32[$__me >> 2] = $_0360_lcssa;
 }
 var $229 = $__flags & 176;
 if (($229 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  return;
 } else if (($229 | 0) == 16) {
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  return;
 }
}
function __ZNSt3__18messagesIcED1Ev($this) {
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 if ((HEAP8[$__nm] & 1) == 0) {
  var $12 = $__nm + 1 | 0;
 } else {
  var $12 = HEAP32[$__nm + 8 >> 2];
 }
 var $12;
 var $13 = __Z7catopenPKci($12, 200);
 return $13 >>> ((($13 | 0) != -1 | 0) >>> 0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__ndflt = sp;
 var $0 = $__ndflt;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $agg_result135 = $agg_result;
 var $2 = HEAP8[$__dflt];
 if (($2 & 1) == 0) {
  var $11 = $__dflt + 1 | 0;
 } else {
  var $11 = HEAP32[$__dflt + 8 >> 2];
 }
 var $11;
 var $12 = $2 & 255;
 if (($12 & 1 | 0) == 0) {
  var $20 = $12 >>> 1;
 } else {
  var $20 = HEAP32[$__dflt + 4 >> 2];
 }
 var $20;
 var $21 = $11 + $20 | 0;
 if ($11 >>> 0 < $21 >>> 0) {
  var $24 = $__ndflt + 1 | 0;
  var $25 = $__ndflt + 8 | 0;
  var $26 = $__ndflt + 4 | 0;
  var $27 = $__ndflt | 0;
  var $_0132 = $11;
  var $32 = 0;
  while (1) {
   var $32;
   var $_0132;
   var $33 = HEAP8[$_0132];
   if (($32 & 1) == 0) {
    var $__sz_0_i = ($32 & 255) >>> 1;
    var $__cap_0_i = 10;
   } else {
    var $__sz_0_i = HEAP32[$26 >> 2];
    var $__cap_0_i = (HEAP32[$27 >> 2] & -2) - 1 | 0;
   }
   var $__cap_0_i;
   var $__sz_0_i;
   if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0);
    var $__is_short_0_off0_in_in_i = HEAP8[$0];
   } else {
    var $__is_short_0_off0_in_in_i = $32;
   }
   var $__is_short_0_off0_in_in_i;
   if (($__is_short_0_off0_in_in_i & 1) == 0) {
    HEAP8[$0] = ($__sz_0_i << 1) + 2 & 255;
    var $_pn_i = $24;
    var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
   } else {
    var $54 = HEAP32[$25 >> 2];
    var $55 = $__sz_0_i + 1 | 0;
    HEAP32[$26 >> 2] = $55;
    var $_pn_i = $54;
    var $__p_0_sum_pre_phi_i = $55;
   }
   var $__p_0_sum_pre_phi_i;
   var $_pn_i;
   HEAP8[$_pn_i + $__sz_0_i | 0] = $33;
   HEAP8[$_pn_i + $__p_0_sum_pre_phi_i | 0] = 0;
   var $57 = $_0132 + 1 | 0;
   var $_pre18 = HEAP8[$0];
   if ($57 >>> 0 < $21 >>> 0) {
    var $_0132 = $57;
    var $32 = $_pre18;
   } else {
    break;
   }
  }
  var $68 = ($_pre18 & 1) == 0 ? $24 : HEAP32[$25 >> 2];
  var $67 = ($__c | 0) == -1 ? -1 : $__c << 1;
 } else {
  var $68 = $__ndflt + 1 | 0;
  var $67 = ($__c | 0) == -1 ? -1 : $__c << 1;
 }
 var $67;
 var $68;
 var $69 = __Z7catgetsP8_nl_catdiiPKc($67, $__set, $__msgid, $68);
 HEAP32[$agg_result135 >> 2] = 0;
 HEAP32[$agg_result135 + 4 >> 2] = 0;
 HEAP32[$agg_result135 + 8 >> 2] = 0;
 var $71 = _strlen($69);
 var $72 = $69 + $71 | 0;
 L2471 : do {
  if (($71 | 0) > 0) {
   var $75 = $agg_result + 1 | 0;
   var $76 = $agg_result + 8 | 0;
   var $77 = $agg_result + 4 | 0;
   var $78 = $agg_result | 0;
   var $_0120130 = $69;
   var $79 = 0;
   while (1) {
    var $79;
    var $_0120130;
    var $80 = HEAP8[$_0120130];
    if (($79 & 1) == 0) {
     var $__sz_0_i3 = ($79 & 255) >>> 1;
     var $__cap_0_i2 = 10;
    } else {
     var $__sz_0_i3 = HEAP32[$77 >> 2];
     var $__cap_0_i2 = (HEAP32[$78 >> 2] & -2) - 1 | 0;
    }
    var $__cap_0_i2;
    var $__sz_0_i3;
    if (($__sz_0_i3 | 0) == ($__cap_0_i2 | 0)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($agg_result, $__cap_0_i2, 1, $__cap_0_i2, $__cap_0_i2, 0);
     var $__is_short_0_off0_in_in_i4 = HEAP8[$agg_result135];
    } else {
     var $__is_short_0_off0_in_in_i4 = $79;
    }
    var $__is_short_0_off0_in_in_i4;
    if (($__is_short_0_off0_in_in_i4 & 1) == 0) {
     HEAP8[$agg_result135] = ($__sz_0_i3 << 1) + 2 & 255;
     var $_pn_i9 = $75;
     var $__p_0_sum_pre_phi_i8 = $__sz_0_i3 + 1 | 0;
    } else {
     var $101 = HEAP32[$76 >> 2];
     var $102 = $__sz_0_i3 + 1 | 0;
     HEAP32[$77 >> 2] = $102;
     var $_pn_i9 = $101;
     var $__p_0_sum_pre_phi_i8 = $102;
    }
    var $__p_0_sum_pre_phi_i8;
    var $_pn_i9;
    HEAP8[$_pn_i9 + $__sz_0_i3 | 0] = $80;
    HEAP8[$_pn_i9 + $__p_0_sum_pre_phi_i8 | 0] = 0;
    var $104 = $_0120130 + 1 | 0;
    if ($104 >>> 0 >= $72 >>> 0) {
     break L2471;
    }
    var $_0120130 = $104;
    var $79 = HEAP8[$agg_result135];
   }
  }
 } while (0);
 if ((HEAP8[$0] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $122 = HEAP32[$__ndflt + 8 >> 2];
 if (($122 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($122);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 __Z8catcloseP8_nl_catd(($__c | 0) == -1 ? -1 : $__c << 1);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 if ((HEAP8[$__nm] & 1) == 0) {
  var $12 = $__nm + 1 | 0;
 } else {
  var $12 = HEAP32[$__nm + 8 >> 2];
 }
 var $12;
 var $13 = __Z7catopenPKci($12, 200);
 return $13 >>> ((($13 | 0) != -1 | 0) >>> 0);
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 var tempParam = $__s;
 $__s = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 HEAP32[$__s >> 2] = HEAP32[tempParam >> 2];
 var $__p_i_i_i = sp;
 var $__pat = sp + 16;
 var $__dp = sp + 24;
 var $__ts = sp + 32;
 var $__grp = sp + 40;
 var $__grp246 = $__grp;
 var $__sym = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $1 = $__sym;
 var $__sn = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $2 = $__sn;
 var $__fd = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__mbuf = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 var $__mi = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $__me = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 >> 3 << 3;
 var $4 = HEAP32[$__iob + 28 >> 2];
 var $5 = $4;
 var $7 = $4 + 4 | 0;
 tempValue = HEAP32[$7 >> 2], HEAP32[$7 >> 2] = tempValue + 1, tempValue;
 if ((HEAP32[21560 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i_i >> 2] = 21560;
  HEAP32[$__p_i_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i);
 }
 var $14 = HEAP32[21564 >> 2] - 1 | 0;
 var $20 = HEAP32[$4 + 8 >> 2];
 do {
  if (HEAP32[$4 + 12 >> 2] - $20 >> 2 >>> 0 > $14 >>> 0) {
   var $27 = HEAP32[$20 + ($14 << 2) >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   var $31 = $27;
   var $32 = $__digits;
   var $33 = HEAP8[$32];
   var $34 = $33 & 255;
   if (($34 & 1 | 0) == 0) {
    var $42 = $34 >>> 1;
   } else {
    var $42 = HEAP32[$__digits + 4 >> 2];
   }
   var $42;
   if (($42 | 0) == 0) {
    var $60 = 0;
   } else {
    if (($33 & 1) == 0) {
     var $52 = $__digits + 4 | 0;
    } else {
     var $52 = HEAP32[$__digits + 8 >> 2];
    }
    var $52;
    var $53 = HEAP32[$52 >> 2];
    var $60 = ($53 | 0) == (FUNCTION_TABLE[HEAP32[HEAP32[$27 >> 2] + 44 >> 2]]($31, 45) | 0);
   }
   var $60;
   HEAP32[$__grp246 >> 2] = 0;
   HEAP32[$__grp246 + 4 >> 2] = 0;
   HEAP32[$__grp246 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   HEAP32[$2 + 8 >> 2] = 0;
   __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $60, $5, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
   var $62 = $__mbuf | 0;
   var $63 = HEAP8[$32];
   var $64 = $63 & 255;
   var $66 = ($64 & 1 | 0) == 0;
   if ($66) {
    var $72 = $64 >>> 1;
   } else {
    var $72 = HEAP32[$__digits + 4 >> 2];
   }
   var $72;
   var $73 = HEAP32[$__fd >> 2];
   if (($72 | 0) > ($73 | 0)) {
    if ($66) {
     var $81 = $64 >>> 1;
    } else {
     var $81 = HEAP32[$__digits + 4 >> 2];
    }
    var $81;
    var $85 = HEAPU8[$2];
    if (($85 & 1 | 0) == 0) {
     var $93 = $85 >>> 1;
    } else {
     var $93 = HEAP32[$__sn + 4 >> 2];
    }
    var $93;
    var $95 = HEAPU8[$1];
    if (($95 & 1 | 0) == 0) {
     var $103 = $95 >>> 1;
    } else {
     var $103 = HEAP32[$__sym + 4 >> 2];
    }
    var $103;
    var $_pn = ($81 - $73 << 1 | 1) + $93 + $103 | 0;
   } else {
    var $109 = HEAPU8[$2];
    if (($109 & 1 | 0) == 0) {
     var $117 = $109 >>> 1;
    } else {
     var $117 = HEAP32[$__sn + 4 >> 2];
    }
    var $117;
    var $119 = HEAPU8[$1];
    if (($119 & 1 | 0) == 0) {
     var $127 = $119 >>> 1;
    } else {
     var $127 = HEAP32[$__sym + 4 >> 2];
    }
    var $127;
    var $_pn = $117 + 2 + $127 | 0;
   }
   var $_pn;
   var $131 = $_pn + $73 | 0;
   do {
    if ($131 >>> 0 > 100) {
     var $134 = _malloc($131 << 2);
     var $135 = $134;
     if (($134 | 0) != 0) {
      var $__mb_0 = $135;
      var $__h_sroa_0_1 = $135;
      break;
     }
     var $138 = ___cxa_allocate_exception(4);
     HEAP32[$138 >> 2] = 9744;
     ___cxa_throw($138, 15960, 74);
    } else {
     var $__mb_0 = $62;
     var $__h_sroa_0_1 = 0;
    }
   } while (0);
   var $__h_sroa_0_1;
   var $__mb_0;
   if (($63 & 1) == 0) {
    var $165 = $__digits + 4 | 0;
   } else {
    var $165 = HEAP32[$__digits + 8 >> 2];
   }
   var $165;
   if ($66) {
    var $171 = $64 >>> 1;
   } else {
    var $171 = HEAP32[$__digits + 4 >> 2];
   }
   var $171;
   __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0, $__mi, $__me, HEAP32[$__iob + 4 >> 2], $165, $165 + ($171 << 2) | 0, $31, $60, $__pat, HEAP32[$__dp >> 2], HEAP32[$__ts >> 2], $__grp, $__sym, $__sn, $73);
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, HEAP32[$__s >> 2], $__mb_0, HEAP32[$__mi >> 2], HEAP32[$__me >> 2], $__iob, $__fl);
   if (($__h_sroa_0_1 | 0) != 0) {
    _free($__h_sroa_0_1);
   }
   do {
    if ((HEAP8[$2] & 1) != 0) {
     var $189 = HEAP32[$__sn + 8 >> 2];
     if (($189 | 0) == 0) {
      break;
     }
     _free($189);
    }
   } while (0);
   do {
    if ((HEAP8[$1] & 1) != 0) {
     var $198 = HEAP32[$__sym + 8 >> 2];
     if (($198 | 0) == 0) {
      break;
     }
     _free($198);
    }
   } while (0);
   do {
    if ((HEAP8[$__grp246] & 1) != 0) {
     var $207 = HEAP32[$__grp + 8 >> 2];
     if (($207 | 0) == 0) {
      break;
     }
     _free($207);
    }
   } while (0);
   var $211 = $4 + 4 | 0;
   if (((tempValue = HEAP32[$211 >> 2], HEAP32[$211 >> 2] = tempValue + -1, tempValue) | 0) != 0) {
    STACKTOP = sp;
    return;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4);
   STACKTOP = sp;
   return;
  }
 } while (0);
 var $29 = ___cxa_allocate_exception(4);
 HEAP32[$29 >> 2] = 9776;
 ___cxa_throw($29, 15976, 602);
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 __Z8catcloseP8_nl_catd(($__c | 0) == -1 ? -1 : $__c << 1);
 return;
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 var $__mb_i10 = sp;
 var $__buf_i12 = sp + 8;
 var $__bn_i13 = sp + 40;
 var $__wn_i = sp + 48;
 var $__mb_i = sp + 56;
 var $__buf_i = sp + 64;
 var $__bn_i = sp + 192;
 var $__nn_i = sp + 200;
 var $__ndflt = sp + 208;
 var $0 = $__ndflt;
 var $1 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $2 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 var $agg_result192 = $agg_result;
 var $3 = $1 | 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 11440;
 var $7 = HEAP8[$__dflt];
 if (($7 & 1) == 0) {
  var $15 = $__dflt + 4 | 0;
 } else {
  var $15 = HEAP32[$__dflt + 8 >> 2];
 }
 var $15;
 var $16 = $7 & 255;
 if (($16 & 1 | 0) == 0) {
  var $24 = $16 >>> 1;
 } else {
  var $24 = HEAP32[$__dflt + 4 >> 2];
 }
 var $24;
 var $25 = $15 + ($24 << 2) | 0;
 do {
  if ($15 >>> 0 < $25 >>> 0) {
   var $31 = $1;
   var $32 = $__buf_i12 | 0;
   var $33 = $__buf_i12 + 32 | 0;
   var $35 = $__ndflt + 1 | 0;
   var $36 = $__ndflt + 8 | 0;
   var $37 = $__ndflt + 4 | 0;
   var $38 = $__ndflt | 0;
   var $_0189 = $15;
   var $40 = 11440;
   while (1) {
    var $40;
    var $_0189;
    HEAP32[$__wn_i >> 2] = $_0189;
    var $44 = (FUNCTION_TABLE[HEAP32[$40 + 12 >> 2]]($3, $__mb_i10, $_0189, $25, $__wn_i, $32, $33, $__bn_i13) | 0) == 2;
    var $45 = HEAP32[$__wn_i >> 2];
    if ($44 | ($45 | 0) == ($_0189 | 0)) {
     break;
    }
    if ($32 >>> 0 < HEAP32[$__bn_i13 >> 2] >>> 0) {
     var $__p_i14_0184 = $32;
     while (1) {
      var $__p_i14_0184;
      var $85 = HEAP8[$__p_i14_0184];
      var $86 = HEAP8[$0];
      if (($86 & 1) == 0) {
       var $__sz_0_i = ($86 & 255) >>> 1;
       var $__cap_0_i = 10;
      } else {
       var $__sz_0_i = HEAP32[$37 >> 2];
       var $__cap_0_i = (HEAP32[$38 >> 2] & -2) - 1 | 0;
      }
      var $__cap_0_i;
      var $__sz_0_i;
      if (($__sz_0_i | 0) == ($__cap_0_i | 0)) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt, $__cap_0_i, 1, $__cap_0_i, $__cap_0_i, 0);
       var $__is_short_0_off0_in_in_i = HEAP8[$0];
      } else {
       var $__is_short_0_off0_in_in_i = $86;
      }
      var $__is_short_0_off0_in_in_i;
      if (($__is_short_0_off0_in_in_i & 1) == 0) {
       HEAP8[$0] = ($__sz_0_i << 1) + 2 & 255;
       var $_pn_i = $35;
       var $__p_0_sum_pre_phi_i = $__sz_0_i + 1 | 0;
      } else {
       var $107 = HEAP32[$36 >> 2];
       var $108 = $__sz_0_i + 1 | 0;
       HEAP32[$37 >> 2] = $108;
       var $_pn_i = $107;
       var $__p_0_sum_pre_phi_i = $108;
      }
      var $__p_0_sum_pre_phi_i;
      var $_pn_i;
      HEAP8[$_pn_i + $__sz_0_i | 0] = $85;
      HEAP8[$_pn_i + $__p_0_sum_pre_phi_i | 0] = 0;
      var $110 = $__p_i14_0184 + 1 | 0;
      if ($110 >>> 0 < HEAP32[$__bn_i13 >> 2] >>> 0) {
       var $__p_i14_0184 = $110;
      } else {
       break;
      }
     }
     var $114 = HEAP32[$__wn_i >> 2];
    } else {
     var $114 = $45;
    }
    var $114;
    if ($114 >>> 0 >= $25 >>> 0) {
     label = 2309;
     break;
    }
    var $_0189 = $114;
    var $40 = HEAP32[$31 >> 2];
   }
   if (label == 2309) {
    var $119 = ($__c | 0) == -1 ? -1 : $__c << 1;
    if ((HEAP8[$0] & 1) == 0) {
     var $130 = $119;
     label = 2316;
     break;
    }
    var $134 = HEAP32[$__ndflt + 8 >> 2];
    var $133 = $119;
    break;
   }
   var $50 = ___cxa_allocate_exception(8);
   HEAP32[$50 >> 2] = 9808;
   var $52 = $50 + 4 | 0;
   var $53 = $52;
   do {
    if (($52 | 0) != 0) {
     while (1) {
      var $55 = _malloc(33);
      if (($55 | 0) != 0) {
       label = 2291;
       break;
      }
      var $58 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
      if (($58 | 0) == 0) {
       break;
      }
      FUNCTION_TABLE[$58]();
     }
     if (label == 2291) {
      HEAP32[$55 + 4 >> 2] = 20;
      HEAP32[$55 >> 2] = 20;
      var $80 = $55 + 12 | 0;
      HEAP32[$53 >> 2] = $80;
      HEAP32[$55 + 8 >> 2] = 0;
      _memcpy($80, 4600, 21) | 0;
      break;
     }
     var $68 = ___cxa_allocate_exception(4);
     HEAP32[$68 >> 2] = 9744;
     ___cxa_throw($68, 15960, 74);
    }
   } while (0);
   ___cxa_throw($50, 15992, 210);
  } else {
   var $130 = ($__c | 0) == -1 ? -1 : $__c << 1;
   label = 2316;
  }
 } while (0);
 if (label == 2316) {
  var $130;
  var $134 = $__ndflt + 1 | 0;
  var $133 = $130;
 }
 var $133;
 var $134;
 var $135 = __Z7catgetsP8_nl_catdiiPKc($133, $__set, $__msgid, $134);
 HEAP32[$agg_result192 >> 2] = 0;
 HEAP32[$agg_result192 + 4 >> 2] = 0;
 HEAP32[$agg_result192 + 8 >> 2] = 0;
 var $137 = $2 | 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = 11384;
 var $140 = _strlen($135);
 var $141 = $135 + $140 | 0;
 L2645 : do {
  if (($140 | 0) >= 1) {
   var $143 = $2;
   var $144 = $141;
   var $145 = $__buf_i | 0;
   var $146 = $__buf_i + 128 | 0;
   var $147 = $agg_result + 4 | 0;
   var $148 = $agg_result + 8 | 0;
   var $149 = $agg_result | 0;
   var $_0152177 = $135;
   var $151 = 11384;
   while (1) {
    var $151;
    var $_0152177;
    HEAP32[$__nn_i >> 2] = $_0152177;
    var $160 = (FUNCTION_TABLE[HEAP32[$151 + 16 >> 2]]($137, $__mb_i, $_0152177, ($144 - $_0152177 | 0) > 32 ? $_0152177 + 32 | 0 : $141, $__nn_i, $145, $146, $__bn_i) | 0) == 2;
    var $161 = HEAP32[$__nn_i >> 2];
    if ($160 | ($161 | 0) == ($_0152177 | 0)) {
     break;
    }
    if ($145 >>> 0 < HEAP32[$__bn_i >> 2] >>> 0) {
     var $__p_i_0173 = $145;
     while (1) {
      var $__p_i_0173;
      var $201 = HEAP32[$__p_i_0173 >> 2];
      var $202 = HEAP8[$agg_result192];
      if (($202 & 1) == 0) {
       var $__sz_0_i25 = ($202 & 255) >>> 1;
       var $__cap_0_i24 = 1;
      } else {
       var $__sz_0_i25 = HEAP32[$147 >> 2];
       var $__cap_0_i24 = (HEAP32[$149 >> 2] & -2) - 1 | 0;
      }
      var $__cap_0_i24;
      var $__sz_0_i25;
      if (($__sz_0_i25 | 0) == ($__cap_0_i24 | 0)) {
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($agg_result, $__cap_0_i24, 1, $__cap_0_i24, $__cap_0_i24, 0, 0);
       var $__is_short_0_off0_in_in_i26 = HEAP8[$agg_result192];
      } else {
       var $__is_short_0_off0_in_in_i26 = $202;
      }
      var $__is_short_0_off0_in_in_i26;
      if (($__is_short_0_off0_in_in_i26 & 1) == 0) {
       HEAP8[$agg_result192] = ($__sz_0_i25 << 1) + 2 & 255;
       var $_pn_i31 = $147;
       var $__p_0_sum_pre_phi_i30 = $__sz_0_i25 + 1 | 0;
      } else {
       var $223 = HEAP32[$148 >> 2];
       var $224 = $__sz_0_i25 + 1 | 0;
       HEAP32[$147 >> 2] = $224;
       var $_pn_i31 = $223;
       var $__p_0_sum_pre_phi_i30 = $224;
      }
      var $__p_0_sum_pre_phi_i30;
      var $_pn_i31;
      HEAP32[$_pn_i31 + ($__sz_0_i25 << 2) >> 2] = $201;
      HEAP32[$_pn_i31 + ($__p_0_sum_pre_phi_i30 << 2) >> 2] = 0;
      var $226 = $__p_i_0173 + 4 | 0;
      if ($226 >>> 0 < HEAP32[$__bn_i >> 2] >>> 0) {
       var $__p_i_0173 = $226;
      } else {
       break;
      }
     }
     var $230 = HEAP32[$__nn_i >> 2];
    } else {
     var $230 = $161;
    }
    var $230;
    if ($230 >>> 0 >= $141 >>> 0) {
     break L2645;
    }
    var $_0152177 = $230;
    var $151 = HEAP32[$143 >> 2];
   }
   var $166 = ___cxa_allocate_exception(8);
   HEAP32[$166 >> 2] = 9808;
   var $168 = $166 + 4 | 0;
   var $169 = $168;
   do {
    if (($168 | 0) != 0) {
     while (1) {
      var $171 = _malloc(33);
      if (($171 | 0) != 0) {
       label = 2338;
       break;
      }
      var $174 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
      if (($174 | 0) == 0) {
       break;
      }
      FUNCTION_TABLE[$174]();
     }
     if (label == 2338) {
      HEAP32[$171 + 4 >> 2] = 20;
      HEAP32[$171 >> 2] = 20;
      var $196 = $171 + 12 | 0;
      HEAP32[$169 >> 2] = $196;
      HEAP32[$171 + 8 >> 2] = 0;
      _memcpy($196, 4600, 21) | 0;
      break;
     }
     var $184 = ___cxa_allocate_exception(4);
     HEAP32[$184 >> 2] = 9744;
     ___cxa_throw($184, 15960, 74);
    }
   } while (0);
   ___cxa_throw($166, 15992, 210);
  }
 } while (0);
 if ((HEAP8[$0] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 var $237 = HEAP32[$__ndflt + 8 >> 2];
 if (($237 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($237);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17codecvtIwc10_mbstate_tED2Ev($this) {
 HEAP32[$this >> 2] = 10904;
 var $2 = $this + 8 | 0;
 var $3 = HEAP32[$2 >> 2];
 do {
  if ((HEAP8[22128] | 0) == 0) {
   if ((___cxa_guard_acquire(22128) | 0) == 0) {
    break;
   }
   HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
  }
 } while (0);
 if (($3 | 0) == (HEAP32[19888 >> 2] | 0)) {
  return;
 }
 _freelocale(HEAP32[$2 >> 2]);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 __ZNSt3__16locale5__impD2Ev($this);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 HEAP32[$this >> 2] = 11160;
 var $2 = $this + 12 | 0;
 var $3 = HEAP32[$2 >> 2];
 var $4 = $this + 8 | 0;
 var $5 = HEAP32[$4 >> 2];
 if (($3 | 0) == ($5 | 0)) {
  var $31 = $3;
 } else {
  var $i_09 = 0;
  var $8 = $5;
  var $7 = $3;
  while (1) {
   var $7;
   var $8;
   var $i_09;
   var $10 = HEAP32[$8 + ($i_09 << 2) >> 2];
   if (($10 | 0) == 0) {
    var $24 = $7;
    var $23 = $8;
   } else {
    var $13 = $10 + 4 | 0;
    if (((tempValue = HEAP32[$13 >> 2], HEAP32[$13 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
     FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10 | 0);
    }
    var $24 = HEAP32[$2 >> 2];
    var $23 = HEAP32[$4 >> 2];
   }
   var $23;
   var $24;
   var $25 = $i_09 + 1 | 0;
   if ($25 >>> 0 < $24 - $23 >> 2 >>> 0) {
    var $i_09 = $25;
    var $8 = $23;
    var $7 = $24;
   } else {
    var $31 = $23;
    break;
   }
  }
 }
 var $31;
 do {
  if ((HEAP8[$this + 144 | 0] & 1) == 0) {
   var $42 = $31;
  } else {
   var $39 = HEAP32[$this + 152 >> 2];
   if (($39 | 0) == 0) {
    var $42 = $31;
    break;
   }
   _free($39);
   var $42 = HEAP32[$4 >> 2];
  }
 } while (0);
 var $42;
 if (($42 | 0) == 0) {
  return;
 }
 var $45 = HEAP32[$2 >> 2];
 if (($42 | 0) != ($45 | 0)) {
  HEAP32[$2 >> 2] = $45 + (~(($45 - 4 + -$42 | 0) >>> 2) << 2);
 }
 if (($42 | 0) == ($this + 24 | 0)) {
  HEAP8[$this + 136 | 0] = 0;
  return;
 } else {
  _free($42);
  return;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 var label = 0;
 var $2 = $f + 4 | 0;
 tempValue = HEAP32[$2 >> 2], HEAP32[$2 >> 2] = tempValue + 1, tempValue;
 var $4 = $this + 12 | 0;
 var $5 = HEAP32[$4 >> 2];
 var $6 = $this + 8 | 0;
 var $7 = HEAP32[$6 >> 2];
 var $8 = $5;
 var $9 = $7;
 var $11 = $8 - $9 >> 2;
 do {
  if ($11 >>> 0 > $id >>> 0) {
   var $151 = $7;
  } else {
   var $14 = $id + 1 | 0;
   if ($11 >>> 0 >= $14 >>> 0) {
    if ($11 >>> 0 <= $14 >>> 0) {
     var $151 = $7;
     break;
    }
    var $135 = $7 + ($14 << 2) | 0;
    if (($135 | 0) == ($5 | 0)) {
     var $151 = $7;
     break;
    }
    HEAP32[$4 >> 2] = $5 + (~(($5 - 4 + -$135 | 0) >>> 2) << 2);
    var $151 = $7;
    break;
   }
   var $17 = $14 - $11 | 0;
   var $18 = $this + 16 | 0;
   var $20 = HEAP32[$18 >> 2];
   do {
    if ($20 - $8 >> 2 >>> 0 < $17 >>> 0) {
     var $32 = $this + 24 | 0;
     if ($14 >>> 0 > 1073741823) {
      var $35 = ___cxa_allocate_exception(8);
      HEAP32[$35 >> 2] = 9872;
      var $37 = $35 + 4 | 0;
      var $38 = $37;
      do {
       if (($37 | 0) != 0) {
        while (1) {
         var $40 = _malloc(19);
         if (($40 | 0) != 0) {
          label = 2427;
          break;
         }
         var $43 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
         if (($43 | 0) == 0) {
          break;
         }
         FUNCTION_TABLE[$43]();
        }
        if (label == 2427) {
         HEAP32[$40 + 4 >> 2] = 6;
         HEAP32[$40 >> 2] = 6;
         var $59 = $40 + 12 | 0;
         HEAP32[$38 >> 2] = $59;
         HEAP32[$40 + 8 >> 2] = 0;
         HEAP8[$59] = HEAP8[6944];
         HEAP8[$59 + 1 | 0] = HEAP8[6945 | 0];
         HEAP8[$59 + 2 | 0] = HEAP8[6946 | 0];
         HEAP8[$59 + 3 | 0] = HEAP8[6947 | 0];
         HEAP8[$59 + 4 | 0] = HEAP8[6948 | 0];
         HEAP8[$59 + 5 | 0] = HEAP8[6949 | 0];
         HEAP8[$59 + 6 | 0] = HEAP8[6950 | 0];
         break;
        }
        var $53 = ___cxa_allocate_exception(4);
        HEAP32[$53 >> 2] = 9744;
        ___cxa_throw($53, 15960, 74);
       }
      } while (0);
      HEAP32[$35 >> 2] = 9840;
      ___cxa_throw($35, 16008, 284);
     }
     var $72 = $20 - $9 | 0;
     do {
      if ($72 >> 2 >>> 0 > 536870910) {
       var $_04851_i = 1073741823;
       label = 2440;
      } else {
       var $75 = $72 >> 1;
       var $_sroa_speculated_i = $75 >>> 0 < $14 >>> 0 ? $14 : $75;
       if (($_sroa_speculated_i | 0) == 0) {
        var $106 = 0;
        var $_049_i = 0;
        break;
       }
       var $79 = $this + 136 | 0;
       if (!((HEAP8[$79] & 1) == 0 & $_sroa_speculated_i >>> 0 < 29)) {
        var $_04851_i = $_sroa_speculated_i;
        label = 2440;
        break;
       }
       HEAP8[$79] = 1;
       var $106 = $32;
       var $_049_i = $_sroa_speculated_i;
      }
     } while (0);
     do {
      if (label == 2440) {
       var $_04851_i;
       var $86 = $_04851_i << 2;
       var $_size_i_i = ($86 | 0) == 0 ? 1 : $86;
       while (1) {
        var $89 = _malloc($_size_i_i);
        if (($89 | 0) != 0) {
         label = 2451;
         break;
        }
        var $92 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
        if (($92 | 0) == 0) {
         break;
        }
        FUNCTION_TABLE[$92]();
       }
       if (label == 2451) {
        var $106 = $89;
        var $_049_i = $_04851_i;
        break;
       }
       var $102 = ___cxa_allocate_exception(4);
       HEAP32[$102 >> 2] = 9744;
       ___cxa_throw($102, 15960, 74);
      }
     } while (0);
     var $_049_i;
     var $106;
     var $_0_i39_i = $17;
     var $109 = $106 + ($11 << 2) | 0;
     while (1) {
      var $109;
      var $_0_i39_i;
      if (($109 | 0) == 0) {
       var $112 = 0;
      } else {
       HEAP32[$109 >> 2] = 0;
       var $112 = $109;
      }
      var $112;
      var $113 = $112 + 4 | 0;
      var $114 = $_0_i39_i - 1 | 0;
      if (($114 | 0) == 0) {
       break;
      } else {
       var $_0_i39_i = $114;
       var $109 = $113;
      }
     }
     var $116 = $106 + ($_049_i << 2) | 0;
     var $117 = HEAP32[$6 >> 2];
     var $121 = HEAP32[$4 >> 2] - $117 | 0;
     var $123 = $106 + ($11 - ($121 >> 2) << 2) | 0;
     var $124 = $123;
     var $125 = $117;
     _memcpy($124, $125, $121) | 0;
     HEAP32[$6 >> 2] = $123;
     HEAP32[$4 >> 2] = $113;
     HEAP32[$18 >> 2] = $116;
     if (($117 | 0) == 0) {
      break;
     }
     if (($117 | 0) == ($32 | 0)) {
      HEAP8[$this + 136 | 0] = 0;
      break;
     } else {
      _free($125);
      break;
     }
    } else {
     var $_0_i_i = $17;
     var $24 = $5;
     while (1) {
      var $24;
      var $_0_i_i;
      if (($24 | 0) == 0) {
       var $27 = 0;
      } else {
       HEAP32[$24 >> 2] = 0;
       var $27 = HEAP32[$4 >> 2];
      }
      var $27;
      var $28 = $27 + 4 | 0;
      HEAP32[$4 >> 2] = $28;
      var $29 = $_0_i_i - 1 | 0;
      if (($29 | 0) == 0) {
       break;
      } else {
       var $_0_i_i = $29;
       var $24 = $28;
      }
     }
    }
   } while (0);
   var $151 = HEAP32[$6 >> 2];
  }
 } while (0);
 var $151;
 var $153 = HEAP32[$151 + ($id << 2) >> 2];
 if (($153 | 0) == 0) {
  var $165 = $151;
  var $165;
  var $166 = $165 + ($id << 2) | 0;
  HEAP32[$166 >> 2] = $f;
  return;
 }
 var $156 = $153 + 4 | 0;
 if (((tempValue = HEAP32[$156 >> 2], HEAP32[$156 >> 2] = tempValue + -1, tempValue) | 0) == 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$153 >> 2] + 8 >> 2]]($153 | 0);
 }
 var $165 = HEAP32[$6 >> 2];
 var $165;
 var $166 = $165 + ($id << 2) | 0;
 HEAP32[$166 >> 2] = $f;
 return;
}
function __ZNSt3__16localeC2Ev($this) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 var $__p_i_i_i223_i_i = sp;
 var $__p_i_i_i216_i_i = sp + 16;
 var $__p_i_i_i209_i_i = sp + 32;
 var $__p_i_i_i199_i_i = sp + 48;
 var $__p_i_i_i190_i_i = sp + 64;
 var $__p_i_i_i183_i_i = sp + 80;
 var $__p_i_i_i176_i_i = sp + 96;
 var $__p_i_i_i169_i_i = sp + 112;
 var $__p_i_i_i162_i_i = sp + 128;
 var $__p_i_i_i155_i_i = sp + 144;
 var $__p_i_i_i148_i_i = sp + 160;
 var $__p_i_i_i141_i_i = sp + 176;
 var $__p_i_i_i134_i_i = sp + 192;
 var $__p_i_i_i127_i_i = sp + 208;
 var $__p_i_i_i120_i_i = sp + 224;
 var $__p_i_i_i113_i_i = sp + 240;
 var $__p_i_i_i106_i_i = sp + 256;
 var $__p_i_i_i99_i_i = sp + 272;
 var $__p_i_i_i92_i_i = sp + 288;
 var $__p_i_i_i85_i_i = sp + 304;
 var $__p_i_i_i78_i_i = sp + 320;
 var $__p_i_i_i71_i_i = sp + 336;
 var $__p_i_i_i64_i_i = sp + 352;
 var $__p_i_i_i57_i_i = sp + 368;
 var $__p_i_i_i50_i_i = sp + 384;
 var $__p_i_i_i43_i_i = sp + 400;
 var $__p_i_i_i36_i_i = sp + 416;
 var $__p_i_i_i_i_i = sp + 432;
 if ((HEAP8[22112] | 0) != 0) {
  var $281 = $this | 0;
  var $282 = HEAP32[19880 >> 2];
  HEAP32[$281 >> 2] = $282;
  var $283 = $282 + 4 | 0;
  var $284 = (tempValue = HEAP32[$283 >> 2], HEAP32[$283 >> 2] = tempValue + 1, tempValue);
  STACKTOP = sp;
  return;
 }
 if ((___cxa_guard_acquire(22112) | 0) == 0) {
  var $281 = $this | 0;
  var $282 = HEAP32[19880 >> 2];
  HEAP32[$281 >> 2] = $282;
  var $283 = $282 + 4 | 0;
  var $284 = (tempValue = HEAP32[$283 >> 2], HEAP32[$283 >> 2] = tempValue + 1, tempValue);
  STACKTOP = sp;
  return;
 }
 do {
  if ((HEAP8[22120] | 0) == 0) {
   if ((___cxa_guard_acquire(22120) | 0) == 0) {
    break;
   }
   HEAP32[20052 >> 2] = 0;
   HEAP32[20048 >> 2] = 11160;
   HEAP8[20184] = 1;
   HEAP32[20060 >> 2] = 20072;
   HEAP32[20056 >> 2] = 20072;
   HEAP32[20064 >> 2] = 20184;
   var $_0_i18_i_i_i = 28;
   var $14 = 20072;
   while (1) {
    var $14;
    var $_0_i18_i_i_i;
    if (($14 | 0) == 0) {
     var $17 = 0;
    } else {
     HEAP32[$14 >> 2] = 0;
     var $17 = HEAP32[20060 >> 2];
    }
    var $17;
    var $18 = $17 + 4 | 0;
    HEAP32[20060 >> 2] = $18;
    var $19 = $_0_i18_i_i_i - 1 | 0;
    if (($19 | 0) == 0) {
     break;
    } else {
     var $_0_i18_i_i_i = $19;
     var $14 = $18;
    }
   }
   HEAP8[20192] = 2;
   HEAP8[20193] = 67;
   HEAP8[20194] = 0;
   var $21 = HEAP32[20056 >> 2];
   if (($21 | 0) != ($18 | 0)) {
    HEAP32[20060 >> 2] = $17 + (-(($17 + -$21 | 0) >>> 2) << 2);
   }
   HEAP32[20020 >> 2] = 0;
   HEAP32[20016 >> 2] = 10864;
   if ((HEAP32[21248 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i_i_i >> 2] = 21248;
    HEAP32[$__p_i_i_i_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21248, $__p_i_i_i_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20016, HEAP32[21252 >> 2] - 1 | 0);
   HEAP32[20012 >> 2] = 0;
   HEAP32[20008 >> 2] = 10824;
   if ((HEAP32[21240 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i36_i_i >> 2] = 21240;
    HEAP32[$__p_i_i_i36_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i36_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21240, $__p_i_i_i36_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20008, HEAP32[21244 >> 2] - 1 | 0);
   HEAP32[20220 >> 2] = 0;
   HEAP32[20216 >> 2] = 11272;
   HEAP32[20224 >> 2] = 0;
   HEAP8[20228] = 0;
   HEAP32[20224 >> 2] = HEAP32[___ctype_b_loc() >> 2];
   if ((HEAP32[21568 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i43_i_i >> 2] = 21568;
    HEAP32[$__p_i_i_i43_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i43_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21568, $__p_i_i_i43_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20216, HEAP32[21572 >> 2] - 1 | 0);
   HEAP32[20212 >> 2] = 0;
   HEAP32[20208 >> 2] = 11192;
   if ((HEAP32[21560 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i50_i_i >> 2] = 21560;
    HEAP32[$__p_i_i_i50_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i50_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21560, $__p_i_i_i50_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20208, HEAP32[21564 >> 2] - 1 | 0);
   HEAP32[20028 >> 2] = 0;
   HEAP32[20024 >> 2] = 10960;
   if ((HEAP32[21264 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i57_i_i >> 2] = 21264;
    HEAP32[$__p_i_i_i57_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i57_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21264, $__p_i_i_i57_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20024, HEAP32[21268 >> 2] - 1 | 0);
   HEAP32[9212 >> 2] = 0;
   HEAP32[9208 >> 2] = 10904;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   HEAP32[9216 >> 2] = HEAP32[19888 >> 2];
   if ((HEAP32[21256 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i64_i_i >> 2] = 21256;
    HEAP32[$__p_i_i_i64_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i64_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21256, $__p_i_i_i64_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9208, HEAP32[21260 >> 2] - 1 | 0);
   HEAP32[20036 >> 2] = 0;
   HEAP32[20032 >> 2] = 11016;
   if ((HEAP32[21272 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i71_i_i >> 2] = 21272;
    HEAP32[$__p_i_i_i71_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i71_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21272, $__p_i_i_i71_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20032, HEAP32[21276 >> 2] - 1 | 0);
   HEAP32[20044 >> 2] = 0;
   HEAP32[20040 >> 2] = 11072;
   if ((HEAP32[21280 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i78_i_i >> 2] = 21280;
    HEAP32[$__p_i_i_i78_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i78_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21280, $__p_i_i_i78_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20040, HEAP32[21284 >> 2] - 1 | 0);
   HEAP32[19940 >> 2] = 0;
   HEAP32[19936 >> 2] = 10368;
   HEAP8[19944] = 46;
   HEAP8[19945] = 44;
   HEAP32[19948 >> 2] = 0;
   HEAP32[19952 >> 2] = 0;
   HEAP32[19956 >> 2] = 0;
   if ((HEAP32[21184 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i85_i_i >> 2] = 21184;
    HEAP32[$__p_i_i_i85_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i85_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21184, $__p_i_i_i85_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19936, HEAP32[21188 >> 2] - 1 | 0);
   HEAP32[9180 >> 2] = 0;
   HEAP32[9176 >> 2] = 10320;
   HEAP32[9184 >> 2] = 46;
   HEAP32[9188 >> 2] = 44;
   HEAP32[9192 >> 2] = 0;
   HEAP32[9196 >> 2] = 0;
   HEAP32[9200 >> 2] = 0;
   if ((HEAP32[21176 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i92_i_i >> 2] = 21176;
    HEAP32[$__p_i_i_i92_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i92_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21176, $__p_i_i_i92_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9176, HEAP32[21180 >> 2] - 1 | 0);
   HEAP32[20004 >> 2] = 0;
   HEAP32[2e4 >> 2] = 10752;
   if ((HEAP32[21232 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i99_i_i >> 2] = 21232;
    HEAP32[$__p_i_i_i99_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i99_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21232, $__p_i_i_i99_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 2e4, HEAP32[21236 >> 2] - 1 | 0);
   HEAP32[19996 >> 2] = 0;
   HEAP32[19992 >> 2] = 10680;
   if ((HEAP32[21224 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i106_i_i >> 2] = 21224;
    HEAP32[$__p_i_i_i106_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i106_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21224, $__p_i_i_i106_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19992, HEAP32[21228 >> 2] - 1 | 0);
   HEAP32[19988 >> 2] = 0;
   HEAP32[19984 >> 2] = 10616;
   if ((HEAP32[21216 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i113_i_i >> 2] = 21216;
    HEAP32[$__p_i_i_i113_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i113_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21216, $__p_i_i_i113_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19984, HEAP32[21220 >> 2] - 1 | 0);
   HEAP32[19980 >> 2] = 0;
   HEAP32[19976 >> 2] = 10552;
   if ((HEAP32[21208 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i120_i_i >> 2] = 21208;
    HEAP32[$__p_i_i_i120_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i120_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21208, $__p_i_i_i120_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19976, HEAP32[21212 >> 2] - 1 | 0);
   HEAP32[20260 >> 2] = 0;
   HEAP32[20256 >> 2] = 12200;
   if ((HEAP32[22048 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i127_i_i >> 2] = 22048;
    HEAP32[$__p_i_i_i127_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i127_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22048, $__p_i_i_i127_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20256, HEAP32[22052 >> 2] - 1 | 0);
   HEAP32[20252 >> 2] = 0;
   HEAP32[20248 >> 2] = 12136;
   if ((HEAP32[22040 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i134_i_i >> 2] = 22040;
    HEAP32[$__p_i_i_i134_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i134_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22040, $__p_i_i_i134_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20248, HEAP32[22044 >> 2] - 1 | 0);
   HEAP32[20244 >> 2] = 0;
   HEAP32[20240 >> 2] = 12072;
   if ((HEAP32[22032 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i141_i_i >> 2] = 22032;
    HEAP32[$__p_i_i_i141_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i141_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22032, $__p_i_i_i141_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20240, HEAP32[22036 >> 2] - 1 | 0);
   HEAP32[20236 >> 2] = 0;
   HEAP32[20232 >> 2] = 12008;
   if ((HEAP32[22024 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i148_i_i >> 2] = 22024;
    HEAP32[$__p_i_i_i148_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i148_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(22024, $__p_i_i_i148_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 20232, HEAP32[22028 >> 2] - 1 | 0);
   HEAP32[19932 >> 2] = 0;
   HEAP32[19928 >> 2] = 10024;
   if ((HEAP32[21136 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i155_i_i >> 2] = 21136;
    HEAP32[$__p_i_i_i155_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i155_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21136, $__p_i_i_i155_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19928, HEAP32[21140 >> 2] - 1 | 0);
   HEAP32[19924 >> 2] = 0;
   HEAP32[19920 >> 2] = 9984;
   if ((HEAP32[21128 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i162_i_i >> 2] = 21128;
    HEAP32[$__p_i_i_i162_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i162_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21128, $__p_i_i_i162_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19920, HEAP32[21132 >> 2] - 1 | 0);
   HEAP32[19916 >> 2] = 0;
   HEAP32[19912 >> 2] = 9944;
   if ((HEAP32[21120 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i169_i_i >> 2] = 21120;
    HEAP32[$__p_i_i_i169_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i169_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21120, $__p_i_i_i169_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19912, HEAP32[21124 >> 2] - 1 | 0);
   HEAP32[19908 >> 2] = 0;
   HEAP32[19904 >> 2] = 9904;
   if ((HEAP32[21112 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i176_i_i >> 2] = 21112;
    HEAP32[$__p_i_i_i176_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i176_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21112, $__p_i_i_i176_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19904, HEAP32[21116 >> 2] - 1 | 0);
   HEAP32[9164 >> 2] = 0;
   HEAP32[9160 >> 2] = 10224;
   HEAP32[9168 >> 2] = 10272;
   if ((HEAP32[21168 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i183_i_i >> 2] = 21168;
    HEAP32[$__p_i_i_i183_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i183_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21168, $__p_i_i_i183_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9160, HEAP32[21172 >> 2] - 1 | 0);
   HEAP32[9148 >> 2] = 0;
   HEAP32[9144 >> 2] = 10128;
   HEAP32[9152 >> 2] = 10176;
   if ((HEAP32[21160 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i190_i_i >> 2] = 21160;
    HEAP32[$__p_i_i_i190_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i190_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21160, $__p_i_i_i190_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9144, HEAP32[21164 >> 2] - 1 | 0);
   HEAP32[9132 >> 2] = 0;
   HEAP32[9128 >> 2] = 11128;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   HEAP32[9136 >> 2] = HEAP32[19888 >> 2];
   HEAP32[9128 >> 2] = 10096;
   if ((HEAP32[21152 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i199_i_i >> 2] = 21152;
    HEAP32[$__p_i_i_i199_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i199_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21152, $__p_i_i_i199_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9128, HEAP32[21156 >> 2] - 1 | 0);
   HEAP32[9116 >> 2] = 0;
   HEAP32[9112 >> 2] = 11128;
   do {
    if ((HEAP8[22128] | 0) == 0) {
     if ((___cxa_guard_acquire(22128) | 0) == 0) {
      break;
     }
     HEAP32[19888 >> 2] = _newlocale(1, 6816, 0);
    }
   } while (0);
   HEAP32[9120 >> 2] = HEAP32[19888 >> 2];
   HEAP32[9112 >> 2] = 10064;
   if ((HEAP32[21144 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i209_i_i >> 2] = 21144;
    HEAP32[$__p_i_i_i209_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i209_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21144, $__p_i_i_i209_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 9112, HEAP32[21148 >> 2] - 1 | 0);
   HEAP32[19972 >> 2] = 0;
   HEAP32[19968 >> 2] = 10456;
   if ((HEAP32[21200 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i216_i_i >> 2] = 21200;
    HEAP32[$__p_i_i_i216_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i216_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21200, $__p_i_i_i216_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19968, HEAP32[21204 >> 2] - 1 | 0);
   HEAP32[19964 >> 2] = 0;
   HEAP32[19960 >> 2] = 10416;
   if ((HEAP32[21192 >> 2] | 0) != -1) {
    HEAP32[$__p_i_i_i223_i_i >> 2] = 21192;
    HEAP32[$__p_i_i_i223_i_i + 4 >> 2] = 26;
    HEAP32[$__p_i_i_i223_i_i + 8 >> 2] = 0;
    __ZNSt3__111__call_onceERVmPvPFvS2_E(21192, $__p_i_i_i223_i_i);
   }
   __ZNSt3__16locale5__imp7installEPNS0_5facetEl(20048, 19960, HEAP32[21196 >> 2] - 1 | 0);
   HEAP32[19872 >> 2] = 20048;
  }
 } while (0);
 var $278 = HEAP32[19872 >> 2];
 HEAP32[19880 >> 2] = $278;
 var $279 = $278 + 4 | 0;
 tempValue = HEAP32[$279 >> 2], HEAP32[$279 >> 2] = tempValue + 1, tempValue;
 var $281 = $this | 0;
 var $282 = HEAP32[19880 >> 2];
 HEAP32[$281 >> 2] = $282;
 var $283 = $282 + 4 | 0;
 var $284 = (tempValue = HEAP32[$283 >> 2], HEAP32[$283 >> 2] = tempValue + 1, tempValue);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 return $c;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE11do_encodingEv($this) {
 return 1;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE16do_always_noconvEv($this) {
 return 1;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE13do_max_lengthEv($this) {
 return 1;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 return $c << 24 >> 24;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 return $c >>> 0 < 128 ? $c & 255 : $dfault;
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 return $c << 24 >> 24 > -1 ? $c : $dfault;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 var $3 = $end - $frm | 0;
 return $3 >>> 0 < $mx >>> 0 ? $3 : $mx;
}
function __ZNSt3__16locale2id6__initEv($this) {
 HEAP32[$this + 4 >> 2] = (tempValue = HEAP32[21288 >> 2], HEAP32[21288 >> 2] = tempValue + 1, tempValue) + 1;
 return;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 if (($low | 0) == ($high | 0)) {
  var $_07_lcssa = $low;
  var $_07_lcssa;
  return $_07_lcssa;
 } else {
  var $_078 = $low;
  var $_09 = $dest;
 }
 while (1) {
  var $_09;
  var $_078;
  HEAP32[$_09 >> 2] = HEAP8[$_078] | 0;
  var $4 = $_078 + 1 | 0;
  if (($4 | 0) == ($high | 0)) {
   var $_07_lcssa = $high;
   break;
  } else {
   var $_078 = $4;
   var $_09 = $_09 + 4 | 0;
  }
 }
 var $_07_lcssa;
 return $_07_lcssa;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 if (($low | 0) == ($high | 0)) {
  var $_010_lcssa = $low;
  var $_010_lcssa;
  return $_010_lcssa;
 }
 var $4 = (($high - 4 + -$low | 0) >>> 2) + 1 | 0;
 var $_01011 = $low;
 var $_012 = $dest;
 while (1) {
  var $_012;
  var $_01011;
  var $6 = HEAP32[$_01011 >> 2];
  HEAP8[$_012] = $6 >>> 0 < 128 ? $6 & 255 : $dfault;
  var $9 = $_01011 + 4 | 0;
  if (($9 | 0) == ($high | 0)) {
   break;
  } else {
   var $_01011 = $9;
   var $_012 = $_012 + 1 | 0;
  }
 }
 var $_010_lcssa = $low + ($4 << 2) | 0;
 var $_010_lcssa;
 return $_010_lcssa;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 if (($low | 0) == ($high | 0)) {
  var $_07_lcssa = $low;
  var $_07_lcssa;
  return $_07_lcssa;
 } else {
  var $_078 = $low;
  var $_09 = $dest;
 }
 while (1) {
  var $_09;
  var $_078;
  HEAP8[$_09] = HEAP8[$_078];
  var $3 = $_078 + 1 | 0;
  if (($3 | 0) == ($high | 0)) {
   var $_07_lcssa = $high;
   break;
  } else {
   var $_078 = $3;
   var $_09 = $_09 + 1 | 0;
  }
 }
 var $_07_lcssa;
 return $_07_lcssa;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 if (($low | 0) == ($high | 0)) {
  var $_010_lcssa = $low;
  var $_010_lcssa;
  return $_010_lcssa;
 } else {
  var $_01011 = $low;
  var $_012 = $dest;
 }
 while (1) {
  var $_012;
  var $_01011;
  var $2 = HEAP8[$_01011];
  HEAP8[$_012] = $2 << 24 >> 24 > -1 ? $2 : $dfault;
  var $4 = $_01011 + 1 | 0;
  if (($4 | 0) == ($high | 0)) {
   var $_010_lcssa = $high;
   break;
  } else {
   var $_01011 = $4;
   var $_012 = $_012 + 1 | 0;
  }
 }
 var $_010_lcssa;
 return $_010_lcssa;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 if (($this | 0) == 0) {
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$this >> 2] + 4 >> 2]]($this);
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 HEAP32[$this >> 2] = 11272;
 var $3 = HEAP32[$this + 8 >> 2];
 do {
  if (($3 | 0) != 0) {
   if ((HEAP8[$this + 12 | 0] & 1) != 0) {
    _free($3);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 HEAP32[$this >> 2] = 11272;
 var $3 = HEAP32[$this + 8 >> 2];
 if (($3 | 0) == 0) {
  return;
 }
 if ((HEAP8[$this + 12 | 0] & 1) == 0) {
  return;
 }
 _free($3);
 return;
}
function __ZNSt3__17codecvtIcc10_mbstate_tED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__17codecvtIwc10_mbstate_tED0Ev($this) {
 __ZNSt3__17codecvtIwc10_mbstate_tED2Ev($this);
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this_0_0_val, $x) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 var $__p_i_i = sp;
 var $2 = $x | 0;
 if ((HEAP32[$2 >> 2] | 0) != -1) {
  HEAP32[$__p_i_i >> 2] = $x;
  HEAP32[$__p_i_i + 4 >> 2] = 26;
  HEAP32[$__p_i_i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($2, $__p_i_i);
 }
 var $8 = HEAP32[$x + 4 >> 2] - 1 | 0;
 var $12 = HEAP32[$this_0_0_val + 8 >> 2];
 if (HEAP32[$this_0_0_val + 12 >> 2] - $12 >> 2 >>> 0 <= $8 >>> 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 }
 var $19 = HEAP32[$12 + ($8 << 2) >> 2];
 if (($19 | 0) == 0) {
  var $21 = ___cxa_allocate_exception(4);
  var $22 = $21;
  HEAP32[$22 >> 2] = 9776;
  ___cxa_throw($21, 15976, 602);
 } else {
  STACKTOP = sp;
  return $19;
 }
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 if ($c >>> 0 >= 128) {
  var $11 = 0;
  var $11;
  return $11;
 }
 var $11 = (HEAP16[HEAP32[___ctype_b_loc() >> 2] + ($c << 1) >> 1] & $m) << 16 >> 16 != 0;
 var $11;
 return $11;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 if (($low | 0) == ($high | 0)) {
  var $_08_lcssa = $low;
  var $_08_lcssa;
  return $_08_lcssa;
 } else {
  var $_0810 = $low;
  var $_011 = $vec;
 }
 while (1) {
  var $_011;
  var $_0810;
  var $2 = HEAP32[$_0810 >> 2];
  if ($2 >>> 0 < 128) {
   var $_off0 = HEAP16[HEAP32[___ctype_b_loc() >> 2] + ($2 << 1) >> 1];
  } else {
   var $_off0 = 0;
  }
  var $_off0;
  HEAP16[$_011 >> 1] = $_off0;
  var $12 = $_0810 + 4 | 0;
  if (($12 | 0) == ($high | 0)) {
   var $_08_lcssa = $high;
   break;
  } else {
   var $_0810 = $12;
   var $_011 = $_011 + 2 | 0;
  }
 }
 var $_08_lcssa;
 return $_08_lcssa;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 var label = 0;
 if (($low | 0) == ($high | 0)) {
  var $_0_lcssa = $low;
  var $_0_lcssa;
  return $_0_lcssa;
 } else {
  var $_09 = $low;
 }
 while (1) {
  var $_09;
  var $2 = HEAP32[$_09 >> 2];
  if ($2 >>> 0 < 128) {
   if ((HEAP16[HEAP32[___ctype_b_loc() >> 2] + ($2 << 1) >> 1] & $m) << 16 >> 16 != 0) {
    var $_0_lcssa = $_09;
    label = 2709;
    break;
   }
  }
  var $14 = $_09 + 4 | 0;
  if (($14 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   label = 2710;
   break;
  } else {
   var $_09 = $14;
  }
 }
 if (label == 2709) {
  var $_0_lcssa;
  return $_0_lcssa;
 } else if (label == 2710) {
  var $_0_lcssa;
  return $_0_lcssa;
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 var $_0 = $low;
 while (1) {
  var $_0;
  if (($_0 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   break;
  }
  var $4 = HEAP32[$_0 >> 2];
  if ($4 >>> 0 >= 128) {
   var $_0_lcssa = $_0;
   break;
  }
  if ((HEAP16[HEAP32[___ctype_b_loc() >> 2] + ($4 << 1) >> 1] & $m) << 16 >> 16 == 0) {
   var $_0_lcssa = $_0;
   break;
  } else {
   var $_0 = $_0 + 4 | 0;
  }
 }
 var $_0_lcssa;
 return $_0_lcssa;
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 if ($c >>> 0 >= 128) {
  var $10 = $c;
  var $10;
  return $10;
 }
 var $10 = HEAP32[HEAP32[___ctype_toupper_loc() >> 2] + ($c << 2) >> 2];
 var $10;
 return $10;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 if (($low | 0) == ($high | 0)) {
  var $_0_lcssa = $low;
  var $_0_lcssa;
  return $_0_lcssa;
 } else {
  var $_08 = $low;
 }
 while (1) {
  var $_08;
  var $2 = HEAP32[$_08 >> 2];
  if ($2 >>> 0 < 128) {
   var $12 = HEAP32[HEAP32[___ctype_toupper_loc() >> 2] + ($2 << 2) >> 2];
  } else {
   var $12 = $2;
  }
  var $12;
  HEAP32[$_08 >> 2] = $12;
  var $13 = $_08 + 4 | 0;
  if (($13 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   break;
  } else {
   var $_08 = $13;
  }
 }
 var $_0_lcssa;
 return $_0_lcssa;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 if ($c >>> 0 >= 128) {
  var $10 = $c;
  var $10;
  return $10;
 }
 var $10 = HEAP32[HEAP32[___ctype_tolower_loc() >> 2] + ($c << 2) >> 2];
 var $10;
 return $10;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 if (($low | 0) == ($high | 0)) {
  var $_0_lcssa = $low;
  var $_0_lcssa;
  return $_0_lcssa;
 } else {
  var $_08 = $low;
 }
 while (1) {
  var $_08;
  var $2 = HEAP32[$_08 >> 2];
  if ($2 >>> 0 < 128) {
   var $12 = HEAP32[HEAP32[___ctype_tolower_loc() >> 2] + ($2 << 2) >> 2];
  } else {
   var $12 = $2;
  }
  var $12;
  HEAP32[$_08 >> 2] = $12;
  var $13 = $_08 + 4 | 0;
  if (($13 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   break;
  } else {
   var $_08 = $13;
  }
 }
 var $_0_lcssa;
 return $_0_lcssa;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 if ($c << 24 >> 24 <= -1) {
  var $12 = $c;
  var $12;
  return $12;
 }
 var $12 = HEAP32[HEAP32[___ctype_toupper_loc() >> 2] + (($c & 255) << 2) >> 2] & 255;
 var $12;
 return $12;
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 if (($low | 0) == ($high | 0)) {
  var $_0_lcssa = $low;
  var $_0_lcssa;
  return $_0_lcssa;
 } else {
  var $_08 = $low;
 }
 while (1) {
  var $_08;
  var $2 = HEAP8[$_08];
  if ($2 << 24 >> 24 > -1) {
   var $14 = HEAP32[HEAP32[___ctype_toupper_loc() >> 2] + ($2 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   var $14 = $2;
  }
  var $14;
  HEAP8[$_08] = $14;
  var $15 = $_08 + 1 | 0;
  if (($15 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   break;
  } else {
   var $_08 = $15;
  }
 }
 var $_0_lcssa;
 return $_0_lcssa;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 if ($c << 24 >> 24 <= -1) {
  var $12 = $c;
  var $12;
  return $12;
 }
 var $12 = HEAP32[HEAP32[___ctype_tolower_loc() >> 2] + ($c << 24 >> 24 << 2) >> 2] & 255;
 var $12;
 return $12;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 if (($low | 0) == ($high | 0)) {
  var $_0_lcssa = $low;
  var $_0_lcssa;
  return $_0_lcssa;
 } else {
  var $_08 = $low;
 }
 while (1) {
  var $_08;
  var $2 = HEAP8[$_08];
  if ($2 << 24 >> 24 > -1) {
   var $14 = HEAP32[HEAP32[___ctype_tolower_loc() >> 2] + ($2 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   var $14 = $2;
  }
  var $14;
  HEAP8[$_08] = $14;
  var $15 = $_08 + 1 | 0;
  if (($15 | 0) == ($high | 0)) {
   var $_0_lcssa = $high;
   break;
  } else {
   var $_08 = $15;
  }
 }
 var $_0_lcssa;
 return $_0_lcssa;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE16do_always_noconvEv($this) {
 return 0;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 var $buf_i_i = sp;
 var $buf_i = sp + 8;
 var $tmp = sp + 264;
 var $fend_0 = $frm;
 while (1) {
  var $fend_0;
  if (($fend_0 | 0) == ($frm_end | 0)) {
   var $fend_0_lcssa = $frm_end;
   break;
  }
  if ((HEAP32[$fend_0 >> 2] | 0) == 0) {
   var $fend_0_lcssa = $fend_0;
   break;
  } else {
   var $fend_0 = $fend_0 + 4 | 0;
  }
 }
 var $fend_0_lcssa;
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 L6 : do {
  if (($frm | 0) == ($frm_end | 0) | ($to | 0) == ($to_end | 0)) {
   var $176 = $frm;
  } else {
   var $10 = $to_end;
   var $11 = $this + 8 | 0;
   var $12 = $tmp | 0;
   var $13 = $buf_i | 0;
   var $14 = $buf_i_i | 0;
   var $_0194252 = $to;
   var $_0193253 = $frm;
   var $fend_1254 = $fend_0_lcssa;
   while (1) {
    var $fend_1254;
    var $_0193253;
    var $_0194252;
    var $19 = $fend_1254 - $_0193253 >> 2;
    var $23 = _uselocale(HEAP32[$11 >> 2]);
    var $24 = HEAP32[$frm_nxt >> 2];
    var $25 = ($_0194252 | 0) != 0;
    var $_037_ph_i = $25 ? $10 - $_0194252 | 0 : 256;
    var $s_0_ph_i = $25 ? $_0194252 : $13;
    L10 : do {
     if (($24 | 0) == 0 | ($_037_ph_i | 0) == 0) {
      var $cnt_1_i = 0;
      var $_1_i = $19;
      var $_239_i = $_037_ph_i;
      var $s_053_i = $s_0_ph_i;
      var $ws_i_8 = $24;
     } else {
      var $_03757_i = $_037_ph_i;
      var $_058_i = $19;
      var $cnt_059_i = 0;
      var $s_060_i = $s_0_ph_i;
      var $ws_i_0 = $24;
      while (1) {
       var $ws_i_0;
       var $s_060_i;
       var $cnt_059_i;
       var $_058_i;
       var $_03757_i;
       var $28 = $_058_i >>> 0 >= $_03757_i >>> 0;
       if (!($28 | $_058_i >>> 0 > 32)) {
        var $cnt_1_i = $cnt_059_i;
        var $_1_i = $_058_i;
        var $_239_i = $_03757_i;
        var $s_053_i = $s_060_i;
        var $ws_i_8 = $ws_i_0;
        break L10;
       }
       var $_037__0_i = $28 ? $_03757_i : $_058_i;
       var $30 = $_058_i - $_037__0_i | 0;
       L14 : do {
        if (($s_060_i | 0) == 0) {
         var $34 = HEAP32[$ws_i_0 >> 2];
         if (($34 | 0) == 0) {
          var $_0_i_i2 = 0;
          var $ws_i_7 = $ws_i_0;
          break;
         } else {
          var $_05055_i_i = 0;
          var $ws2_056_i_i = $ws_i_0;
          var $36 = $34;
         }
         while (1) {
          var $36;
          var $ws2_056_i_i;
          var $_05055_i_i;
          if ($36 >>> 0 > 127) {
           var $39 = _wcrtomb($14, $36);
           if (($39 | 0) == -1) {
            var $cnt_1_i = -1;
            var $_1_i = $30;
            var $_239_i = 0;
            var $s_053_i = $s_060_i;
            var $ws_i_8 = $ws_i_0;
            break L10;
           } else {
            var $_pn_i_i = $39;
           }
          } else {
           var $_pn_i_i = 1;
          }
          var $_pn_i_i;
          var $_151_i_i = $_pn_i_i + $_05055_i_i | 0;
          var $42 = $ws2_056_i_i + 4 | 0;
          var $43 = HEAP32[$42 >> 2];
          if (($43 | 0) == 0) {
           var $_0_i_i = $_151_i_i;
           var $ws_i_5 = $ws_i_0;
           label = 32;
           break;
          } else {
           var $_05055_i_i = $_151_i_i;
           var $ws2_056_i_i = $42;
           var $36 = $43;
          }
         }
        } else {
         L16 : do {
          if ($_037__0_i >>> 0 > 3) {
           var $_25272_i_i = $_037__0_i;
           var $_04973_i_i = $s_060_i;
           var $ws_i_1 = $ws_i_0;
           while (1) {
            var $ws_i_1;
            var $_04973_i_i;
            var $_25272_i_i;
            var $45 = HEAP32[$ws_i_1 >> 2];
            if (($45 | 0) == 0) {
             var $_465_i_i = $_25272_i_i;
             var $_266_i_i = $_04973_i_i;
             var $ws_i_3 = $ws_i_1;
             label = 22;
             break L16;
            }
            if ($45 >>> 0 > 127) {
             var $51 = _wcrtomb($_04973_i_i, $45);
             if (($51 | 0) == -1) {
              var $cnt_1_i = -1;
              var $_1_i = $30;
              var $_239_i = 0;
              var $s_053_i = $s_060_i;
              var $ws_i_8 = $ws_i_1;
              break L10;
             }
             var $_1_i_i = $_04973_i_i + $51 | 0;
             var $_353_i_i = $_25272_i_i - $51 | 0;
             var $61 = $ws_i_1;
            } else {
             HEAP8[$_04973_i_i] = $45 & 255;
             var $_1_i_i = $_04973_i_i + 1 | 0;
             var $_353_i_i = $_25272_i_i - 1 | 0;
             var $61 = $ws_i_1;
            }
            var $61;
            var $_353_i_i;
            var $_1_i_i;
            var $62 = $61 + 4 | 0;
            if ($_353_i_i >>> 0 > 3) {
             var $_25272_i_i = $_353_i_i;
             var $_04973_i_i = $_1_i_i;
             var $ws_i_1 = $62;
            } else {
             var $_252_lcssa_i_i = $_353_i_i;
             var $_049_lcssa_i_i = $_1_i_i;
             var $ws_i_2 = $62;
             label = 16;
             break;
            }
           }
          } else {
           var $_252_lcssa_i_i = $_037__0_i;
           var $_049_lcssa_i_i = $s_060_i;
           var $ws_i_2 = $ws_i_0;
           label = 16;
          }
         } while (0);
         if (label == 16) {
          label = 0;
          var $ws_i_2;
          var $_049_lcssa_i_i;
          var $_252_lcssa_i_i;
          if (($_252_lcssa_i_i | 0) == 0) {
           var $_461_i_i = 0;
          } else {
           var $_465_i_i = $_252_lcssa_i_i;
           var $_266_i_i = $_049_lcssa_i_i;
           var $ws_i_3 = $ws_i_2;
           label = 22;
          }
         }
         L27 : do {
          if (label == 22) {
           while (1) {
            label = 0;
            var $ws_i_3;
            var $_266_i_i;
            var $_465_i_i;
            var $64 = HEAP32[$ws_i_3 >> 2];
            if (($64 | 0) == 0) {
             label = 30;
             break;
            }
            if ($64 >>> 0 > 127) {
             var $69 = _wcrtomb($14, $64);
             if (($69 | 0) == -1) {
              var $cnt_1_i = -1;
              var $_1_i = $30;
              var $_239_i = 0;
              var $s_053_i = $s_060_i;
              var $ws_i_8 = $ws_i_3;
              break L10;
             }
             if ($69 >>> 0 > $_465_i_i >>> 0) {
              label = 26;
              break;
             }
             _wcrtomb($_266_i_i, HEAP32[$ws_i_3 >> 2]);
             var $_3_i_i = $_266_i_i + $69 | 0;
             var $_5_i_i = $_465_i_i - $69 | 0;
             var $84 = $ws_i_3;
            } else {
             HEAP8[$_266_i_i] = $64 & 255;
             var $_3_i_i = $_266_i_i + 1 | 0;
             var $_5_i_i = $_465_i_i - 1 | 0;
             var $84 = $ws_i_3;
            }
            var $84;
            var $_5_i_i;
            var $_3_i_i;
            if (($_5_i_i | 0) == 0) {
             var $_461_i_i = 0;
             break L27;
            } else {
             var $_465_i_i = $_5_i_i;
             var $_266_i_i = $_3_i_i;
             var $ws_i_3 = $84 + 4 | 0;
             label = 22;
            }
           }
           if (label == 26) {
            label = 0;
            var $_0_i_i = $_037__0_i - $_465_i_i | 0;
            var $ws_i_5 = $ws_i_3;
            label = 32;
            break L14;
           } else if (label == 30) {
            label = 0;
            HEAP8[$_266_i_i] = 0;
            var $_461_i_i = $_465_i_i;
            break;
           }
          }
         } while (0);
         var $_461_i_i;
         var $_0_i_i = $_037__0_i - $_461_i_i | 0;
         var $ws_i_5 = 0;
         label = 32;
        }
       } while (0);
       if (label == 32) {
        label = 0;
        var $ws_i_5;
        var $_0_i_i;
        if (($_0_i_i | 0) == -1) {
         var $cnt_1_i = -1;
         var $_1_i = $30;
         var $_239_i = 0;
         var $s_053_i = $s_060_i;
         var $ws_i_8 = $ws_i_5;
         break L10;
        } else {
         var $_0_i_i2 = $_0_i_i;
         var $ws_i_7 = $ws_i_5;
        }
       }
       var $ws_i_7;
       var $_0_i_i2;
       if (($s_060_i | 0) == ($13 | 0)) {
        var $s_1_i = $13;
        var $_138_i = $_03757_i;
       } else {
        var $s_1_i = $s_060_i + $_0_i_i2 | 0;
        var $_138_i = $_03757_i - $_0_i_i2 | 0;
       }
       var $_138_i;
       var $s_1_i;
       var $95 = $_0_i_i2 + $cnt_059_i | 0;
       if (($ws_i_7 | 0) == 0 | ($_138_i | 0) == 0) {
        var $cnt_1_i = $95;
        var $_1_i = $30;
        var $_239_i = $_138_i;
        var $s_053_i = $s_1_i;
        var $ws_i_8 = $ws_i_7;
        break;
       } else {
        var $_03757_i = $_138_i;
        var $_058_i = $30;
        var $cnt_059_i = $95;
        var $s_060_i = $s_1_i;
        var $ws_i_0 = $ws_i_7;
       }
      }
     }
    } while (0);
    var $ws_i_8;
    var $s_053_i;
    var $_239_i;
    var $_1_i;
    var $cnt_1_i;
    L54 : do {
     if (($ws_i_8 | 0) == 0) {
      var $cnt_3_i = $cnt_1_i;
      var $ws_i_10 = $ws_i_8;
     } else {
      if (($_239_i | 0) == 0 | ($_1_i | 0) == 0) {
       var $cnt_3_i = $cnt_1_i;
       var $ws_i_10 = $ws_i_8;
       break;
      } else {
       var $_344_i = $_239_i;
       var $_245_i = $_1_i;
       var $cnt_246_i = $cnt_1_i;
       var $s_247_i = $s_053_i;
       var $ws_i_9 = $ws_i_8;
      }
      while (1) {
       var $ws_i_9;
       var $s_247_i;
       var $cnt_246_i;
       var $_245_i;
       var $_344_i;
       var $102 = _wcrtomb($s_247_i, HEAP32[$ws_i_9 >> 2]);
       if (($102 + 1 | 0) >>> 0 < 2) {
        break;
       }
       var $108 = $ws_i_9 + 4 | 0;
       var $109 = $_245_i - 1 | 0;
       var $112 = $cnt_246_i + 1 | 0;
       if (($_344_i | 0) == ($102 | 0) | ($109 | 0) == 0) {
        var $cnt_3_i = $112;
        var $ws_i_10 = $108;
        break L54;
       } else {
        var $_344_i = $_344_i - $102 | 0;
        var $_245_i = $109;
        var $cnt_246_i = $112;
        var $s_247_i = $s_247_i + $102 | 0;
        var $ws_i_9 = $108;
       }
      }
      var $106 = ($102 | 0) == 0;
      var $cnt_3_i = $106 ? $cnt_246_i : -1;
      var $ws_i_10 = $106 ? 0 : $ws_i_9;
     }
    } while (0);
    var $ws_i_10;
    var $cnt_3_i;
    if ($25) {
     HEAP32[$frm_nxt >> 2] = $ws_i_10;
    }
    if (($23 | 0) != 0) {
     _uselocale($23);
    }
    if (($cnt_3_i | 0) == -1) {
     label = 47;
     break;
    } else if (($cnt_3_i | 0) == 0) {
     var $_0 = 1;
     label = 71;
     break;
    }
    var $144 = HEAP32[$to_nxt >> 2] + $cnt_3_i | 0;
    HEAP32[$to_nxt >> 2] = $144;
    if (($144 | 0) == ($to_end | 0)) {
     label = 68;
     break;
    }
    if (($fend_1254 | 0) == ($frm_end | 0)) {
     var $fend_3 = $frm_end;
     var $173 = $144;
     var $172 = HEAP32[$frm_nxt >> 2];
    } else {
     var $150 = _uselocale(HEAP32[$11 >> 2]);
     HEAP8[$12] = 0;
     if (($150 | 0) != 0) {
      _uselocale($150);
     }
     var $156 = HEAP32[$to_nxt >> 2];
     if (($156 | 0) == ($to_end | 0)) {
      var $_0 = 1;
      label = 73;
      break;
     } else {
      var $n_0220 = 0;
      var $p_0221 = $12;
      var $159 = $156;
      var $158 = 0;
     }
     while (1) {
      var $158;
      var $159;
      var $p_0221;
      var $n_0220;
      HEAP32[$to_nxt >> 2] = $159 + 1;
      HEAP8[$159] = $158;
      if (($n_0220 | 0) == 0) {
       break;
      }
      var $162 = $p_0221 + 1 | 0;
      var $n_0220 = $n_0220 - 1 | 0;
      var $p_0221 = $162;
      var $159 = HEAP32[$to_nxt >> 2];
      var $158 = HEAP8[$162];
     }
     var $164 = HEAP32[$frm_nxt >> 2] + 4 | 0;
     HEAP32[$frm_nxt >> 2] = $164;
     var $fend_2 = $164;
     while (1) {
      var $fend_2;
      if (($fend_2 | 0) == ($frm_end | 0)) {
       var $fend_2_lcssa = $frm_end;
       break;
      }
      if ((HEAP32[$fend_2 >> 2] | 0) == 0) {
       var $fend_2_lcssa = $fend_2;
       break;
      } else {
       var $fend_2 = $fend_2 + 4 | 0;
      }
     }
     var $fend_2_lcssa;
     var $fend_3 = $fend_2_lcssa;
     var $173 = HEAP32[$to_nxt >> 2];
     var $172 = $164;
    }
    var $172;
    var $173;
    var $fend_3;
    if (($172 | 0) == ($frm_end | 0) | ($173 | 0) == ($to_end | 0)) {
     var $176 = $172;
     break L6;
    } else {
     var $_0194252 = $173;
     var $_0193253 = $172;
     var $fend_1254 = $fend_3;
    }
   }
   if (label == 47) {
    HEAP32[$to_nxt >> 2] = $_0194252;
    L86 : do {
     if (($_0193253 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      var $_1_lcssa = $_0193253;
     } else {
      var $_1218 = $_0193253;
      var $125 = $_0194252;
      while (1) {
       var $125;
       var $_1218;
       var $126 = HEAP32[$_1218 >> 2];
       var $128 = _uselocale(HEAP32[$11 >> 2]);
       var $129 = _wcrtomb($125, $126);
       if (($128 | 0) != 0) {
        _uselocale($128);
       }
       if (($129 | 0) == -1) {
        var $_1_lcssa = $_1218;
        break L86;
       }
       var $138 = HEAP32[$to_nxt >> 2] + $129 | 0;
       HEAP32[$to_nxt >> 2] = $138;
       var $139 = $_1218 + 4 | 0;
       if (($139 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
        var $_1_lcssa = $139;
        break;
       } else {
        var $_1218 = $139;
        var $125 = $138;
       }
      }
     }
    } while (0);
    var $_1_lcssa;
    HEAP32[$frm_nxt >> 2] = $_1_lcssa;
    var $_0 = 2;
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 68) {
    var $176 = HEAP32[$frm_nxt >> 2];
    break;
   } else if (label == 71) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 73) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
  }
 } while (0);
 var $176;
 var $_0 = ($176 | 0) != ($frm_end | 0) | 0;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 var $wbuf_i = sp;
 var $s_i = sp + 1024;
 var $save_state = sp + 1032;
 var $tmpcast = $save_state;
 var $fend_0 = $frm;
 while (1) {
  var $fend_0;
  if (($fend_0 | 0) == ($frm_end | 0)) {
   var $fend_0_lcssa = $frm_end;
   break;
  }
  if ((HEAP8[$fend_0] | 0) == 0) {
   var $fend_0_lcssa = $fend_0;
   break;
  } else {
   var $fend_0 = $fend_0 + 1 | 0;
  }
 }
 var $fend_0_lcssa;
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 L105 : do {
  if (($frm | 0) == ($frm_end | 0) | ($to | 0) == ($to_end | 0)) {
   var $129 = $frm;
  } else {
   var $10 = $st;
   var $11 = $to_end;
   var $12 = $this + 8 | 0;
   var $15 = $wbuf_i | 0;
   var $16 = $st | 0;
   var $_0202267 = $to;
   var $_0201268 = $frm;
   var $fend_1269 = $fend_0_lcssa;
   while (1) {
    var $fend_1269;
    var $_0201268;
    var $_0202267;
    var $18$1 = HEAP32[$10 + 4 >> 2];
    HEAP32[$save_state >> 2] = HEAP32[$10 >> 2];
    HEAP32[$save_state + 4 >> 2] = $18$1;
    var $19 = $fend_1269;
    var $21 = $19 - $_0201268 | 0;
    var $26 = _uselocale(HEAP32[$12 >> 2]);
    var $27 = HEAP32[$frm_nxt >> 2];
    HEAP32[$s_i >> 2] = $27;
    var $28 = ($_0202267 | 0) != 0;
    var $_040_ph_i = $28 ? $11 - $_0202267 >> 2 : 256;
    var $ws_0_ph_i = $28 ? $_0202267 : $15;
    L109 : do {
     if (($27 | 0) == 0 | ($_040_ph_i | 0) == 0) {
      var $cnt_1_i = 0;
      var $_1_i = $21;
      var $_242_i = $_040_ph_i;
      var $ws_056_i = $ws_0_ph_i;
      var $47 = $27;
     } else {
      var $_04060_i = $_040_ph_i;
      var $_061_i = $21;
      var $cnt_062_i = 0;
      var $ws_063_i = $ws_0_ph_i;
      var $_pr78_i = $27;
      while (1) {
       var $_pr78_i;
       var $ws_063_i;
       var $cnt_062_i;
       var $_061_i;
       var $_04060_i;
       var $31 = $_061_i >>> 2;
       var $32 = $31 >>> 0 >= $_04060_i >>> 0;
       if (!($32 | $_061_i >>> 0 > 131)) {
        var $cnt_1_i = $cnt_062_i;
        var $_1_i = $_061_i;
        var $_242_i = $_04060_i;
        var $ws_056_i = $ws_063_i;
        var $47 = $_pr78_i;
        break L109;
       }
       var $_040__i = $32 ? $_04060_i : $31;
       var $34 = $_061_i - $_040__i | 0;
       var $35 = _mbsrtowcs($ws_063_i, $s_i, $_040__i, $st);
       if (($35 | 0) == -1) {
        break;
       }
       if (($ws_063_i | 0) == ($15 | 0)) {
        var $ws_1_i = $15;
        var $_141_i = $_04060_i;
       } else {
        var $ws_1_i = $ws_063_i + ($35 << 2) | 0;
        var $_141_i = $_04060_i - $35 | 0;
       }
       var $_141_i;
       var $ws_1_i;
       var $43 = $35 + $cnt_062_i | 0;
       var $44 = HEAP32[$s_i >> 2];
       if (($44 | 0) == 0 | ($_141_i | 0) == 0) {
        var $cnt_1_i = $43;
        var $_1_i = $34;
        var $_242_i = $_141_i;
        var $ws_056_i = $ws_1_i;
        var $47 = $44;
        break L109;
       } else {
        var $_04060_i = $_141_i;
        var $_061_i = $34;
        var $cnt_062_i = $43;
        var $ws_063_i = $ws_1_i;
        var $_pr78_i = $44;
       }
      }
      var $cnt_1_i = -1;
      var $_1_i = $34;
      var $_242_i = 0;
      var $ws_056_i = $ws_063_i;
      var $47 = HEAP32[$s_i >> 2];
     }
    } while (0);
    var $47;
    var $ws_056_i;
    var $_242_i;
    var $_1_i;
    var $cnt_1_i;
    L119 : do {
     if (($47 | 0) == 0) {
      var $cnt_3_i = $cnt_1_i;
      var $66 = 0;
     } else {
      if (($_242_i | 0) == 0 | ($_1_i | 0) == 0) {
       var $cnt_3_i = $cnt_1_i;
       var $66 = $47;
       break;
      } else {
       var $_347_i = $_242_i;
       var $_248_i = $_1_i;
       var $cnt_249_i = $cnt_1_i;
       var $ws_250_i = $ws_056_i;
       var $51 = $47;
      }
      while (1) {
       var $51;
       var $ws_250_i;
       var $cnt_249_i;
       var $_248_i;
       var $_347_i;
       var $52 = _mbrtowc($ws_250_i, $51, $_248_i, $st);
       if (($52 + 2 | 0) >>> 0 < 3) {
        break;
       }
       var $59 = $51 + $52 | 0;
       HEAP32[$s_i >> 2] = $59;
       var $62 = $_347_i - 1 | 0;
       var $63 = $cnt_249_i + 1 | 0;
       if (($62 | 0) == 0 | ($_248_i | 0) == ($52 | 0)) {
        var $cnt_3_i = $63;
        var $66 = $59;
        break L119;
       } else {
        var $_347_i = $62;
        var $_248_i = $_248_i - $52 | 0;
        var $cnt_249_i = $63;
        var $ws_250_i = $ws_250_i + 4 | 0;
        var $51 = $59;
       }
      }
      if (($52 | 0) == 0) {
       HEAP32[$s_i >> 2] = 0;
       var $cnt_3_i = $cnt_249_i;
       var $66 = 0;
       break;
      } else if (($52 | 0) == -1) {
       var $cnt_3_i = -1;
       var $66 = $51;
       break;
      } else {
       HEAP32[$16 >> 2] = 0;
       var $cnt_3_i = $cnt_249_i;
       var $66 = $51;
       break;
      }
     }
    } while (0);
    var $66;
    var $cnt_3_i;
    if ($28) {
     HEAP32[$frm_nxt >> 2] = $66;
    }
    if (($26 | 0) != 0) {
     _uselocale($26);
    }
    if (($cnt_3_i | 0) == -1) {
     label = 100;
     break;
    } else if (($cnt_3_i | 0) == 0) {
     var $_0 = 2;
     label = 125;
     break;
    }
    var $100 = HEAP32[$to_nxt >> 2] + ($cnt_3_i << 2) | 0;
    HEAP32[$to_nxt >> 2] = $100;
    if (($100 | 0) == ($to_end | 0)) {
     label = 122;
     break;
    }
    var $_pre314 = HEAP32[$frm_nxt >> 2];
    if (($fend_1269 | 0) == ($frm_end | 0)) {
     var $fend_3 = $frm_end;
     var $126 = $100;
     var $125 = $_pre314;
    } else {
     var $106 = _uselocale(HEAP32[$12 >> 2]);
     var $107 = _mbrtowc($100, $_pre314, 1, $st);
     if (($106 | 0) != 0) {
      _uselocale($106);
     }
     if (($107 | 0) != 0) {
      var $_0 = 2;
      label = 129;
      break;
     }
     HEAP32[$to_nxt >> 2] = HEAP32[$to_nxt >> 2] + 4;
     var $118 = HEAP32[$frm_nxt >> 2] + 1 | 0;
     HEAP32[$frm_nxt >> 2] = $118;
     var $fend_2 = $118;
     while (1) {
      var $fend_2;
      if (($fend_2 | 0) == ($frm_end | 0)) {
       var $fend_2_lcssa = $frm_end;
       break;
      }
      if ((HEAP8[$fend_2] | 0) == 0) {
       var $fend_2_lcssa = $fend_2;
       break;
      } else {
       var $fend_2 = $fend_2 + 1 | 0;
      }
     }
     var $fend_2_lcssa;
     var $fend_3 = $fend_2_lcssa;
     var $126 = HEAP32[$to_nxt >> 2];
     var $125 = $118;
    }
    var $125;
    var $126;
    var $fend_3;
    if (($125 | 0) == ($frm_end | 0) | ($126 | 0) == ($to_end | 0)) {
     var $129 = $125;
     break L105;
    } else {
     var $_0202267 = $126;
     var $_0201268 = $125;
     var $fend_1269 = $fend_3;
    }
   }
   if (label == 100) {
    HEAP32[$to_nxt >> 2] = $_0202267;
    L150 : do {
     if (($_0201268 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      var $_1_lcssa = $_0201268;
     } else {
      var $storemerge231 = $_0202267;
      var $_1232 = $_0201268;
      while (1) {
       var $_1232;
       var $storemerge231;
       var $79 = _uselocale(HEAP32[$12 >> 2]);
       var $80 = _mbrtowc($storemerge231, $_1232, $19 - $_1232 | 0, $tmpcast);
       if (($79 | 0) != 0) {
        _uselocale($79);
       }
       if (($80 | 0) == 0) {
        var $_2 = $_1232 + 1 | 0;
       } else if (($80 | 0) == -1) {
        label = 106;
        break;
       } else if (($80 | 0) == -2) {
        label = 107;
        break;
       } else {
        var $_2 = $_1232 + $80 | 0;
       }
       var $_2;
       var $94 = HEAP32[$to_nxt >> 2] + 4 | 0;
       HEAP32[$to_nxt >> 2] = $94;
       if (($_2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
        var $_1_lcssa = $_2;
        break L150;
       } else {
        var $storemerge231 = $94;
        var $_1232 = $_2;
       }
      }
      if (label == 106) {
       HEAP32[$frm_nxt >> 2] = $_1232;
       var $_0 = 2;
       var $_0;
       STACKTOP = sp;
       return $_0;
      } else if (label == 107) {
       HEAP32[$frm_nxt >> 2] = $_1232;
       var $_0 = 1;
       var $_0;
       STACKTOP = sp;
       return $_0;
      }
     }
    } while (0);
    var $_1_lcssa;
    HEAP32[$frm_nxt >> 2] = $_1_lcssa;
    var $_0 = ($_1_lcssa | 0) != ($frm_end | 0) | 0;
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 122) {
    var $129 = HEAP32[$frm_nxt >> 2];
    break;
   } else if (label == 125) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   } else if (label == 129) {
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
  }
 } while (0);
 var $129;
 var $_0 = ($129 | 0) != ($frm_end | 0) | 0;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 HEAP32[$to_nxt >> 2] = $to;
 var $3 = _uselocale(HEAP32[$this + 8 >> 2]);
 if (($3 | 0) == 0) {
  return 0;
 }
 _uselocale($3);
 return 0;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE11do_encodingEv($this) {
 var $1 = $this + 8 | 0;
 var $3 = _uselocale(HEAP32[$1 >> 2]);
 if (($3 | 0) != 0) {
  _uselocale($3);
 }
 var $9 = HEAP32[$1 >> 2];
 if (($9 | 0) == 0) {
  return 1;
 }
 var $12 = _uselocale($9);
 var $13 = ___locale_mb_cur_max();
 if (($12 | 0) == 0) {
  var $27 = ($13 | 0) == 1;
  var $_ = $27 & 1;
  return $_;
 }
 _uselocale($12);
 var $27 = ($13 | 0) == 1;
 var $_ = $27 & 1;
 return $_;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 var label = 0;
 if (($mx | 0) == 0 | ($frm | 0) == ($frm_end | 0)) {
  var $nbytes_0_lcssa = 0;
  var $nbytes_0_lcssa;
  return $nbytes_0_lcssa;
 }
 var $3 = $frm_end;
 var $4 = $this + 8 | 0;
 var $6 = ($st | 0) != 0 ? $st : 17728;
 var $_06172 = $frm;
 var $nbytes_073 = 0;
 var $nwchar_t_074 = 0;
 while (1) {
  var $nwchar_t_074;
  var $nbytes_073;
  var $_06172;
  var $11 = _uselocale(HEAP32[$4 >> 2]);
  var $12 = _mbrtowc(0, $_06172, $3 - $_06172 | 0, $6);
  if (($11 | 0) != 0) {
   _uselocale($11);
  }
  if (($12 | 0) == -1 | ($12 | 0) == -2) {
   var $nbytes_0_lcssa = $nbytes_073;
   label = 167;
   break;
  } else if (($12 | 0) == 0) {
   var $_pn = 1;
   var $_1 = $_06172 + 1 | 0;
  } else {
   var $_pn = $12;
   var $_1 = $_06172 + $12 | 0;
  }
  var $_1;
  var $_pn;
  var $nbytes_1 = $_pn + $nbytes_073 | 0;
  var $23 = $nwchar_t_074 + 1 | 0;
  if ($23 >>> 0 >= $mx >>> 0 | ($_1 | 0) == ($frm_end | 0)) {
   var $nbytes_0_lcssa = $nbytes_1;
   label = 168;
   break;
  } else {
   var $_06172 = $_1;
   var $nbytes_073 = $nbytes_1;
   var $nwchar_t_074 = $23;
  }
 }
 if (label == 167) {
  var $nbytes_0_lcssa;
  return $nbytes_0_lcssa;
 } else if (label == 168) {
  var $nbytes_0_lcssa;
  return $nbytes_0_lcssa;
 }
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE11do_encodingEv($this) {
 return 0;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE16do_always_noconvEv($this) {
 return 0;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE13do_max_lengthEv($this) {
 return 4;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var $2 = $frm_end;
 L212 : do {
  if ($frm >>> 0 < $frm_end >>> 0) {
   var $4 = $to_end;
   var $_to_nxt_0 = $to;
   var $_frm_nxt_0 = $frm;
   while (1) {
    var $_frm_nxt_0;
    var $_to_nxt_0;
    var $6 = HEAP16[$_frm_nxt_0 >> 1];
    var $7 = $6 & 65535;
    do {
     if (($6 & 65535) < 128) {
      if (($4 - $_to_nxt_0 | 0) < 1) {
       var $_0_i = 1;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_2 = $_frm_nxt_0;
       break L212;
      }
      HEAP8[$_to_nxt_0] = $6 & 255;
      var $_to_nxt_1 = $_to_nxt_0 + 1 | 0;
      var $_frm_nxt_1 = $_frm_nxt_0;
     } else {
      if (($6 & 65535) < 2048) {
       if (($4 - $_to_nxt_0 | 0) < 2) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_2 = $_frm_nxt_0;
        break L212;
       }
       HEAP8[$_to_nxt_0] = ($7 >>> 6 | 192) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($7 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 2 | 0;
       var $_frm_nxt_1 = $_frm_nxt_0;
       break;
      }
      if (($6 & 65535) < 55296) {
       if (($4 - $_to_nxt_0 | 0) < 3) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_2 = $_frm_nxt_0;
        break L212;
       }
       HEAP8[$_to_nxt_0] = ($7 >>> 12 | 224) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($7 >>> 6 & 63 | 128) & 255;
       HEAP8[$_to_nxt_0 + 2 | 0] = ($7 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 3 | 0;
       var $_frm_nxt_1 = $_frm_nxt_0;
       break;
      }
      if (($6 & 65535) >= 56320) {
       if (($6 & 65535) < 57344) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_2 = $_frm_nxt_0;
        break L212;
       }
       if (($4 - $_to_nxt_0 | 0) < 3) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_2 = $_frm_nxt_0;
        break L212;
       }
       HEAP8[$_to_nxt_0] = ($7 >>> 12 | 224) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($7 >>> 6 & 63 | 128) & 255;
       HEAP8[$_to_nxt_0 + 2 | 0] = ($7 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 3 | 0;
       var $_frm_nxt_1 = $_frm_nxt_0;
       break;
      }
      if (($2 - $_frm_nxt_0 | 0) < 4) {
       var $_0_i = 1;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_2 = $_frm_nxt_0;
       break L212;
      }
      var $58 = $_frm_nxt_0 + 2 | 0;
      var $60 = HEAPU16[$58 >> 1];
      if (($60 & 64512 | 0) != 56320) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_2 = $_frm_nxt_0;
       break L212;
      }
      if (($4 - $_to_nxt_0 | 0) < 4) {
       var $_0_i = 1;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_2 = $_frm_nxt_0;
       break L212;
      }
      var $68 = $7 & 960;
      if ((($68 << 10) + 65536 | 0) >>> 0 > 1114111) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_2 = $_frm_nxt_0;
       break L212;
      }
      var $74 = ($68 >>> 6) + 1 | 0;
      HEAP8[$_to_nxt_0] = ($74 >>> 2 | 240) & 255;
      HEAP8[$_to_nxt_0 + 1 | 0] = ($7 >>> 2 & 15 | $74 << 4 & 48 | 128) & 255;
      HEAP8[$_to_nxt_0 + 2 | 0] = ($7 << 4 & 48 | $60 >>> 6 & 15 | 128) & 255;
      HEAP8[$_to_nxt_0 + 3 | 0] = ($60 & 63 | 128) & 255;
      var $_to_nxt_1 = $_to_nxt_0 + 4 | 0;
      var $_frm_nxt_1 = $58;
     }
    } while (0);
    var $_frm_nxt_1;
    var $_to_nxt_1;
    var $120 = $_frm_nxt_1 + 2 | 0;
    if ($120 >>> 0 < $frm_end >>> 0) {
     var $_to_nxt_0 = $_to_nxt_1;
     var $_frm_nxt_0 = $120;
    } else {
     var $_0_i = 0;
     var $_to_nxt_2 = $_to_nxt_1;
     var $_frm_nxt_2 = $120;
     break;
    }
   }
  } else {
   var $_0_i = 0;
   var $_to_nxt_2 = $to;
   var $_frm_nxt_2 = $frm;
  }
 } while (0);
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $_0_i;
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt_2 - $frm >> 1 << 1);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt_2 - $to);
 return $_0_i;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 L240 : do {
  if ($frm >>> 0 < $frm_end >>> 0) {
   var $3 = $frm_end;
   var $4 = $to_end;
   var $_to_nxt_0 = $to;
   var $_frm_nxt_0 = $frm;
   while (1) {
    var $_frm_nxt_0;
    var $_to_nxt_0;
    if ($_to_nxt_0 >>> 0 >= $to_end >>> 0) {
     var $_to_nxt_2 = $_to_nxt_0;
     var $_frm_nxt_2 = $_frm_nxt_0;
     label = 225;
     break L240;
    }
    var $8 = HEAP8[$_frm_nxt_0];
    var $9 = $8 & 255;
    do {
     if ($8 << 24 >> 24 > -1) {
      HEAP16[$_to_nxt_0 >> 1] = $8 & 255;
      var $_to_nxt_1 = $_to_nxt_0;
      var $_frm_nxt_1 = $_frm_nxt_0 + 1 | 0;
     } else {
      if (($8 & 255) < 194) {
       var $_0_i = 2;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      if (($8 & 255) < 224) {
       if (($3 - $_frm_nxt_0 | 0) < 2) {
        var $_0_i = 1;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
       var $25 = HEAPU8[$_frm_nxt_0 + 1 | 0];
       if (($25 & 192 | 0) != 128) {
        var $_0_i = 2;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
       HEAP16[$_to_nxt_0 >> 1] = ($25 & 63 | $9 << 6 & 1984) & 65535;
       var $_to_nxt_1 = $_to_nxt_0;
       var $_frm_nxt_1 = $_frm_nxt_0 + 2 | 0;
       break;
      }
      if (($8 & 255) < 240) {
       if (($3 - $_frm_nxt_0 | 0) < 3) {
        var $_0_i = 1;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
       var $43 = HEAP8[$_frm_nxt_0 + 1 | 0];
       var $45 = HEAP8[$_frm_nxt_0 + 2 | 0];
       if (($9 | 0) == 224) {
        if (($43 & -32) << 24 >> 24 != -96) {
         var $_0_i = 2;
         var $_to_nxt_3 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L240;
        }
       } else if (($9 | 0) == 237) {
        if (($43 & -32) << 24 >> 24 != -128) {
         var $_0_i = 2;
         var $_to_nxt_3 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L240;
        }
       } else {
        if (($43 & -64) << 24 >> 24 != -128) {
         var $_0_i = 2;
         var $_to_nxt_3 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L240;
        }
       }
       var $56 = $45 & 255;
       if (($56 & 192 | 0) != 128) {
        var $_0_i = 2;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
       HEAP16[$_to_nxt_0 >> 1] = (($43 & 255) << 6 & 4032 | $9 << 12 | $56 & 63) & 65535;
       var $_to_nxt_1 = $_to_nxt_0;
       var $_frm_nxt_1 = $_frm_nxt_0 + 3 | 0;
       break;
      }
      if (($8 & 255) >= 245) {
       var $_0_i = 2;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      if (($3 - $_frm_nxt_0 | 0) < 4) {
       var $_0_i = 1;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      var $77 = HEAP8[$_frm_nxt_0 + 1 | 0];
      var $79 = HEAP8[$_frm_nxt_0 + 2 | 0];
      var $81 = HEAP8[$_frm_nxt_0 + 3 | 0];
      if (($9 | 0) == 240) {
       if (($77 + 112 & 255) >= 48) {
        var $_0_i = 2;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
      } else if (($9 | 0) == 244) {
       if (($77 & -16) << 24 >> 24 != -128) {
        var $_0_i = 2;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
      } else {
       if (($77 & -64) << 24 >> 24 != -128) {
        var $_0_i = 2;
        var $_to_nxt_3 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L240;
       }
      }
      var $91 = $79 & 255;
      if (($91 & 192 | 0) != 128) {
       var $_0_i = 2;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      var $95 = $81 & 255;
      if (($95 & 192 | 0) != 128) {
       var $_0_i = 2;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      if (($4 - $_to_nxt_0 | 0) < 4) {
       var $_0_i = 1;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      var $103 = $9 & 7;
      var $105 = $77 & 255;
      if (($105 << 12 & 196608 | $103 << 18) >>> 0 > 1114111) {
       var $_0_i = 2;
       var $_to_nxt_3 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L240;
      }
      HEAP16[$_to_nxt_0 >> 1] = ($105 << 2 & 60 | $91 >>> 4 & 3 | (($105 >>> 4 & 3 | $103 << 2) << 6) + 16320 | 55296) & 65535;
      var $131 = $_to_nxt_0 + 2 | 0;
      HEAP16[$131 >> 1] = ($95 & 63 | $91 << 6 & 960 | 56320) & 65535;
      var $_to_nxt_1 = $131;
      var $_frm_nxt_1 = $_frm_nxt_0 + 4 | 0;
     }
    } while (0);
    var $_frm_nxt_1;
    var $_to_nxt_1;
    var $134 = $_to_nxt_1 + 2 | 0;
    if ($_frm_nxt_1 >>> 0 < $frm_end >>> 0) {
     var $_to_nxt_0 = $134;
     var $_frm_nxt_0 = $_frm_nxt_1;
    } else {
     var $_to_nxt_2 = $134;
     var $_frm_nxt_2 = $_frm_nxt_1;
     label = 225;
     break;
    }
   }
  } else {
   var $_to_nxt_2 = $to;
   var $_frm_nxt_2 = $frm;
   label = 225;
  }
 } while (0);
 if (label == 225) {
  var $_frm_nxt_2;
  var $_to_nxt_2;
  var $_0_i = $_frm_nxt_2 >>> 0 < $frm_end >>> 0 | 0;
  var $_to_nxt_3 = $_to_nxt_2;
  var $_frm_nxt_3 = $_frm_nxt_2;
 }
 var $_frm_nxt_3;
 var $_to_nxt_3;
 var $_0_i;
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt_3 - $frm);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt_3 - $to >> 1 << 1);
 return $_0_i;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 L280 : do {
  if ($frm >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   var $4 = $frm_end;
   var $nchar16_t_084_i = 0;
   var $frm_nxt_185_i = $frm;
   L282 : while (1) {
    var $frm_nxt_185_i;
    var $nchar16_t_084_i;
    var $5 = HEAP8[$frm_nxt_185_i];
    var $6 = $5 & 255;
    do {
     if ($5 << 24 >> 24 > -1) {
      var $frm_nxt_2_i = $frm_nxt_185_i + 1 | 0;
      var $nchar16_t_1_i = $nchar16_t_084_i;
     } else {
      if (($5 & 255) < 194) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      if (($5 & 255) < 224) {
       if (($4 - $frm_nxt_185_i | 0) < 2) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
        break L280;
       }
       if ((HEAP8[$frm_nxt_185_i + 1 | 0] & -64) << 24 >> 24 != -128) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
        break L280;
       }
       var $frm_nxt_2_i = $frm_nxt_185_i + 2 | 0;
       var $nchar16_t_1_i = $nchar16_t_084_i;
       break;
      }
      if (($5 & 255) < 240) {
       var $28 = $frm_nxt_185_i;
       if (($4 - $28 | 0) < 3) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
        break L280;
       }
       var $33 = HEAP8[$frm_nxt_185_i + 1 | 0];
       var $35 = HEAP8[$frm_nxt_185_i + 2 | 0];
       if (($6 | 0) == 224) {
        if (($33 & -32) << 24 >> 24 != -96) {
         label = 240;
         break L282;
        }
       } else if (($6 | 0) == 237) {
        if (($33 & -32) << 24 >> 24 != -128) {
         label = 242;
         break L282;
        }
       } else {
        if (($33 & -64) << 24 >> 24 != -128) {
         label = 244;
         break L282;
        }
       }
       if (($35 & -64) << 24 >> 24 != -128) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
        break L280;
       }
       var $frm_nxt_2_i = $frm_nxt_185_i + 3 | 0;
       var $nchar16_t_1_i = $nchar16_t_084_i;
       break;
      }
      if (($5 & 255) >= 245) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      var $62 = $frm_nxt_185_i;
      if (($4 - $62 | 0) < 4) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      if (($mx - $nchar16_t_084_i | 0) >>> 0 < 2) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      var $70 = HEAP8[$frm_nxt_185_i + 1 | 0];
      var $72 = HEAP8[$frm_nxt_185_i + 2 | 0];
      var $74 = HEAP8[$frm_nxt_185_i + 3 | 0];
      if (($6 | 0) == 240) {
       if (($70 + 112 & 255) >= 48) {
        label = 252;
        break L282;
       }
      } else if (($6 | 0) == 244) {
       if (($70 & -16) << 24 >> 24 != -128) {
        label = 254;
        break L282;
       }
      } else {
       if (($70 & -64) << 24 >> 24 != -128) {
        label = 256;
        break L282;
       }
      }
      if (($72 & -64) << 24 >> 24 != -128) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      if (($74 & -64) << 24 >> 24 != -128) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      if ((($70 & 255) << 12 & 196608 | $6 << 18 & 1835008) >>> 0 > 1114111) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_185_i;
       break L280;
      }
      var $frm_nxt_2_i = $frm_nxt_185_i + 4 | 0;
      var $nchar16_t_1_i = $nchar16_t_084_i + 1 | 0;
     }
    } while (0);
    var $nchar16_t_1_i;
    var $frm_nxt_2_i;
    var $110 = $nchar16_t_1_i + 1 | 0;
    if ($frm_nxt_2_i >>> 0 < $frm_end >>> 0 & $110 >>> 0 < $mx >>> 0) {
     var $nchar16_t_084_i = $110;
     var $frm_nxt_185_i = $frm_nxt_2_i;
    } else {
     var $frm_nxt_1_lcssa_i = $frm_nxt_2_i;
     break L280;
    }
   }
   if (label == 240) {
    var $_0_i = $28 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 242) {
    var $_0_i = $28 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 244) {
    var $_0_i = $28 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 252) {
    var $_0_i = $62 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 254) {
    var $_0_i = $62 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 256) {
    var $_0_i = $62 - $frm | 0;
    var $_0_i;
    return $_0_i;
   }
  } else {
   var $frm_nxt_1_lcssa_i = $frm;
  }
 } while (0);
 var $frm_nxt_1_lcssa_i;
 var $_0_i = $frm_nxt_1_lcssa_i - $frm | 0;
 var $_0_i;
 return $_0_i;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 L331 : do {
  if ($frm >>> 0 < $frm_end >>> 0) {
   var $3 = $to_end;
   var $_to_nxt_0 = $to;
   var $_frm_nxt_0 = $frm;
   while (1) {
    var $_frm_nxt_0;
    var $_to_nxt_0;
    var $5 = HEAP32[$_frm_nxt_0 >> 2];
    if (($5 & -2048 | 0) == 55296 | $5 >>> 0 > 1114111) {
     var $_0_i = 2;
     var $_to_nxt_2 = $_to_nxt_0;
     var $_frm_nxt_1 = $_frm_nxt_0;
     break L331;
    }
    do {
     if ($5 >>> 0 < 128) {
      if (($3 - $_to_nxt_0 | 0) < 1) {
       var $_0_i = 1;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_1 = $_frm_nxt_0;
       break L331;
      }
      HEAP8[$_to_nxt_0] = $5 & 255;
      var $_to_nxt_1 = $_to_nxt_0 + 1 | 0;
     } else {
      if ($5 >>> 0 < 2048) {
       if (($3 - $_to_nxt_0 | 0) < 2) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_1 = $_frm_nxt_0;
        break L331;
       }
       HEAP8[$_to_nxt_0] = ($5 >>> 6 | 192) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($5 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 2 | 0;
       break;
      }
      var $36 = $3 - $_to_nxt_0 | 0;
      if ($5 >>> 0 < 65536) {
       if (($36 | 0) < 3) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_1 = $_frm_nxt_0;
        break L331;
       }
       HEAP8[$_to_nxt_0] = ($5 >>> 12 | 224) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($5 >>> 6 & 63 | 128) & 255;
       HEAP8[$_to_nxt_0 + 2 | 0] = ($5 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 3 | 0;
       break;
      } else {
       if (($36 | 0) < 4) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_1 = $_frm_nxt_0;
        break L331;
       }
       HEAP8[$_to_nxt_0] = ($5 >>> 18 | 240) & 255;
       HEAP8[$_to_nxt_0 + 1 | 0] = ($5 >>> 12 & 63 | 128) & 255;
       HEAP8[$_to_nxt_0 + 2 | 0] = ($5 >>> 6 & 63 | 128) & 255;
       HEAP8[$_to_nxt_0 + 3 | 0] = ($5 & 63 | 128) & 255;
       var $_to_nxt_1 = $_to_nxt_0 + 4 | 0;
       break;
      }
     }
    } while (0);
    var $_to_nxt_1;
    var $75 = $_frm_nxt_0 + 4 | 0;
    if ($75 >>> 0 < $frm_end >>> 0) {
     var $_to_nxt_0 = $_to_nxt_1;
     var $_frm_nxt_0 = $75;
    } else {
     var $_0_i = 0;
     var $_to_nxt_2 = $_to_nxt_1;
     var $_frm_nxt_1 = $75;
     break;
    }
   }
  } else {
   var $_0_i = 0;
   var $_to_nxt_2 = $to;
   var $_frm_nxt_1 = $frm;
  }
 } while (0);
 var $_frm_nxt_1;
 var $_to_nxt_2;
 var $_0_i;
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt_1 - $frm >> 2 << 2);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt_2 - $to);
 return $_0_i;
}
function __ZNSt3__17codecvtIDsc10_mbstate_tED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__17codecvtIDic10_mbstate_tED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE13do_max_lengthEv($this) {
 var $2 = HEAP32[$this + 8 >> 2];
 do {
  if (($2 | 0) == 0) {
   var $20 = 1;
  } else {
   var $5 = _uselocale($2);
   var $6 = ___locale_mb_cur_max();
   if (($5 | 0) == 0) {
    var $20 = $6;
    break;
   }
   _uselocale($5);
   var $20 = $6;
  }
 } while (0);
 var $20;
 return $20;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE11do_encodingEv($this) {
 return 0;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE16do_always_noconvEv($this) {
 return 0;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE13do_max_lengthEv($this) {
 return 4;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 L373 : do {
  if ($frm >>> 0 < $frm_end >>> 0) {
   var $3 = $frm_end;
   var $_to_nxt_0 = $to;
   var $_frm_nxt_0 = $frm;
   while (1) {
    var $_frm_nxt_0;
    var $_to_nxt_0;
    if ($_to_nxt_0 >>> 0 >= $to_end >>> 0) {
     var $_to_nxt_1 = $_to_nxt_0;
     var $_frm_nxt_2 = $_frm_nxt_0;
     label = 342;
     break L373;
    }
    var $7 = HEAP8[$_frm_nxt_0];
    var $8 = $7 & 255;
    do {
     if ($7 << 24 >> 24 > -1) {
      HEAP32[$_to_nxt_0 >> 2] = $8;
      var $_frm_nxt_1 = $_frm_nxt_0 + 1 | 0;
     } else {
      if (($7 & 255) < 194) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      if (($7 & 255) < 224) {
       if (($3 - $_frm_nxt_0 | 0) < 2) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
       var $23 = HEAPU8[$_frm_nxt_0 + 1 | 0];
       if (($23 & 192 | 0) != 128) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
       HEAP32[$_to_nxt_0 >> 2] = $23 & 63 | $8 << 6 & 1984;
       var $_frm_nxt_1 = $_frm_nxt_0 + 2 | 0;
       break;
      }
      if (($7 & 255) < 240) {
       if (($3 - $_frm_nxt_0 | 0) < 3) {
        var $_0_i = 1;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
       var $40 = HEAP8[$_frm_nxt_0 + 1 | 0];
       var $42 = HEAP8[$_frm_nxt_0 + 2 | 0];
       if (($8 | 0) == 224) {
        if (($40 & -32) << 24 >> 24 != -96) {
         var $_0_i = 2;
         var $_to_nxt_2 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L373;
        }
       } else if (($8 | 0) == 237) {
        if (($40 & -32) << 24 >> 24 != -128) {
         var $_0_i = 2;
         var $_to_nxt_2 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L373;
        }
       } else {
        if (($40 & -64) << 24 >> 24 != -128) {
         var $_0_i = 2;
         var $_to_nxt_2 = $_to_nxt_0;
         var $_frm_nxt_3 = $_frm_nxt_0;
         break L373;
        }
       }
       var $53 = $42 & 255;
       if (($53 & 192 | 0) != 128) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
       HEAP32[$_to_nxt_0 >> 2] = ($40 & 255) << 6 & 4032 | $8 << 12 & 61440 | $53 & 63;
       var $_frm_nxt_1 = $_frm_nxt_0 + 3 | 0;
       break;
      }
      if (($7 & 255) >= 245) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      if (($3 - $_frm_nxt_0 | 0) < 4) {
       var $_0_i = 1;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      var $74 = HEAP8[$_frm_nxt_0 + 1 | 0];
      var $76 = HEAP8[$_frm_nxt_0 + 2 | 0];
      var $78 = HEAP8[$_frm_nxt_0 + 3 | 0];
      if (($8 | 0) == 240) {
       if (($74 + 112 & 255) >= 48) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
      } else if (($8 | 0) == 244) {
       if (($74 & -16) << 24 >> 24 != -128) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
      } else {
       if (($74 & -64) << 24 >> 24 != -128) {
        var $_0_i = 2;
        var $_to_nxt_2 = $_to_nxt_0;
        var $_frm_nxt_3 = $_frm_nxt_0;
        break L373;
       }
      }
      var $88 = $76 & 255;
      if (($88 & 192 | 0) != 128) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      var $92 = $78 & 255;
      if (($92 & 192 | 0) != 128) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      var $106 = ($74 & 255) << 12 & 258048 | $8 << 18 & 1835008 | $88 << 6 & 4032 | $92 & 63;
      if ($106 >>> 0 > 1114111) {
       var $_0_i = 2;
       var $_to_nxt_2 = $_to_nxt_0;
       var $_frm_nxt_3 = $_frm_nxt_0;
       break L373;
      }
      HEAP32[$_to_nxt_0 >> 2] = $106;
      var $_frm_nxt_1 = $_frm_nxt_0 + 4 | 0;
     }
    } while (0);
    var $_frm_nxt_1;
    var $111 = $_to_nxt_0 + 4 | 0;
    if ($_frm_nxt_1 >>> 0 < $frm_end >>> 0) {
     var $_to_nxt_0 = $111;
     var $_frm_nxt_0 = $_frm_nxt_1;
    } else {
     var $_to_nxt_1 = $111;
     var $_frm_nxt_2 = $_frm_nxt_1;
     label = 342;
     break;
    }
   }
  } else {
   var $_to_nxt_1 = $to;
   var $_frm_nxt_2 = $frm;
   label = 342;
  }
 } while (0);
 if (label == 342) {
  var $_frm_nxt_2;
  var $_to_nxt_1;
  var $_0_i = $_frm_nxt_2 >>> 0 < $frm_end >>> 0 | 0;
  var $_to_nxt_2 = $_to_nxt_1;
  var $_frm_nxt_3 = $_frm_nxt_2;
 }
 var $_frm_nxt_3;
 var $_to_nxt_2;
 var $_0_i;
 HEAP32[$frm_nxt >> 2] = $frm + ($_frm_nxt_3 - $frm);
 HEAP32[$to_nxt >> 2] = $to + ($_to_nxt_2 - $to >> 2 << 2);
 return $_0_i;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 L412 : do {
  if ($frm >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   var $4 = $frm_end;
   var $nchar32_t_080_i = 1;
   var $frm_nxt_181_i = $frm;
   L414 : while (1) {
    var $frm_nxt_181_i;
    var $nchar32_t_080_i;
    var $6 = HEAP8[$frm_nxt_181_i];
    var $7 = $6 & 255;
    do {
     if ($6 << 24 >> 24 > -1) {
      var $frm_nxt_2_i = $frm_nxt_181_i + 1 | 0;
     } else {
      if (($6 & 255) < 194) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      if (($6 & 255) < 224) {
       if (($4 - $frm_nxt_181_i | 0) < 2) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
        break L412;
       }
       if ((HEAP8[$frm_nxt_181_i + 1 | 0] & -64) << 24 >> 24 != -128) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
        break L412;
       }
       var $frm_nxt_2_i = $frm_nxt_181_i + 2 | 0;
       break;
      }
      if (($6 & 255) < 240) {
       var $29 = $frm_nxt_181_i;
       if (($4 - $29 | 0) < 3) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
        break L412;
       }
       var $34 = HEAP8[$frm_nxt_181_i + 1 | 0];
       var $36 = HEAP8[$frm_nxt_181_i + 2 | 0];
       if (($7 | 0) == 224) {
        if (($34 & -32) << 24 >> 24 != -96) {
         label = 357;
         break L414;
        }
       } else if (($7 | 0) == 237) {
        if (($34 & -32) << 24 >> 24 != -128) {
         label = 359;
         break L414;
        }
       } else {
        if (($34 & -64) << 24 >> 24 != -128) {
         label = 361;
         break L414;
        }
       }
       if (($36 & -64) << 24 >> 24 != -128) {
        var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
        break L412;
       }
       var $frm_nxt_2_i = $frm_nxt_181_i + 3 | 0;
       break;
      }
      if (($6 & 255) >= 245) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      var $63 = $frm_nxt_181_i;
      if (($4 - $63 | 0) < 4) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      var $68 = HEAP8[$frm_nxt_181_i + 1 | 0];
      var $70 = HEAP8[$frm_nxt_181_i + 2 | 0];
      var $72 = HEAP8[$frm_nxt_181_i + 3 | 0];
      if (($7 | 0) == 240) {
       if (($68 + 112 & 255) >= 48) {
        label = 368;
        break L414;
       }
      } else if (($7 | 0) == 244) {
       if (($68 & -16) << 24 >> 24 != -128) {
        label = 370;
        break L414;
       }
      } else {
       if (($68 & -64) << 24 >> 24 != -128) {
        label = 372;
        break L414;
       }
      }
      if (($70 & -64) << 24 >> 24 != -128) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      if (($72 & -64) << 24 >> 24 != -128) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      if ((($68 & 255) << 12 & 196608 | $7 << 18 & 1835008) >>> 0 > 1114111) {
       var $frm_nxt_1_lcssa_i = $frm_nxt_181_i;
       break L412;
      }
      var $frm_nxt_2_i = $frm_nxt_181_i + 4 | 0;
     }
    } while (0);
    var $frm_nxt_2_i;
    if (!($frm_nxt_2_i >>> 0 < $frm_end >>> 0 & $nchar32_t_080_i >>> 0 < $mx >>> 0)) {
     var $frm_nxt_1_lcssa_i = $frm_nxt_2_i;
     break L412;
    }
    var $nchar32_t_080_i = $nchar32_t_080_i + 1 | 0;
    var $frm_nxt_181_i = $frm_nxt_2_i;
   }
   if (label == 357) {
    var $_0_i = $29 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 359) {
    var $_0_i = $29 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 361) {
    var $_0_i = $29 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 368) {
    var $_0_i = $63 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 370) {
    var $_0_i = $63 - $frm | 0;
    var $_0_i;
    return $_0_i;
   } else if (label == 372) {
    var $_0_i = $63 - $frm | 0;
    var $_0_i;
    return $_0_i;
   }
  } else {
   var $frm_nxt_1_lcssa_i = $frm;
  }
 } while (0);
 var $frm_nxt_1_lcssa_i;
 var $_0_i = $frm_nxt_1_lcssa_i - $frm | 0;
 var $_0_i;
 return $_0_i;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 return HEAP8[$this + 8 | 0];
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 return HEAP32[$this + 8 >> 2];
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 return HEAP8[$this + 9 | 0];
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 return HEAP32[$this + 12 >> 2];
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result, $this) {
 var $1 = $agg_result;
 HEAP8[$agg_result] = 8;
 var $4 = $1 + 1 | 0;
 tempBigInt = 1702195828;
 HEAP8[$4] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$4 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$4 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$4 + 3 | 0] = tempBigInt & 255;
 HEAP8[$1 + 5 | 0] = 0;
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 HEAP32[$this >> 2] = 10368;
 do {
  if ((HEAP8[$this + 12 | 0] & 1) != 0) {
   var $9 = HEAP32[$this + 20 >> 2];
   if (($9 | 0) != 0) {
    _free($9);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 HEAP32[$this >> 2] = 10368;
 if ((HEAP8[$this + 12 | 0] & 1) == 0) {
  return;
 }
 var $9 = HEAP32[$this + 20 >> 2];
 if (($9 | 0) == 0) {
  return;
 }
 _free($9);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 HEAP32[$this >> 2] = 10320;
 do {
  if ((HEAP8[$this + 16 | 0] & 1) != 0) {
   var $9 = HEAP32[$this + 24 >> 2];
   if (($9 | 0) != 0) {
    _free($9);
   }
   if (($this | 0) != 0) {
    break;
   }
   return;
  }
 } while (0);
 _free($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 HEAP32[$this >> 2] = 10320;
 if ((HEAP8[$this + 16 | 0] & 1) == 0) {
  return;
 }
 var $9 = HEAP32[$this + 24 >> 2];
 if (($9 | 0) == 0) {
  return;
 }
 _free($9);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result, $this) {
 var $1 = $agg_result;
 HEAP8[$agg_result] = 10;
 var $3 = $1 + 1 | 0;
 HEAP8[$3] = HEAP8[6040 | 0];
 HEAP8[$3 + 1 | 0] = HEAP8[6041 | 0];
 HEAP8[$3 + 2 | 0] = HEAP8[6042 | 0];
 HEAP8[$3 + 3 | 0] = HEAP8[6043 | 0];
 HEAP8[$3 + 4 | 0] = HEAP8[6044 | 0];
 HEAP8[$1 + 6 | 0] = 0;
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $2 = $this + 12 | 0;
 if ((HEAP8[$2] & 1) == 0) {
  var $7 = $agg_result;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  return;
 }
 var $10 = HEAP32[$this + 20 >> 2];
 var $12 = HEAP32[$this + 16 >> 2];
 if (($12 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($12 >>> 0 < 11) {
   HEAP8[$agg_result] = $12 << 1 & 255;
   var $__p_0_i_i_i = $agg_result + 1 | 0;
  } else {
   var $24 = $12 + 16 & -16;
   var $_size_i = ($24 | 0) == 0 ? 1 : $24;
   while (1) {
    var $27 = _malloc($_size_i);
    if (($27 | 0) != 0) {
     label = 451;
     break;
    }
    var $30 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($30 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$30]();
   }
   if (label == 451) {
    HEAP32[$agg_result + 8 >> 2] = $27;
    HEAP32[$agg_result >> 2] = $24 | 1;
    HEAP32[$agg_result + 4 >> 2] = $12;
    var $__p_0_i_i_i = $27;
    break;
   }
   var $40 = ___cxa_allocate_exception(4);
   HEAP32[$40 >> 2] = 9744;
   ___cxa_throw($40, 15960, 74);
  }
 } while (0);
 var $__p_0_i_i_i;
 _memcpy($__p_0_i_i_i, $10, $12) | 0;
 HEAP8[$__p_0_i_i_i + $12 | 0] = 0;
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $2 = $this + 16 | 0;
 if ((HEAP8[$2] & 1) == 0) {
  var $7 = $agg_result;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  return;
 }
 var $10 = HEAP32[$this + 24 >> 2];
 var $12 = HEAP32[$this + 20 >> 2];
 if (($12 | 0) == -1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($12 >>> 0 < 11) {
   HEAP8[$agg_result] = $12 << 1 & 255;
   var $__p_0_i_i_i = $agg_result + 1 | 0;
  } else {
   var $24 = $12 + 16 & -16;
   var $_size_i = ($24 | 0) == 0 ? 1 : $24;
   while (1) {
    var $27 = _malloc($_size_i);
    if (($27 | 0) != 0) {
     label = 473;
     break;
    }
    var $30 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($30 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$30]();
   }
   if (label == 473) {
    HEAP32[$agg_result + 8 >> 2] = $27;
    HEAP32[$agg_result >> 2] = $24 | 1;
    HEAP32[$agg_result + 4 >> 2] = $12;
    var $__p_0_i_i_i = $27;
    break;
   }
   var $40 = ___cxa_allocate_exception(4);
   HEAP32[$40 >> 2] = 9744;
   ___cxa_throw($40, 15960, 74);
  }
 } while (0);
 var $__p_0_i_i_i;
 _memcpy($__p_0_i_i_i, $10, $12) | 0;
 HEAP8[$__p_0_i_i_i + $12 | 0] = 0;
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result, $this) {
 var label = 0;
 var $_0_i = 6096;
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $6 = $_0_i - 6096 | 0;
 var $7 = $6 >> 2;
 if ($7 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($7 >>> 0 < 2) {
   HEAP8[$agg_result] = $6 >>> 1 & 255;
   var $__p_0_i = $agg_result + 4 | 0;
  } else {
   var $18 = $7 + 4 & -4;
   var $19 = $18 << 2;
   var $_size_i = ($19 | 0) == 0 ? 1 : $19;
   while (1) {
    var $22 = _malloc($_size_i);
    if (($22 | 0) != 0) {
     label = 495;
     break;
    }
    var $25 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($25 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$25]();
   }
   if (label == 495) {
    var $39 = $22;
    HEAP32[$agg_result + 8 >> 2] = $39;
    HEAP32[$agg_result >> 2] = $18 | 1;
    HEAP32[$agg_result + 4 >> 2] = $7;
    var $__p_0_i = $39;
    break;
   }
   var $35 = ___cxa_allocate_exception(4);
   HEAP32[$35 >> 2] = 9744;
   ___cxa_throw($35, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($7 | 0) == 0) {
  var $51 = $__p_0_i + ($7 << 2) | 0;
  HEAP32[$51 >> 2] = 0;
  return;
 } else {
  var $_056_i_i = 6096;
  var $_047_i_i = $7;
  var $_08_i_i = $__p_0_i;
 }
 while (1) {
  var $_08_i_i;
  var $_047_i_i;
  var $_056_i_i;
  var $46 = $_047_i_i - 1 | 0;
  HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
  if (($46 | 0) == 0) {
   break;
  } else {
   var $_056_i_i = $_056_i_i + 4 | 0;
   var $_047_i_i = $46;
   var $_08_i_i = $_08_i_i + 4 | 0;
  }
 }
 var $51 = $__p_0_i + ($7 << 2) | 0;
 HEAP32[$51 >> 2] = 0;
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 if ((HEAP8[22208] | 0) != 0) {
  var $15 = HEAP32[20360 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22208) | 0) == 0) {
  var $15 = HEAP32[20360 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22096] | 0) == 0) {
   if ((___cxa_guard_acquire(22096) | 0) == 0) {
    break;
   }
   _memset(19416, 0, 168);
   _atexit(834, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19416, 7736);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19428, 7680);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19440, 7632);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19452, 7616);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19464, 7600);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19476, 7528);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19488, 7464);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19500, 7408);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19512, 7400);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19524, 7320);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19536, 7312);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19548, 7280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19560, 7232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19572, 7224);
 HEAP32[20360 >> 2] = 19416;
 var $15 = HEAP32[20360 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 if ((HEAP8[22152] | 0) != 0) {
  var $15 = HEAP32[20272 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22152) | 0) == 0) {
  var $15 = HEAP32[20272 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22072] | 0) == 0) {
   if ((___cxa_guard_acquire(22072) | 0) == 0) {
    break;
   }
   _memset(18672, 0, 168);
   _atexit(440, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18672, 8672);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18684, 8616);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18696, 8552);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18708, 8488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18720, 8384);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18732, 8320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18744, 8224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18756, 8056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18768, 8e3);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18780, 7984);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18792, 7960);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18804, 7944);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18816, 7928);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18828, 7848);
 HEAP32[20272 >> 2] = 18672;
 var $15 = HEAP32[20272 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 if ((HEAP8[22200] | 0) != 0) {
  var $15 = HEAP32[20352 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22200) | 0) == 0) {
  var $15 = HEAP32[20352 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22088] | 0) == 0) {
   if ((___cxa_guard_acquire(22088) | 0) == 0) {
    break;
   }
   _memset(19128, 0, 288);
   _atexit(488, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19128, 1176);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19140, 1144);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19152, 1120);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19164, 1088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19176, 1064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19188, 1048);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19200, 1024);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19212, 992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19224, 952);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19236, 920);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19248, 760);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19260, 712);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19272, 688);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19284, 616);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19296, 592);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19308, 568);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19320, 1064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19332, 544);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19344, 520);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19356, 8960);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19368, 8928);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19380, 8824);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19392, 8792);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19404, 8768);
 HEAP32[20352 >> 2] = 19128;
 var $15 = HEAP32[20352 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 if ((HEAP8[22144] | 0) != 0) {
  var $15 = HEAP32[20264 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22144) | 0) == 0) {
  var $15 = HEAP32[20264 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22064] | 0) == 0) {
   if ((___cxa_guard_acquire(22064) | 0) == 0) {
    break;
   }
   _memset(18384, 0, 288);
   _atexit(372, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18384, 3272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18396, 3184);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18408, 3160);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18420, 3048);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18432, 1688);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18444, 2864);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18456, 2744);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18468, 2416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18480, 2264);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18492, 2192);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18504, 2096);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18516, 2056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18528, 2e3);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18540, 1912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18552, 1896);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18564, 1736);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18576, 1688);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18588, 1640);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18600, 1584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18612, 1536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18624, 1488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18636, 1416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18648, 1368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18660, 1320);
 HEAP32[20264 >> 2] = 18384;
 var $15 = HEAP32[20264 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 if ((HEAP8[22216] | 0) != 0) {
  var $15 = HEAP32[20368 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22216) | 0) == 0) {
  var $15 = HEAP32[20368 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22104] | 0) == 0) {
   if ((___cxa_guard_acquire(22104) | 0) == 0) {
    break;
   }
   _memset(19584, 0, 288);
   _atexit(368, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19584, 3384);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(19596, 3344);
 HEAP32[20368 >> 2] = 19584;
 var $15 = HEAP32[20368 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 if ((HEAP8[22160] | 0) != 0) {
  var $15 = HEAP32[20280 >> 2];
  return $15;
 }
 if ((___cxa_guard_acquire(22160) | 0) == 0) {
  var $15 = HEAP32[20280 >> 2];
  return $15;
 }
 do {
  if ((HEAP8[22080] | 0) == 0) {
   if ((___cxa_guard_acquire(22080) | 0) == 0) {
    break;
   }
   _memset(18840, 0, 288);
   _atexit(788, 0, ___dso_handle);
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18840, 3760);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18852, 3512);
 HEAP32[20280 >> 2] = 18840;
 var $15 = HEAP32[20280 >> 2];
 return $15;
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 if ((HEAP8[22224] | 0) != 0) {
  return 20376;
 }
 if ((___cxa_guard_acquire(22224) | 0) == 0) {
  return 20376;
 }
 HEAP8[20376] = 16;
 var $$etemp$1 = 20377;
 var $st$2$0 = $$etemp$1 | 0;
 tempBigInt = 623865125;
 HEAP8[$st$2$0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 3 | 0] = tempBigInt & 255;
 var $st$3$1 = $$etemp$1 + 4 | 0;
 tempBigInt = 2032480100;
 HEAP8[$st$3$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 3 | 0] = tempBigInt & 255;
 HEAP8[20385] = 0;
 _atexit(824, 20376, ___dso_handle);
 return 20376;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 if ((HEAP8[22248] | 0) != 0) {
  return 20424;
 }
 if ((___cxa_guard_acquire(22248) | 0) == 0) {
  return 20424;
 }
 HEAP8[20424] = 16;
 var $$etemp$1 = 20425;
 var $st$2$0 = $$etemp$1 | 0;
 tempBigInt = 624576549;
 HEAP8[$st$2$0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$2$0 + 3 | 0] = tempBigInt & 255;
 var $st$3$1 = $$etemp$1 + 4 | 0;
 tempBigInt = 1394948685;
 HEAP8[$st$3$1] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 1 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 2 | 0] = tempBigInt & 255;
 tempBigInt = tempBigInt >> 8;
 HEAP8[$st$3$1 + 3 | 0] = tempBigInt & 255;
 HEAP8[20433] = 0;
 _atexit(824, 20424, ___dso_handle);
 return 20424;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result, $this) {
 var label = 0;
 var $_0_i = 5944;
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $6 = $_0_i - 5944 | 0;
 var $7 = $6 >> 2;
 if ($7 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($7 >>> 0 < 2) {
   HEAP8[$agg_result] = $6 >>> 1 & 255;
   var $__p_0_i = $agg_result + 4 | 0;
  } else {
   var $18 = $7 + 4 & -4;
   var $19 = $18 << 2;
   var $_size_i = ($19 | 0) == 0 ? 1 : $19;
   while (1) {
    var $22 = _malloc($_size_i);
    if (($22 | 0) != 0) {
     label = 678;
     break;
    }
    var $25 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($25 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$25]();
   }
   if (label == 678) {
    var $39 = $22;
    HEAP32[$agg_result + 8 >> 2] = $39;
    HEAP32[$agg_result >> 2] = $18 | 1;
    HEAP32[$agg_result + 4 >> 2] = $7;
    var $__p_0_i = $39;
    break;
   }
   var $35 = ___cxa_allocate_exception(4);
   HEAP32[$35 >> 2] = 9744;
   ___cxa_throw($35, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($7 | 0) == 0) {
  var $51 = $__p_0_i + ($7 << 2) | 0;
  HEAP32[$51 >> 2] = 0;
  return;
 } else {
  var $_056_i_i = 5944;
  var $_047_i_i = $7;
  var $_08_i_i = $__p_0_i;
 }
 while (1) {
  var $_08_i_i;
  var $_047_i_i;
  var $_056_i_i;
  var $46 = $_047_i_i - 1 | 0;
  HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
  if (($46 | 0) == 0) {
   break;
  } else {
   var $_056_i_i = $_056_i_i + 4 | 0;
   var $_047_i_i = $46;
   var $_08_i_i = $_08_i_i + 4 | 0;
  }
 }
 var $51 = $__p_0_i + ($7 << 2) | 0;
 HEAP32[$51 >> 2] = 0;
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 var label = 0;
 if ((HEAP8[22168] | 0) != 0) {
  return 20288;
 }
 if ((___cxa_guard_acquire(22168) | 0) == 0) {
  return 20288;
 } else {
  var $_0_i = 5784;
 }
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $10 = $_0_i - 5784 | 0;
 var $11 = $10 >> 2;
 if ($11 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($11 >>> 0 < 2) {
   HEAP8[20288] = $10 >>> 1 & 255;
   var $__p_0_i = 20292;
  } else {
   var $20 = $11 + 4 & -4;
   var $21 = $20 << 2;
   var $_size_i = ($21 | 0) == 0 ? 1 : $21;
   while (1) {
    var $24 = _malloc($_size_i);
    if (($24 | 0) != 0) {
     label = 703;
     break;
    }
    var $27 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($27 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$27]();
   }
   if (label == 703) {
    var $40 = $24;
    HEAP32[20296 >> 2] = $40;
    HEAP32[20288 >> 2] = $20 | 1;
    HEAP32[20292 >> 2] = $11;
    var $__p_0_i = $40;
    break;
   }
   var $37 = ___cxa_allocate_exception(4);
   HEAP32[$37 >> 2] = 9744;
   ___cxa_throw($37, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($11 | 0) != 0) {
  var $_056_i_i = 5784;
  var $_047_i_i = $11;
  var $_08_i_i = $__p_0_i;
  while (1) {
   var $_08_i_i;
   var $_047_i_i;
   var $_056_i_i;
   var $44 = $_047_i_i - 1 | 0;
   HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
   if (($44 | 0) == 0) {
    break;
   } else {
    var $_056_i_i = $_056_i_i + 4 | 0;
    var $_047_i_i = $44;
    var $_08_i_i = $_08_i_i + 4 | 0;
   }
  }
 }
 HEAP32[$__p_0_i + ($11 << 2) >> 2] = 0;
 _atexit(570, 20288, ___dso_handle);
 return 20288;
}
function ___cxx_global_array_dtor($0) {
 do {
  if ((HEAP8[19116 | 0] & 1) != 0) {
   var $6 = HEAP32[19124 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[19104 | 0] & 1) != 0) {
   var $14 = HEAP32[19112 >> 2];
   if (($14 | 0) == 0) {
    break;
   }
   _free($14);
  }
 } while (0);
 do {
  if ((HEAP8[19092 | 0] & 1) != 0) {
   var $22 = HEAP32[19100 >> 2];
   if (($22 | 0) == 0) {
    break;
   }
   _free($22);
  }
 } while (0);
 do {
  if ((HEAP8[19080 | 0] & 1) != 0) {
   var $30 = HEAP32[19088 >> 2];
   if (($30 | 0) == 0) {
    break;
   }
   _free($30);
  }
 } while (0);
 do {
  if ((HEAP8[19068 | 0] & 1) != 0) {
   var $38 = HEAP32[19076 >> 2];
   if (($38 | 0) == 0) {
    break;
   }
   _free($38);
  }
 } while (0);
 do {
  if ((HEAP8[19056 | 0] & 1) != 0) {
   var $46 = HEAP32[19064 >> 2];
   if (($46 | 0) == 0) {
    break;
   }
   _free($46);
  }
 } while (0);
 do {
  if ((HEAP8[19044 | 0] & 1) != 0) {
   var $54 = HEAP32[19052 >> 2];
   if (($54 | 0) == 0) {
    break;
   }
   _free($54);
  }
 } while (0);
 do {
  if ((HEAP8[19032 | 0] & 1) != 0) {
   var $62 = HEAP32[19040 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[19020 | 0] & 1) != 0) {
   var $70 = HEAP32[19028 >> 2];
   if (($70 | 0) == 0) {
    break;
   }
   _free($70);
  }
 } while (0);
 do {
  if ((HEAP8[19008 | 0] & 1) != 0) {
   var $78 = HEAP32[19016 >> 2];
   if (($78 | 0) == 0) {
    break;
   }
   _free($78);
  }
 } while (0);
 do {
  if ((HEAP8[18996 | 0] & 1) != 0) {
   var $86 = HEAP32[19004 >> 2];
   if (($86 | 0) == 0) {
    break;
   }
   _free($86);
  }
 } while (0);
 do {
  if ((HEAP8[18984 | 0] & 1) != 0) {
   var $94 = HEAP32[18992 >> 2];
   if (($94 | 0) == 0) {
    break;
   }
   _free($94);
  }
 } while (0);
 do {
  if ((HEAP8[18972 | 0] & 1) != 0) {
   var $102 = HEAP32[18980 >> 2];
   if (($102 | 0) == 0) {
    break;
   }
   _free($102);
  }
 } while (0);
 do {
  if ((HEAP8[18960 | 0] & 1) != 0) {
   var $110 = HEAP32[18968 >> 2];
   if (($110 | 0) == 0) {
    break;
   }
   _free($110);
  }
 } while (0);
 do {
  if ((HEAP8[18948 | 0] & 1) != 0) {
   var $118 = HEAP32[18956 >> 2];
   if (($118 | 0) == 0) {
    break;
   }
   _free($118);
  }
 } while (0);
 do {
  if ((HEAP8[18936 | 0] & 1) != 0) {
   var $126 = HEAP32[18944 >> 2];
   if (($126 | 0) == 0) {
    break;
   }
   _free($126);
  }
 } while (0);
 do {
  if ((HEAP8[18924 | 0] & 1) != 0) {
   var $134 = HEAP32[18932 >> 2];
   if (($134 | 0) == 0) {
    break;
   }
   _free($134);
  }
 } while (0);
 do {
  if ((HEAP8[18912 | 0] & 1) != 0) {
   var $142 = HEAP32[18920 >> 2];
   if (($142 | 0) == 0) {
    break;
   }
   _free($142);
  }
 } while (0);
 do {
  if ((HEAP8[18900 | 0] & 1) != 0) {
   var $150 = HEAP32[18908 >> 2];
   if (($150 | 0) == 0) {
    break;
   }
   _free($150);
  }
 } while (0);
 do {
  if ((HEAP8[18888 | 0] & 1) != 0) {
   var $158 = HEAP32[18896 >> 2];
   if (($158 | 0) == 0) {
    break;
   }
   _free($158);
  }
 } while (0);
 do {
  if ((HEAP8[18876 | 0] & 1) != 0) {
   var $166 = HEAP32[18884 >> 2];
   if (($166 | 0) == 0) {
    break;
   }
   _free($166);
  }
 } while (0);
 do {
  if ((HEAP8[18864 | 0] & 1) != 0) {
   var $174 = HEAP32[18872 >> 2];
   if (($174 | 0) == 0) {
    break;
   }
   _free($174);
  }
 } while (0);
 do {
  if ((HEAP8[18852 | 0] & 1) != 0) {
   var $182 = HEAP32[18860 >> 2];
   if (($182 | 0) == 0) {
    break;
   }
   _free($182);
  }
 } while (0);
 if ((HEAP8[18840] & 1) == 0) {
  return;
 }
 var $190 = HEAP32[18848 >> 2];
 if (($190 | 0) == 0) {
  return;
 }
 _free($190);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 var label = 0;
 if ((HEAP8[22192] | 0) != 0) {
  return 20336;
 }
 if ((___cxa_guard_acquire(22192) | 0) == 0) {
  return 20336;
 } else {
  var $_0_i = 5368;
 }
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $10 = $_0_i - 5368 | 0;
 var $11 = $10 >> 2;
 if ($11 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($11 >>> 0 < 2) {
   HEAP8[20336] = $10 >>> 1 & 255;
   var $__p_0_i = 20340;
  } else {
   var $20 = $11 + 4 & -4;
   var $21 = $20 << 2;
   var $_size_i = ($21 | 0) == 0 ? 1 : $21;
   while (1) {
    var $24 = _malloc($_size_i);
    if (($24 | 0) != 0) {
     label = 808;
     break;
    }
    var $27 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($27 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$27]();
   }
   if (label == 808) {
    var $40 = $24;
    HEAP32[20344 >> 2] = $40;
    HEAP32[20336 >> 2] = $20 | 1;
    HEAP32[20340 >> 2] = $11;
    var $__p_0_i = $40;
    break;
   }
   var $37 = ___cxa_allocate_exception(4);
   HEAP32[$37 >> 2] = 9744;
   ___cxa_throw($37, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($11 | 0) != 0) {
  var $_056_i_i = 5368;
  var $_047_i_i = $11;
  var $_08_i_i = $__p_0_i;
  while (1) {
   var $_08_i_i;
   var $_047_i_i;
   var $_056_i_i;
   var $44 = $_047_i_i - 1 | 0;
   HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
   if (($44 | 0) == 0) {
    break;
   } else {
    var $_056_i_i = $_056_i_i + 4 | 0;
    var $_047_i_i = $44;
    var $_08_i_i = $_08_i_i + 4 | 0;
   }
  }
 }
 HEAP32[$__p_0_i + ($11 << 2) >> 2] = 0;
 _atexit(570, 20336, ___dso_handle);
 return 20336;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 var label = 0;
 if ((HEAP8[22240] | 0) != 0) {
  return 20408;
 }
 if ((___cxa_guard_acquire(22240) | 0) == 0) {
  return 20408;
 }
 while (1) {
  var $6 = _malloc(32);
  if (($6 | 0) != 0) {
   label = 830;
   break;
  }
  var $9 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($9 | 0) == 0) {
   label = 828;
   break;
  }
  FUNCTION_TABLE[$9]();
 }
 if (label == 828) {
  var $19 = ___cxa_allocate_exception(4);
  HEAP32[$19 >> 2] = 9744;
  ___cxa_throw($19, 15960, 74);
 } else if (label == 830) {
  HEAP32[20416 >> 2] = $6;
  HEAP32[20408 >> 2] = 33;
  HEAP32[20412 >> 2] = 20;
  _memcpy($6, 5192, 20) | 0;
  HEAP8[$6 + 20 | 0] = 0;
  _atexit(824, 20408, ___dso_handle);
  return 20408;
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 var label = 0;
 if ((HEAP8[22184] | 0) != 0) {
  return 20320;
 }
 if ((___cxa_guard_acquire(22184) | 0) == 0) {
  return 20320;
 } else {
  var $_0_i = 5016;
 }
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $10 = $_0_i - 5016 | 0;
 var $11 = $10 >> 2;
 if ($11 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($11 >>> 0 < 2) {
   HEAP8[20320] = $10 >>> 1 & 255;
   var $__p_0_i = 20324;
  } else {
   var $20 = $11 + 4 & -4;
   var $21 = $20 << 2;
   var $_size_i = ($21 | 0) == 0 ? 1 : $21;
   while (1) {
    var $24 = _malloc($_size_i);
    if (($24 | 0) != 0) {
     label = 856;
     break;
    }
    var $27 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($27 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$27]();
   }
   if (label == 856) {
    var $40 = $24;
    HEAP32[20328 >> 2] = $40;
    HEAP32[20320 >> 2] = $20 | 1;
    HEAP32[20324 >> 2] = $11;
    var $__p_0_i = $40;
    break;
   }
   var $37 = ___cxa_allocate_exception(4);
   HEAP32[$37 >> 2] = 9744;
   ___cxa_throw($37, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($11 | 0) != 0) {
  var $_056_i_i = 5016;
  var $_047_i_i = $11;
  var $_08_i_i = $__p_0_i;
  while (1) {
   var $_08_i_i;
   var $_047_i_i;
   var $_056_i_i;
   var $44 = $_047_i_i - 1 | 0;
   HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
   if (($44 | 0) == 0) {
    break;
   } else {
    var $_056_i_i = $_056_i_i + 4 | 0;
    var $_047_i_i = $44;
    var $_08_i_i = $_08_i_i + 4 | 0;
   }
  }
 }
 HEAP32[$__p_0_i + ($11 << 2) >> 2] = 0;
 _atexit(570, 20320, ___dso_handle);
 return 20320;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 var label = 0;
 if ((HEAP8[22232] | 0) != 0) {
  return 20392;
 }
 if ((___cxa_guard_acquire(22232) | 0) == 0) {
  return 20392;
 }
 while (1) {
  var $6 = _malloc(16);
  if (($6 | 0) != 0) {
   label = 878;
   break;
  }
  var $9 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
  if (($9 | 0) == 0) {
   label = 876;
   break;
  }
  FUNCTION_TABLE[$9]();
 }
 if (label == 876) {
  var $19 = ___cxa_allocate_exception(4);
  HEAP32[$19 >> 2] = 9744;
  ___cxa_throw($19, 15960, 74);
 } else if (label == 878) {
  HEAP32[20400 >> 2] = $6;
  HEAP32[20392 >> 2] = 17;
  HEAP32[20396 >> 2] = 11;
  _memcpy($6, 4920, 11) | 0;
  HEAP8[$6 + 11 | 0] = 0;
  _atexit(824, 20392, ___dso_handle);
  return 20392;
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 var label = 0;
 if ((HEAP8[22176] | 0) != 0) {
  return 20304;
 }
 if ((___cxa_guard_acquire(22176) | 0) == 0) {
  return 20304;
 } else {
  var $_0_i = 4872;
 }
 while (1) {
  var $_0_i;
  if ((HEAP32[$_0_i >> 2] | 0) == 0) {
   break;
  } else {
   var $_0_i = $_0_i + 4 | 0;
  }
 }
 var $10 = $_0_i - 4872 | 0;
 var $11 = $10 >> 2;
 if ($11 >>> 0 > 1073741822) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 }
 do {
  if ($11 >>> 0 < 2) {
   HEAP8[20304] = $10 >>> 1 & 255;
   var $__p_0_i = 20308;
  } else {
   var $20 = $11 + 4 & -4;
   var $21 = $20 << 2;
   var $_size_i = ($21 | 0) == 0 ? 1 : $21;
   while (1) {
    var $24 = _malloc($_size_i);
    if (($24 | 0) != 0) {
     label = 904;
     break;
    }
    var $27 = (tempValue = HEAP32[22056 >> 2], HEAP32[22056 >> 2] = tempValue + 0, tempValue);
    if (($27 | 0) == 0) {
     break;
    }
    FUNCTION_TABLE[$27]();
   }
   if (label == 904) {
    var $40 = $24;
    HEAP32[20312 >> 2] = $40;
    HEAP32[20304 >> 2] = $20 | 1;
    HEAP32[20308 >> 2] = $11;
    var $__p_0_i = $40;
    break;
   }
   var $37 = ___cxa_allocate_exception(4);
   HEAP32[$37 >> 2] = 9744;
   ___cxa_throw($37, 15960, 74);
  }
 } while (0);
 var $__p_0_i;
 if (($11 | 0) != 0) {
  var $_056_i_i = 4872;
  var $_047_i_i = $11;
  var $_08_i_i = $__p_0_i;
  while (1) {
   var $_08_i_i;
   var $_047_i_i;
   var $_056_i_i;
   var $44 = $_047_i_i - 1 | 0;
   HEAP32[$_08_i_i >> 2] = HEAP32[$_056_i_i >> 2];
   if (($44 | 0) == 0) {
    break;
   } else {
    var $_056_i_i = $_056_i_i + 4 | 0;
    var $_047_i_i = $44;
    var $_08_i_i = $_08_i_i + 4 | 0;
   }
  }
 }
 HEAP32[$__p_0_i + ($11 << 2) >> 2] = 0;
 _atexit(570, 20304, ___dso_handle);
 return 20304;
}
function ___cxx_global_array_dtor53($0) {
 do {
  if ((HEAP8[19860 | 0] & 1) != 0) {
   var $6 = HEAP32[19868 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[19848 | 0] & 1) != 0) {
   var $13 = HEAP32[19856 >> 2];
   if (($13 | 0) == 0) {
    break;
   }
   _free($13);
  }
 } while (0);
 do {
  if ((HEAP8[19836 | 0] & 1) != 0) {
   var $20 = HEAP32[19844 >> 2];
   if (($20 | 0) == 0) {
    break;
   }
   _free($20);
  }
 } while (0);
 do {
  if ((HEAP8[19824 | 0] & 1) != 0) {
   var $27 = HEAP32[19832 >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   _free($27);
  }
 } while (0);
 do {
  if ((HEAP8[19812 | 0] & 1) != 0) {
   var $34 = HEAP32[19820 >> 2];
   if (($34 | 0) == 0) {
    break;
   }
   _free($34);
  }
 } while (0);
 do {
  if ((HEAP8[19800 | 0] & 1) != 0) {
   var $41 = HEAP32[19808 >> 2];
   if (($41 | 0) == 0) {
    break;
   }
   _free($41);
  }
 } while (0);
 do {
  if ((HEAP8[19788 | 0] & 1) != 0) {
   var $48 = HEAP32[19796 >> 2];
   if (($48 | 0) == 0) {
    break;
   }
   _free($48);
  }
 } while (0);
 do {
  if ((HEAP8[19776 | 0] & 1) != 0) {
   var $55 = HEAP32[19784 >> 2];
   if (($55 | 0) == 0) {
    break;
   }
   _free($55);
  }
 } while (0);
 do {
  if ((HEAP8[19764 | 0] & 1) != 0) {
   var $62 = HEAP32[19772 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[19752 | 0] & 1) != 0) {
   var $69 = HEAP32[19760 >> 2];
   if (($69 | 0) == 0) {
    break;
   }
   _free($69);
  }
 } while (0);
 do {
  if ((HEAP8[19740 | 0] & 1) != 0) {
   var $76 = HEAP32[19748 >> 2];
   if (($76 | 0) == 0) {
    break;
   }
   _free($76);
  }
 } while (0);
 do {
  if ((HEAP8[19728 | 0] & 1) != 0) {
   var $83 = HEAP32[19736 >> 2];
   if (($83 | 0) == 0) {
    break;
   }
   _free($83);
  }
 } while (0);
 do {
  if ((HEAP8[19716 | 0] & 1) != 0) {
   var $90 = HEAP32[19724 >> 2];
   if (($90 | 0) == 0) {
    break;
   }
   _free($90);
  }
 } while (0);
 do {
  if ((HEAP8[19704 | 0] & 1) != 0) {
   var $97 = HEAP32[19712 >> 2];
   if (($97 | 0) == 0) {
    break;
   }
   _free($97);
  }
 } while (0);
 do {
  if ((HEAP8[19692 | 0] & 1) != 0) {
   var $104 = HEAP32[19700 >> 2];
   if (($104 | 0) == 0) {
    break;
   }
   _free($104);
  }
 } while (0);
 do {
  if ((HEAP8[19680 | 0] & 1) != 0) {
   var $111 = HEAP32[19688 >> 2];
   if (($111 | 0) == 0) {
    break;
   }
   _free($111);
  }
 } while (0);
 do {
  if ((HEAP8[19668 | 0] & 1) != 0) {
   var $118 = HEAP32[19676 >> 2];
   if (($118 | 0) == 0) {
    break;
   }
   _free($118);
  }
 } while (0);
 do {
  if ((HEAP8[19656 | 0] & 1) != 0) {
   var $125 = HEAP32[19664 >> 2];
   if (($125 | 0) == 0) {
    break;
   }
   _free($125);
  }
 } while (0);
 do {
  if ((HEAP8[19644 | 0] & 1) != 0) {
   var $132 = HEAP32[19652 >> 2];
   if (($132 | 0) == 0) {
    break;
   }
   _free($132);
  }
 } while (0);
 do {
  if ((HEAP8[19632 | 0] & 1) != 0) {
   var $139 = HEAP32[19640 >> 2];
   if (($139 | 0) == 0) {
    break;
   }
   _free($139);
  }
 } while (0);
 do {
  if ((HEAP8[19620 | 0] & 1) != 0) {
   var $146 = HEAP32[19628 >> 2];
   if (($146 | 0) == 0) {
    break;
   }
   _free($146);
  }
 } while (0);
 do {
  if ((HEAP8[19608 | 0] & 1) != 0) {
   var $153 = HEAP32[19616 >> 2];
   if (($153 | 0) == 0) {
    break;
   }
   _free($153);
  }
 } while (0);
 do {
  if ((HEAP8[19596 | 0] & 1) != 0) {
   var $160 = HEAP32[19604 >> 2];
   if (($160 | 0) == 0) {
    break;
   }
   _free($160);
  }
 } while (0);
 if ((HEAP8[19584] & 1) == 0) {
  return;
 }
 var $167 = HEAP32[19592 >> 2];
 if (($167 | 0) == 0) {
  return;
 }
 _free($167);
 return;
}
function ___cxx_global_array_dtor56($0) {
 do {
  if ((HEAP8[18660 | 0] & 1) != 0) {
   var $6 = HEAP32[18668 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[18648 | 0] & 1) != 0) {
   var $14 = HEAP32[18656 >> 2];
   if (($14 | 0) == 0) {
    break;
   }
   _free($14);
  }
 } while (0);
 do {
  if ((HEAP8[18636 | 0] & 1) != 0) {
   var $22 = HEAP32[18644 >> 2];
   if (($22 | 0) == 0) {
    break;
   }
   _free($22);
  }
 } while (0);
 do {
  if ((HEAP8[18624 | 0] & 1) != 0) {
   var $30 = HEAP32[18632 >> 2];
   if (($30 | 0) == 0) {
    break;
   }
   _free($30);
  }
 } while (0);
 do {
  if ((HEAP8[18612 | 0] & 1) != 0) {
   var $38 = HEAP32[18620 >> 2];
   if (($38 | 0) == 0) {
    break;
   }
   _free($38);
  }
 } while (0);
 do {
  if ((HEAP8[18600 | 0] & 1) != 0) {
   var $46 = HEAP32[18608 >> 2];
   if (($46 | 0) == 0) {
    break;
   }
   _free($46);
  }
 } while (0);
 do {
  if ((HEAP8[18588 | 0] & 1) != 0) {
   var $54 = HEAP32[18596 >> 2];
   if (($54 | 0) == 0) {
    break;
   }
   _free($54);
  }
 } while (0);
 do {
  if ((HEAP8[18576 | 0] & 1) != 0) {
   var $62 = HEAP32[18584 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[18564 | 0] & 1) != 0) {
   var $70 = HEAP32[18572 >> 2];
   if (($70 | 0) == 0) {
    break;
   }
   _free($70);
  }
 } while (0);
 do {
  if ((HEAP8[18552 | 0] & 1) != 0) {
   var $78 = HEAP32[18560 >> 2];
   if (($78 | 0) == 0) {
    break;
   }
   _free($78);
  }
 } while (0);
 do {
  if ((HEAP8[18540 | 0] & 1) != 0) {
   var $86 = HEAP32[18548 >> 2];
   if (($86 | 0) == 0) {
    break;
   }
   _free($86);
  }
 } while (0);
 do {
  if ((HEAP8[18528 | 0] & 1) != 0) {
   var $94 = HEAP32[18536 >> 2];
   if (($94 | 0) == 0) {
    break;
   }
   _free($94);
  }
 } while (0);
 do {
  if ((HEAP8[18516 | 0] & 1) != 0) {
   var $102 = HEAP32[18524 >> 2];
   if (($102 | 0) == 0) {
    break;
   }
   _free($102);
  }
 } while (0);
 do {
  if ((HEAP8[18504 | 0] & 1) != 0) {
   var $110 = HEAP32[18512 >> 2];
   if (($110 | 0) == 0) {
    break;
   }
   _free($110);
  }
 } while (0);
 do {
  if ((HEAP8[18492 | 0] & 1) != 0) {
   var $118 = HEAP32[18500 >> 2];
   if (($118 | 0) == 0) {
    break;
   }
   _free($118);
  }
 } while (0);
 do {
  if ((HEAP8[18480 | 0] & 1) != 0) {
   var $126 = HEAP32[18488 >> 2];
   if (($126 | 0) == 0) {
    break;
   }
   _free($126);
  }
 } while (0);
 do {
  if ((HEAP8[18468 | 0] & 1) != 0) {
   var $134 = HEAP32[18476 >> 2];
   if (($134 | 0) == 0) {
    break;
   }
   _free($134);
  }
 } while (0);
 do {
  if ((HEAP8[18456 | 0] & 1) != 0) {
   var $142 = HEAP32[18464 >> 2];
   if (($142 | 0) == 0) {
    break;
   }
   _free($142);
  }
 } while (0);
 do {
  if ((HEAP8[18444 | 0] & 1) != 0) {
   var $150 = HEAP32[18452 >> 2];
   if (($150 | 0) == 0) {
    break;
   }
   _free($150);
  }
 } while (0);
 do {
  if ((HEAP8[18432 | 0] & 1) != 0) {
   var $158 = HEAP32[18440 >> 2];
   if (($158 | 0) == 0) {
    break;
   }
   _free($158);
  }
 } while (0);
 do {
  if ((HEAP8[18420 | 0] & 1) != 0) {
   var $166 = HEAP32[18428 >> 2];
   if (($166 | 0) == 0) {
    break;
   }
   _free($166);
  }
 } while (0);
 do {
  if ((HEAP8[18408 | 0] & 1) != 0) {
   var $174 = HEAP32[18416 >> 2];
   if (($174 | 0) == 0) {
    break;
   }
   _free($174);
  }
 } while (0);
 do {
  if ((HEAP8[18396 | 0] & 1) != 0) {
   var $182 = HEAP32[18404 >> 2];
   if (($182 | 0) == 0) {
    break;
   }
   _free($182);
  }
 } while (0);
 if ((HEAP8[18384] & 1) == 0) {
  return;
 }
 var $190 = HEAP32[18392 >> 2];
 if (($190 | 0) == 0) {
  return;
 }
 _free($190);
 return;
}
function ___cxx_global_array_dtor81($0) {
 do {
  if ((HEAP8[19404 | 0] & 1) != 0) {
   var $6 = HEAP32[19412 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[19392 | 0] & 1) != 0) {
   var $13 = HEAP32[19400 >> 2];
   if (($13 | 0) == 0) {
    break;
   }
   _free($13);
  }
 } while (0);
 do {
  if ((HEAP8[19380 | 0] & 1) != 0) {
   var $20 = HEAP32[19388 >> 2];
   if (($20 | 0) == 0) {
    break;
   }
   _free($20);
  }
 } while (0);
 do {
  if ((HEAP8[19368 | 0] & 1) != 0) {
   var $27 = HEAP32[19376 >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   _free($27);
  }
 } while (0);
 do {
  if ((HEAP8[19356 | 0] & 1) != 0) {
   var $34 = HEAP32[19364 >> 2];
   if (($34 | 0) == 0) {
    break;
   }
   _free($34);
  }
 } while (0);
 do {
  if ((HEAP8[19344 | 0] & 1) != 0) {
   var $41 = HEAP32[19352 >> 2];
   if (($41 | 0) == 0) {
    break;
   }
   _free($41);
  }
 } while (0);
 do {
  if ((HEAP8[19332 | 0] & 1) != 0) {
   var $48 = HEAP32[19340 >> 2];
   if (($48 | 0) == 0) {
    break;
   }
   _free($48);
  }
 } while (0);
 do {
  if ((HEAP8[19320 | 0] & 1) != 0) {
   var $55 = HEAP32[19328 >> 2];
   if (($55 | 0) == 0) {
    break;
   }
   _free($55);
  }
 } while (0);
 do {
  if ((HEAP8[19308 | 0] & 1) != 0) {
   var $62 = HEAP32[19316 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[19296 | 0] & 1) != 0) {
   var $69 = HEAP32[19304 >> 2];
   if (($69 | 0) == 0) {
    break;
   }
   _free($69);
  }
 } while (0);
 do {
  if ((HEAP8[19284 | 0] & 1) != 0) {
   var $76 = HEAP32[19292 >> 2];
   if (($76 | 0) == 0) {
    break;
   }
   _free($76);
  }
 } while (0);
 do {
  if ((HEAP8[19272 | 0] & 1) != 0) {
   var $83 = HEAP32[19280 >> 2];
   if (($83 | 0) == 0) {
    break;
   }
   _free($83);
  }
 } while (0);
 do {
  if ((HEAP8[19260 | 0] & 1) != 0) {
   var $90 = HEAP32[19268 >> 2];
   if (($90 | 0) == 0) {
    break;
   }
   _free($90);
  }
 } while (0);
 do {
  if ((HEAP8[19248 | 0] & 1) != 0) {
   var $97 = HEAP32[19256 >> 2];
   if (($97 | 0) == 0) {
    break;
   }
   _free($97);
  }
 } while (0);
 do {
  if ((HEAP8[19236 | 0] & 1) != 0) {
   var $104 = HEAP32[19244 >> 2];
   if (($104 | 0) == 0) {
    break;
   }
   _free($104);
  }
 } while (0);
 do {
  if ((HEAP8[19224 | 0] & 1) != 0) {
   var $111 = HEAP32[19232 >> 2];
   if (($111 | 0) == 0) {
    break;
   }
   _free($111);
  }
 } while (0);
 do {
  if ((HEAP8[19212 | 0] & 1) != 0) {
   var $118 = HEAP32[19220 >> 2];
   if (($118 | 0) == 0) {
    break;
   }
   _free($118);
  }
 } while (0);
 do {
  if ((HEAP8[19200 | 0] & 1) != 0) {
   var $125 = HEAP32[19208 >> 2];
   if (($125 | 0) == 0) {
    break;
   }
   _free($125);
  }
 } while (0);
 do {
  if ((HEAP8[19188 | 0] & 1) != 0) {
   var $132 = HEAP32[19196 >> 2];
   if (($132 | 0) == 0) {
    break;
   }
   _free($132);
  }
 } while (0);
 do {
  if ((HEAP8[19176 | 0] & 1) != 0) {
   var $139 = HEAP32[19184 >> 2];
   if (($139 | 0) == 0) {
    break;
   }
   _free($139);
  }
 } while (0);
 do {
  if ((HEAP8[19164 | 0] & 1) != 0) {
   var $146 = HEAP32[19172 >> 2];
   if (($146 | 0) == 0) {
    break;
   }
   _free($146);
  }
 } while (0);
 do {
  if ((HEAP8[19152 | 0] & 1) != 0) {
   var $153 = HEAP32[19160 >> 2];
   if (($153 | 0) == 0) {
    break;
   }
   _free($153);
  }
 } while (0);
 do {
  if ((HEAP8[19140 | 0] & 1) != 0) {
   var $160 = HEAP32[19148 >> 2];
   if (($160 | 0) == 0) {
    break;
   }
   _free($160);
  }
 } while (0);
 if ((HEAP8[19128] & 1) == 0) {
  return;
 }
 var $167 = HEAP32[19136 >> 2];
 if (($167 | 0) == 0) {
  return;
 }
 _free($167);
 return;
}
function ___cxx_global_array_dtor105($0) {
 do {
  if ((HEAP8[18828 | 0] & 1) != 0) {
   var $6 = HEAP32[18836 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[18816 | 0] & 1) != 0) {
   var $14 = HEAP32[18824 >> 2];
   if (($14 | 0) == 0) {
    break;
   }
   _free($14);
  }
 } while (0);
 do {
  if ((HEAP8[18804 | 0] & 1) != 0) {
   var $22 = HEAP32[18812 >> 2];
   if (($22 | 0) == 0) {
    break;
   }
   _free($22);
  }
 } while (0);
 do {
  if ((HEAP8[18792 | 0] & 1) != 0) {
   var $30 = HEAP32[18800 >> 2];
   if (($30 | 0) == 0) {
    break;
   }
   _free($30);
  }
 } while (0);
 do {
  if ((HEAP8[18780 | 0] & 1) != 0) {
   var $38 = HEAP32[18788 >> 2];
   if (($38 | 0) == 0) {
    break;
   }
   _free($38);
  }
 } while (0);
 do {
  if ((HEAP8[18768 | 0] & 1) != 0) {
   var $46 = HEAP32[18776 >> 2];
   if (($46 | 0) == 0) {
    break;
   }
   _free($46);
  }
 } while (0);
 do {
  if ((HEAP8[18756 | 0] & 1) != 0) {
   var $54 = HEAP32[18764 >> 2];
   if (($54 | 0) == 0) {
    break;
   }
   _free($54);
  }
 } while (0);
 do {
  if ((HEAP8[18744 | 0] & 1) != 0) {
   var $62 = HEAP32[18752 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[18732 | 0] & 1) != 0) {
   var $70 = HEAP32[18740 >> 2];
   if (($70 | 0) == 0) {
    break;
   }
   _free($70);
  }
 } while (0);
 do {
  if ((HEAP8[18720 | 0] & 1) != 0) {
   var $78 = HEAP32[18728 >> 2];
   if (($78 | 0) == 0) {
    break;
   }
   _free($78);
  }
 } while (0);
 do {
  if ((HEAP8[18708 | 0] & 1) != 0) {
   var $86 = HEAP32[18716 >> 2];
   if (($86 | 0) == 0) {
    break;
   }
   _free($86);
  }
 } while (0);
 do {
  if ((HEAP8[18696 | 0] & 1) != 0) {
   var $94 = HEAP32[18704 >> 2];
   if (($94 | 0) == 0) {
    break;
   }
   _free($94);
  }
 } while (0);
 do {
  if ((HEAP8[18684 | 0] & 1) != 0) {
   var $102 = HEAP32[18692 >> 2];
   if (($102 | 0) == 0) {
    break;
   }
   _free($102);
  }
 } while (0);
 if ((HEAP8[18672] & 1) == 0) {
  return;
 }
 var $110 = HEAP32[18680 >> 2];
 if (($110 | 0) == 0) {
  return;
 }
 _free($110);
 return;
}
function ___cxx_global_array_dtor120($0) {
 do {
  if ((HEAP8[19572 | 0] & 1) != 0) {
   var $6 = HEAP32[19580 >> 2];
   if (($6 | 0) == 0) {
    break;
   }
   _free($6);
  }
 } while (0);
 do {
  if ((HEAP8[19560 | 0] & 1) != 0) {
   var $13 = HEAP32[19568 >> 2];
   if (($13 | 0) == 0) {
    break;
   }
   _free($13);
  }
 } while (0);
 do {
  if ((HEAP8[19548 | 0] & 1) != 0) {
   var $20 = HEAP32[19556 >> 2];
   if (($20 | 0) == 0) {
    break;
   }
   _free($20);
  }
 } while (0);
 do {
  if ((HEAP8[19536 | 0] & 1) != 0) {
   var $27 = HEAP32[19544 >> 2];
   if (($27 | 0) == 0) {
    break;
   }
   _free($27);
  }
 } while (0);
 do {
  if ((HEAP8[19524 | 0] & 1) != 0) {
   var $34 = HEAP32[19532 >> 2];
   if (($34 | 0) == 0) {
    break;
   }
   _free($34);
  }
 } while (0);
 do {
  if ((HEAP8[19512 | 0] & 1) != 0) {
   var $41 = HEAP32[19520 >> 2];
   if (($41 | 0) == 0) {
    break;
   }
   _free($41);
  }
 } while (0);
 do {
  if ((HEAP8[19500 | 0] & 1) != 0) {
   var $48 = HEAP32[19508 >> 2];
   if (($48 | 0) == 0) {
    break;
   }
   _free($48);
  }
 } while (0);
 do {
  if ((HEAP8[19488 | 0] & 1) != 0) {
   var $55 = HEAP32[19496 >> 2];
   if (($55 | 0) == 0) {
    break;
   }
   _free($55);
  }
 } while (0);
 do {
  if ((HEAP8[19476 | 0] & 1) != 0) {
   var $62 = HEAP32[19484 >> 2];
   if (($62 | 0) == 0) {
    break;
   }
   _free($62);
  }
 } while (0);
 do {
  if ((HEAP8[19464 | 0] & 1) != 0) {
   var $69 = HEAP32[19472 >> 2];
   if (($69 | 0) == 0) {
    break;
   }
   _free($69);
  }
 } while (0);
 do {
  if ((HEAP8[19452 | 0] & 1) != 0) {
   var $76 = HEAP32[19460 >> 2];
   if (($76 | 0) == 0) {
    break;
   }
   _free($76);
  }
 } while (0);
 do {
  if ((HEAP8[19440 | 0] & 1) != 0) {
   var $83 = HEAP32[19448 >> 2];
   if (($83 | 0) == 0) {
    break;
   }
   _free($83);
  }
 } while (0);
 do {
  if ((HEAP8[19428 | 0] & 1) != 0) {
   var $90 = HEAP32[19436 >> 2];
   if (($90 | 0) == 0) {
    break;
   }
   _free($90);
  }
 } while (0);
 if ((HEAP8[19416] & 1) == 0) {
  return;
 }
 var $97 = HEAP32[19424 >> 2];
 if (($97 | 0) == 0) {
  return;
 }
 _free($97);
 return;
}
function _mbrtowc($wc, $src, $n, $st) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 var $1 = sp;
 HEAP32[$1 >> 2] = $wc;
 var $3 = (($st | 0) == 0 ? 17720 : $st) | 0;
 var $4 = HEAP32[$3 >> 2];
 L1441 : do {
  if (($src | 0) == 0) {
   if (($4 | 0) == 0) {
    var $_0 = 0;
   } else {
    break;
   }
   var $_0;
   STACKTOP = sp;
   return $_0;
  } else {
   if (($wc | 0) == 0) {
    var $11 = $1;
    HEAP32[$1 >> 2] = $11;
    var $13 = $11;
   } else {
    var $13 = $wc;
   }
   var $13;
   if (($n | 0) == 0) {
    var $_0 = -2;
    var $_0;
    STACKTOP = sp;
    return $_0;
   }
   do {
    if (($4 | 0) == 0) {
     var $18 = HEAP8[$src];
     var $19 = $18 & 255;
     if ($18 << 24 >> 24 > -1) {
      HEAP32[$13 >> 2] = $19;
      var $_0 = $18 << 24 >> 24 != 0 | 0;
      var $_0;
      STACKTOP = sp;
      return $_0;
     } else {
      var $25 = $19 - 194 | 0;
      if ($25 >>> 0 > 50) {
       break L1441;
      }
      var $s_0 = $src + 1 | 0;
      var $c_0 = HEAP32[___fsmu8 + ($25 << 2) >> 2];
      var $_028 = $n - 1 | 0;
      break;
     }
    } else {
     var $s_0 = $src;
     var $c_0 = $4;
     var $_028 = $n;
    }
   } while (0);
   var $_028;
   var $c_0;
   var $s_0;
   L1457 : do {
    if (($_028 | 0) == 0) {
     var $c_2 = $c_0;
    } else {
     var $35 = HEAP8[$s_0];
     var $37 = ($35 & 255) >>> 3;
     if (($37 - 16 | $37 + ($c_0 >> 26)) >>> 0 > 7) {
      break L1441;
     } else {
      var $s_1 = $s_0;
      var $c_1 = $c_0;
      var $_1 = $_028;
      var $43 = $35;
     }
     while (1) {
      var $43;
      var $_1;
      var $c_1;
      var $s_1;
      var $45 = $s_1 + 1 | 0;
      var $48 = ($43 & 255) - 128 | $c_1 << 6;
      var $49 = $_1 - 1 | 0;
      if (($48 | 0) >= 0) {
       break;
      }
      if (($49 | 0) == 0) {
       var $c_2 = $48;
       break L1457;
      }
      var $56 = HEAP8[$45];
      if ((($56 & 255) - 128 | 0) >>> 0 > 63) {
       break L1441;
      } else {
       var $s_1 = $45;
       var $c_1 = $48;
       var $_1 = $49;
       var $43 = $56;
      }
     }
     HEAP32[$3 >> 2] = 0;
     HEAP32[$13 >> 2] = $48;
     var $_0 = $n - $49 | 0;
     var $_0;
     STACKTOP = sp;
     return $_0;
    }
   } while (0);
   var $c_2;
   HEAP32[$3 >> 2] = $c_2;
   var $_0 = -2;
   var $_0;
   STACKTOP = sp;
   return $_0;
  }
 } while (0);
 HEAP32[$3 >> 2] = 0;
 HEAP32[___errno_location() >> 2] = 138;
 var $_0 = -1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNSt8bad_castD2Ev($this) {
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 return 1928;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 return ($this | 0) == ($thrown_type | 0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  return;
 }
 var $5 = $info + 16 | 0;
 var $6 = HEAP32[$5 >> 2];
 if (($6 | 0) == 0) {
  HEAP32[$5 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  return;
 }
 if (($6 | 0) != ($adjustedPtr | 0)) {
  var $19 = $info + 36 | 0;
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 var $14 = $info + 24 | 0;
 if ((HEAP32[$14 >> 2] | 0) != 2) {
  return;
 }
 HEAP32[$14 >> 2] = $path_below;
 return;
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 var label = 0;
 var $1 = HEAP32[$src >> 2];
 do {
  if (($st | 0) == 0) {
   label = 1282;
  } else {
   var $4 = $st | 0;
   var $5 = HEAP32[$4 >> 2];
   if (($5 | 0) == 0) {
    label = 1282;
    break;
   }
   if (($ws | 0) == 0) {
    var $c_2 = $5;
    var $s_3 = $1;
    var $_380 = $wn;
    label = 1292;
    break;
   }
   HEAP32[$4 >> 2] = 0;
   var $c_4 = $5;
   var $s_8 = $1;
   var $_3 = $ws;
   var $_7 = $wn;
   label = 1311;
  }
 } while (0);
 if (label == 1282) {
  if (($ws | 0) == 0) {
   var $s_0 = $1;
   var $_077 = $wn;
   label = 1284;
  } else {
   var $s_5_ph = $1;
   var $_076_ph = $ws;
   var $_481_ph = $wn;
   label = 1283;
  }
 }
 L1500 : while (1) {
  if (label == 1292) {
   label = 0;
   var $_380;
   var $s_3;
   var $c_2;
   var $54 = HEAPU8[$s_3] >>> 3;
   if (($54 - 16 | $54 + ($c_2 >> 26)) >>> 0 > 7) {
    label = 1293;
    break;
   }
   var $63 = $s_3 + 1 | 0;
   do {
    if (($c_2 & 33554432 | 0) == 0) {
     var $s_4 = $63;
    } else {
     if ((HEAPU8[$63] - 128 | 0) >>> 0 > 63) {
      label = 1296;
      break L1500;
     }
     var $74 = $s_3 + 2 | 0;
     if (($c_2 & 524288 | 0) == 0) {
      var $s_4 = $74;
      break;
     }
     if ((HEAPU8[$74] - 128 | 0) >>> 0 > 63) {
      label = 1299;
      break L1500;
     }
     var $s_4 = $s_3 + 3 | 0;
    }
   } while (0);
   var $s_4;
   var $s_0 = $s_4;
   var $_077 = $_380 - 1 | 0;
   label = 1284;
   continue;
  } else if (label == 1284) {
   label = 0;
   var $_077;
   var $s_0;
   var $13 = HEAP8[$s_0];
   do {
    if ((($13 & 255) - 1 | 0) >>> 0 < 127) {
     if (($s_0 & 3 | 0) != 0) {
      var $s_2 = $s_0;
      var $_279 = $_077;
      var $37 = $13;
      break;
     }
     var $22 = HEAP32[$s_0 >> 2];
     if ((($22 - 16843009 | $22) & -2139062144 | 0) == 0) {
      var $_17882 = $_077;
      var $s_183 = $s_0;
     } else {
      var $s_2 = $s_0;
      var $_279 = $_077;
      var $37 = $22 & 255;
      break;
     }
     while (1) {
      var $s_183;
      var $_17882;
      var $28 = $s_183 + 4 | 0;
      var $29 = $_17882 - 4 | 0;
      var $31 = HEAP32[$28 >> 2];
      if ((($31 - 16843009 | $31) & -2139062144 | 0) == 0) {
       var $_17882 = $29;
       var $s_183 = $28;
      } else {
       var $s_2 = $28;
       var $_279 = $29;
       var $37 = $31 & 255;
       break;
      }
     }
    } else {
     var $s_2 = $s_0;
     var $_279 = $_077;
     var $37 = $13;
    }
   } while (0);
   var $37;
   var $_279;
   var $s_2;
   var $38 = $37 & 255;
   if (($38 - 1 | 0) >>> 0 < 127) {
    var $s_0 = $s_2 + 1 | 0;
    var $_077 = $_279 - 1 | 0;
    label = 1284;
    continue;
   }
   var $45 = $38 - 194 | 0;
   if ($45 >>> 0 > 50) {
    var $_8115 = $_279;
    var $_4117 = $ws;
    var $s_10119 = $s_2;
    var $183 = $37;
    label = 1323;
    break;
   }
   var $c_2 = HEAP32[___fsmu8 + ($45 << 2) >> 2];
   var $s_3 = $s_2 + 1 | 0;
   var $_380 = $_279;
   label = 1292;
   continue;
  } else if (label == 1311) {
   label = 0;
   var $_7;
   var $_3;
   var $s_8;
   var $c_4;
   var $140 = HEAPU8[$s_8];
   var $141 = $140 >>> 3;
   if (($141 - 16 | $141 + ($c_4 >> 26)) >>> 0 > 7) {
    label = 1312;
    break;
   }
   var $151 = $s_8 + 1 | 0;
   var $153 = $140 - 128 | $c_4 << 6;
   do {
    if (($153 | 0) < 0) {
     var $158 = HEAPU8[$151] - 128 | 0;
     if ($158 >>> 0 > 63) {
      label = 1315;
      break L1500;
     }
     var $164 = $s_8 + 2 | 0;
     var $165 = $158 | $153 << 6;
     if (($165 | 0) >= 0) {
      var $c_5 = $165;
      var $s_9 = $164;
      break;
     }
     var $170 = HEAPU8[$164] - 128 | 0;
     if ($170 >>> 0 > 63) {
      label = 1318;
      break L1500;
     }
     var $c_5 = $170 | $165 << 6;
     var $s_9 = $s_8 + 3 | 0;
    } else {
     var $c_5 = $153;
     var $s_9 = $151;
    }
   } while (0);
   var $s_9;
   var $c_5;
   HEAP32[$_3 >> 2] = $c_5;
   var $s_5_ph = $s_9;
   var $_076_ph = $_3 + 4 | 0;
   var $_481_ph = $_7 - 1 | 0;
   label = 1283;
   continue;
  } else if (label == 1283) {
   label = 0;
   var $_481_ph;
   var $_076_ph;
   var $s_5_ph;
   if (($_481_ph | 0) == 0) {
    var $_0 = $wn;
    label = 1331;
    break;
   } else {
    var $_48197 = $_481_ph;
    var $_07698 = $_076_ph;
    var $s_599 = $s_5_ph;
   }
   while (1) {
    var $s_599;
    var $_07698;
    var $_48197;
    var $88 = HEAP8[$s_599];
    L1532 : do {
     if ((($88 & 255) - 1 | 0) >>> 0 < 127) {
      if (($s_599 & 3 | 0) == 0 & $_48197 >>> 0 > 3) {
       var $_587 = $_48197;
       var $_188 = $_07698;
       var $s_689 = $s_599;
      } else {
       var $s_7 = $s_599;
       var $_2 = $_07698;
       var $_6 = $_48197;
       var $122 = $88;
       break;
      }
      while (1) {
       var $s_689;
       var $_188;
       var $_587;
       var $98 = HEAP32[$s_689 >> 2];
       if ((($98 - 16843009 | $98) & -2139062144 | 0) != 0) {
        var $s_7 = $s_689;
        var $_2 = $_188;
        var $_6 = $_587;
        var $122 = $98 & 255;
        break L1532;
       }
       HEAP32[$_188 >> 2] = $98 & 255;
       HEAP32[$_188 + 4 >> 2] = HEAPU8[$s_689 + 1 | 0];
       HEAP32[$_188 + 8 >> 2] = HEAPU8[$s_689 + 2 | 0];
       var $116 = $s_689 + 4 | 0;
       var $119 = $_188 + 16 | 0;
       HEAP32[$_188 + 12 >> 2] = HEAPU8[$s_689 + 3 | 0];
       var $120 = $_587 - 4 | 0;
       if ($120 >>> 0 > 3) {
        var $_587 = $120;
        var $_188 = $119;
        var $s_689 = $116;
       } else {
        break;
       }
      }
      var $s_7 = $116;
      var $_2 = $119;
      var $_6 = $120;
      var $122 = HEAP8[$116];
     } else {
      var $s_7 = $s_599;
      var $_2 = $_07698;
      var $_6 = $_48197;
      var $122 = $88;
     }
    } while (0);
    var $122;
    var $_6;
    var $_2;
    var $s_7;
    var $123 = $122 & 255;
    if (($123 - 1 | 0) >>> 0 >= 127) {
     break;
    }
    HEAP32[$_2 >> 2] = $123;
    var $129 = $_6 - 1 | 0;
    if (($129 | 0) == 0) {
     var $_0 = $wn;
     label = 1330;
     break L1500;
    } else {
     var $_48197 = $129;
     var $_07698 = $_2 + 4 | 0;
     var $s_599 = $s_7 + 1 | 0;
    }
   }
   var $132 = $123 - 194 | 0;
   if ($132 >>> 0 > 50) {
    var $_8115 = $_6;
    var $_4117 = $_2;
    var $s_10119 = $s_7;
    var $183 = $122;
    label = 1323;
    break;
   }
   var $c_4 = HEAP32[___fsmu8 + ($132 << 2) >> 2];
   var $s_8 = $s_7 + 1 | 0;
   var $_3 = $_2;
   var $_7 = $_6;
   label = 1311;
   continue;
  }
 }
 if (label == 1296) {
  var $c_6 = $c_2;
  var $s_10 = $s_3 - 1 | 0;
  var $_4 = $ws;
  var $_8 = $_380;
  label = 1321;
 } else if (label == 1312) {
  var $c_6 = $c_4;
  var $s_10 = $s_8 - 1 | 0;
  var $_4 = $_3;
  var $_8 = $_7;
  label = 1321;
 } else if (label == 1315) {
  var $c_6 = $153;
  var $s_10 = $s_8 - 1 | 0;
  var $_4 = $_3;
  var $_8 = $_7;
  label = 1321;
 } else if (label == 1299) {
  var $c_6 = $c_2;
  var $s_10 = $s_3 - 1 | 0;
  var $_4 = $ws;
  var $_8 = $_380;
  label = 1321;
 } else if (label == 1293) {
  var $c_6 = $c_2;
  var $s_10 = $s_3 - 1 | 0;
  var $_4 = $ws;
  var $_8 = $_380;
  label = 1321;
 } else if (label == 1318) {
  var $c_6 = $165;
  var $s_10 = $s_8 - 1 | 0;
  var $_4 = $_3;
  var $_8 = $_7;
  label = 1321;
 } else if (label == 1330) {
  var $_0;
  return $_0;
 } else if (label == 1331) {
  var $_0;
  return $_0;
 }
 do {
  if (label == 1321) {
   var $_8;
   var $_4;
   var $s_10;
   var $c_6;
   if (($c_6 | 0) != 0) {
    var $_4116 = $_4;
    var $s_10118 = $s_10;
    break;
   }
   var $_8115 = $_8;
   var $_4117 = $_4;
   var $s_10119 = $s_10;
   var $183 = HEAP8[$s_10];
   label = 1323;
  }
 } while (0);
 do {
  if (label == 1323) {
   var $183;
   var $s_10119;
   var $_4117;
   var $_8115;
   if ($183 << 24 >> 24 != 0) {
    var $_4116 = $_4117;
    var $s_10118 = $s_10119;
    break;
   }
   if (($_4117 | 0) != 0) {
    HEAP32[$_4117 >> 2] = 0;
    HEAP32[$src >> 2] = 0;
   }
   var $_0 = $wn - $_8115 | 0;
   var $_0;
   return $_0;
  }
 } while (0);
 var $s_10118;
 var $_4116;
 HEAP32[___errno_location() >> 2] = 138;
 if (($_4116 | 0) == 0) {
  var $_0 = -1;
  var $_0;
  return $_0;
 }
 HEAP32[$src >> 2] = $s_10118;
 var $_0 = -1;
 var $_0;
 return $_0;
}
function _wcrtomb($s, $wc) {
 if (($s | 0) == 0) {
  var $_0 = 1;
  var $_0;
  return $_0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s] = $wc & 255;
  var $_0 = 1;
  var $_0;
  return $_0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s] = ($wc >>> 6 | 192) & 255;
  HEAP8[$s + 1 | 0] = ($wc & 63 | 128) & 255;
  var $_0 = 2;
  var $_0;
  return $_0;
 }
 if ($wc >>> 0 < 55296 | ($wc - 57344 | 0) >>> 0 < 8192) {
  HEAP8[$s] = ($wc >>> 12 | 224) & 255;
  HEAP8[$s + 1 | 0] = ($wc >>> 6 & 63 | 128) & 255;
  HEAP8[$s + 2 | 0] = ($wc & 63 | 128) & 255;
  var $_0 = 3;
  var $_0;
  return $_0;
 }
 if (($wc - 65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s] = ($wc >>> 18 | 240) & 255;
  HEAP8[$s + 1 | 0] = ($wc >>> 12 & 63 | 128) & 255;
  HEAP8[$s + 2 | 0] = ($wc >>> 6 & 63 | 128) & 255;
  HEAP8[$s + 3 | 0] = ($wc & 63 | 128) & 255;
  var $_0 = 4;
  var $_0;
  return $_0;
 } else {
  HEAP32[___errno_location() >> 2] = 138;
  var $_0 = -1;
  var $_0;
  return $_0;
 }
}
function __ZNSt8bad_castD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 var sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 var $info_i = sp;
 var $info = sp + 56;
 if (($this | 0) == ($thrown_type | 0)) {
  var $_0 = 1;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 if (($thrown_type | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 var $7 = $thrown_type;
 var $10 = HEAP32[$thrown_type >> 2];
 var $14 = $7 + HEAP32[$10 - 8 >> 2] | 0;
 var $16 = HEAP32[$10 - 4 >> 2];
 var $17 = $16;
 HEAP32[$info_i >> 2] = 17576;
 HEAP32[$info_i + 4 >> 2] = $7;
 HEAP32[$info_i + 8 >> 2] = 17592;
 HEAP32[$info_i + 12 >> 2] = -1;
 var $22 = $info_i + 16 | 0;
 var $23 = $info_i + 20 | 0;
 var $24 = $info_i + 24 | 0;
 var $25 = $info_i + 28 | 0;
 var $26 = $info_i + 32 | 0;
 var $27 = $info_i + 40 | 0;
 _memset($22, 0, 39);
 do {
  if (($16 | 0) == 17576) {
   HEAP32[$info_i + 48 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[17576 >> 2] + 20 >> 2]]($17, $info_i, $14, $14, 1, 0);
   var $68 = (HEAP32[$24 >> 2] | 0) == 1 ? $14 : 0;
  } else {
   FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] + 24 >> 2]]($17, $info_i, $14, 1, 0);
   var $43 = HEAP32[$info_i + 36 >> 2];
   if (($43 | 0) == 0) {
    if ((HEAP32[$27 >> 2] | 0) != 1) {
     var $68 = 0;
     break;
    }
    if ((HEAP32[$25 >> 2] | 0) != 1) {
     var $68 = 0;
     break;
    }
    var $68 = (HEAP32[$26 >> 2] | 0) == 1 ? HEAP32[$23 >> 2] : 0;
    break;
   } else if (($43 | 0) != 1) {
    var $68 = 0;
    break;
   }
   if ((HEAP32[$24 >> 2] | 0) != 1) {
    if ((HEAP32[$27 >> 2] | 0) != 0) {
     var $68 = 0;
     break;
    }
    if ((HEAP32[$25 >> 2] | 0) != 1) {
     var $68 = 0;
     break;
    }
    if ((HEAP32[$26 >> 2] | 0) != 1) {
     var $68 = 0;
     break;
    }
   }
   var $68 = HEAP32[$22 >> 2];
  }
 } while (0);
 var $68;
 var $69 = $68;
 if (($68 | 0) == 0) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 _memset($info, 0, 56);
 HEAP32[$info >> 2] = $69;
 HEAP32[$info + 8 >> 2] = $this;
 HEAP32[$info + 12 >> 2] = -1;
 HEAP32[$info + 48 >> 2] = 1;
 FUNCTION_TABLE[HEAP32[HEAP32[$68 >> 2] + 28 >> 2]]($69, $info, HEAP32[$adjustedPtr >> 2], 1);
 if ((HEAP32[$info + 24 >> 2] | 0) != 1) {
  var $_0 = 0;
  var $_0;
  STACKTOP = sp;
  return $_0;
 }
 HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
 var $_0 = 1;
 var $_0;
 STACKTOP = sp;
 return $_0;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  var $28 = HEAP32[$this + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$28 >> 2] + 28 >> 2]]($28, $info, $adjustedPtr, $path_below);
  return;
 }
 var $7 = $info + 16 | 0;
 var $8 = HEAP32[$7 >> 2];
 if (($8 | 0) == 0) {
  HEAP32[$7 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  return;
 }
 if (($8 | 0) != ($adjustedPtr | 0)) {
  var $21 = $info + 36 | 0;
  HEAP32[$21 >> 2] = HEAP32[$21 >> 2] + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 var $16 = $info + 24 | 0;
 if ((HEAP32[$16 >> 2] | 0) != 2) {
  return;
 }
 HEAP32[$16 >> 2] = $path_below;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  var $7 = $info + 16 | 0;
  var $8 = HEAP32[$7 >> 2];
  if (($8 | 0) == 0) {
   HEAP32[$7 >> 2] = $adjustedPtr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   return;
  }
  if (($8 | 0) != ($adjustedPtr | 0)) {
   var $21 = $info + 36 | 0;
   HEAP32[$21 >> 2] = HEAP32[$21 >> 2] + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 | 0] = 1;
   return;
  }
  var $16 = $info + 24 | 0;
  if ((HEAP32[$16 >> 2] | 0) != 2) {
   return;
  }
  HEAP32[$16 >> 2] = $path_below;
  return;
 }
 var $28 = HEAP32[$this + 12 >> 2];
 var $29 = $this + 16 + ($28 << 3) | 0;
 var $31 = HEAP32[$this + 20 >> 2];
 var $32 = $31 >> 8;
 if (($31 & 1 | 0) == 0) {
  var $offset_to_base_0_i16 = $32;
 } else {
  var $offset_to_base_0_i16 = HEAP32[HEAP32[$adjustedPtr >> 2] + $32 >> 2];
 }
 var $offset_to_base_0_i16;
 var $42 = HEAP32[$this + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$42 >> 2] + 28 >> 2]]($42, $info, $adjustedPtr + $offset_to_base_0_i16 | 0, ($31 & 2 | 0) != 0 ? $path_below : 2);
 if (($28 | 0) <= 1) {
  return;
 }
 var $53 = $info + 54 | 0;
 var $54 = $adjustedPtr;
 var $p_0 = $this + 24 | 0;
 while (1) {
  var $p_0;
  var $57 = HEAP32[$p_0 + 4 >> 2];
  var $58 = $57 >> 8;
  if (($57 & 1 | 0) == 0) {
   var $offset_to_base_0_i = $58;
  } else {
   var $offset_to_base_0_i = HEAP32[HEAP32[$54 >> 2] + $58 >> 2];
  }
  var $offset_to_base_0_i;
  var $67 = HEAP32[$p_0 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$67 >> 2] + 28 >> 2]]($67, $info, $adjustedPtr + $offset_to_base_0_i | 0, ($57 & 2 | 0) != 0 ? $path_below : 2);
  if ((HEAP8[$53] & 1) != 0) {
   label = 1432;
   break;
  }
  var $80 = $p_0 + 8 | 0;
  if ($80 >>> 0 < $29 >>> 0) {
   var $p_0 = $80;
  } else {
   label = 1429;
   break;
  }
 }
 if (label == 1429) {
  return;
 } else if (label == 1432) {
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   return;
  }
  var $9 = $info + 28 | 0;
  if ((HEAP32[$9 >> 2] | 0) == 1) {
   return;
  }
  HEAP32[$9 >> 2] = $path_below;
  return;
 }
 if ((HEAP32[$info >> 2] | 0) != ($this | 0)) {
  return;
 }
 do {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   var $22 = $info + 20 | 0;
   if ((HEAP32[$22 >> 2] | 0) == ($current_ptr | 0)) {
    break;
   }
   HEAP32[$info + 32 >> 2] = $path_below;
   HEAP32[$22 >> 2] = $current_ptr;
   var $31 = $info + 40 | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] + 1;
   do {
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
      break;
     }
     HEAP8[$info + 54 | 0] = 1;
    }
   } while (0);
   HEAP32[$info + 44 >> 2] = 4;
   return;
  }
 } while (0);
 if (($path_below | 0) != 1) {
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  return;
 }
 HEAP8[$info + 53 | 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  return;
 }
 HEAP8[$info + 52 | 0] = 1;
 var $11 = $info + 16 | 0;
 var $12 = HEAP32[$11 >> 2];
 if (($12 | 0) == 0) {
  HEAP32[$11 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   return;
  }
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 if (($12 | 0) != ($dst_ptr | 0)) {
  var $39 = $info + 36 | 0;
  HEAP32[$39 >> 2] = HEAP32[$39 >> 2] + 1;
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 var $26 = $info + 24 | 0;
 var $27 = HEAP32[$26 >> 2];
 if (($27 | 0) == 2) {
  HEAP32[$26 >> 2] = $path_below;
  var $31 = $path_below;
 } else {
  var $31 = $27;
 }
 var $31;
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($31 | 0) == 1)) {
  return;
 }
 HEAP8[$info + 54 | 0] = 1;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 var $1 = $this | 0;
 if (($1 | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   return;
  }
  var $11 = $info + 28 | 0;
  if ((HEAP32[$11 >> 2] | 0) == 1) {
   return;
  }
  HEAP32[$11 >> 2] = $path_below;
  return;
 }
 if (($1 | 0) == (HEAP32[$info >> 2] | 0)) {
  do {
   if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
    var $25 = $info + 20 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($current_ptr | 0)) {
     break;
    }
    HEAP32[$info + 32 >> 2] = $path_below;
    var $34 = $info + 44 | 0;
    if ((HEAP32[$34 >> 2] | 0) == 4) {
     return;
    }
    var $39 = HEAP32[$this + 12 >> 2];
    var $40 = $this + 16 + ($39 << 3) | 0;
    L1759 : do {
     if (($39 | 0) > 0) {
      var $43 = $info + 52 | 0;
      var $44 = $info + 53 | 0;
      var $45 = $info + 54 | 0;
      var $46 = $this + 8 | 0;
      var $47 = $info + 24 | 0;
      var $48 = $current_ptr;
      var $does_dst_type_point_to_our_static_type_0_off087 = 0;
      var $p_088 = $this + 16 | 0;
      var $is_dst_type_derived_from_static_type_0_off089 = 0;
      L1761 : while (1) {
       var $is_dst_type_derived_from_static_type_0_off089;
       var $p_088;
       var $does_dst_type_point_to_our_static_type_0_off087;
       HEAP8[$43] = 0;
       HEAP8[$44] = 0;
       var $51 = HEAP32[$p_088 + 4 >> 2];
       var $52 = $51 >> 8;
       if (($51 & 1 | 0) == 0) {
        var $offset_to_base_0_i81 = $52;
       } else {
        var $offset_to_base_0_i81 = HEAP32[HEAP32[$48 >> 2] + $52 >> 2];
       }
       var $offset_to_base_0_i81;
       var $61 = HEAP32[$p_088 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$61 >> 2] + 20 >> 2]]($61, $info, $current_ptr, $current_ptr + $offset_to_base_0_i81 | 0, 2 - ($51 >>> 1 & 1) | 0, $use_strcmp);
       if ((HEAP8[$45] & 1) != 0) {
        var $is_dst_type_derived_from_static_type_2_off0 = $is_dst_type_derived_from_static_type_0_off089;
        var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_0_off087;
        break;
       }
       do {
        if ((HEAP8[$44] & 1) == 0) {
         var $is_dst_type_derived_from_static_type_1_off0 = $is_dst_type_derived_from_static_type_0_off089;
         var $does_dst_type_point_to_our_static_type_1_off0 = $does_dst_type_point_to_our_static_type_0_off087;
        } else {
         if ((HEAP8[$43] & 1) == 0) {
          if ((HEAP32[$46 >> 2] & 1 | 0) == 0) {
           var $is_dst_type_derived_from_static_type_2_off0 = 1;
           var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_0_off087;
           break L1761;
          } else {
           var $is_dst_type_derived_from_static_type_1_off0 = 1;
           var $does_dst_type_point_to_our_static_type_1_off0 = $does_dst_type_point_to_our_static_type_0_off087;
           break;
          }
         }
         if ((HEAP32[$47 >> 2] | 0) == 1) {
          label = 1502;
          break L1759;
         }
         if ((HEAP32[$46 >> 2] & 2 | 0) == 0) {
          label = 1502;
          break L1759;
         } else {
          var $is_dst_type_derived_from_static_type_1_off0 = 1;
          var $does_dst_type_point_to_our_static_type_1_off0 = 1;
         }
        }
       } while (0);
       var $does_dst_type_point_to_our_static_type_1_off0;
       var $is_dst_type_derived_from_static_type_1_off0;
       var $93 = $p_088 + 8 | 0;
       if ($93 >>> 0 < $40 >>> 0) {
        var $does_dst_type_point_to_our_static_type_0_off087 = $does_dst_type_point_to_our_static_type_1_off0;
        var $p_088 = $93;
        var $is_dst_type_derived_from_static_type_0_off089 = $is_dst_type_derived_from_static_type_1_off0;
       } else {
        var $is_dst_type_derived_from_static_type_2_off0 = $is_dst_type_derived_from_static_type_1_off0;
        var $does_dst_type_point_to_our_static_type_0_off0_lcssa = $does_dst_type_point_to_our_static_type_1_off0;
        break;
       }
      }
      var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
      var $is_dst_type_derived_from_static_type_2_off0;
      if ($does_dst_type_point_to_our_static_type_0_off0_lcssa) {
       var $is_dst_type_derived_from_static_type_2_off099 = $is_dst_type_derived_from_static_type_2_off0;
       label = 1501;
      } else {
       var $is_dst_type_derived_from_static_type_2_off098 = $is_dst_type_derived_from_static_type_2_off0;
       label = 1498;
      }
     } else {
      var $is_dst_type_derived_from_static_type_2_off098 = 0;
      label = 1498;
     }
    } while (0);
    do {
     if (label == 1498) {
      var $is_dst_type_derived_from_static_type_2_off098;
      HEAP32[$25 >> 2] = $current_ptr;
      var $95 = $info + 40 | 0;
      HEAP32[$95 >> 2] = HEAP32[$95 >> 2] + 1;
      if ((HEAP32[$info + 36 >> 2] | 0) != 1) {
       var $is_dst_type_derived_from_static_type_2_off099 = $is_dst_type_derived_from_static_type_2_off098;
       label = 1501;
       break;
      }
      if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
       var $is_dst_type_derived_from_static_type_2_off099 = $is_dst_type_derived_from_static_type_2_off098;
       label = 1501;
       break;
      }
      HEAP8[$info + 54 | 0] = 1;
      if ($is_dst_type_derived_from_static_type_2_off098) {
       label = 1502;
      } else {
       label = 1503;
      }
     }
    } while (0);
    if (label == 1501) {
     var $is_dst_type_derived_from_static_type_2_off099;
     if ($is_dst_type_derived_from_static_type_2_off099) {
      label = 1502;
     } else {
      label = 1503;
     }
    }
    if (label == 1502) {
     HEAP32[$34 >> 2] = 3;
     return;
    } else if (label == 1503) {
     HEAP32[$34 >> 2] = 4;
     return;
    }
   }
  } while (0);
  if (($path_below | 0) != 1) {
   return;
  }
  HEAP32[$info + 32 >> 2] = 1;
  return;
 }
 var $111 = HEAP32[$this + 12 >> 2];
 var $112 = $this + 16 + ($111 << 3) | 0;
 var $114 = HEAP32[$this + 20 >> 2];
 var $115 = $114 >> 8;
 if (($114 & 1 | 0) == 0) {
  var $offset_to_base_0_i82 = $115;
 } else {
  var $offset_to_base_0_i82 = HEAP32[HEAP32[$current_ptr >> 2] + $115 >> 2];
 }
 var $offset_to_base_0_i82;
 var $125 = HEAP32[$this + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$125 >> 2] + 24 >> 2]]($125, $info, $current_ptr + $offset_to_base_0_i82 | 0, ($114 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 var $134 = $this + 24 | 0;
 if (($111 | 0) <= 1) {
  return;
 }
 var $138 = HEAP32[$this + 8 >> 2];
 do {
  if (($138 & 2 | 0) == 0) {
   var $142 = $info + 36 | 0;
   if ((HEAP32[$142 >> 2] | 0) == 1) {
    break;
   }
   if (($138 & 1 | 0) == 0) {
    var $180 = $info + 54 | 0;
    var $181 = $current_ptr;
    var $p2_2 = $134;
    while (1) {
     var $p2_2;
     if ((HEAP8[$180] & 1) != 0) {
      label = 1536;
      break;
     }
     if ((HEAP32[$142 >> 2] | 0) == 1) {
      label = 1537;
      break;
     }
     var $224 = HEAP32[$p2_2 + 4 >> 2];
     var $225 = $224 >> 8;
     if (($224 & 1 | 0) == 0) {
      var $offset_to_base_0_i = $225;
     } else {
      var $offset_to_base_0_i = HEAP32[HEAP32[$181 >> 2] + $225 >> 2];
     }
     var $offset_to_base_0_i;
     var $234 = HEAP32[$p2_2 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$234 >> 2] + 24 >> 2]]($234, $info, $current_ptr + $offset_to_base_0_i | 0, ($224 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
     var $243 = $p2_2 + 8 | 0;
     if ($243 >>> 0 < $112 >>> 0) {
      var $p2_2 = $243;
     } else {
      label = 1538;
      break;
     }
    }
    if (label == 1536) {
     return;
    } else if (label == 1537) {
     return;
    } else if (label == 1538) {
     return;
    }
   }
   var $177 = $info + 24 | 0;
   var $178 = $info + 54 | 0;
   var $179 = $current_ptr;
   var $p2_1 = $134;
   while (1) {
    var $p2_1;
    if ((HEAP8[$178] & 1) != 0) {
     label = 1532;
     break;
    }
    if ((HEAP32[$142 >> 2] | 0) == 1) {
     if ((HEAP32[$177 >> 2] | 0) == 1) {
      label = 1533;
      break;
     }
    }
    var $194 = HEAP32[$p2_1 + 4 >> 2];
    var $195 = $194 >> 8;
    if (($194 & 1 | 0) == 0) {
     var $offset_to_base_0_i77 = $195;
    } else {
     var $offset_to_base_0_i77 = HEAP32[HEAP32[$179 >> 2] + $195 >> 2];
    }
    var $offset_to_base_0_i77;
    var $204 = HEAP32[$p2_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$204 >> 2] + 24 >> 2]]($204, $info, $current_ptr + $offset_to_base_0_i77 | 0, ($194 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
    var $213 = $p2_1 + 8 | 0;
    if ($213 >>> 0 < $112 >>> 0) {
     var $p2_1 = $213;
    } else {
     label = 1535;
     break;
    }
   }
   if (label == 1532) {
    return;
   } else if (label == 1533) {
    return;
   } else if (label == 1535) {
    return;
   }
  }
 } while (0);
 var $145 = $info + 54 | 0;
 var $146 = $current_ptr;
 var $p2_0 = $134;
 while (1) {
  var $p2_0;
  if ((HEAP8[$145] & 1) != 0) {
   label = 1541;
   break;
  }
  var $153 = HEAP32[$p2_0 + 4 >> 2];
  var $154 = $153 >> 8;
  if (($153 & 1 | 0) == 0) {
   var $offset_to_base_0_i79 = $154;
  } else {
   var $offset_to_base_0_i79 = HEAP32[HEAP32[$146 >> 2] + $154 >> 2];
  }
  var $offset_to_base_0_i79;
  var $163 = HEAP32[$p2_0 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$163 >> 2] + 24 >> 2]]($163, $info, $current_ptr + $offset_to_base_0_i79 | 0, ($153 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
  var $172 = $p2_0 + 8 | 0;
  if ($172 >>> 0 < $112 >>> 0) {
   var $p2_0 = $172;
  } else {
   label = 1545;
   break;
  }
 }
 if (label == 1541) {
  return;
 } else if (label == 1545) {
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 var $1 = $this | 0;
 if (($1 | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   return;
  }
  var $11 = $info + 28 | 0;
  if ((HEAP32[$11 >> 2] | 0) == 1) {
   return;
  }
  HEAP32[$11 >> 2] = $path_below;
  return;
 }
 if (($1 | 0) != (HEAP32[$info >> 2] | 0)) {
  var $68 = HEAP32[$this + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$68 >> 2] + 24 >> 2]]($68, $info, $current_ptr, $path_below, $use_strcmp);
  return;
 }
 do {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   var $25 = $info + 20 | 0;
   if ((HEAP32[$25 >> 2] | 0) == ($current_ptr | 0)) {
    break;
   }
   HEAP32[$info + 32 >> 2] = $path_below;
   var $34 = $info + 44 | 0;
   if ((HEAP32[$34 >> 2] | 0) == 4) {
    return;
   }
   var $38 = $info + 52 | 0;
   HEAP8[$38] = 0;
   var $39 = $info + 53 | 0;
   HEAP8[$39] = 0;
   var $41 = HEAP32[$this + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$41 >> 2] + 20 >> 2]]($41, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   if ((HEAP8[$39] & 1) == 0) {
    var $is_dst_type_derived_from_static_type_0_off036 = 0;
    label = 1558;
   } else {
    if ((HEAP8[$38] & 1) == 0) {
     var $is_dst_type_derived_from_static_type_0_off036 = 1;
     label = 1558;
    }
   }
   L1861 : do {
    if (label == 1558) {
     var $is_dst_type_derived_from_static_type_0_off036;
     HEAP32[$25 >> 2] = $current_ptr;
     var $52 = $info + 40 | 0;
     HEAP32[$52 >> 2] = HEAP32[$52 >> 2] + 1;
     do {
      if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$info + 24 >> 2] | 0) != 2) {
        label = 1561;
        break;
       }
       HEAP8[$info + 54 | 0] = 1;
       if ($is_dst_type_derived_from_static_type_0_off036) {
        break L1861;
       }
      } else {
       label = 1561;
      }
     } while (0);
     if (label == 1561) {
      if ($is_dst_type_derived_from_static_type_0_off036) {
       break;
      }
     }
     HEAP32[$34 >> 2] = 4;
     return;
    }
   } while (0);
   HEAP32[$34 >> 2] = 3;
   return;
  }
 } while (0);
 if (($path_below | 0) != 1) {
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  var $46 = $info + 52 | 0;
  var $48 = HEAP8[$46] & 1;
  var $49 = $info + 53 | 0;
  var $51 = HEAP8[$49] & 1;
  var $53 = HEAP32[$this + 12 >> 2];
  var $54 = $this + 16 + ($53 << 3) | 0;
  HEAP8[$46] = 0;
  HEAP8[$49] = 0;
  var $56 = HEAP32[$this + 20 >> 2];
  var $57 = $56 >> 8;
  if (($56 & 1 | 0) == 0) {
   var $offset_to_base_0_i32 = $57;
  } else {
   var $offset_to_base_0_i32 = HEAP32[HEAP32[$current_ptr >> 2] + $57 >> 2];
  }
  var $offset_to_base_0_i32;
  var $67 = HEAP32[$this + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$67 >> 2] + 20 >> 2]]($67, $info, $dst_ptr, $current_ptr + $offset_to_base_0_i32 | 0, ($56 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
  L1883 : do {
   if (($53 | 0) > 1) {
    var $78 = $info + 24 | 0;
    var $79 = $this + 8 | 0;
    var $80 = $info + 54 | 0;
    var $81 = $current_ptr;
    var $p_0 = $this + 24 | 0;
    while (1) {
     var $p_0;
     if ((HEAP8[$80] & 1) != 0) {
      break L1883;
     }
     do {
      if ((HEAP8[$46] & 1) == 0) {
       if ((HEAP8[$49] & 1) == 0) {
        break;
       }
       if ((HEAP32[$79 >> 2] & 1 | 0) == 0) {
        break L1883;
       }
      } else {
       if ((HEAP32[$78 >> 2] | 0) == 1) {
        break L1883;
       }
       if ((HEAP32[$79 >> 2] & 2 | 0) == 0) {
        break L1883;
       }
      }
     } while (0);
     HEAP8[$46] = 0;
     HEAP8[$49] = 0;
     var $107 = HEAP32[$p_0 + 4 >> 2];
     var $108 = $107 >> 8;
     if (($107 & 1 | 0) == 0) {
      var $offset_to_base_0_i = $108;
     } else {
      var $offset_to_base_0_i = HEAP32[HEAP32[$81 >> 2] + $108 >> 2];
     }
     var $offset_to_base_0_i;
     var $117 = HEAP32[$p_0 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$117 >> 2] + 20 >> 2]]($117, $info, $dst_ptr, $current_ptr + $offset_to_base_0_i | 0, ($107 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
     var $126 = $p_0 + 8 | 0;
     if ($126 >>> 0 < $54 >>> 0) {
      var $p_0 = $126;
     } else {
      break;
     }
    }
   }
  } while (0);
  HEAP8[$46] = $48;
  HEAP8[$49] = $51;
  return;
 }
 HEAP8[$info + 53 | 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  return;
 }
 HEAP8[$info + 52 | 0] = 1;
 var $13 = $info + 16 | 0;
 var $14 = HEAP32[$13 >> 2];
 if (($14 | 0) == 0) {
  HEAP32[$13 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   return;
  }
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 if (($14 | 0) != ($dst_ptr | 0)) {
  var $41 = $info + 36 | 0;
  HEAP32[$41 >> 2] = HEAP32[$41 >> 2] + 1;
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 var $28 = $info + 24 | 0;
 var $29 = HEAP32[$28 >> 2];
 if (($29 | 0) == 2) {
  HEAP32[$28 >> 2] = $path_below;
  var $33 = $path_below;
 } else {
  var $33 = $29;
 }
 var $33;
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($33 | 0) == 1)) {
  return;
 }
 HEAP8[$info + 54 | 0] = 1;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  var $47 = HEAP32[$this + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$47 >> 2] + 20 >> 2]]($47, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  return;
 }
 HEAP8[$info + 53 | 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  return;
 }
 HEAP8[$info + 52 | 0] = 1;
 var $13 = $info + 16 | 0;
 var $14 = HEAP32[$13 >> 2];
 if (($14 | 0) == 0) {
  HEAP32[$13 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($path_below | 0) == 1)) {
   return;
  }
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 if (($14 | 0) != ($dst_ptr | 0)) {
  var $41 = $info + 36 | 0;
  HEAP32[$41 >> 2] = HEAP32[$41 >> 2] + 1;
  HEAP8[$info + 54 | 0] = 1;
  return;
 }
 var $28 = $info + 24 | 0;
 var $29 = HEAP32[$28 >> 2];
 if (($29 | 0) == 2) {
  HEAP32[$28 >> 2] = $path_below;
  var $33 = $path_below;
 } else {
  var $33 = $29;
 }
 var $33;
 if (!((HEAP32[$info + 48 >> 2] | 0) == 1 & ($33 | 0) == 1)) {
  return;
 }
 HEAP8[$info + 54 | 0] = 1;
 return;
}
function _malloc($bytes) {
 var label = 0;
 do {
  if ($bytes >>> 0 < 245) {
   if ($bytes >>> 0 < 11) {
    var $8 = 16;
   } else {
    var $8 = $bytes + 11 & -8;
   }
   var $8;
   var $9 = $8 >>> 3;
   var $10 = HEAP32[17912 >> 2];
   var $11 = $10 >>> ($9 >>> 0);
   if (($11 & 3 | 0) != 0) {
    var $17 = ($11 & 1 ^ 1) + $9 | 0;
    var $18 = $17 << 1;
    var $20 = 17952 + ($18 << 2) | 0;
    var $21 = 17952 + ($18 + 2 << 2) | 0;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22 + 8 | 0;
    var $24 = HEAP32[$23 >> 2];
    do {
     if (($20 | 0) == ($24 | 0)) {
      HEAP32[17912 >> 2] = $10 & ~(1 << $17);
     } else {
      if ($24 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
       _abort();
      }
      var $35 = $24 + 12 | 0;
      if ((HEAP32[$35 >> 2] | 0) == ($22 | 0)) {
       HEAP32[$35 >> 2] = $20;
       HEAP32[$21 >> 2] = $24;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    var $40 = $17 << 3;
    HEAP32[$22 + 4 >> 2] = $40 | 3;
    var $45 = $22 + ($40 | 4) | 0;
    HEAP32[$45 >> 2] = HEAP32[$45 >> 2] | 1;
    var $mem_0 = $23;
    var $mem_0;
    return $mem_0;
   }
   if ($8 >>> 0 <= HEAP32[17920 >> 2] >>> 0) {
    var $nb_0 = $8;
    break;
   }
   if (($11 | 0) != 0) {
    var $56 = 2 << $9;
    var $59 = $11 << $9 & ($56 | -$56);
    var $62 = ($59 & -$59) - 1 | 0;
    var $64 = $62 >>> 12 & 16;
    var $65 = $62 >>> ($64 >>> 0);
    var $67 = $65 >>> 5 & 8;
    var $69 = $65 >>> ($67 >>> 0);
    var $71 = $69 >>> 2 & 4;
    var $73 = $69 >>> ($71 >>> 0);
    var $75 = $73 >>> 1 & 2;
    var $77 = $73 >>> ($75 >>> 0);
    var $79 = $77 >>> 1 & 1;
    var $82 = ($67 | $64 | $71 | $75 | $79) + ($77 >>> ($79 >>> 0)) | 0;
    var $83 = $82 << 1;
    var $85 = 17952 + ($83 << 2) | 0;
    var $86 = 17952 + ($83 + 2 << 2) | 0;
    var $87 = HEAP32[$86 >> 2];
    var $88 = $87 + 8 | 0;
    var $89 = HEAP32[$88 >> 2];
    do {
     if (($85 | 0) == ($89 | 0)) {
      HEAP32[17912 >> 2] = $10 & ~(1 << $82);
     } else {
      if ($89 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
       _abort();
      }
      var $100 = $89 + 12 | 0;
      if ((HEAP32[$100 >> 2] | 0) == ($87 | 0)) {
       HEAP32[$100 >> 2] = $85;
       HEAP32[$86 >> 2] = $89;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    var $105 = $82 << 3;
    var $106 = $105 - $8 | 0;
    HEAP32[$87 + 4 >> 2] = $8 | 3;
    var $109 = $87;
    var $111 = $109 + $8 | 0;
    HEAP32[$109 + ($8 | 4) >> 2] = $106 | 1;
    HEAP32[$109 + $105 >> 2] = $106;
    var $117 = HEAP32[17920 >> 2];
    if (($117 | 0) != 0) {
     var $120 = HEAP32[17932 >> 2];
     var $121 = $117 >>> 3;
     var $122 = $121 << 1;
     var $124 = 17952 + ($122 << 2) | 0;
     var $125 = HEAP32[17912 >> 2];
     var $126 = 1 << $121;
     do {
      if (($125 & $126 | 0) == 0) {
       HEAP32[17912 >> 2] = $125 | $126;
       var $F4_0 = $124;
       var $_pre_phi = 17952 + ($122 + 2 << 2) | 0;
      } else {
       var $132 = 17952 + ($122 + 2 << 2) | 0;
       var $133 = HEAP32[$132 >> 2];
       if ($133 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
        var $F4_0 = $133;
        var $_pre_phi = $132;
        break;
       }
       _abort();
      }
     } while (0);
     var $_pre_phi;
     var $F4_0;
     HEAP32[$_pre_phi >> 2] = $120;
     HEAP32[$F4_0 + 12 >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $F4_0;
     HEAP32[$120 + 12 >> 2] = $124;
    }
    HEAP32[17920 >> 2] = $106;
    HEAP32[17932 >> 2] = $111;
    var $mem_0 = $88;
    var $mem_0;
    return $mem_0;
   }
   var $145 = HEAP32[17916 >> 2];
   if (($145 | 0) == 0) {
    var $nb_0 = $8;
    break;
   }
   var $150 = ($145 & -$145) - 1 | 0;
   var $152 = $150 >>> 12 & 16;
   var $153 = $150 >>> ($152 >>> 0);
   var $155 = $153 >>> 5 & 8;
   var $157 = $153 >>> ($155 >>> 0);
   var $159 = $157 >>> 2 & 4;
   var $161 = $157 >>> ($159 >>> 0);
   var $163 = $161 >>> 1 & 2;
   var $165 = $161 >>> ($163 >>> 0);
   var $167 = $165 >>> 1 & 1;
   var $172 = HEAP32[18216 + (($155 | $152 | $159 | $163 | $167) + ($165 >>> ($167 >>> 0)) << 2) >> 2];
   var $t_0_i = $172;
   var $v_0_i = $172;
   var $rsize_0_i = (HEAP32[$172 + 4 >> 2] & -8) - $8 | 0;
   while (1) {
    var $rsize_0_i;
    var $v_0_i;
    var $t_0_i;
    var $179 = HEAP32[$t_0_i + 16 >> 2];
    if (($179 | 0) == 0) {
     var $183 = HEAP32[$t_0_i + 20 >> 2];
     if (($183 | 0) == 0) {
      break;
     } else {
      var $185 = $183;
     }
    } else {
     var $185 = $179;
    }
    var $185;
    var $189 = (HEAP32[$185 + 4 >> 2] & -8) - $8 | 0;
    var $190 = $189 >>> 0 < $rsize_0_i >>> 0;
    var $t_0_i = $185;
    var $v_0_i = $190 ? $185 : $v_0_i;
    var $rsize_0_i = $190 ? $189 : $rsize_0_i;
   }
   var $192 = $v_0_i;
   var $193 = HEAP32[17928 >> 2];
   if ($192 >>> 0 < $193 >>> 0) {
    _abort();
   }
   var $196 = $192 + $8 | 0;
   var $197 = $196;
   if ($192 >>> 0 >= $196 >>> 0) {
    _abort();
   }
   var $201 = HEAP32[$v_0_i + 24 >> 2];
   var $203 = HEAP32[$v_0_i + 12 >> 2];
   do {
    if (($203 | 0) == ($v_0_i | 0)) {
     var $220 = $v_0_i + 20 | 0;
     var $221 = HEAP32[$220 >> 2];
     if (($221 | 0) == 0) {
      var $224 = $v_0_i + 16 | 0;
      var $225 = HEAP32[$224 >> 2];
      if (($225 | 0) == 0) {
       var $R_1_i = 0;
       break;
      } else {
       var $R_0_i = $225;
       var $RP_0_i = $224;
      }
     } else {
      var $R_0_i = $221;
      var $RP_0_i = $220;
     }
     while (1) {
      var $RP_0_i;
      var $R_0_i;
      var $227 = $R_0_i + 20 | 0;
      var $228 = HEAP32[$227 >> 2];
      if (($228 | 0) != 0) {
       var $R_0_i = $228;
       var $RP_0_i = $227;
       continue;
      }
      var $231 = $R_0_i + 16 | 0;
      var $232 = HEAP32[$231 >> 2];
      if (($232 | 0) == 0) {
       break;
      } else {
       var $R_0_i = $232;
       var $RP_0_i = $231;
      }
     }
     if ($RP_0_i >>> 0 < $193 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0_i >> 2] = 0;
      var $R_1_i = $R_0_i;
      break;
     }
    } else {
     var $207 = HEAP32[$v_0_i + 8 >> 2];
     if ($207 >>> 0 < $193 >>> 0) {
      _abort();
     }
     var $211 = $207 + 12 | 0;
     if ((HEAP32[$211 >> 2] | 0) != ($v_0_i | 0)) {
      _abort();
     }
     var $215 = $203 + 8 | 0;
     if ((HEAP32[$215 >> 2] | 0) == ($v_0_i | 0)) {
      HEAP32[$211 >> 2] = $203;
      HEAP32[$215 >> 2] = $207;
      var $R_1_i = $203;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   var $R_1_i;
   L2025 : do {
    if (($201 | 0) != 0) {
     var $242 = $v_0_i + 28 | 0;
     var $244 = 18216 + (HEAP32[$242 >> 2] << 2) | 0;
     do {
      if (($v_0_i | 0) == (HEAP32[$244 >> 2] | 0)) {
       HEAP32[$244 >> 2] = $R_1_i;
       if (($R_1_i | 0) != 0) {
        break;
       }
       HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$242 >> 2]);
       break L2025;
      } else {
       if ($201 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $258 = $201 + 16 | 0;
       if ((HEAP32[$258 >> 2] | 0) == ($v_0_i | 0)) {
        HEAP32[$258 >> 2] = $R_1_i;
       } else {
        HEAP32[$201 + 20 >> 2] = $R_1_i;
       }
       if (($R_1_i | 0) == 0) {
        break L2025;
       }
      }
     } while (0);
     if ($R_1_i >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     HEAP32[$R_1_i + 24 >> 2] = $201;
     var $274 = HEAP32[$v_0_i + 16 >> 2];
     do {
      if (($274 | 0) != 0) {
       if ($274 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$R_1_i + 16 >> 2] = $274;
        HEAP32[$274 + 24 >> 2] = $R_1_i;
        break;
       }
      }
     } while (0);
     var $286 = HEAP32[$v_0_i + 20 >> 2];
     if (($286 | 0) == 0) {
      break;
     }
     if ($286 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1_i + 20 >> 2] = $286;
      HEAP32[$286 + 24 >> 2] = $R_1_i;
      break;
     }
    }
   } while (0);
   if ($rsize_0_i >>> 0 < 16) {
    var $300 = $rsize_0_i + $8 | 0;
    HEAP32[$v_0_i + 4 >> 2] = $300 | 3;
    var $304 = $192 + ($300 + 4) | 0;
    HEAP32[$304 >> 2] = HEAP32[$304 >> 2] | 1;
   } else {
    HEAP32[$v_0_i + 4 >> 2] = $8 | 3;
    HEAP32[$192 + ($8 | 4) >> 2] = $rsize_0_i | 1;
    HEAP32[$192 + ($rsize_0_i + $8) >> 2] = $rsize_0_i;
    var $315 = HEAP32[17920 >> 2];
    if (($315 | 0) != 0) {
     var $318 = HEAP32[17932 >> 2];
     var $319 = $315 >>> 3;
     var $320 = $319 << 1;
     var $322 = 17952 + ($320 << 2) | 0;
     var $323 = HEAP32[17912 >> 2];
     var $324 = 1 << $319;
     do {
      if (($323 & $324 | 0) == 0) {
       HEAP32[17912 >> 2] = $323 | $324;
       var $F1_0_i = $322;
       var $_pre_phi_i = 17952 + ($320 + 2 << 2) | 0;
      } else {
       var $330 = 17952 + ($320 + 2 << 2) | 0;
       var $331 = HEAP32[$330 >> 2];
       if ($331 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
        var $F1_0_i = $331;
        var $_pre_phi_i = $330;
        break;
       }
       _abort();
      }
     } while (0);
     var $_pre_phi_i;
     var $F1_0_i;
     HEAP32[$_pre_phi_i >> 2] = $318;
     HEAP32[$F1_0_i + 12 >> 2] = $318;
     HEAP32[$318 + 8 >> 2] = $F1_0_i;
     HEAP32[$318 + 12 >> 2] = $322;
    }
    HEAP32[17920 >> 2] = $rsize_0_i;
    HEAP32[17932 >> 2] = $197;
   }
   var $342 = $v_0_i + 8 | 0;
   if (($342 | 0) == 0) {
    var $nb_0 = $8;
    break;
   } else {
    var $mem_0 = $342;
   }
   var $mem_0;
   return $mem_0;
  } else {
   if ($bytes >>> 0 > 4294967231) {
    var $nb_0 = -1;
    break;
   }
   var $348 = $bytes + 11 | 0;
   var $349 = $348 & -8;
   var $350 = HEAP32[17916 >> 2];
   if (($350 | 0) == 0) {
    var $nb_0 = $349;
    break;
   }
   var $353 = -$349 | 0;
   var $354 = $348 >>> 8;
   do {
    if (($354 | 0) == 0) {
     var $idx_0_i = 0;
    } else {
     if ($349 >>> 0 > 16777215) {
      var $idx_0_i = 31;
      break;
     }
     var $361 = ($354 + 1048320 | 0) >>> 16 & 8;
     var $362 = $354 << $361;
     var $365 = ($362 + 520192 | 0) >>> 16 & 4;
     var $367 = $362 << $365;
     var $370 = ($367 + 245760 | 0) >>> 16 & 2;
     var $375 = 14 - ($365 | $361 | $370) + ($367 << $370 >>> 15) | 0;
     var $idx_0_i = $349 >>> (($375 + 7 | 0) >>> 0) & 1 | $375 << 1;
    }
   } while (0);
   var $idx_0_i;
   var $383 = HEAP32[18216 + ($idx_0_i << 2) >> 2];
   L2073 : do {
    if (($383 | 0) == 0) {
     var $v_2_i = 0;
     var $rsize_2_i = $353;
     var $t_1_i = 0;
    } else {
     if (($idx_0_i | 0) == 31) {
      var $391 = 0;
     } else {
      var $391 = 25 - ($idx_0_i >>> 1) | 0;
     }
     var $391;
     var $v_0_i118 = 0;
     var $rsize_0_i117 = $353;
     var $t_0_i116 = $383;
     var $sizebits_0_i = $349 << $391;
     var $rst_0_i = 0;
     while (1) {
      var $rst_0_i;
      var $sizebits_0_i;
      var $t_0_i116;
      var $rsize_0_i117;
      var $v_0_i118;
      var $396 = HEAP32[$t_0_i116 + 4 >> 2] & -8;
      var $397 = $396 - $349 | 0;
      if ($397 >>> 0 < $rsize_0_i117 >>> 0) {
       if (($396 | 0) == ($349 | 0)) {
        var $v_2_i = $t_0_i116;
        var $rsize_2_i = $397;
        var $t_1_i = $t_0_i116;
        break L2073;
       } else {
        var $v_1_i = $t_0_i116;
        var $rsize_1_i = $397;
       }
      } else {
       var $v_1_i = $v_0_i118;
       var $rsize_1_i = $rsize_0_i117;
      }
      var $rsize_1_i;
      var $v_1_i;
      var $403 = HEAP32[$t_0_i116 + 20 >> 2];
      var $406 = HEAP32[$t_0_i116 + 16 + ($sizebits_0_i >>> 31 << 2) >> 2];
      var $rst_1_i = ($403 | 0) == 0 | ($403 | 0) == ($406 | 0) ? $rst_0_i : $403;
      if (($406 | 0) == 0) {
       var $v_2_i = $v_1_i;
       var $rsize_2_i = $rsize_1_i;
       var $t_1_i = $rst_1_i;
       break;
      } else {
       var $v_0_i118 = $v_1_i;
       var $rsize_0_i117 = $rsize_1_i;
       var $t_0_i116 = $406;
       var $sizebits_0_i = $sizebits_0_i << 1;
       var $rst_0_i = $rst_1_i;
      }
     }
    }
   } while (0);
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   if (($t_1_i | 0) == 0 & ($v_2_i | 0) == 0) {
    var $414 = 2 << $idx_0_i;
    var $417 = $350 & ($414 | -$414);
    if (($417 | 0) == 0) {
     var $nb_0 = $349;
     break;
    }
    var $422 = ($417 & -$417) - 1 | 0;
    var $424 = $422 >>> 12 & 16;
    var $425 = $422 >>> ($424 >>> 0);
    var $427 = $425 >>> 5 & 8;
    var $429 = $425 >>> ($427 >>> 0);
    var $431 = $429 >>> 2 & 4;
    var $433 = $429 >>> ($431 >>> 0);
    var $435 = $433 >>> 1 & 2;
    var $437 = $433 >>> ($435 >>> 0);
    var $439 = $437 >>> 1 & 1;
    var $t_2_ph_i = HEAP32[18216 + (($427 | $424 | $431 | $435 | $439) + ($437 >>> ($439 >>> 0)) << 2) >> 2];
   } else {
    var $t_2_ph_i = $t_1_i;
   }
   var $t_2_ph_i;
   if (($t_2_ph_i | 0) == 0) {
    var $rsize_3_lcssa_i = $rsize_2_i;
    var $v_3_lcssa_i = $v_2_i;
   } else {
    var $t_228_i = $t_2_ph_i;
    var $rsize_329_i = $rsize_2_i;
    var $v_330_i = $v_2_i;
    while (1) {
     var $v_330_i;
     var $rsize_329_i;
     var $t_228_i;
     var $449 = (HEAP32[$t_228_i + 4 >> 2] & -8) - $349 | 0;
     var $450 = $449 >>> 0 < $rsize_329_i >>> 0;
     var $_rsize_3_i = $450 ? $449 : $rsize_329_i;
     var $t_2_v_3_i = $450 ? $t_228_i : $v_330_i;
     var $452 = HEAP32[$t_228_i + 16 >> 2];
     if (($452 | 0) != 0) {
      var $t_228_i = $452;
      var $rsize_329_i = $_rsize_3_i;
      var $v_330_i = $t_2_v_3_i;
      continue;
     }
     var $455 = HEAP32[$t_228_i + 20 >> 2];
     if (($455 | 0) == 0) {
      var $rsize_3_lcssa_i = $_rsize_3_i;
      var $v_3_lcssa_i = $t_2_v_3_i;
      break;
     } else {
      var $t_228_i = $455;
      var $rsize_329_i = $_rsize_3_i;
      var $v_330_i = $t_2_v_3_i;
     }
    }
   }
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   if (($v_3_lcssa_i | 0) == 0) {
    var $nb_0 = $349;
    break;
   }
   if ($rsize_3_lcssa_i >>> 0 >= (HEAP32[17920 >> 2] - $349 | 0) >>> 0) {
    var $nb_0 = $349;
    break;
   }
   var $463 = $v_3_lcssa_i;
   var $464 = HEAP32[17928 >> 2];
   if ($463 >>> 0 < $464 >>> 0) {
    _abort();
   }
   var $467 = $463 + $349 | 0;
   var $468 = $467;
   if ($463 >>> 0 >= $467 >>> 0) {
    _abort();
   }
   var $472 = HEAP32[$v_3_lcssa_i + 24 >> 2];
   var $474 = HEAP32[$v_3_lcssa_i + 12 >> 2];
   do {
    if (($474 | 0) == ($v_3_lcssa_i | 0)) {
     var $491 = $v_3_lcssa_i + 20 | 0;
     var $492 = HEAP32[$491 >> 2];
     if (($492 | 0) == 0) {
      var $495 = $v_3_lcssa_i + 16 | 0;
      var $496 = HEAP32[$495 >> 2];
      if (($496 | 0) == 0) {
       var $R_1_i122 = 0;
       break;
      } else {
       var $R_0_i120 = $496;
       var $RP_0_i119 = $495;
      }
     } else {
      var $R_0_i120 = $492;
      var $RP_0_i119 = $491;
     }
     while (1) {
      var $RP_0_i119;
      var $R_0_i120;
      var $498 = $R_0_i120 + 20 | 0;
      var $499 = HEAP32[$498 >> 2];
      if (($499 | 0) != 0) {
       var $R_0_i120 = $499;
       var $RP_0_i119 = $498;
       continue;
      }
      var $502 = $R_0_i120 + 16 | 0;
      var $503 = HEAP32[$502 >> 2];
      if (($503 | 0) == 0) {
       break;
      } else {
       var $R_0_i120 = $503;
       var $RP_0_i119 = $502;
      }
     }
     if ($RP_0_i119 >>> 0 < $464 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0_i119 >> 2] = 0;
      var $R_1_i122 = $R_0_i120;
      break;
     }
    } else {
     var $478 = HEAP32[$v_3_lcssa_i + 8 >> 2];
     if ($478 >>> 0 < $464 >>> 0) {
      _abort();
     }
     var $482 = $478 + 12 | 0;
     if ((HEAP32[$482 >> 2] | 0) != ($v_3_lcssa_i | 0)) {
      _abort();
     }
     var $486 = $474 + 8 | 0;
     if ((HEAP32[$486 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
      HEAP32[$482 >> 2] = $474;
      HEAP32[$486 >> 2] = $478;
      var $R_1_i122 = $474;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   var $R_1_i122;
   L2123 : do {
    if (($472 | 0) != 0) {
     var $513 = $v_3_lcssa_i + 28 | 0;
     var $515 = 18216 + (HEAP32[$513 >> 2] << 2) | 0;
     do {
      if (($v_3_lcssa_i | 0) == (HEAP32[$515 >> 2] | 0)) {
       HEAP32[$515 >> 2] = $R_1_i122;
       if (($R_1_i122 | 0) != 0) {
        break;
       }
       HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$513 >> 2]);
       break L2123;
      } else {
       if ($472 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $529 = $472 + 16 | 0;
       if ((HEAP32[$529 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
        HEAP32[$529 >> 2] = $R_1_i122;
       } else {
        HEAP32[$472 + 20 >> 2] = $R_1_i122;
       }
       if (($R_1_i122 | 0) == 0) {
        break L2123;
       }
      }
     } while (0);
     if ($R_1_i122 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     HEAP32[$R_1_i122 + 24 >> 2] = $472;
     var $545 = HEAP32[$v_3_lcssa_i + 16 >> 2];
     do {
      if (($545 | 0) != 0) {
       if ($545 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$R_1_i122 + 16 >> 2] = $545;
        HEAP32[$545 + 24 >> 2] = $R_1_i122;
        break;
       }
      }
     } while (0);
     var $557 = HEAP32[$v_3_lcssa_i + 20 >> 2];
     if (($557 | 0) == 0) {
      break;
     }
     if ($557 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1_i122 + 20 >> 2] = $557;
      HEAP32[$557 + 24 >> 2] = $R_1_i122;
      break;
     }
    }
   } while (0);
   do {
    if ($rsize_3_lcssa_i >>> 0 < 16) {
     var $571 = $rsize_3_lcssa_i + $349 | 0;
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $571 | 3;
     var $575 = $463 + ($571 + 4) | 0;
     HEAP32[$575 >> 2] = HEAP32[$575 >> 2] | 1;
    } else {
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $349 | 3;
     HEAP32[$463 + ($349 | 4) >> 2] = $rsize_3_lcssa_i | 1;
     HEAP32[$463 + ($rsize_3_lcssa_i + $349) >> 2] = $rsize_3_lcssa_i;
     var $586 = $rsize_3_lcssa_i >>> 3;
     if ($rsize_3_lcssa_i >>> 0 < 256) {
      var $589 = $586 << 1;
      var $591 = 17952 + ($589 << 2) | 0;
      var $592 = HEAP32[17912 >> 2];
      var $593 = 1 << $586;
      do {
       if (($592 & $593 | 0) == 0) {
        HEAP32[17912 >> 2] = $592 | $593;
        var $F5_0_i = $591;
        var $_pre_phi_i128 = 17952 + ($589 + 2 << 2) | 0;
       } else {
        var $599 = 17952 + ($589 + 2 << 2) | 0;
        var $600 = HEAP32[$599 >> 2];
        if ($600 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
         var $F5_0_i = $600;
         var $_pre_phi_i128 = $599;
         break;
        }
        _abort();
       }
      } while (0);
      var $_pre_phi_i128;
      var $F5_0_i;
      HEAP32[$_pre_phi_i128 >> 2] = $468;
      HEAP32[$F5_0_i + 12 >> 2] = $468;
      HEAP32[$463 + ($349 + 8) >> 2] = $F5_0_i;
      HEAP32[$463 + ($349 + 12) >> 2] = $591;
      break;
     }
     var $612 = $467;
     var $613 = $rsize_3_lcssa_i >>> 8;
     do {
      if (($613 | 0) == 0) {
       var $I7_0_i = 0;
      } else {
       if ($rsize_3_lcssa_i >>> 0 > 16777215) {
        var $I7_0_i = 31;
        break;
       }
       var $620 = ($613 + 1048320 | 0) >>> 16 & 8;
       var $621 = $613 << $620;
       var $624 = ($621 + 520192 | 0) >>> 16 & 4;
       var $626 = $621 << $624;
       var $629 = ($626 + 245760 | 0) >>> 16 & 2;
       var $634 = 14 - ($624 | $620 | $629) + ($626 << $629 >>> 15) | 0;
       var $I7_0_i = $rsize_3_lcssa_i >>> (($634 + 7 | 0) >>> 0) & 1 | $634 << 1;
      }
     } while (0);
     var $I7_0_i;
     var $641 = 18216 + ($I7_0_i << 2) | 0;
     HEAP32[$463 + ($349 + 28) >> 2] = $I7_0_i;
     HEAP32[$463 + ($349 + 20) >> 2] = 0;
     HEAP32[$463 + ($349 + 16) >> 2] = 0;
     var $648 = HEAP32[17916 >> 2];
     var $649 = 1 << $I7_0_i;
     if (($648 & $649 | 0) == 0) {
      HEAP32[17916 >> 2] = $648 | $649;
      HEAP32[$641 >> 2] = $612;
      HEAP32[$463 + ($349 + 24) >> 2] = $641;
      HEAP32[$463 + ($349 + 12) >> 2] = $612;
      HEAP32[$463 + ($349 + 8) >> 2] = $612;
      break;
     }
     if (($I7_0_i | 0) == 31) {
      var $668 = 0;
     } else {
      var $668 = 25 - ($I7_0_i >>> 1) | 0;
     }
     var $668;
     var $K12_0_i = $rsize_3_lcssa_i << $668;
     var $T_0_i = HEAP32[$641 >> 2];
     while (1) {
      var $T_0_i;
      var $K12_0_i;
      if ((HEAP32[$T_0_i + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
       break;
      }
      var $677 = $T_0_i + 16 + ($K12_0_i >>> 31 << 2) | 0;
      var $678 = HEAP32[$677 >> 2];
      if (($678 | 0) == 0) {
       label = 1778;
       break;
      } else {
       var $K12_0_i = $K12_0_i << 1;
       var $T_0_i = $678;
      }
     }
     if (label == 1778) {
      if ($677 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
       _abort();
      } else {
       HEAP32[$677 >> 2] = $612;
       HEAP32[$463 + ($349 + 24) >> 2] = $T_0_i;
       HEAP32[$463 + ($349 + 12) >> 2] = $612;
       HEAP32[$463 + ($349 + 8) >> 2] = $612;
       break;
      }
     }
     var $694 = $T_0_i + 8 | 0;
     var $695 = HEAP32[$694 >> 2];
     var $697 = HEAP32[17928 >> 2];
     if ($T_0_i >>> 0 < $697 >>> 0) {
      _abort();
     }
     if ($695 >>> 0 < $697 >>> 0) {
      _abort();
     } else {
      HEAP32[$695 + 12 >> 2] = $612;
      HEAP32[$694 >> 2] = $612;
      HEAP32[$463 + ($349 + 8) >> 2] = $695;
      HEAP32[$463 + ($349 + 12) >> 2] = $T_0_i;
      HEAP32[$463 + ($349 + 24) >> 2] = 0;
      break;
     }
    }
   } while (0);
   var $711 = $v_3_lcssa_i + 8 | 0;
   if (($711 | 0) == 0) {
    var $nb_0 = $349;
    break;
   } else {
    var $mem_0 = $711;
   }
   var $mem_0;
   return $mem_0;
  }
 } while (0);
 var $nb_0;
 var $714 = HEAP32[17920 >> 2];
 if ($nb_0 >>> 0 <= $714 >>> 0) {
  var $717 = $714 - $nb_0 | 0;
  var $718 = HEAP32[17932 >> 2];
  if ($717 >>> 0 > 15) {
   var $721 = $718;
   HEAP32[17932 >> 2] = $721 + $nb_0;
   HEAP32[17920 >> 2] = $717;
   HEAP32[$721 + ($nb_0 + 4) >> 2] = $717 | 1;
   HEAP32[$721 + $714 >> 2] = $717;
   HEAP32[$718 + 4 >> 2] = $nb_0 | 3;
  } else {
   HEAP32[17920 >> 2] = 0;
   HEAP32[17932 >> 2] = 0;
   HEAP32[$718 + 4 >> 2] = $714 | 3;
   var $736 = $718 + ($714 + 4) | 0;
   HEAP32[$736 >> 2] = HEAP32[$736 >> 2] | 1;
  }
  var $mem_0 = $718 + 8 | 0;
  var $mem_0;
  return $mem_0;
 }
 var $743 = HEAP32[17924 >> 2];
 if ($nb_0 >>> 0 < $743 >>> 0) {
  var $746 = $743 - $nb_0 | 0;
  HEAP32[17924 >> 2] = $746;
  var $747 = HEAP32[17936 >> 2];
  var $748 = $747;
  HEAP32[17936 >> 2] = $748 + $nb_0;
  HEAP32[$748 + ($nb_0 + 4) >> 2] = $746 | 1;
  HEAP32[$747 + 4 >> 2] = $nb_0 | 3;
  var $mem_0 = $747 + 8 | 0;
  var $mem_0;
  return $mem_0;
 }
 do {
  if ((HEAP32[17688 >> 2] | 0) == 0) {
   var $762 = _sysconf(8);
   if (($762 - 1 & $762 | 0) == 0) {
    HEAP32[17696 >> 2] = $762;
    HEAP32[17692 >> 2] = $762;
    HEAP32[17700 >> 2] = -1;
    HEAP32[17704 >> 2] = -1;
    HEAP32[17708 >> 2] = 0;
    HEAP32[18356 >> 2] = 0;
    HEAP32[17688 >> 2] = _time(0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 var $771 = $nb_0 + 48 | 0;
 var $772 = HEAP32[17696 >> 2];
 var $773 = $nb_0 + 47 | 0;
 var $774 = $772 + $773 | 0;
 var $775 = -$772 | 0;
 var $776 = $774 & $775;
 if ($776 >>> 0 <= $nb_0 >>> 0) {
  var $mem_0 = 0;
  var $mem_0;
  return $mem_0;
 }
 var $779 = HEAP32[18352 >> 2];
 do {
  if (($779 | 0) != 0) {
   var $782 = HEAP32[18344 >> 2];
   var $783 = $782 + $776 | 0;
   if ($783 >>> 0 <= $782 >>> 0 | $783 >>> 0 > $779 >>> 0) {
    var $mem_0 = 0;
   } else {
    break;
   }
   var $mem_0;
   return $mem_0;
  }
 } while (0);
 L2215 : do {
  if ((HEAP32[18356 >> 2] & 4 | 0) == 0) {
   var $791 = HEAP32[17936 >> 2];
   L2217 : do {
    if (($791 | 0) == 0) {
     label = 1808;
    } else {
     var $794 = $791;
     var $sp_0_i_i = 18360;
     while (1) {
      var $sp_0_i_i;
      var $796 = $sp_0_i_i | 0;
      var $797 = HEAP32[$796 >> 2];
      if ($797 >>> 0 <= $794 >>> 0) {
       var $800 = $sp_0_i_i + 4 | 0;
       if (($797 + HEAP32[$800 >> 2] | 0) >>> 0 > $794 >>> 0) {
        break;
       }
      }
      var $806 = HEAP32[$sp_0_i_i + 8 >> 2];
      if (($806 | 0) == 0) {
       label = 1808;
       break L2217;
      } else {
       var $sp_0_i_i = $806;
      }
     }
     if (($sp_0_i_i | 0) == 0) {
      label = 1808;
      break;
     }
     var $840 = $774 - HEAP32[17924 >> 2] & $775;
     if ($840 >>> 0 >= 2147483647) {
      var $tsize_0303639_i = 0;
      break;
     }
     var $843 = _sbrk($840);
     var $847 = ($843 | 0) == (HEAP32[$796 >> 2] + HEAP32[$800 >> 2] | 0);
     var $tbase_0_i = $847 ? $843 : -1;
     var $tsize_0_i = $847 ? $840 : 0;
     var $br_0_i = $843;
     var $ssize_1_i = $840;
     label = 1817;
    }
   } while (0);
   do {
    if (label == 1808) {
     var $809 = _sbrk(0);
     if (($809 | 0) == -1) {
      var $tsize_0303639_i = 0;
      break;
     }
     var $812 = $809;
     var $813 = HEAP32[17692 >> 2];
     var $814 = $813 - 1 | 0;
     if (($814 & $812 | 0) == 0) {
      var $ssize_0_i = $776;
     } else {
      var $ssize_0_i = $776 - $812 + ($814 + $812 & -$813) | 0;
     }
     var $ssize_0_i;
     var $824 = HEAP32[18344 >> 2];
     var $825 = $824 + $ssize_0_i | 0;
     if (!($ssize_0_i >>> 0 > $nb_0 >>> 0 & $ssize_0_i >>> 0 < 2147483647)) {
      var $tsize_0303639_i = 0;
      break;
     }
     var $829 = HEAP32[18352 >> 2];
     if (($829 | 0) != 0) {
      if ($825 >>> 0 <= $824 >>> 0 | $825 >>> 0 > $829 >>> 0) {
       var $tsize_0303639_i = 0;
       break;
      }
     }
     var $835 = _sbrk($ssize_0_i);
     var $836 = ($835 | 0) == ($809 | 0);
     var $tbase_0_i = $836 ? $809 : -1;
     var $tsize_0_i = $836 ? $ssize_0_i : 0;
     var $br_0_i = $835;
     var $ssize_1_i = $ssize_0_i;
     label = 1817;
    }
   } while (0);
   L2237 : do {
    if (label == 1817) {
     var $ssize_1_i;
     var $br_0_i;
     var $tsize_0_i;
     var $tbase_0_i;
     var $849 = -$ssize_1_i | 0;
     if (($tbase_0_i | 0) != -1) {
      var $tsize_244_i = $tsize_0_i;
      var $tbase_245_i = $tbase_0_i;
      label = 1828;
      break L2215;
     }
     do {
      if (($br_0_i | 0) != -1 & $ssize_1_i >>> 0 < 2147483647 & $ssize_1_i >>> 0 < $771 >>> 0) {
       var $856 = HEAP32[17696 >> 2];
       var $860 = $773 - $ssize_1_i + $856 & -$856;
       if ($860 >>> 0 >= 2147483647) {
        var $ssize_2_i = $ssize_1_i;
        break;
       }
       if ((_sbrk($860) | 0) == -1) {
        _sbrk($849);
        var $tsize_0303639_i = $tsize_0_i;
        break L2237;
       } else {
        var $ssize_2_i = $860 + $ssize_1_i | 0;
        break;
       }
      } else {
       var $ssize_2_i = $ssize_1_i;
      }
     } while (0);
     var $ssize_2_i;
     if (($br_0_i | 0) == -1) {
      var $tsize_0303639_i = $tsize_0_i;
     } else {
      var $tsize_244_i = $ssize_2_i;
      var $tbase_245_i = $br_0_i;
      label = 1828;
      break L2215;
     }
    }
   } while (0);
   var $tsize_0303639_i;
   HEAP32[18356 >> 2] = HEAP32[18356 >> 2] | 4;
   var $tsize_1_i = $tsize_0303639_i;
   label = 1825;
  } else {
   var $tsize_1_i = 0;
   label = 1825;
  }
 } while (0);
 do {
  if (label == 1825) {
   var $tsize_1_i;
   if ($776 >>> 0 >= 2147483647) {
    break;
   }
   var $876 = _sbrk($776);
   var $877 = _sbrk(0);
   if (!(($877 | 0) != -1 & ($876 | 0) != -1 & $876 >>> 0 < $877 >>> 0)) {
    break;
   }
   var $881 = $877 - $876 | 0;
   var $883 = $881 >>> 0 > ($nb_0 + 40 | 0) >>> 0;
   var $_tbase_1_i = $883 ? $876 : -1;
   if (($_tbase_1_i | 0) != -1) {
    var $tsize_244_i = $883 ? $881 : $tsize_1_i;
    var $tbase_245_i = $_tbase_1_i;
    label = 1828;
   }
  }
 } while (0);
 do {
  if (label == 1828) {
   var $tbase_245_i;
   var $tsize_244_i;
   var $886 = HEAP32[18344 >> 2] + $tsize_244_i | 0;
   HEAP32[18344 >> 2] = $886;
   if ($886 >>> 0 > HEAP32[18348 >> 2] >>> 0) {
    HEAP32[18348 >> 2] = $886;
   }
   var $890 = HEAP32[17936 >> 2];
   L2257 : do {
    if (($890 | 0) == 0) {
     var $893 = HEAP32[17928 >> 2];
     if (($893 | 0) == 0 | $tbase_245_i >>> 0 < $893 >>> 0) {
      HEAP32[17928 >> 2] = $tbase_245_i;
     }
     HEAP32[18360 >> 2] = $tbase_245_i;
     HEAP32[18364 >> 2] = $tsize_244_i;
     HEAP32[18372 >> 2] = 0;
     HEAP32[17948 >> 2] = HEAP32[17688 >> 2];
     HEAP32[17944 >> 2] = -1;
     var $i_02_i_i = 0;
     while (1) {
      var $i_02_i_i;
      var $899 = $i_02_i_i << 1;
      var $901 = 17952 + ($899 << 2) | 0;
      HEAP32[17952 + ($899 + 3 << 2) >> 2] = $901;
      HEAP32[17952 + ($899 + 2 << 2) >> 2] = $901;
      var $904 = $i_02_i_i + 1 | 0;
      if ($904 >>> 0 < 32) {
       var $i_02_i_i = $904;
      } else {
       break;
      }
     }
     var $908 = $tbase_245_i + 8 | 0;
     if (($908 & 7 | 0) == 0) {
      var $914 = 0;
     } else {
      var $914 = -$908 & 7;
     }
     var $914;
     var $917 = $tsize_244_i - 40 - $914 | 0;
     HEAP32[17936 >> 2] = $tbase_245_i + $914;
     HEAP32[17924 >> 2] = $917;
     HEAP32[$tbase_245_i + ($914 + 4) >> 2] = $917 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[17940 >> 2] = HEAP32[17704 >> 2];
    } else {
     var $sp_067_i = 18360;
     while (1) {
      var $sp_067_i;
      var $925 = HEAP32[$sp_067_i >> 2];
      var $926 = $sp_067_i + 4 | 0;
      var $927 = HEAP32[$926 >> 2];
      if (($tbase_245_i | 0) == ($925 + $927 | 0)) {
       label = 1840;
       break;
      }
      var $932 = HEAP32[$sp_067_i + 8 >> 2];
      if (($932 | 0) == 0) {
       break;
      } else {
       var $sp_067_i = $932;
      }
     }
     do {
      if (label == 1840) {
       if ((HEAP32[$sp_067_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       var $939 = $890;
       if (!($939 >>> 0 >= $925 >>> 0 & $939 >>> 0 < $tbase_245_i >>> 0)) {
        break;
       }
       HEAP32[$926 >> 2] = $927 + $tsize_244_i;
       var $944 = HEAP32[17936 >> 2];
       var $946 = HEAP32[17924 >> 2] + $tsize_244_i | 0;
       var $947 = $944;
       var $949 = $944 + 8 | 0;
       if (($949 & 7 | 0) == 0) {
        var $955 = 0;
       } else {
        var $955 = -$949 & 7;
       }
       var $955;
       var $958 = $946 - $955 | 0;
       HEAP32[17936 >> 2] = $947 + $955;
       HEAP32[17924 >> 2] = $958;
       HEAP32[$947 + ($955 + 4) >> 2] = $958 | 1;
       HEAP32[$947 + ($946 + 4) >> 2] = 40;
       HEAP32[17940 >> 2] = HEAP32[17704 >> 2];
       break L2257;
      }
     } while (0);
     if ($tbase_245_i >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      HEAP32[17928 >> 2] = $tbase_245_i;
     }
     var $968 = $tbase_245_i + $tsize_244_i | 0;
     var $sp_160_i = 18360;
     while (1) {
      var $sp_160_i;
      var $970 = $sp_160_i | 0;
      if ((HEAP32[$970 >> 2] | 0) == ($968 | 0)) {
       label = 1850;
       break;
      }
      var $975 = HEAP32[$sp_160_i + 8 >> 2];
      if (($975 | 0) == 0) {
       break;
      } else {
       var $sp_160_i = $975;
      }
     }
     do {
      if (label == 1850) {
       if ((HEAP32[$sp_160_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       HEAP32[$970 >> 2] = $tbase_245_i;
       var $982 = $sp_160_i + 4 | 0;
       HEAP32[$982 >> 2] = HEAP32[$982 >> 2] + $tsize_244_i;
       var $986 = $tbase_245_i + 8 | 0;
       if (($986 & 7 | 0) == 0) {
        var $993 = 0;
       } else {
        var $993 = -$986 & 7;
       }
       var $993;
       var $996 = $tbase_245_i + ($tsize_244_i + 8) | 0;
       if (($996 & 7 | 0) == 0) {
        var $1003 = 0;
       } else {
        var $1003 = -$996 & 7;
       }
       var $1003;
       var $1004 = $tbase_245_i + ($1003 + $tsize_244_i) | 0;
       var $1005 = $1004;
       var $_sum_i21_i = $993 + $nb_0 | 0;
       var $1009 = $tbase_245_i + $_sum_i21_i | 0;
       var $1010 = $1009;
       var $1011 = $1004 - ($tbase_245_i + $993) - $nb_0 | 0;
       HEAP32[$tbase_245_i + ($993 + 4) >> 2] = $nb_0 | 3;
       do {
        if (($1005 | 0) == (HEAP32[17936 >> 2] | 0)) {
         var $1019 = HEAP32[17924 >> 2] + $1011 | 0;
         HEAP32[17924 >> 2] = $1019;
         HEAP32[17936 >> 2] = $1010;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $1019 | 1;
        } else {
         if (($1005 | 0) == (HEAP32[17932 >> 2] | 0)) {
          var $1028 = HEAP32[17920 >> 2] + $1011 | 0;
          HEAP32[17920 >> 2] = $1028;
          HEAP32[17932 >> 2] = $1010;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $1028 | 1;
          HEAP32[$tbase_245_i + ($1028 + $_sum_i21_i) >> 2] = $1028;
          break;
         }
         var $_sum2_i23_i = $tsize_244_i + 4 | 0;
         var $1037 = HEAP32[$tbase_245_i + ($_sum2_i23_i + $1003) >> 2];
         if (($1037 & 3 | 0) == 1) {
          var $1041 = $1037 & -8;
          var $1042 = $1037 >>> 3;
          L2302 : do {
           if ($1037 >>> 0 < 256) {
            var $1047 = HEAP32[$tbase_245_i + (($1003 | 8) + $tsize_244_i) >> 2];
            var $1050 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1003) >> 2];
            var $1053 = 17952 + ($1042 << 1 << 2) | 0;
            do {
             if (($1047 | 0) != ($1053 | 0)) {
              if ($1047 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              }
              if ((HEAP32[$1047 + 12 >> 2] | 0) == ($1005 | 0)) {
               break;
              }
              _abort();
             }
            } while (0);
            if (($1050 | 0) == ($1047 | 0)) {
             HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $1042);
             break;
            }
            do {
             if (($1050 | 0) == ($1053 | 0)) {
              var $_pre_phi57_i_i = $1050 + 8 | 0;
             } else {
              if ($1050 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              }
              var $1076 = $1050 + 8 | 0;
              if ((HEAP32[$1076 >> 2] | 0) == ($1005 | 0)) {
               var $_pre_phi57_i_i = $1076;
               break;
              }
              _abort();
             }
            } while (0);
            var $_pre_phi57_i_i;
            HEAP32[$1047 + 12 >> 2] = $1050;
            HEAP32[$_pre_phi57_i_i >> 2] = $1047;
           } else {
            var $1081 = $1004;
            var $1084 = HEAP32[$tbase_245_i + (($1003 | 24) + $tsize_244_i) >> 2];
            var $1087 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1003) >> 2];
            do {
             if (($1087 | 0) == ($1081 | 0)) {
              var $_sum67_i_i = $1003 | 16;
              var $1107 = $tbase_245_i + ($_sum2_i23_i + $_sum67_i_i) | 0;
              var $1108 = HEAP32[$1107 >> 2];
              if (($1108 | 0) == 0) {
               var $1112 = $tbase_245_i + ($_sum67_i_i + $tsize_244_i) | 0;
               var $1113 = HEAP32[$1112 >> 2];
               if (($1113 | 0) == 0) {
                var $R_1_i_i = 0;
                break;
               } else {
                var $R_0_i_i = $1113;
                var $RP_0_i_i = $1112;
               }
              } else {
               var $R_0_i_i = $1108;
               var $RP_0_i_i = $1107;
              }
              while (1) {
               var $RP_0_i_i;
               var $R_0_i_i;
               var $1115 = $R_0_i_i + 20 | 0;
               var $1116 = HEAP32[$1115 >> 2];
               if (($1116 | 0) != 0) {
                var $R_0_i_i = $1116;
                var $RP_0_i_i = $1115;
                continue;
               }
               var $1119 = $R_0_i_i + 16 | 0;
               var $1120 = HEAP32[$1119 >> 2];
               if (($1120 | 0) == 0) {
                break;
               } else {
                var $R_0_i_i = $1120;
                var $RP_0_i_i = $1119;
               }
              }
              if ($RP_0_i_i >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              } else {
               HEAP32[$RP_0_i_i >> 2] = 0;
               var $R_1_i_i = $R_0_i_i;
               break;
              }
             } else {
              var $1092 = HEAP32[$tbase_245_i + (($1003 | 8) + $tsize_244_i) >> 2];
              if ($1092 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              }
              var $1097 = $1092 + 12 | 0;
              if ((HEAP32[$1097 >> 2] | 0) != ($1081 | 0)) {
               _abort();
              }
              var $1101 = $1087 + 8 | 0;
              if ((HEAP32[$1101 >> 2] | 0) == ($1081 | 0)) {
               HEAP32[$1097 >> 2] = $1087;
               HEAP32[$1101 >> 2] = $1092;
               var $R_1_i_i = $1087;
               break;
              } else {
               _abort();
              }
             }
            } while (0);
            var $R_1_i_i;
            if (($1084 | 0) == 0) {
             break;
            }
            var $1132 = $tbase_245_i + ($tsize_244_i + 28 + $1003) | 0;
            var $1134 = 18216 + (HEAP32[$1132 >> 2] << 2) | 0;
            do {
             if (($1081 | 0) == (HEAP32[$1134 >> 2] | 0)) {
              HEAP32[$1134 >> 2] = $R_1_i_i;
              if (($R_1_i_i | 0) != 0) {
               break;
              }
              HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$1132 >> 2]);
              break L2302;
             } else {
              if ($1084 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              }
              var $1148 = $1084 + 16 | 0;
              if ((HEAP32[$1148 >> 2] | 0) == ($1081 | 0)) {
               HEAP32[$1148 >> 2] = $R_1_i_i;
              } else {
               HEAP32[$1084 + 20 >> 2] = $R_1_i_i;
              }
              if (($R_1_i_i | 0) == 0) {
               break L2302;
              }
             }
            } while (0);
            if ($R_1_i_i >>> 0 < HEAP32[17928 >> 2] >>> 0) {
             _abort();
            }
            HEAP32[$R_1_i_i + 24 >> 2] = $1084;
            var $_sum3233_i_i = $1003 | 16;
            var $1165 = HEAP32[$tbase_245_i + ($_sum3233_i_i + $tsize_244_i) >> 2];
            do {
             if (($1165 | 0) != 0) {
              if ($1165 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
               _abort();
              } else {
               HEAP32[$R_1_i_i + 16 >> 2] = $1165;
               HEAP32[$1165 + 24 >> 2] = $R_1_i_i;
               break;
              }
             }
            } while (0);
            var $1178 = HEAP32[$tbase_245_i + ($_sum2_i23_i + $_sum3233_i_i) >> 2];
            if (($1178 | 0) == 0) {
             break;
            }
            if ($1178 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
             _abort();
            } else {
             HEAP32[$R_1_i_i + 20 >> 2] = $1178;
             HEAP32[$1178 + 24 >> 2] = $R_1_i_i;
             break;
            }
           }
          } while (0);
          var $oldfirst_0_i_i = $tbase_245_i + (($1041 | $1003) + $tsize_244_i) | 0;
          var $qsize_0_i_i = $1041 + $1011 | 0;
         } else {
          var $oldfirst_0_i_i = $1005;
          var $qsize_0_i_i = $1011;
         }
         var $qsize_0_i_i;
         var $oldfirst_0_i_i;
         var $1194 = $oldfirst_0_i_i + 4 | 0;
         HEAP32[$1194 >> 2] = HEAP32[$1194 >> 2] & -2;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 4) >> 2] = $qsize_0_i_i | 1;
         HEAP32[$tbase_245_i + ($qsize_0_i_i + $_sum_i21_i) >> 2] = $qsize_0_i_i;
         var $1202 = $qsize_0_i_i >>> 3;
         if ($qsize_0_i_i >>> 0 < 256) {
          var $1205 = $1202 << 1;
          var $1207 = 17952 + ($1205 << 2) | 0;
          var $1208 = HEAP32[17912 >> 2];
          var $1209 = 1 << $1202;
          do {
           if (($1208 & $1209 | 0) == 0) {
            HEAP32[17912 >> 2] = $1208 | $1209;
            var $F4_0_i_i = $1207;
            var $_pre_phi_i25_i = 17952 + ($1205 + 2 << 2) | 0;
           } else {
            var $1215 = 17952 + ($1205 + 2 << 2) | 0;
            var $1216 = HEAP32[$1215 >> 2];
            if ($1216 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
             var $F4_0_i_i = $1216;
             var $_pre_phi_i25_i = $1215;
             break;
            }
            _abort();
           }
          } while (0);
          var $_pre_phi_i25_i;
          var $F4_0_i_i;
          HEAP32[$_pre_phi_i25_i >> 2] = $1010;
          HEAP32[$F4_0_i_i + 12 >> 2] = $1010;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $F4_0_i_i;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1207;
          break;
         }
         var $1228 = $1009;
         var $1229 = $qsize_0_i_i >>> 8;
         do {
          if (($1229 | 0) == 0) {
           var $I7_0_i_i = 0;
          } else {
           if ($qsize_0_i_i >>> 0 > 16777215) {
            var $I7_0_i_i = 31;
            break;
           }
           var $1236 = ($1229 + 1048320 | 0) >>> 16 & 8;
           var $1237 = $1229 << $1236;
           var $1240 = ($1237 + 520192 | 0) >>> 16 & 4;
           var $1242 = $1237 << $1240;
           var $1245 = ($1242 + 245760 | 0) >>> 16 & 2;
           var $1250 = 14 - ($1240 | $1236 | $1245) + ($1242 << $1245 >>> 15) | 0;
           var $I7_0_i_i = $qsize_0_i_i >>> (($1250 + 7 | 0) >>> 0) & 1 | $1250 << 1;
          }
         } while (0);
         var $I7_0_i_i;
         var $1257 = 18216 + ($I7_0_i_i << 2) | 0;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 28) >> 2] = $I7_0_i_i;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 20) >> 2] = 0;
         HEAP32[$tbase_245_i + ($_sum_i21_i + 16) >> 2] = 0;
         var $1264 = HEAP32[17916 >> 2];
         var $1265 = 1 << $I7_0_i_i;
         if (($1264 & $1265 | 0) == 0) {
          HEAP32[17916 >> 2] = $1264 | $1265;
          HEAP32[$1257 >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = $1257;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1228;
          break;
         }
         if (($I7_0_i_i | 0) == 31) {
          var $1284 = 0;
         } else {
          var $1284 = 25 - ($I7_0_i_i >>> 1) | 0;
         }
         var $1284;
         var $K8_0_i_i = $qsize_0_i_i << $1284;
         var $T_0_i27_i = HEAP32[$1257 >> 2];
         while (1) {
          var $T_0_i27_i;
          var $K8_0_i_i;
          if ((HEAP32[$T_0_i27_i + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
           break;
          }
          var $1293 = $T_0_i27_i + 16 + ($K8_0_i_i >>> 31 << 2) | 0;
          var $1294 = HEAP32[$1293 >> 2];
          if (($1294 | 0) == 0) {
           label = 1923;
           break;
          } else {
           var $K8_0_i_i = $K8_0_i_i << 1;
           var $T_0_i27_i = $1294;
          }
         }
         if (label == 1923) {
          if ($1293 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
           _abort();
          } else {
           HEAP32[$1293 >> 2] = $1228;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = $T_0_i27_i;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $1228;
           HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1228;
           break;
          }
         }
         var $1310 = $T_0_i27_i + 8 | 0;
         var $1311 = HEAP32[$1310 >> 2];
         var $1313 = HEAP32[17928 >> 2];
         if ($T_0_i27_i >>> 0 < $1313 >>> 0) {
          _abort();
         }
         if ($1311 >>> 0 < $1313 >>> 0) {
          _abort();
         } else {
          HEAP32[$1311 + 12 >> 2] = $1228;
          HEAP32[$1310 >> 2] = $1228;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 8) >> 2] = $1311;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 12) >> 2] = $T_0_i27_i;
          HEAP32[$tbase_245_i + ($_sum_i21_i + 24) >> 2] = 0;
          break;
         }
        }
       } while (0);
       var $mem_0 = $tbase_245_i + ($993 | 8) | 0;
       var $mem_0;
       return $mem_0;
      }
     } while (0);
     var $1327 = $890;
     var $sp_0_i_i_i = 18360;
     while (1) {
      var $sp_0_i_i_i;
      var $1330 = HEAP32[$sp_0_i_i_i >> 2];
      if ($1330 >>> 0 <= $1327 >>> 0) {
       var $1334 = HEAP32[$sp_0_i_i_i + 4 >> 2];
       var $1335 = $1330 + $1334 | 0;
       if ($1335 >>> 0 > $1327 >>> 0) {
        break;
       }
      }
      var $sp_0_i_i_i = HEAP32[$sp_0_i_i_i + 8 >> 2];
     }
     var $1341 = $1330 + ($1334 - 39) | 0;
     if (($1341 & 7 | 0) == 0) {
      var $1348 = 0;
     } else {
      var $1348 = -$1341 & 7;
     }
     var $1348;
     var $1349 = $1330 + ($1334 - 47 + $1348) | 0;
     var $1353 = $1349 >>> 0 < ($890 + 16 | 0) >>> 0 ? $1327 : $1349;
     var $1354 = $1353 + 8 | 0;
     var $1358 = $tbase_245_i + 8 | 0;
     if (($1358 & 7 | 0) == 0) {
      var $1364 = 0;
     } else {
      var $1364 = -$1358 & 7;
     }
     var $1364;
     var $1367 = $tsize_244_i - 40 - $1364 | 0;
     HEAP32[17936 >> 2] = $tbase_245_i + $1364;
     HEAP32[17924 >> 2] = $1367;
     HEAP32[$tbase_245_i + ($1364 + 4) >> 2] = $1367 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[17940 >> 2] = HEAP32[17704 >> 2];
     HEAP32[$1353 + 4 >> 2] = 27;
     HEAP32[$1354 >> 2] = HEAP32[18360 >> 2];
     HEAP32[$1354 + 4 >> 2] = HEAP32[18364 >> 2];
     HEAP32[$1354 + 8 >> 2] = HEAP32[18368 >> 2];
     HEAP32[$1354 + 12 >> 2] = HEAP32[18372 >> 2];
     HEAP32[18360 >> 2] = $tbase_245_i;
     HEAP32[18364 >> 2] = $tsize_244_i;
     HEAP32[18372 >> 2] = 0;
     HEAP32[18368 >> 2] = $1354;
     var $1377 = $1353 + 28 | 0;
     HEAP32[$1377 >> 2] = 7;
     if (($1353 + 32 | 0) >>> 0 < $1335 >>> 0) {
      var $1380 = $1377;
      while (1) {
       var $1380;
       var $1381 = $1380 + 4 | 0;
       HEAP32[$1381 >> 2] = 7;
       if (($1380 + 8 | 0) >>> 0 < $1335 >>> 0) {
        var $1380 = $1381;
       } else {
        break;
       }
      }
     }
     if (($1353 | 0) == ($1327 | 0)) {
      break;
     }
     var $1389 = $1353 - $890 | 0;
     var $1392 = $1327 + ($1389 + 4) | 0;
     HEAP32[$1392 >> 2] = HEAP32[$1392 >> 2] & -2;
     HEAP32[$890 + 4 >> 2] = $1389 | 1;
     HEAP32[$1327 + $1389 >> 2] = $1389;
     var $1398 = $1389 >>> 3;
     if ($1389 >>> 0 < 256) {
      var $1401 = $1398 << 1;
      var $1403 = 17952 + ($1401 << 2) | 0;
      var $1404 = HEAP32[17912 >> 2];
      var $1405 = 1 << $1398;
      do {
       if (($1404 & $1405 | 0) == 0) {
        HEAP32[17912 >> 2] = $1404 | $1405;
        var $F_0_i_i = $1403;
        var $_pre_phi_i_i = 17952 + ($1401 + 2 << 2) | 0;
       } else {
        var $1411 = 17952 + ($1401 + 2 << 2) | 0;
        var $1412 = HEAP32[$1411 >> 2];
        if ($1412 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
         var $F_0_i_i = $1412;
         var $_pre_phi_i_i = $1411;
         break;
        }
        _abort();
       }
      } while (0);
      var $_pre_phi_i_i;
      var $F_0_i_i;
      HEAP32[$_pre_phi_i_i >> 2] = $890;
      HEAP32[$F_0_i_i + 12 >> 2] = $890;
      HEAP32[$890 + 8 >> 2] = $F_0_i_i;
      HEAP32[$890 + 12 >> 2] = $1403;
      break;
     }
     var $1422 = $890;
     var $1423 = $1389 >>> 8;
     do {
      if (($1423 | 0) == 0) {
       var $I1_0_i_i = 0;
      } else {
       if ($1389 >>> 0 > 16777215) {
        var $I1_0_i_i = 31;
        break;
       }
       var $1430 = ($1423 + 1048320 | 0) >>> 16 & 8;
       var $1431 = $1423 << $1430;
       var $1434 = ($1431 + 520192 | 0) >>> 16 & 4;
       var $1436 = $1431 << $1434;
       var $1439 = ($1436 + 245760 | 0) >>> 16 & 2;
       var $1444 = 14 - ($1434 | $1430 | $1439) + ($1436 << $1439 >>> 15) | 0;
       var $I1_0_i_i = $1389 >>> (($1444 + 7 | 0) >>> 0) & 1 | $1444 << 1;
      }
     } while (0);
     var $I1_0_i_i;
     var $1451 = 18216 + ($I1_0_i_i << 2) | 0;
     HEAP32[$890 + 28 >> 2] = $I1_0_i_i;
     HEAP32[$890 + 20 >> 2] = 0;
     HEAP32[$890 + 16 >> 2] = 0;
     var $1455 = HEAP32[17916 >> 2];
     var $1456 = 1 << $I1_0_i_i;
     if (($1455 & $1456 | 0) == 0) {
      HEAP32[17916 >> 2] = $1455 | $1456;
      HEAP32[$1451 >> 2] = $1422;
      HEAP32[$890 + 24 >> 2] = $1451;
      HEAP32[$890 + 12 >> 2] = $890;
      HEAP32[$890 + 8 >> 2] = $890;
      break;
     }
     if (($I1_0_i_i | 0) == 31) {
      var $1471 = 0;
     } else {
      var $1471 = 25 - ($I1_0_i_i >>> 1) | 0;
     }
     var $1471;
     var $K2_0_i_i = $1389 << $1471;
     var $T_0_i_i = HEAP32[$1451 >> 2];
     while (1) {
      var $T_0_i_i;
      var $K2_0_i_i;
      if ((HEAP32[$T_0_i_i + 4 >> 2] & -8 | 0) == ($1389 | 0)) {
       break;
      }
      var $1480 = $T_0_i_i + 16 + ($K2_0_i_i >>> 31 << 2) | 0;
      var $1481 = HEAP32[$1480 >> 2];
      if (($1481 | 0) == 0) {
       label = 1958;
       break;
      } else {
       var $K2_0_i_i = $K2_0_i_i << 1;
       var $T_0_i_i = $1481;
      }
     }
     if (label == 1958) {
      if ($1480 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
       _abort();
      } else {
       HEAP32[$1480 >> 2] = $1422;
       HEAP32[$890 + 24 >> 2] = $T_0_i_i;
       HEAP32[$890 + 12 >> 2] = $890;
       HEAP32[$890 + 8 >> 2] = $890;
       break;
      }
     }
     var $1494 = $T_0_i_i + 8 | 0;
     var $1495 = HEAP32[$1494 >> 2];
     var $1497 = HEAP32[17928 >> 2];
     if ($T_0_i_i >>> 0 < $1497 >>> 0) {
      _abort();
     }
     if ($1495 >>> 0 < $1497 >>> 0) {
      _abort();
     } else {
      HEAP32[$1495 + 12 >> 2] = $1422;
      HEAP32[$1494 >> 2] = $1422;
      HEAP32[$890 + 8 >> 2] = $1495;
      HEAP32[$890 + 12 >> 2] = $T_0_i_i;
      HEAP32[$890 + 24 >> 2] = 0;
      break;
     }
    }
   } while (0);
   var $1507 = HEAP32[17924 >> 2];
   if ($1507 >>> 0 <= $nb_0 >>> 0) {
    break;
   }
   var $1510 = $1507 - $nb_0 | 0;
   HEAP32[17924 >> 2] = $1510;
   var $1511 = HEAP32[17936 >> 2];
   var $1512 = $1511;
   HEAP32[17936 >> 2] = $1512 + $nb_0;
   HEAP32[$1512 + ($nb_0 + 4) >> 2] = $1510 | 1;
   HEAP32[$1511 + 4 >> 2] = $nb_0 | 3;
   var $mem_0 = $1511 + 8 | 0;
   var $mem_0;
   return $mem_0;
  }
 } while (0);
 HEAP32[___errno_location() >> 2] = 12;
 var $mem_0 = 0;
 var $mem_0;
 return $mem_0;
}
function _free($mem) {
 var label = 0;
 if (($mem | 0) == 0) {
  return;
 }
 var $3 = $mem - 8 | 0;
 var $4 = $3;
 var $5 = HEAP32[17928 >> 2];
 if ($3 >>> 0 < $5 >>> 0) {
  _abort();
 }
 var $10 = HEAP32[$mem - 4 >> 2];
 var $11 = $10 & 3;
 if (($11 | 0) == 1) {
  _abort();
 }
 var $14 = $10 & -8;
 var $15 = $mem + ($14 - 8) | 0;
 var $16 = $15;
 L2474 : do {
  if (($10 & 1 | 0) == 0) {
   var $21 = HEAP32[$3 >> 2];
   if (($11 | 0) == 0) {
    return;
   }
   var $_sum232 = -8 - $21 | 0;
   var $24 = $mem + $_sum232 | 0;
   var $25 = $24;
   var $26 = $21 + $14 | 0;
   if ($24 >>> 0 < $5 >>> 0) {
    _abort();
   }
   if (($25 | 0) == (HEAP32[17932 >> 2] | 0)) {
    var $177 = $mem + ($14 - 4) | 0;
    if ((HEAP32[$177 >> 2] & 3 | 0) != 3) {
     var $p_0 = $25;
     var $psize_0 = $26;
     break;
    }
    HEAP32[17920 >> 2] = $26;
    HEAP32[$177 >> 2] = HEAP32[$177 >> 2] & -2;
    HEAP32[$mem + ($_sum232 + 4) >> 2] = $26 | 1;
    HEAP32[$15 >> 2] = $26;
    return;
   }
   var $32 = $21 >>> 3;
   if ($21 >>> 0 < 256) {
    var $37 = HEAP32[$mem + ($_sum232 + 8) >> 2];
    var $40 = HEAP32[$mem + ($_sum232 + 12) >> 2];
    var $43 = 17952 + ($32 << 1 << 2) | 0;
    do {
     if (($37 | 0) != ($43 | 0)) {
      if ($37 >>> 0 < $5 >>> 0) {
       _abort();
      }
      if ((HEAP32[$37 + 12 >> 2] | 0) == ($25 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($40 | 0) == ($37 | 0)) {
     HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $32);
     var $p_0 = $25;
     var $psize_0 = $26;
     break;
    }
    do {
     if (($40 | 0) == ($43 | 0)) {
      var $_pre_phi306 = $40 + 8 | 0;
     } else {
      if ($40 >>> 0 < $5 >>> 0) {
       _abort();
      }
      var $64 = $40 + 8 | 0;
      if ((HEAP32[$64 >> 2] | 0) == ($25 | 0)) {
       var $_pre_phi306 = $64;
       break;
      }
      _abort();
     }
    } while (0);
    var $_pre_phi306;
    HEAP32[$37 + 12 >> 2] = $40;
    HEAP32[$_pre_phi306 >> 2] = $37;
    var $p_0 = $25;
    var $psize_0 = $26;
    break;
   }
   var $69 = $24;
   var $72 = HEAP32[$mem + ($_sum232 + 24) >> 2];
   var $75 = HEAP32[$mem + ($_sum232 + 12) >> 2];
   do {
    if (($75 | 0) == ($69 | 0)) {
     var $94 = $mem + ($_sum232 + 20) | 0;
     var $95 = HEAP32[$94 >> 2];
     if (($95 | 0) == 0) {
      var $99 = $mem + ($_sum232 + 16) | 0;
      var $100 = HEAP32[$99 >> 2];
      if (($100 | 0) == 0) {
       var $R_1 = 0;
       break;
      } else {
       var $R_0 = $100;
       var $RP_0 = $99;
      }
     } else {
      var $R_0 = $95;
      var $RP_0 = $94;
     }
     while (1) {
      var $RP_0;
      var $R_0;
      var $102 = $R_0 + 20 | 0;
      var $103 = HEAP32[$102 >> 2];
      if (($103 | 0) != 0) {
       var $R_0 = $103;
       var $RP_0 = $102;
       continue;
      }
      var $106 = $R_0 + 16 | 0;
      var $107 = HEAP32[$106 >> 2];
      if (($107 | 0) == 0) {
       break;
      } else {
       var $R_0 = $107;
       var $RP_0 = $106;
      }
     }
     if ($RP_0 >>> 0 < $5 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      var $R_1 = $R_0;
      break;
     }
    } else {
     var $80 = HEAP32[$mem + ($_sum232 + 8) >> 2];
     if ($80 >>> 0 < $5 >>> 0) {
      _abort();
     }
     var $84 = $80 + 12 | 0;
     if ((HEAP32[$84 >> 2] | 0) != ($69 | 0)) {
      _abort();
     }
     var $88 = $75 + 8 | 0;
     if ((HEAP32[$88 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$84 >> 2] = $75;
      HEAP32[$88 >> 2] = $80;
      var $R_1 = $75;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   var $R_1;
   if (($72 | 0) == 0) {
    var $p_0 = $25;
    var $psize_0 = $26;
    break;
   }
   var $118 = $mem + ($_sum232 + 28) | 0;
   var $120 = 18216 + (HEAP32[$118 >> 2] << 2) | 0;
   do {
    if (($69 | 0) == (HEAP32[$120 >> 2] | 0)) {
     HEAP32[$120 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$118 >> 2]);
     var $p_0 = $25;
     var $psize_0 = $26;
     break L2474;
    } else {
     if ($72 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     var $134 = $72 + 16 | 0;
     if ((HEAP32[$134 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$134 >> 2] = $R_1;
     } else {
      HEAP32[$72 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      var $p_0 = $25;
      var $psize_0 = $26;
      break L2474;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $72;
   var $151 = HEAP32[$mem + ($_sum232 + 16) >> 2];
   do {
    if (($151 | 0) != 0) {
     if ($151 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $151;
      HEAP32[$151 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   var $164 = HEAP32[$mem + ($_sum232 + 20) >> 2];
   if (($164 | 0) == 0) {
    var $p_0 = $25;
    var $psize_0 = $26;
    break;
   }
   if ($164 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $164;
    HEAP32[$164 + 24 >> 2] = $R_1;
    var $p_0 = $25;
    var $psize_0 = $26;
    break;
   }
  } else {
   var $p_0 = $4;
   var $psize_0 = $14;
  }
 } while (0);
 var $psize_0;
 var $p_0;
 var $189 = $p_0;
 if ($189 >>> 0 >= $15 >>> 0) {
  _abort();
 }
 var $193 = $mem + ($14 - 4) | 0;
 var $194 = HEAP32[$193 >> 2];
 if (($194 & 1 | 0) == 0) {
  _abort();
 }
 do {
  if (($194 & 2 | 0) == 0) {
   if (($16 | 0) == (HEAP32[17936 >> 2] | 0)) {
    var $204 = HEAP32[17924 >> 2] + $psize_0 | 0;
    HEAP32[17924 >> 2] = $204;
    HEAP32[17936 >> 2] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $204 | 1;
    if (($p_0 | 0) != (HEAP32[17932 >> 2] | 0)) {
     return;
    }
    HEAP32[17932 >> 2] = 0;
    HEAP32[17920 >> 2] = 0;
    return;
   }
   if (($16 | 0) == (HEAP32[17932 >> 2] | 0)) {
    var $215 = HEAP32[17920 >> 2] + $psize_0 | 0;
    HEAP32[17920 >> 2] = $215;
    HEAP32[17932 >> 2] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $215 | 1;
    HEAP32[$189 + $215 >> 2] = $215;
    return;
   }
   var $222 = ($194 & -8) + $psize_0 | 0;
   var $223 = $194 >>> 3;
   L2577 : do {
    if ($194 >>> 0 < 256) {
     var $228 = HEAP32[$mem + $14 >> 2];
     var $231 = HEAP32[$mem + ($14 | 4) >> 2];
     var $234 = 17952 + ($223 << 1 << 2) | 0;
     do {
      if (($228 | 0) != ($234 | 0)) {
       if ($228 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       if ((HEAP32[$228 + 12 >> 2] | 0) == ($16 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($231 | 0) == ($228 | 0)) {
      HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $223);
      break;
     }
     do {
      if (($231 | 0) == ($234 | 0)) {
       var $_pre_phi304 = $231 + 8 | 0;
      } else {
       if ($231 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $257 = $231 + 8 | 0;
       if ((HEAP32[$257 >> 2] | 0) == ($16 | 0)) {
        var $_pre_phi304 = $257;
        break;
       }
       _abort();
      }
     } while (0);
     var $_pre_phi304;
     HEAP32[$228 + 12 >> 2] = $231;
     HEAP32[$_pre_phi304 >> 2] = $228;
    } else {
     var $262 = $15;
     var $265 = HEAP32[$mem + ($14 + 16) >> 2];
     var $268 = HEAP32[$mem + ($14 | 4) >> 2];
     do {
      if (($268 | 0) == ($262 | 0)) {
       var $288 = $mem + ($14 + 12) | 0;
       var $289 = HEAP32[$288 >> 2];
       if (($289 | 0) == 0) {
        var $293 = $mem + ($14 + 8) | 0;
        var $294 = HEAP32[$293 >> 2];
        if (($294 | 0) == 0) {
         var $R7_1 = 0;
         break;
        } else {
         var $R7_0 = $294;
         var $RP9_0 = $293;
        }
       } else {
        var $R7_0 = $289;
        var $RP9_0 = $288;
       }
       while (1) {
        var $RP9_0;
        var $R7_0;
        var $296 = $R7_0 + 20 | 0;
        var $297 = HEAP32[$296 >> 2];
        if (($297 | 0) != 0) {
         var $R7_0 = $297;
         var $RP9_0 = $296;
         continue;
        }
        var $300 = $R7_0 + 16 | 0;
        var $301 = HEAP32[$300 >> 2];
        if (($301 | 0) == 0) {
         break;
        } else {
         var $R7_0 = $301;
         var $RP9_0 = $300;
        }
       }
       if ($RP9_0 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        var $R7_1 = $R7_0;
        break;
       }
      } else {
       var $273 = HEAP32[$mem + $14 >> 2];
       if ($273 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $278 = $273 + 12 | 0;
       if ((HEAP32[$278 >> 2] | 0) != ($262 | 0)) {
        _abort();
       }
       var $282 = $268 + 8 | 0;
       if ((HEAP32[$282 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$278 >> 2] = $268;
        HEAP32[$282 >> 2] = $273;
        var $R7_1 = $268;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     var $R7_1;
     if (($265 | 0) == 0) {
      break;
     }
     var $313 = $mem + ($14 + 20) | 0;
     var $315 = 18216 + (HEAP32[$313 >> 2] << 2) | 0;
     do {
      if (($262 | 0) == (HEAP32[$315 >> 2] | 0)) {
       HEAP32[$315 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$313 >> 2]);
       break L2577;
      } else {
       if ($265 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $329 = $265 + 16 | 0;
       if ((HEAP32[$329 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$329 >> 2] = $R7_1;
       } else {
        HEAP32[$265 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L2577;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $265;
     var $346 = HEAP32[$mem + ($14 + 8) >> 2];
     do {
      if (($346 | 0) != 0) {
       if ($346 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $346;
        HEAP32[$346 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     var $359 = HEAP32[$mem + ($14 + 12) >> 2];
     if (($359 | 0) == 0) {
      break;
     }
     if ($359 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $359;
      HEAP32[$359 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$p_0 + 4 >> 2] = $222 | 1;
   HEAP32[$189 + $222 >> 2] = $222;
   if (($p_0 | 0) != (HEAP32[17932 >> 2] | 0)) {
    var $psize_1 = $222;
    break;
   }
   HEAP32[17920 >> 2] = $222;
   return;
  } else {
   HEAP32[$193 >> 2] = $194 & -2;
   HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
   HEAP32[$189 + $psize_0 >> 2] = $psize_0;
   var $psize_1 = $psize_0;
  }
 } while (0);
 var $psize_1;
 var $385 = $psize_1 >>> 3;
 if ($psize_1 >>> 0 < 256) {
  var $388 = $385 << 1;
  var $390 = 17952 + ($388 << 2) | 0;
  var $391 = HEAP32[17912 >> 2];
  var $392 = 1 << $385;
  do {
   if (($391 & $392 | 0) == 0) {
    HEAP32[17912 >> 2] = $391 | $392;
    var $F16_0 = $390;
    var $_pre_phi = 17952 + ($388 + 2 << 2) | 0;
   } else {
    var $398 = 17952 + ($388 + 2 << 2) | 0;
    var $399 = HEAP32[$398 >> 2];
    if ($399 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
     var $F16_0 = $399;
     var $_pre_phi = $398;
     break;
    }
    _abort();
   }
  } while (0);
  var $_pre_phi;
  var $F16_0;
  HEAP32[$_pre_phi >> 2] = $p_0;
  HEAP32[$F16_0 + 12 >> 2] = $p_0;
  HEAP32[$p_0 + 8 >> 2] = $F16_0;
  HEAP32[$p_0 + 12 >> 2] = $390;
  return;
 }
 var $409 = $p_0;
 var $410 = $psize_1 >>> 8;
 do {
  if (($410 | 0) == 0) {
   var $I18_0 = 0;
  } else {
   if ($psize_1 >>> 0 > 16777215) {
    var $I18_0 = 31;
    break;
   }
   var $417 = ($410 + 1048320 | 0) >>> 16 & 8;
   var $418 = $410 << $417;
   var $421 = ($418 + 520192 | 0) >>> 16 & 4;
   var $423 = $418 << $421;
   var $426 = ($423 + 245760 | 0) >>> 16 & 2;
   var $431 = 14 - ($421 | $417 | $426) + ($423 << $426 >>> 15) | 0;
   var $I18_0 = $psize_1 >>> (($431 + 7 | 0) >>> 0) & 1 | $431 << 1;
  }
 } while (0);
 var $I18_0;
 var $438 = 18216 + ($I18_0 << 2) | 0;
 HEAP32[$p_0 + 28 >> 2] = $I18_0;
 HEAP32[$p_0 + 20 >> 2] = 0;
 HEAP32[$p_0 + 16 >> 2] = 0;
 var $442 = HEAP32[17916 >> 2];
 var $443 = 1 << $I18_0;
 do {
  if (($442 & $443 | 0) == 0) {
   HEAP32[17916 >> 2] = $442 | $443;
   HEAP32[$438 >> 2] = $409;
   HEAP32[$p_0 + 24 >> 2] = $438;
   HEAP32[$p_0 + 12 >> 2] = $p_0;
   HEAP32[$p_0 + 8 >> 2] = $p_0;
  } else {
   if (($I18_0 | 0) == 31) {
    var $458 = 0;
   } else {
    var $458 = 25 - ($I18_0 >>> 1) | 0;
   }
   var $458;
   var $K19_0 = $psize_1 << $458;
   var $T_0 = HEAP32[$438 >> 2];
   while (1) {
    var $T_0;
    var $K19_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
     break;
    }
    var $467 = $T_0 + 16 + ($K19_0 >>> 31 << 2) | 0;
    var $468 = HEAP32[$467 >> 2];
    if (($468 | 0) == 0) {
     label = 2135;
     break;
    } else {
     var $K19_0 = $K19_0 << 1;
     var $T_0 = $468;
    }
   }
   if (label == 2135) {
    if ($467 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
     _abort();
    } else {
     HEAP32[$467 >> 2] = $409;
     HEAP32[$p_0 + 24 >> 2] = $T_0;
     HEAP32[$p_0 + 12 >> 2] = $p_0;
     HEAP32[$p_0 + 8 >> 2] = $p_0;
     break;
    }
   }
   var $481 = $T_0 + 8 | 0;
   var $482 = HEAP32[$481 >> 2];
   var $484 = HEAP32[17928 >> 2];
   if ($T_0 >>> 0 < $484 >>> 0) {
    _abort();
   }
   if ($482 >>> 0 < $484 >>> 0) {
    _abort();
   } else {
    HEAP32[$482 + 12 >> 2] = $409;
    HEAP32[$481 >> 2] = $409;
    HEAP32[$p_0 + 8 >> 2] = $482;
    HEAP32[$p_0 + 12 >> 2] = $T_0;
    HEAP32[$p_0 + 24 >> 2] = 0;
    break;
   }
  }
 } while (0);
 var $496 = HEAP32[17944 >> 2] - 1 | 0;
 HEAP32[17944 >> 2] = $496;
 if (($496 | 0) == 0) {
  var $sp_0_in_i = 18368;
 } else {
  return;
 }
 while (1) {
  var $sp_0_in_i;
  var $sp_0_i = HEAP32[$sp_0_in_i >> 2];
  if (($sp_0_i | 0) == 0) {
   break;
  } else {
   var $sp_0_in_i = $sp_0_i + 8 | 0;
  }
 }
 HEAP32[17944 >> 2] = -1;
 return;
}
function _realloc($oldmem, $bytes) {
 if (($oldmem | 0) == 0) {
  var $mem_0 = _malloc($bytes);
  var $mem_0;
  return $mem_0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[___errno_location() >> 2] = 12;
  var $mem_0 = 0;
  var $mem_0;
  return $mem_0;
 }
 if ($bytes >>> 0 < 11) {
  var $14 = 16;
 } else {
  var $14 = $bytes + 11 & -8;
 }
 var $14;
 var $15 = $oldmem - 8 | 0;
 var $17 = $oldmem - 4 | 0;
 var $18 = HEAP32[$17 >> 2];
 var $19 = $18 & -8;
 var $_sum = $19 - 8 | 0;
 var $20 = $oldmem + $_sum | 0;
 var $21 = $20;
 var $22 = HEAP32[17928 >> 2];
 if ($15 >>> 0 < $22 >>> 0) {
  _abort();
 }
 var $25 = $18 & 3;
 if (!(($25 | 0) != 1 & ($_sum | 0) > -8)) {
  _abort();
 }
 var $_sum3334_i = $19 | 4;
 var $30 = $oldmem + ($_sum3334_i - 8) | 0;
 var $31 = HEAP32[$30 >> 2];
 if (($31 & 1 | 0) == 0) {
  _abort();
 }
 L2712 : do {
  if (($25 | 0) == 0) {
   if ($14 >>> 0 < 256 | $19 >>> 0 < ($14 | 4) >>> 0) {
    break;
   }
   if (($19 - $14 | 0) >>> 0 > HEAP32[17696 >> 2] << 1 >>> 0 | ($15 | 0) == 0) {
    break;
   } else {
    var $mem_0 = $oldmem;
   }
   var $mem_0;
   return $mem_0;
  } else {
   do {
    if ($19 >>> 0 < $14 >>> 0) {
     if (($21 | 0) == (HEAP32[17936 >> 2] | 0)) {
      var $65 = HEAP32[17924 >> 2] + $19 | 0;
      if ($65 >>> 0 <= $14 >>> 0) {
       break L2712;
      }
      var $68 = $65 - $14 | 0;
      HEAP32[$17 >> 2] = $18 & 1 | $14 | 2;
      HEAP32[$oldmem + (($14 | 4) - 8) >> 2] = $68 | 1;
      HEAP32[17936 >> 2] = $oldmem + ($14 - 8);
      HEAP32[17924 >> 2] = $68;
      break;
     }
     if (($21 | 0) == (HEAP32[17932 >> 2] | 0)) {
      var $82 = HEAP32[17920 >> 2] + $19 | 0;
      if ($82 >>> 0 < $14 >>> 0) {
       break L2712;
      }
      var $85 = $82 - $14 | 0;
      if ($85 >>> 0 > 15) {
       HEAP32[$17 >> 2] = $18 & 1 | $14 | 2;
       HEAP32[$oldmem + (($14 | 4) - 8) >> 2] = $85 | 1;
       HEAP32[$oldmem + ($82 - 8) >> 2] = $85;
       var $99 = $oldmem + ($82 - 4) | 0;
       HEAP32[$99 >> 2] = HEAP32[$99 >> 2] & -2;
       var $storemerge_i = $oldmem + ($14 - 8) | 0;
       var $storemerge27_i = $85;
      } else {
       HEAP32[$17 >> 2] = $18 & 1 | $82 | 2;
       var $107 = $oldmem + ($82 - 4) | 0;
       HEAP32[$107 >> 2] = HEAP32[$107 >> 2] | 1;
       var $storemerge_i = 0;
       var $storemerge27_i = 0;
      }
      var $storemerge27_i;
      var $storemerge_i;
      HEAP32[17920 >> 2] = $storemerge27_i;
      HEAP32[17932 >> 2] = $storemerge_i;
      break;
     }
     if (($31 & 2 | 0) != 0) {
      break L2712;
     }
     var $116 = ($31 & -8) + $19 | 0;
     if ($116 >>> 0 < $14 >>> 0) {
      break L2712;
     }
     var $119 = $116 - $14 | 0;
     var $120 = $31 >>> 3;
     L2733 : do {
      if ($31 >>> 0 < 256) {
       var $125 = HEAP32[$oldmem + $19 >> 2];
       var $128 = HEAP32[$oldmem + $_sum3334_i >> 2];
       var $131 = 17952 + ($120 << 1 << 2) | 0;
       do {
        if (($125 | 0) != ($131 | 0)) {
         if ($125 >>> 0 < $22 >>> 0) {
          _abort();
         }
         if ((HEAP32[$125 + 12 >> 2] | 0) == ($21 | 0)) {
          break;
         }
         _abort();
        }
       } while (0);
       if (($128 | 0) == ($125 | 0)) {
        HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $120);
        break;
       }
       do {
        if (($128 | 0) == ($131 | 0)) {
         var $_pre_phi_i = $128 + 8 | 0;
        } else {
         if ($128 >>> 0 < $22 >>> 0) {
          _abort();
         }
         var $152 = $128 + 8 | 0;
         if ((HEAP32[$152 >> 2] | 0) == ($21 | 0)) {
          var $_pre_phi_i = $152;
          break;
         }
         _abort();
        }
       } while (0);
       var $_pre_phi_i;
       HEAP32[$125 + 12 >> 2] = $128;
       HEAP32[$_pre_phi_i >> 2] = $125;
      } else {
       var $157 = $20;
       var $160 = HEAP32[$oldmem + ($19 + 16) >> 2];
       var $163 = HEAP32[$oldmem + $_sum3334_i >> 2];
       do {
        if (($163 | 0) == ($157 | 0)) {
         var $182 = $oldmem + ($19 + 12) | 0;
         var $183 = HEAP32[$182 >> 2];
         if (($183 | 0) == 0) {
          var $187 = $oldmem + ($19 + 8) | 0;
          var $188 = HEAP32[$187 >> 2];
          if (($188 | 0) == 0) {
           var $R_1_i = 0;
           break;
          } else {
           var $R_0_i = $188;
           var $RP_0_i = $187;
          }
         } else {
          var $R_0_i = $183;
          var $RP_0_i = $182;
         }
         while (1) {
          var $RP_0_i;
          var $R_0_i;
          var $190 = $R_0_i + 20 | 0;
          var $191 = HEAP32[$190 >> 2];
          if (($191 | 0) != 0) {
           var $R_0_i = $191;
           var $RP_0_i = $190;
           continue;
          }
          var $194 = $R_0_i + 16 | 0;
          var $195 = HEAP32[$194 >> 2];
          if (($195 | 0) == 0) {
           break;
          } else {
           var $R_0_i = $195;
           var $RP_0_i = $194;
          }
         }
         if ($RP_0_i >>> 0 < $22 >>> 0) {
          _abort();
         } else {
          HEAP32[$RP_0_i >> 2] = 0;
          var $R_1_i = $R_0_i;
          break;
         }
        } else {
         var $168 = HEAP32[$oldmem + $19 >> 2];
         if ($168 >>> 0 < $22 >>> 0) {
          _abort();
         }
         var $172 = $168 + 12 | 0;
         if ((HEAP32[$172 >> 2] | 0) != ($157 | 0)) {
          _abort();
         }
         var $176 = $163 + 8 | 0;
         if ((HEAP32[$176 >> 2] | 0) == ($157 | 0)) {
          HEAP32[$172 >> 2] = $163;
          HEAP32[$176 >> 2] = $168;
          var $R_1_i = $163;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       var $R_1_i;
       if (($160 | 0) == 0) {
        break;
       }
       var $206 = $oldmem + ($19 + 20) | 0;
       var $208 = 18216 + (HEAP32[$206 >> 2] << 2) | 0;
       do {
        if (($157 | 0) == (HEAP32[$208 >> 2] | 0)) {
         HEAP32[$208 >> 2] = $R_1_i;
         if (($R_1_i | 0) != 0) {
          break;
         }
         HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$206 >> 2]);
         break L2733;
        } else {
         if ($160 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
          _abort();
         }
         var $222 = $160 + 16 | 0;
         if ((HEAP32[$222 >> 2] | 0) == ($157 | 0)) {
          HEAP32[$222 >> 2] = $R_1_i;
         } else {
          HEAP32[$160 + 20 >> 2] = $R_1_i;
         }
         if (($R_1_i | 0) == 0) {
          break L2733;
         }
        }
       } while (0);
       if ($R_1_i >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       HEAP32[$R_1_i + 24 >> 2] = $160;
       var $239 = HEAP32[$oldmem + ($19 + 8) >> 2];
       do {
        if (($239 | 0) != 0) {
         if ($239 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
          _abort();
         } else {
          HEAP32[$R_1_i + 16 >> 2] = $239;
          HEAP32[$239 + 24 >> 2] = $R_1_i;
          break;
         }
        }
       } while (0);
       var $252 = HEAP32[$oldmem + ($19 + 12) >> 2];
       if (($252 | 0) == 0) {
        break;
       }
       if ($252 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$R_1_i + 20 >> 2] = $252;
        HEAP32[$252 + 24 >> 2] = $R_1_i;
        break;
       }
      }
     } while (0);
     if ($119 >>> 0 >= 16) {
      HEAP32[$17 >> 2] = HEAP32[$17 >> 2] & 1 | $14 | 2;
      HEAP32[$oldmem + (($14 | 4) - 8) >> 2] = $119 | 3;
      var $284 = $oldmem + (($116 | 4) - 8) | 0;
      HEAP32[$284 >> 2] = HEAP32[$284 >> 2] | 1;
      _dispose_chunk($oldmem + ($14 - 8) | 0, $119);
      break;
     }
     HEAP32[$17 >> 2] = $116 | HEAP32[$17 >> 2] & 1 | 2;
     var $270 = $oldmem + (($116 | 4) - 8) | 0;
     HEAP32[$270 >> 2] = HEAP32[$270 >> 2] | 1;
     var $mem_0 = $oldmem;
     var $mem_0;
     return $mem_0;
    } else {
     var $48 = $19 - $14 | 0;
     if ($48 >>> 0 <= 15) {
      break;
     }
     HEAP32[$17 >> 2] = $18 & 1 | $14 | 2;
     HEAP32[$oldmem + (($14 | 4) - 8) >> 2] = $48 | 3;
     HEAP32[$30 >> 2] = HEAP32[$30 >> 2] | 1;
     _dispose_chunk($oldmem + ($14 - 8) | 0, $48);
     var $mem_0 = $oldmem;
     var $mem_0;
     return $mem_0;
    }
   } while (0);
   if (($15 | 0) == 0) {
    break;
   } else {
    var $mem_0 = $oldmem;
   }
   var $mem_0;
   return $mem_0;
  }
 } while (0);
 var $287 = _malloc($bytes);
 if (($287 | 0) == 0) {
  var $mem_0 = 0;
  var $mem_0;
  return $mem_0;
 }
 var $290 = HEAP32[$17 >> 2];
 var $295 = ($290 & -8) - (($290 & 3 | 0) == 0 ? 8 : 4) | 0;
 var $297 = $295 >>> 0 < $bytes >>> 0 ? $295 : $bytes;
 _memcpy($287, $oldmem, $297) | 0;
 _free($oldmem);
 var $mem_0 = $287;
 var $mem_0;
 return $mem_0;
}
function __ZNSt9bad_allocD2Ev($this) {
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 return 4768;
}
function __ZNSt9bad_allocD0Ev($this) {
 if (($this | 0) == 0) {
  return;
 }
 _free($this);
 return;
}
function _dispose_chunk($p, $psize) {
 var label = 0;
 var $1 = $p;
 var $2 = $1 + $psize | 0;
 var $3 = $2;
 var $5 = HEAP32[$p + 4 >> 2];
 L2825 : do {
  if (($5 & 1 | 0) == 0) {
   var $10 = HEAP32[$p >> 2];
   if (($5 & 3 | 0) == 0) {
    return;
   }
   var $15 = $1 + -$10 | 0;
   var $16 = $15;
   var $17 = $10 + $psize | 0;
   var $18 = HEAP32[17928 >> 2];
   if ($15 >>> 0 < $18 >>> 0) {
    _abort();
   }
   if (($16 | 0) == (HEAP32[17932 >> 2] | 0)) {
    var $169 = $1 + ($psize + 4) | 0;
    if ((HEAP32[$169 >> 2] & 3 | 0) != 3) {
     var $_0 = $16;
     var $_0277 = $17;
     break;
    }
    HEAP32[17920 >> 2] = $17;
    HEAP32[$169 >> 2] = HEAP32[$169 >> 2] & -2;
    HEAP32[$1 + (4 - $10) >> 2] = $17 | 1;
    HEAP32[$2 >> 2] = $17;
    return;
   }
   var $24 = $10 >>> 3;
   if ($10 >>> 0 < 256) {
    var $29 = HEAP32[$1 + (8 - $10) >> 2];
    var $32 = HEAP32[$1 + (12 - $10) >> 2];
    var $35 = 17952 + ($24 << 1 << 2) | 0;
    do {
     if (($29 | 0) != ($35 | 0)) {
      if ($29 >>> 0 < $18 >>> 0) {
       _abort();
      }
      if ((HEAP32[$29 + 12 >> 2] | 0) == ($16 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($32 | 0) == ($29 | 0)) {
     HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $24);
     var $_0 = $16;
     var $_0277 = $17;
     break;
    }
    do {
     if (($32 | 0) == ($35 | 0)) {
      var $_pre_phi63 = $32 + 8 | 0;
     } else {
      if ($32 >>> 0 < $18 >>> 0) {
       _abort();
      }
      var $56 = $32 + 8 | 0;
      if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
       var $_pre_phi63 = $56;
       break;
      }
      _abort();
     }
    } while (0);
    var $_pre_phi63;
    HEAP32[$29 + 12 >> 2] = $32;
    HEAP32[$_pre_phi63 >> 2] = $29;
    var $_0 = $16;
    var $_0277 = $17;
    break;
   }
   var $61 = $15;
   var $64 = HEAP32[$1 + (24 - $10) >> 2];
   var $67 = HEAP32[$1 + (12 - $10) >> 2];
   do {
    if (($67 | 0) == ($61 | 0)) {
     var $_sum28 = 16 - $10 | 0;
     var $86 = $1 + ($_sum28 + 4) | 0;
     var $87 = HEAP32[$86 >> 2];
     if (($87 | 0) == 0) {
      var $91 = $1 + $_sum28 | 0;
      var $92 = HEAP32[$91 >> 2];
      if (($92 | 0) == 0) {
       var $R_1 = 0;
       break;
      } else {
       var $R_0 = $92;
       var $RP_0 = $91;
      }
     } else {
      var $R_0 = $87;
      var $RP_0 = $86;
     }
     while (1) {
      var $RP_0;
      var $R_0;
      var $94 = $R_0 + 20 | 0;
      var $95 = HEAP32[$94 >> 2];
      if (($95 | 0) != 0) {
       var $R_0 = $95;
       var $RP_0 = $94;
       continue;
      }
      var $98 = $R_0 + 16 | 0;
      var $99 = HEAP32[$98 >> 2];
      if (($99 | 0) == 0) {
       break;
      } else {
       var $R_0 = $99;
       var $RP_0 = $98;
      }
     }
     if ($RP_0 >>> 0 < $18 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      var $R_1 = $R_0;
      break;
     }
    } else {
     var $72 = HEAP32[$1 + (8 - $10) >> 2];
     if ($72 >>> 0 < $18 >>> 0) {
      _abort();
     }
     var $76 = $72 + 12 | 0;
     if ((HEAP32[$76 >> 2] | 0) != ($61 | 0)) {
      _abort();
     }
     var $80 = $67 + 8 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$76 >> 2] = $67;
      HEAP32[$80 >> 2] = $72;
      var $R_1 = $67;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   var $R_1;
   if (($64 | 0) == 0) {
    var $_0 = $16;
    var $_0277 = $17;
    break;
   }
   var $110 = $1 + (28 - $10) | 0;
   var $112 = 18216 + (HEAP32[$110 >> 2] << 2) | 0;
   do {
    if (($61 | 0) == (HEAP32[$112 >> 2] | 0)) {
     HEAP32[$112 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$110 >> 2]);
     var $_0 = $16;
     var $_0277 = $17;
     break L2825;
    } else {
     if ($64 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     var $126 = $64 + 16 | 0;
     if ((HEAP32[$126 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$126 >> 2] = $R_1;
     } else {
      HEAP32[$64 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      var $_0 = $16;
      var $_0277 = $17;
      break L2825;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $64;
   var $_sum31 = 16 - $10 | 0;
   var $143 = HEAP32[$1 + $_sum31 >> 2];
   do {
    if (($143 | 0) != 0) {
     if ($143 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $143;
      HEAP32[$143 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   var $156 = HEAP32[$1 + ($_sum31 + 4) >> 2];
   if (($156 | 0) == 0) {
    var $_0 = $16;
    var $_0277 = $17;
    break;
   }
   if ($156 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $156;
    HEAP32[$156 + 24 >> 2] = $R_1;
    var $_0 = $16;
    var $_0277 = $17;
    break;
   }
  } else {
   var $_0 = $p;
   var $_0277 = $psize;
  }
 } while (0);
 var $_0277;
 var $_0;
 var $181 = HEAP32[17928 >> 2];
 if ($2 >>> 0 < $181 >>> 0) {
  _abort();
 }
 var $185 = $1 + ($psize + 4) | 0;
 var $186 = HEAP32[$185 >> 2];
 do {
  if (($186 & 2 | 0) == 0) {
   if (($3 | 0) == (HEAP32[17936 >> 2] | 0)) {
    var $194 = HEAP32[17924 >> 2] + $_0277 | 0;
    HEAP32[17924 >> 2] = $194;
    HEAP32[17936 >> 2] = $_0;
    HEAP32[$_0 + 4 >> 2] = $194 | 1;
    if (($_0 | 0) != (HEAP32[17932 >> 2] | 0)) {
     return;
    }
    HEAP32[17932 >> 2] = 0;
    HEAP32[17920 >> 2] = 0;
    return;
   }
   if (($3 | 0) == (HEAP32[17932 >> 2] | 0)) {
    var $205 = HEAP32[17920 >> 2] + $_0277 | 0;
    HEAP32[17920 >> 2] = $205;
    HEAP32[17932 >> 2] = $_0;
    HEAP32[$_0 + 4 >> 2] = $205 | 1;
    HEAP32[$_0 + $205 >> 2] = $205;
    return;
   }
   var $213 = ($186 & -8) + $_0277 | 0;
   var $214 = $186 >>> 3;
   L2924 : do {
    if ($186 >>> 0 < 256) {
     var $219 = HEAP32[$1 + ($psize + 8) >> 2];
     var $222 = HEAP32[$1 + ($psize + 12) >> 2];
     var $225 = 17952 + ($214 << 1 << 2) | 0;
     do {
      if (($219 | 0) != ($225 | 0)) {
       if ($219 >>> 0 < $181 >>> 0) {
        _abort();
       }
       if ((HEAP32[$219 + 12 >> 2] | 0) == ($3 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($222 | 0) == ($219 | 0)) {
      HEAP32[17912 >> 2] = HEAP32[17912 >> 2] & ~(1 << $214);
      break;
     }
     do {
      if (($222 | 0) == ($225 | 0)) {
       var $_pre_phi61 = $222 + 8 | 0;
      } else {
       if ($222 >>> 0 < $181 >>> 0) {
        _abort();
       }
       var $246 = $222 + 8 | 0;
       if ((HEAP32[$246 >> 2] | 0) == ($3 | 0)) {
        var $_pre_phi61 = $246;
        break;
       }
       _abort();
      }
     } while (0);
     var $_pre_phi61;
     HEAP32[$219 + 12 >> 2] = $222;
     HEAP32[$_pre_phi61 >> 2] = $219;
    } else {
     var $251 = $2;
     var $254 = HEAP32[$1 + ($psize + 24) >> 2];
     var $257 = HEAP32[$1 + ($psize + 12) >> 2];
     do {
      if (($257 | 0) == ($251 | 0)) {
       var $276 = $1 + ($psize + 20) | 0;
       var $277 = HEAP32[$276 >> 2];
       if (($277 | 0) == 0) {
        var $281 = $1 + ($psize + 16) | 0;
        var $282 = HEAP32[$281 >> 2];
        if (($282 | 0) == 0) {
         var $R7_1 = 0;
         break;
        } else {
         var $R7_0 = $282;
         var $RP9_0 = $281;
        }
       } else {
        var $R7_0 = $277;
        var $RP9_0 = $276;
       }
       while (1) {
        var $RP9_0;
        var $R7_0;
        var $284 = $R7_0 + 20 | 0;
        var $285 = HEAP32[$284 >> 2];
        if (($285 | 0) != 0) {
         var $R7_0 = $285;
         var $RP9_0 = $284;
         continue;
        }
        var $288 = $R7_0 + 16 | 0;
        var $289 = HEAP32[$288 >> 2];
        if (($289 | 0) == 0) {
         break;
        } else {
         var $R7_0 = $289;
         var $RP9_0 = $288;
        }
       }
       if ($RP9_0 >>> 0 < $181 >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        var $R7_1 = $R7_0;
        break;
       }
      } else {
       var $262 = HEAP32[$1 + ($psize + 8) >> 2];
       if ($262 >>> 0 < $181 >>> 0) {
        _abort();
       }
       var $266 = $262 + 12 | 0;
       if ((HEAP32[$266 >> 2] | 0) != ($251 | 0)) {
        _abort();
       }
       var $270 = $257 + 8 | 0;
       if ((HEAP32[$270 >> 2] | 0) == ($251 | 0)) {
        HEAP32[$266 >> 2] = $257;
        HEAP32[$270 >> 2] = $262;
        var $R7_1 = $257;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     var $R7_1;
     if (($254 | 0) == 0) {
      break;
     }
     var $300 = $1 + ($psize + 28) | 0;
     var $302 = 18216 + (HEAP32[$300 >> 2] << 2) | 0;
     do {
      if (($251 | 0) == (HEAP32[$302 >> 2] | 0)) {
       HEAP32[$302 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[17916 >> 2] = HEAP32[17916 >> 2] & ~(1 << HEAP32[$300 >> 2]);
       break L2924;
      } else {
       if ($254 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       }
       var $316 = $254 + 16 | 0;
       if ((HEAP32[$316 >> 2] | 0) == ($251 | 0)) {
        HEAP32[$316 >> 2] = $R7_1;
       } else {
        HEAP32[$254 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L2924;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $254;
     var $333 = HEAP32[$1 + ($psize + 16) >> 2];
     do {
      if (($333 | 0) != 0) {
       if ($333 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $333;
        HEAP32[$333 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     var $346 = HEAP32[$1 + ($psize + 20) >> 2];
     if (($346 | 0) == 0) {
      break;
     }
     if ($346 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $346;
      HEAP32[$346 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$_0 + 4 >> 2] = $213 | 1;
   HEAP32[$_0 + $213 >> 2] = $213;
   if (($_0 | 0) != (HEAP32[17932 >> 2] | 0)) {
    var $_1 = $213;
    break;
   }
   HEAP32[17920 >> 2] = $213;
   return;
  } else {
   HEAP32[$185 >> 2] = $186 & -2;
   HEAP32[$_0 + 4 >> 2] = $_0277 | 1;
   HEAP32[$_0 + $_0277 >> 2] = $_0277;
   var $_1 = $_0277;
  }
 } while (0);
 var $_1;
 var $374 = $_1 >>> 3;
 if ($_1 >>> 0 < 256) {
  var $377 = $374 << 1;
  var $379 = 17952 + ($377 << 2) | 0;
  var $380 = HEAP32[17912 >> 2];
  var $381 = 1 << $374;
  do {
   if (($380 & $381 | 0) == 0) {
    HEAP32[17912 >> 2] = $380 | $381;
    var $F16_0 = $379;
    var $_pre_phi = 17952 + ($377 + 2 << 2) | 0;
   } else {
    var $387 = 17952 + ($377 + 2 << 2) | 0;
    var $388 = HEAP32[$387 >> 2];
    if ($388 >>> 0 >= HEAP32[17928 >> 2] >>> 0) {
     var $F16_0 = $388;
     var $_pre_phi = $387;
     break;
    }
    _abort();
   }
  } while (0);
  var $_pre_phi;
  var $F16_0;
  HEAP32[$_pre_phi >> 2] = $_0;
  HEAP32[$F16_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $F16_0;
  HEAP32[$_0 + 12 >> 2] = $379;
  return;
 }
 var $398 = $_0;
 var $399 = $_1 >>> 8;
 do {
  if (($399 | 0) == 0) {
   var $I19_0 = 0;
  } else {
   if ($_1 >>> 0 > 16777215) {
    var $I19_0 = 31;
    break;
   }
   var $406 = ($399 + 1048320 | 0) >>> 16 & 8;
   var $407 = $399 << $406;
   var $410 = ($407 + 520192 | 0) >>> 16 & 4;
   var $412 = $407 << $410;
   var $415 = ($412 + 245760 | 0) >>> 16 & 2;
   var $420 = 14 - ($410 | $406 | $415) + ($412 << $415 >>> 15) | 0;
   var $I19_0 = $_1 >>> (($420 + 7 | 0) >>> 0) & 1 | $420 << 1;
  }
 } while (0);
 var $I19_0;
 var $427 = 18216 + ($I19_0 << 2) | 0;
 HEAP32[$_0 + 28 >> 2] = $I19_0;
 HEAP32[$_0 + 20 >> 2] = 0;
 HEAP32[$_0 + 16 >> 2] = 0;
 var $431 = HEAP32[17916 >> 2];
 var $432 = 1 << $I19_0;
 if (($431 & $432 | 0) == 0) {
  HEAP32[17916 >> 2] = $431 | $432;
  HEAP32[$427 >> 2] = $398;
  HEAP32[$_0 + 24 >> 2] = $427;
  HEAP32[$_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $_0;
  return;
 }
 if (($I19_0 | 0) == 31) {
  var $447 = 0;
 } else {
  var $447 = 25 - ($I19_0 >>> 1) | 0;
 }
 var $447;
 var $K20_0 = $_1 << $447;
 var $T_0 = HEAP32[$427 >> 2];
 while (1) {
  var $T_0;
  var $K20_0;
  if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($_1 | 0)) {
   break;
  }
  var $456 = $T_0 + 16 + ($K20_0 >>> 31 << 2) | 0;
  var $457 = HEAP32[$456 >> 2];
  if (($457 | 0) == 0) {
   label = 2408;
   break;
  } else {
   var $K20_0 = $K20_0 << 1;
   var $T_0 = $457;
  }
 }
 if (label == 2408) {
  if ($456 >>> 0 < HEAP32[17928 >> 2] >>> 0) {
   _abort();
  }
  HEAP32[$456 >> 2] = $398;
  HEAP32[$_0 + 24 >> 2] = $T_0;
  HEAP32[$_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $_0;
  return;
 }
 var $470 = $T_0 + 8 | 0;
 var $471 = HEAP32[$470 >> 2];
 var $473 = HEAP32[17928 >> 2];
 if ($T_0 >>> 0 < $473 >>> 0) {
  _abort();
 }
 if ($471 >>> 0 < $473 >>> 0) {
  _abort();
 }
 HEAP32[$471 + 12 >> 2] = $398;
 HEAP32[$470 >> 2] = $398;
 HEAP32[$_0 + 8 >> 2] = $471;
 HEAP32[$_0 + 12 >> 2] = $T_0;
 HEAP32[$_0 + 24 >> 2] = 0;
 return;
}
function _strtold_l($nptr, $endptr) {
 var label = 0;
 var $p_0_i = $nptr;
 while (1) {
  var $p_0_i;
  var $6 = $p_0_i + 1 | 0;
  if ((_isspace(HEAP8[$p_0_i] | 0) | 0) == 0) {
   break;
  } else {
   var $p_0_i = $6;
  }
 }
 var $8 = HEAP8[$p_0_i];
 if ($8 << 24 >> 24 == 45) {
  var $p_2_i = $6;
  var $sign_0_i = 1;
 } else if ($8 << 24 >> 24 == 43) {
  var $p_2_i = $6;
  var $sign_0_i = 0;
 } else {
  var $p_2_i = $p_0_i;
  var $sign_0_i = 0;
 }
 var $sign_0_i;
 var $p_2_i;
 var $decPt_0_i = -1;
 var $mantSize_0_i = 0;
 var $p_3_i = $p_2_i;
 while (1) {
  var $p_3_i;
  var $mantSize_0_i;
  var $decPt_0_i;
  var $13 = HEAP8[$p_3_i];
  if ((($13 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
   var $decPt_1_i = $decPt_0_i;
  } else {
   if ($13 << 24 >> 24 != 46 | ($decPt_0_i | 0) > -1) {
    break;
   } else {
    var $decPt_1_i = $mantSize_0_i;
   }
  }
  var $decPt_1_i;
  var $decPt_0_i = $decPt_1_i;
  var $mantSize_0_i = $mantSize_0_i + 1 | 0;
  var $p_3_i = $p_3_i + 1 | 0;
 }
 var $23 = $p_3_i + -$mantSize_0_i | 0;
 var $24 = ($decPt_0_i | 0) < 0;
 var $mantSize_1_i = (($24 ^ 1) << 31 >> 31) + $mantSize_0_i | 0;
 var $26 = ($mantSize_1_i | 0) > 18;
 var $fracExp_0_i = ($26 ? -18 : -$mantSize_1_i | 0) + ($24 ? $mantSize_0_i : $decPt_0_i) | 0;
 var $mantSize_2_i = $26 ? 18 : $mantSize_1_i;
 do {
  if (($mantSize_2_i | 0) == 0) {
   var $p_11_i = $nptr;
   var $fraction_0_i = 0;
  } else {
   if (($mantSize_2_i | 0) > 9) {
    var $p_483_i = $23;
    var $mantSize_384_i = $mantSize_2_i;
    var $frac1_085_i = 0;
    while (1) {
     var $frac1_085_i;
     var $mantSize_384_i;
     var $p_483_i;
     var $31 = HEAP8[$p_483_i];
     var $32 = $p_483_i + 1 | 0;
     if ($31 << 24 >> 24 == 46) {
      var $c_0_in_i = HEAP8[$32];
      var $p_5_i = $p_483_i + 2 | 0;
     } else {
      var $c_0_in_i = $31;
      var $p_5_i = $32;
     }
     var $p_5_i;
     var $c_0_in_i;
     var $40 = ($frac1_085_i * 10 & -1) - 48 + ($c_0_in_i << 24 >> 24) | 0;
     var $41 = $mantSize_384_i - 1 | 0;
     if (($41 | 0) > 9) {
      var $p_483_i = $p_5_i;
      var $mantSize_384_i = $41;
      var $frac1_085_i = $40;
     } else {
      break;
     }
    }
    var $frac1_0_lcssa97_i = ($40 | 0) * 1e9;
    var $mantSize_3_lcssa98_i = 9;
    var $p_4_lcssa99_i = $p_5_i;
    label = 2456;
   } else {
    if (($mantSize_2_i | 0) > 0) {
     var $frac1_0_lcssa97_i = 0;
     var $mantSize_3_lcssa98_i = $mantSize_2_i;
     var $p_4_lcssa99_i = $23;
     label = 2456;
    } else {
     var $frac2_0_lcssa_i = 0;
     var $frac1_0_lcssa96_i = 0;
    }
   }
   if (label == 2456) {
    var $p_4_lcssa99_i;
    var $mantSize_3_lcssa98_i;
    var $frac1_0_lcssa97_i;
    var $p_676_i = $p_4_lcssa99_i;
    var $mantSize_477_i = $mantSize_3_lcssa98_i;
    var $frac2_078_i = 0;
    while (1) {
     var $frac2_078_i;
     var $mantSize_477_i;
     var $p_676_i;
     var $44 = HEAP8[$p_676_i];
     var $45 = $p_676_i + 1 | 0;
     if ($44 << 24 >> 24 == 46) {
      var $c_1_in_i = HEAP8[$45];
      var $p_7_i = $p_676_i + 2 | 0;
     } else {
      var $c_1_in_i = $44;
      var $p_7_i = $45;
     }
     var $p_7_i;
     var $c_1_in_i;
     var $53 = ($frac2_078_i * 10 & -1) - 48 + ($c_1_in_i << 24 >> 24) | 0;
     var $54 = $mantSize_477_i - 1 | 0;
     if (($54 | 0) > 0) {
      var $p_676_i = $p_7_i;
      var $mantSize_477_i = $54;
      var $frac2_078_i = $53;
     } else {
      break;
     }
    }
    var $frac2_0_lcssa_i = $53 | 0;
    var $frac1_0_lcssa96_i = $frac1_0_lcssa97_i;
   }
   var $frac1_0_lcssa96_i;
   var $frac2_0_lcssa_i;
   var $57 = $frac1_0_lcssa96_i + $frac2_0_lcssa_i;
   do {
    if ($13 << 24 >> 24 == 69 | $13 << 24 >> 24 == 101) {
     var $59 = $p_3_i + 1 | 0;
     var $60 = HEAP8[$59];
     if ($60 << 24 >> 24 == 45) {
      var $p_9_ph_i = $p_3_i + 2 | 0;
      var $expSign_0_ph_i = 1;
     } else if ($60 << 24 >> 24 == 43) {
      var $p_9_ph_i = $p_3_i + 2 | 0;
      var $expSign_0_ph_i = 0;
     } else {
      var $p_9_ph_i = $59;
      var $expSign_0_ph_i = 0;
     }
     var $expSign_0_ph_i;
     var $p_9_ph_i;
     var $65 = HEAP8[$p_9_ph_i];
     if ((($65 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      var $p_970_i = $p_9_ph_i;
      var $exp_071_i = 0;
      var $67 = $65;
     } else {
      var $exp_1_i = 0;
      var $p_10_i = $p_9_ph_i;
      var $expSign_1_i = $expSign_0_ph_i;
      break;
     }
     while (1) {
      var $67;
      var $exp_071_i;
      var $p_970_i;
      var $71 = ($exp_071_i * 10 & -1) - 48 + ($67 << 24 >> 24) | 0;
      var $72 = $p_970_i + 1 | 0;
      var $73 = HEAP8[$72];
      if ((($73 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
       var $p_970_i = $72;
       var $exp_071_i = $71;
       var $67 = $73;
      } else {
       var $exp_1_i = $71;
       var $p_10_i = $72;
       var $expSign_1_i = $expSign_0_ph_i;
       break;
      }
     }
    } else {
     var $exp_1_i = 0;
     var $p_10_i = $p_3_i;
     var $expSign_1_i = 0;
    }
   } while (0);
   var $expSign_1_i;
   var $p_10_i;
   var $exp_1_i;
   var $exp_2_i = $fracExp_0_i + (($expSign_1_i | 0) == 0 ? $exp_1_i : -$exp_1_i | 0) | 0;
   var $exp_3_i = ($exp_2_i | 0) < 0 ? -$exp_2_i | 0 : $exp_2_i;
   if (($exp_3_i | 0) > 511) {
    HEAP32[___errno_location() >> 2] = 34;
    var $dblExp_064_i = 1;
    var $d_065_i = 336;
    var $exp_566_i = 511;
    label = 2473;
   } else {
    if (($exp_3_i | 0) == 0) {
     var $dblExp_0_lcssa_i = 1;
    } else {
     var $dblExp_064_i = 1;
     var $d_065_i = 336;
     var $exp_566_i = $exp_3_i;
     label = 2473;
    }
   }
   if (label == 2473) {
    while (1) {
     label = 0;
     var $exp_566_i;
     var $d_065_i;
     var $dblExp_064_i;
     if (($exp_566_i & 1 | 0) == 0) {
      var $dblExp_1_i = $dblExp_064_i;
     } else {
      var $dblExp_1_i = $dblExp_064_i * HEAPF64[$d_065_i >> 3];
     }
     var $dblExp_1_i;
     var $88 = $exp_566_i >> 1;
     if (($88 | 0) == 0) {
      var $dblExp_0_lcssa_i = $dblExp_1_i;
      break;
     } else {
      var $dblExp_064_i = $dblExp_1_i;
      var $d_065_i = $d_065_i + 8 | 0;
      var $exp_566_i = $88;
      label = 2473;
     }
    }
   }
   var $dblExp_0_lcssa_i;
   if (($exp_2_i | 0) > -1) {
    var $p_11_i = $p_10_i;
    var $fraction_0_i = $57 * $dblExp_0_lcssa_i;
    break;
   } else {
    var $p_11_i = $p_10_i;
    var $fraction_0_i = $57 / $dblExp_0_lcssa_i;
    break;
   }
  }
 } while (0);
 var $fraction_0_i;
 var $p_11_i;
 if (($endptr | 0) != 0) {
  HEAP32[$endptr >> 2] = $p_11_i;
 }
 if (($sign_0_i | 0) == 0) {
  var $_0_i = $fraction_0_i;
  var $_0_i;
  return $_0_i;
 }
 var $_0_i = -$fraction_0_i;
 var $_0_i;
 return $_0_i;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return tempRet0 = h, l | 0;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return tempRet0 = h, l | 0;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) | 0];
 if ((ret | 0) < 8) return ret | 0;
 var ret = HEAP8[ctlz_i8 + (x >> 16 & 255) | 0];
 if ((ret | 0) < 8) return ret + 8 | 0;
 var ret = HEAP8[ctlz_i8 + (x >> 8 & 255) | 0];
 if ((ret | 0) < 8) return ret + 16 | 0;
 return HEAP8[ctlz_i8 + (x & 255) | 0] + 24 | 0;
}
var ctlz_i8 = allocate([ 8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) | 0];
 if ((ret | 0) < 8) return ret | 0;
 var ret = HEAP8[cttz_i8 + (x >> 8 & 255) | 0];
 if ((ret | 0) < 8) return ret + 8 | 0;
 var ret = HEAP8[cttz_i8 + (x >> 16 & 255) | 0];
 if ((ret | 0) < 8) return ret + 16 | 0;
 return HEAP8[cttz_i8 + (x >>> 24) | 0] + 24 | 0;
}
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math.imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + Math.imul($2, $6) | 0;
 $11 = $b >>> 16;
 $12 = Math.imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + Math.imul($11, $6) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
 $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 $2 = Math.imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (tempRet0 = Math.imul($b$1, $x_sroa_0_0_extract_trunc) + $2 + $1$1 | $1$1 & 0, $1$0 & -1 | 0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 & -1;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - _llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - _llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = $a$0 & -1;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = _llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) + 33 | 0;
    $88 = $86 - _llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = $a$0 & -1 | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 & -1 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
// EMSCRIPTEN_END_FUNCS
Module["_malloc"] = _malloc;
Module["_free"] = _free;
Module["_realloc"] = _realloc;
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      throw e;
    }
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + (new Error().stack);
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');
function throwInternalError(message) {
    throw new InternalError(message);
}
function throwBindingError(message) {
    throw new BindingError(message);
}
function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);
    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}
// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }            
}
/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.
   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}
function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}
// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };
    return errorClass;
}
// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}
function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}
// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};
// typeID -> [callback]
var awaitingDependencies = {};
// typeID -> [dependentTypes]
var typeDependencies = {};
// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};
function registerType(rawType, registeredInstance) {
    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }
    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];
    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}
function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });
    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }
    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}
var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();
function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}
function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}
function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}
function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}
function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}
function __embind_register_bool(rawType, name, trueValue, falseValue) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }
    registerType(primitiveType, {
        name: name,
        minRange: minRange,
        maxRange: maxRange,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_float(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }
            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,        
    ];
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
    });
}
function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}
// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }
    /*
     * Previously, the following line was just:
     function dummy() {};
     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;
    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}
// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;
    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }
    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }
    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";
    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;
    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }
    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }
    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }
    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }
    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }
    var returns = (argTypes[0].name !== "void");
    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }
    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);
    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}
var tupleRegistrations = {};
function __embind_register_value_array(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}
function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var structRegistrations = {};
function __embind_register_value_object(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}
function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;
            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;
            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;
            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};
// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,
    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;
    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;
    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in 
        //       craftInvokerFunction altogether.
    }
}
RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};
RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};
RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)
    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }
    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }
    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }
    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};
function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}
// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}
function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}
ClassHandle.prototype['isAliasOf'] = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }
    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;
    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }
    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }
    return leftClass === rightClass && left === right;
};
function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}
ClassHandle.prototype['clone'] = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });
    clone.$$.count.value += 1;
    return clone;
};
function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}
ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};
var deletionQueue = [];
ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};
ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};
function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;
var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};
function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}
function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}
function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);
    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });
    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];
            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }
            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });
            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });
            constructor.prototype = instancePrototype;
            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);
            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);
            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);
            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);
            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };
            replacePublicSymbol(legalFunctionName, constructor);
            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}
function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}
function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}
function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}
function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }
    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}
function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };
        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];
    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }
        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };
            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }
            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });
        return [];
    });
}
var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}
function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];
        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}
function __embind_register_enum(
    rawType,
    name
) {
    name = readLatin1String(name);
    function constructor() {
    }
    constructor.values = {};
    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}
function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);
    var Enum = enumType.constructor;
    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}
function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var Module = Module || {};
var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];
// Public JS API
/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};
/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};
// Private C++ API
var _emval_symbols = {}; // address -> string
function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}
function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}
function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
}
function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;
    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}
function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}
function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}
function __emval_new_array() {
    return __emval_register([]);
}
function __emval_new_object() {
    return __emval_register({});
}
function __emval_undefined() {
    return __emval_register(undefined);
}
function __emval_null() {
    return __emval_register(null);
}
function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}
function __emval_take_value(type, v) {
    type = requireRegisteredType(type, '_emval_take_value');
    v = type['fromWireType'](v);
    return __emval_register(v);
}
var __newers = {}; // arity -> function
function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(handle, argTypes, arg0Wired, arg1Wired, arg2Wired) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.fromWireType(arg0Wired);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.fromWireType(arg1Wired);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.fromWireType(arg2Wired);
        var constructor = _emval_handle_array[handle].value;
        var emval = new constructor(arg0, arg1, arg2);
        return emval;
    } */
    var args1 = ["requireRegisteredType", "HEAP32", "_emval_handle_array", "__emval_register"];
    var args2 = [requireRegisteredType, HEAP32, _emval_handle_array, __emval_register];
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
        argsListWired += ", arg"+i+"Wired"; // ', arg0Wired, arg1Wired, ..., argnWired'
    }
    var invokerFnBody =
        "return function emval_allocator_"+argCount+"(handle, argTypes " + argsListWired + ") {\n";
    for(var i = 0; i < argCount; ++i) {
        invokerFnBody += 
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".fromWireType(arg"+i+"Wired);\n";
    }
    invokerFnBody +=
        "var constructor = _emval_handle_array[handle].value;\n" +
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_new(handle, argCount, argTypes) {
    requireHandle(handle);
    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }
    if (argCount === 0) {
        return newer(handle, argTypes);
    } else if (argCount === 1) {
        return newer(handle, argTypes, arguments[3]);
    } else if (argCount === 2) {
        return newer(handle, argTypes, arguments[3], arguments[4]);
    } else if (argCount === 3) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5]);
    } else if (argCount === 4) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5], arguments[6]);
    } else {
        // This is a slow path! (.apply and .splice are slow), so a few specializations are present above.
        return newer.apply(null, arguments.splice(1));
    }
}
// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();
function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}
function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}
function __emval_get_property(handle, key) {
    requireHandle(handle);
    return __emval_register(_emval_handle_array[handle].value[_emval_handle_array[key].value]);
}
function __emval_set_property(handle, key, value) {
    requireHandle(handle);
    _emval_handle_array[handle].value[_emval_handle_array[key].value] = _emval_handle_array[value].value;
}
function __emval_as(handle, returnType) {
    requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    // caller owns destructing
    return returnType['toWireType'](destructors, _emval_handle_array[handle].value);
}
function parseParameters(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var argType = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
        a[i] = argType['fromWireType'](argWireTypes[i]);
    }
    return a;
}
function __emval_call(handle, argCount, argTypes) {
    requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);
    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        args[i] = types[i]['fromWireType'](arguments[3 + i]);
    }
    var fn = _emval_handle_array[handle].value;
    var rv = fn.apply(undefined, args);
    return __emval_register(rv);
}
function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}
function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);
    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
    var args1 = ["addFunction", "createNamedFunction", "requireHandle", "getStringOrSymbol", "_emval_handle_array", "retType"];
    var args2 = [Runtime.addFunction, createNamedFunction, requireHandle, getStringOrSymbol, _emval_handle_array, retType];
    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    var argsListWired = ""; // 'arg0Wired, ..., argNWired'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += ", arg" + i + "Wired";
        args1.push("argType" + i);
        args2.push(types[1 + i]);
    }
    var invokerFnBody =
        "return addFunction(createNamedFunction('" + signatureName + "', function (handle, name" + argsListWired + ") {\n" +
        "requireHandle(handle);\n" +
        "name = getStringOrSymbol(name);\n";
    for (var i = 0; i < argCount - 1; ++i) {
        invokerFnBody += "var arg" + i + " = argType" + i + ".fromWireType(arg" + i + "Wired);\n";
    }
    invokerFnBody +=
        "var obj = _emval_handle_array[handle].value;\n" +
        "return retType.toWireType(null, obj[name](" + argsList + "));\n" + 
        "}));\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_has_function(handle, name) {
    name = getStringOrSymbol(name);
    return _emval_handle_array[handle].value[name] instanceof Function;
}
(function() {
function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'meshes', true, true);
    function DataRequest() {}
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.requests[name] = this;
      },
      send: function() {}
    };
    var filePreload0 = new DataRequest();
    filePreload0.open('GET', '/meshes/nav_test.obj', true);
    filePreload0.responseType = 'arraybuffer';
    filePreload0.onload = function() {
      var arrayBuffer = filePreload0.response;
      assert(arrayBuffer, 'Loading file /meshes/nav_test.obj failed.');
      var byteArray = !arrayBuffer.subarray ? new Uint8Array(arrayBuffer) : arrayBuffer;
      Module['FS_createPreloadedFile']('/meshes', 'nav_test.obj', byteArray, true, true, function() {
        Module['removeRunDependency']('fp /meshes/nav_test.obj');
      });
    };
    Module['addRunDependency']('fp /meshes/nav_test.obj');
    filePreload0.send(null);
    if (!Module.expectedDataFileDownloads) {
      Module.expectedDataFileDownloads = 0;
      Module.finishedDataFileDownloads = 0;
    }
    Module.expectedDataFileDownloads++;
    var PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    var PACKAGE_NAME = 'build/recast.emcc.data';
    var REMOTE_PACKAGE_NAME = 'recast.emcc.data';
    var PACKAGE_UUID = 'a69b9bc9-4ec3-4ff7-bd02-d912e833c299';
    function fetchRemotePackage(packageName, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        if (event.loaded && event.total) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: event.total
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
        curr = DataRequest.prototype.requests['/meshes/nav_test.obj'];
        var data = byteArray.subarray(0, 115059);
        var ptr = Module['_malloc'](115059);
        Module['HEAPU8'].set(data, ptr);
        curr.response = Module['HEAPU8'].subarray(ptr, ptr + 115059);
        curr.onload();
                Module['removeRunDependency']('datafile_build/recast.emcc.data');
    };
    Module['addRunDependency']('datafile_build/recast.emcc.data');
    function handleError(error) {
      console.error('package error:', error);
    };
    if (!Module.preloadResults)
      Module.preloadResults = {};
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      fetchRemotePackage(REMOTE_PACKAGE_NAME, processPackageData, handleError);
})();
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
